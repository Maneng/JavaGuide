<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://vuepress-theme-hope-demo.mrhope.site/</id>
  <title>西魏陶渊明</title>
  <subtitle>桃花潭水深千尺</subtitle>
  <author>
    <name>西魏陶渊明</name>
  </author>
  <updated>2022-05-23T14:55:06.777Z</updated>
  <generator>@mr-hope/vuepress-plugin-feed</generator>
  <link rel="self" href="https://vuepress-theme-hope-demo.mrhope.site/atom.xml"/>
  <link rel="alternate" href="https://vuepress-theme-hope-demo.mrhope.site/"/>
  <category term="分布式"/>
  <category term="使用指南"/>
  <contributor>
    <name>西魏陶渊明</name>
  </contributor>
  <contributor>
    <name>Ms.Hope</name>
  </contributor>
  <entry>
    <title type="html">Docsify</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/blog/docsify/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/blog/docsify/"/>
    <updated>2022-03-27T13:12:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、docsify"> 一、docsify</h2>
<p><code>Hexo</code> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。
<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener noreferrer">hexo</a></p>
<h2 id="二、安装"> 二、安装</h2>
<h3 id="_2-1-安装前提"> 2.1 安装前提</h3>
<p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>
<ul>
<li>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li>Git</li>
<li>npm</li>
</ul>
<h3 id="_2-2-安装"> 2.2 安装</h3>
<p>首先利用 <code>npm</code> 下载</p>
<div><pre><code><span>npm</span> <span>install</span> -g hexo-cli<span>;</span>

mdkir myblog<span>;</span>

<span>cd</span> myblog<span>;</span>

hexo init<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="三、使用"> 三、使用</h2>
<p><code>hexo</code> 的命令非常简单，小编用了很多年，基本上只有2个。你知道是哪两个吗?</p>
<h3 id="_3-1-new-新建文章"> 3.1 new 新建文章</h3>
<p><code>$ hexo new [layout] &lt;title&gt;</code></p>
<ul>
<li>layout 是博客布局，基本不会用</li>
<li>title 就是博客的名字</li>
</ul>
<h3 id="_3-2-generate-文章编译"> 3.2 generate 文章编译</h3>
<p>生成静态文件。</p>
<p><code>$ hexo generate</code></p>
<p>该命令可以简写为：</p>
<p><code>$ hexo g</code></p>
<h3 id="_3-3-server-本地运行"> 3.3 server 本地运行</h3>
<p>启动服务器,本地运行</p>
<p><code>$ hexo server</code></p>
<h3 id="_3-4-deploy-远程部署"> 3.4 deploy 远程部署</h3>
<p>部署远程</p>
<p><code>$ hexo deploy</code></p>
<p>该命令可以简写为：</p>
<p><code>$ hexo d</code></p>
<h3 id="_3-5-clean-清理缓存"> 3.5 clean 清理缓存</h3>
<p><code>$ hexo clean</code></p>
<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h3 id="_3-6-version"> 3.6 version</h3>
<p><code>$ hexo version</code></p>
<p>显示 Hexo 版本。</p>
<h2 id="四、部署"> 四、部署</h2>
<p><code>hexo</code> 的配置文件都在根目录下的 <code>_config.yml</code> 文件下。如果要部署远程，非常简单。</p>
<div><pre><code><span>deploy</span><span>:</span>
    <span>type</span><span>:</span> git
    <span>repo</span><span>:</span>
<span>#      可以使用github    </span>
<span>#      github: https://github.com/lxchinesszz/lxchinesszz.github.io.git</span>
      <span>coding</span><span>:</span> https<span>:</span>//e.coding.net/lxchinesszz/lxchinesszz.git
    <span>branch</span><span>:</span> master
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>
<li>
<ol>
<li>这里需要注意，如果使用github部署, 仓库的名字是有讲究的。名字要跟github的账户名前缀一直。
<code>lxchinesszz.github.io</code></li>
</ol>
</li>
<li>
<ol start="2">
<li>打开设置要配置一下域名，如果不配置域名默认就是 <code>https://lxchinesszz.github.io/</code></li>
</ol>
</li>
</ul>
<p><img src="https://img.springlearn.cn/blog/learn_1640502249000.png" alt="" loading="lazy"></p>
<h3 id="_4-1-本地部署"> 4.1 本地部署</h3>
<p><code>hexo s</code></p>
<h3 id="_4-2-远程部署"> 4.2 远程部署</h3>
<p><code>hexo g -d</code></p>
<p>或者是</p>
<p><code>hexo g</code>  + <code>hexo d</code></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-27T13:12:51.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Hexo</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/blog/hexo/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/blog/hexo/"/>
    <updated>2022-03-27T13:12:51.000Z</updated>
    <content type="html"><![CDATA[<div><p>相关信息</p>
<p>Hexo的风格个人感觉类似于QQ空间,属于自己的私人领地。文章比较琐碎,不太适合专题类、系列类的文档,其次是对Markdown的支持比较一般,
部分主体支持代码高亮等功能。
好处是简单,小编的第一个博客空间就是基于Hexo。目前也在维护中。</p>
</div>
<h2 id="一、hexo"> 一、<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener noreferrer">Hexo</a></h2>
<p><a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/Hexo-示例-green" alt="" loading="lazy"></a></p>
<p><code>Hexo</code> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="二、安装"> 二、安装</h2>
<h3 id="_2-1-安装前提"> 2.1 安装前提</h3>
<p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>
<ul>
<li>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li>Git</li>
<li>npm</li>
</ul>
<h3 id="_2-2-安装"> 2.2 安装</h3>
<p>首先利用 <code>npm</code> 下载</p>
<div><pre><code><span>npm</span> <span>install</span> -g hexo-cli<span>;</span>

mdkir myblog<span>;</span>

<span>cd</span> myblog<span>;</span>

hexo init<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="三、使用"> 三、使用</h2>
<p><code>hexo</code> 的命令非常简单，小编用了很多年，基本上只有2个。你知道是哪两个吗?</p>
<h3 id="_3-1-new-新建文章"> 3.1 new 新建文章</h3>
<p><code>$ hexo new [layout] &lt;title&gt;</code></p>
<ul>
<li>layout 是博客布局，基本不会用</li>
<li>title 就是博客的名字</li>
</ul>
<h3 id="_3-2-generate-文章编译"> 3.2 generate 文章编译</h3>
<p>生成静态文件。</p>
<p><code>$ hexo generate</code></p>
<p>该命令可以简写为：</p>
<p><code>$ hexo g</code></p>
<h3 id="_3-3-server-本地运行"> 3.3 server 本地运行</h3>
<p>启动服务器,本地运行</p>
<p><code>$ hexo server</code></p>
<h3 id="_3-4-deploy-远程部署"> 3.4 deploy 远程部署</h3>
<p>部署远程</p>
<p><code>$ hexo deploy</code></p>
<p>该命令可以简写为：</p>
<p><code>$ hexo d</code></p>
<h3 id="_3-5-clean-清理缓存"> 3.5 clean 清理缓存</h3>
<p><code>$ hexo clean</code></p>
<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h3 id="_3-6-version"> 3.6 version</h3>
<p><code>$ hexo version</code></p>
<p>显示 Hexo 版本。</p>
<h2 id="四、部署"> 四、部署</h2>
<p><code>hexo</code> 的配置文件都在根目录下的 <code>_config.yml</code> 文件下。如果要部署远程，非常简单。</p>
<div><pre><code><span>deploy</span><span>:</span>
    <span>type</span><span>:</span> git
    <span>repo</span><span>:</span>
<span>#      可以使用github    </span>
<span>#      github: https://github.com/lxchinesszz/lxchinesszz.github.io.git</span>
      <span>coding</span><span>:</span> https<span>:</span>//e.coding.net/lxchinesszz/lxchinesszz.git
    <span>branch</span><span>:</span> master
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>
<li>
<ol>
<li>这里需要注意，如果使用github部署, 仓库的名字是有讲究的。名字要跟github的账户名前缀一直。
<code>lxchinesszz.github.io</code></li>
</ol>
</li>
<li>
<ol start="2">
<li>打开设置要配置一下域名，如果不配置域名默认就是 <code>https://lxchinesszz.github.io/</code></li>
</ol>
</li>
</ul>
<p><img src="https://img.springlearn.cn/blog/learn_1640502249000.png" alt="" loading="lazy"></p>
<h3 id="_4-1-本地部署"> 4.1 本地部署</h3>
<p><code>hexo s</code></p>
<h3 id="_4-2-远程部署"> 4.2 远程部署</h3>
<p><code>hexo g -d</code></p>
<p>或者是</p>
<p><code>hexo g</code>  + <code>hexo d</code></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Vuepress</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/blog/vuepress/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/blog/vuepress/"/>
    <updated>2022-03-27T13:12:51.000Z</updated>
    <content type="html"><![CDATA[<div><p>Vuepress</p>
<p>Vuepress 从名字上看就知道跟Vue关系不一般,是的它是基于Vue进行开发的。Vue的官网也是使用这个框架来做的。他的好处是比较适合
专题类文章, 对Markdown语法完全支持,通知支持代码高亮,比较适合技术类文章, 但是稍微有些难度, 适合有点经验的开发同学。</p>
</div>
<h2 id="一、vuepress"> 一、Vuepress</h2>
<p><code>Hexo</code> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。
<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener noreferrer">hexo</a></p>
<h2 id="二、像数-1-2-3-一样容易"> 二、像数 1, 2, 3 一样容易</h2>
<p>这里是Vuepress原生主题,比较简单。</p>
<div><pre><code># 安装
yarn global add vuepress # 或者：npm install -g vuepress

# 新建一个 markdown 文件
echo &#39;# Hello VuePress!&#39; &gt; README.md

# 开始写作
vuepress dev .

# 构建静态文件
vuepress build .
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><div><p>注意</p>
<p>注意
请确保你的 Node.js 版本 &gt;= 8.6。</p>
</div>
<h2 id="三、主题安装"> 三、主题安装</h2>
<p>这里只推荐一个主题,本网站的主题也是使用的这个。</p>
<h3 id="_3-1-vuepress-theme-hope"> 3.1 <a href="https://vuepress-theme-hope.github.io/zh/guide/get-started/install/#" target="_blank" rel="noopener noreferrer">vuepress-theme-hope</a></h3>
<div><pre><code>npm init vuepress-theme-hope 
</code></pre>
<div><span>1</span><br></div></div><p>注意目录一定要在.vuepress/config.js</p>
<div><pre><code><span>// .vuepress/config.js</span>
<span>const</span> <span>{</span> config <span>}</span> <span>=</span> <span>require</span><span>(</span><span>"vuepress-theme-hope"</span><span>)</span><span>;</span>

module<span>.</span>exports <span>=</span> <span>config</span><span>(</span><span>{</span>
  <span>// your config here</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-27T13:12:51.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Home</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/blog-readme/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/blog-readme/"/>
    <updated>2022-04-26T15:44:59.000Z</updated>
    <content type="html"><![CDATA[<div><p>相关信息</p>
<p>想要逼死一个强迫症，那实在是太简了。</p>
</div>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Redis缓存穿透雪崩问题</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/databases/nosql/redis/Redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E9%9B%AA%E5%B4%A9%E9%97%AE%E9%A2%98/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/databases/nosql/redis/Redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E9%9B%AA%E5%B4%A9%E9%97%AE%E9%A2%98/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<h2 id="一、缓存穿透"> 一、缓存穿透</h2>
<p><strong>数据层没有,导致查询一直都是穿透了缓存去查db。</strong></p>
<p>缓存穿透的概念很简单，用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p>
<h3 id="解决方案"> 解决方案</h3>
<h4 id="_1-布隆过滤器"> （1）布隆过滤器</h4>
<p>布隆过滤器是一种数据结构，垃圾网站和正常网站加起来全世界据统计也有几十亿个。网警要过滤这些垃圾网站，总不能到数据库里面一个一个去比较吧，这就可以使用布隆过滤器。假设我们存储一亿个垃圾网站地址。将者一亿个都放到布隆过滤器中。</p>
<p>原理: 将User中的指定的字段进行hash计算到某一个位置上,比如在本案例中name和age是两个字段分别映射到了。1和4。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596446105000.png" alt="" loading="lazy"></p>
<p>当用xiaoming去查询发现，1和4都已经被标记成1了,说明就有这个值了。
而用xiaozhang去查询,发现小张对应的位置上都还是0说明就不存在这个值。</p>
<p>但是这也存在一个问题,假如说xiaozhang也被hash映射到了1和4,不存在xiaozhang但是布隆判断缺存在。</p>
<div><pre><code>public class BloomFilterTest {

    private static class User {

        private String name;

        private int age;

        public User(String name, int age) {
            this.name = name;
            this.age = age;
        }

        public String getName() {
            return name;
        }

        public int getAge() {
            return age;
        }

        public void setName(String name) {
            this.name = name;
        }

        public void setAge(int age) {
            this.age = age;
        }
    }

    public static void main(String[] args) {
        BloomFilter&lt;User&gt; bloomFilter = BloomFilter.create((Funnel&lt;User&gt;) (user, primitiveSink) -&gt; primitiveSink.putString(user.getName(), Charset.defaultCharset())
                .putInt(user.getAge()), 10, 0.01);
        User xiaoming = new User(&quot;xiaoming&quot;, 1);
        bloomFilter.put(xiaoming);

        System.out.println(bloomFilter.mightContain(xiaoming));
        System.out.println(bloomFilter.mightContain(new User(&quot;xiaozhang&quot;, 2)));
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><h4 id="_2-设置空对象"> （2） 设置空对象</h4>
<p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源；</p>
<p>当数据层也没有发现就放一个空对象,空对象设置一个过期时间</p>
<h2 id="二、缓存击穿"> 二、缓存击穿</h2>
<p>这种数据正常情况。就是给了一个说法名字而已</p>
<p><strong>缓存中本来存在,但是某一个顺序缓存过期失效了,就被击穿访问到db层。</strong></p>
<p>缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p>
<h2 id="三、缓存雪崩"> 三、缓存雪崩</h2>
<p>缓存雪崩是指，缓存层出现了错误，不能正常工作了。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p>
<h3 id="解决方案-2"> 解决方案</h3>
<h4 id="_1-redis高可用"> （1）redis高可用</h4>
<p>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。</p>
<h4 id="_2-限流降级"> （2）限流降级</h4>
<p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p>
<h4 id="_3-数据预热"> （3）数据预热</h4>
<p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Redis</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/databases/nosql/redis/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/databases/nosql/redis/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">MySQL</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<h2 id="mysql-事务"> MySQL 事务</h2>
<p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p>
<ul>
<li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li>
<li>事务用来管理 insert,update,delete 语句</li>
</ul>
<p>一般来说，事务是必须满足4个条件（ACID）：：原子性（<strong>A</strong>tomicity，或称不可分割性）、一致性（<strong>C</strong>onsistency）、隔离性（<strong>I</strong>solation，又称独立性）、持久性（<strong>D</strong>urability）。</p>
<ul>
<li><strong>原子性</strong> 一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
<li><strong>一致性</strong>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li>
<li><strong>隔离性</strong>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li>
<li><strong>持久性</strong>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>
</ul>
<blockquote>
<p>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。</p>
</blockquote>
<h3 id="事务控制语句"> 事务控制语句</h3>
<ul>
<li>BEGIN 或 START TRANSACTION 显式地开启一个事务；</li>
<li>COMMIT 也可以使用 COMMIT WORK，不过二者是等价的。COMMIT 会提交事务，并使已对数据库进行的所有修改成为永久性的；</li>
<li>ROLLBACK 也可以使用 ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li>
<li>SAVEPOINT identifier，SAVEPOINT 允许在事务中创建一个保存点，一个事务中可以有多个 SAVEPOINT；</li>
<li>RELEASE SAVEPOINT identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li>
<li>ROLLBACK TO identifier 把事务回滚到标记点；</li>
<li>SET TRANSACTION 用来设置事务的隔离级别。InnoDB 存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE。</li>
</ul>
<h3 id="mysql-事务处理主要有两种方法"> MYSQL 事务处理主要有两种方法</h3>
<p>1、用 BEGIN, ROLLBACK, COMMIT来实现</p>
<ul>
<li><strong>BEGIN</strong> 开始一个事务</li>
<li><strong>ROLLBACK</strong> 事务回滚</li>
<li><strong>COMMIT</strong> 事务确认</li>
</ul>
<p>2、直接用 SET 来改变 MySQL 的自动提交模式:</p>
<ul>
<li><strong>SET AUTOCOMMIT=0</strong> 禁止自动提交</li>
<li><strong>SET AUTOCOMMIT=1</strong> 开启自动提交</li>
</ul>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Mysql优化示例</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/SQL%E4%BC%98%E5%8C%96%E7%A4%BA%E4%BE%8B/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/SQL%E4%BC%98%E5%8C%96%E7%A4%BA%E4%BE%8B/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<h2 id="创建表"> 创建表</h2>
<div><pre><code><span>use</span> test<span>;</span>
<span>create</span> <span>table</span> test03
<span>(</span>
 a1 <span>int</span><span>(</span><span>4</span><span>)</span> <span>not</span> <span>null</span><span>,</span>
 a2 <span>int</span><span>(</span><span>4</span><span>)</span> <span>not</span> <span>null</span><span>,</span>
 a3 <span>int</span><span>(</span><span>4</span><span>)</span> <span>not</span> <span>null</span><span>,</span>
 a4 <span>int</span><span>(</span><span>4</span><span>)</span> <span>not</span> <span>null</span>
<span>)</span><span>;</span>
<span>alter</span> <span>table</span> test03 <span>add</span> <span>index</span> idx_a1_a2_a3_a4<span>(</span>a1<span>,</span>a2<span>,</span>a3<span>,</span>a4<span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><hr>
<h2 id="建议一、按照复合索引顺序查询"> 建议一、按照复合索引顺序查询</h2>
<p><strong>需知</strong></p>
<ol>
<li>如果(a,b,c,d)复合索引和查询使用的顺序全部一致,则复合索引全部使用,如果不部分一致或者跨列使用则就是部分使用.</li>
<li>where和order by拼起来也不要跨列,参考反例2和3</li>
</ol>
<h3 id="_1-建议"> 1. 建议</h3>
<ul>
<li>建议: 按照where后面按照顺序使用复合索引</li>
<li>建议: where 和 order by不要跨列
<code>explain select a1,a2,a3,a4 from test03 where a1=1 and a2=2 and a3=3 and a4=4;</code></li>
</ul>
<p><img src="https://img.springlearn.cn/blog/learn_1596388059000.png" alt="" loading="lazy"></p>
<h3 id="_2-反例1"> 2. 反例1</h3>
<p><code>explain select a1,a2,a3,a4 from test03 where a4=1 and a3=2 and a2=3 and a1=4;</code></p>
<p>可以看到还是一样的,索引都用了，原因是sql在执行时候被sql优化器进行了调整,最后被调整成了上面的顺序写法。
这是最理想的情况,但是实际中建议开发按照顺序来进行查询。
<img src="https://img.springlearn.cn/blog/learn_1596388250000.png" alt="" loading="lazy"></p>
<h3 id="_3-反例2"> 3. 反例2</h3>
<p><code>explain select a1,a2,a3,a4 from test03 where a1=1 and a2=2 and a4=4 order by a3;</code></p>
<ul>
<li>因为查询条件中复合索引跨列了(跨了a3)，所以导致只能用a1 和a2索引。索引key_len变成8了</li>
<li>索引中没有查询a3但是却用a3排序了,导致要回表查询a3
<img src="https://img.springlearn.cn/blog/learn_1596388567000.png" alt="" loading="lazy"></li>
</ul>
<h3 id="_4-反例3"> 4. 反例3</h3>
<p><code>explain select a1,a2,a3,a4 from test03 where a1=1 and a4=4 order by a3;</code></p>
<ul>
<li>跨了a2 a3 所以a4失效只能用a1 所以key_len只有一个
where 和 order by拼接起来是否也满足复合顺序,如果不满足
就会出现Using filesort</li>
<li>反例2中where 生效的是a1和a2，但是order by是a3。满足复合索引顺序,所以不会出现Using filesort</li>
</ul>
<p><img src="https://img.springlearn.cn/blog/learn_1596389005000.png" alt="" loading="lazy"></p>
<p><code>explain select a1,a2,a3,a4 from test03 where a1=1 and a4=4 order by a2,a3;</code></p>
<ul>
<li>where a1 order by a2 a3 所以不会出现上面Using fileSort
<img src="https://img.springlearn.cn/blog/learn_1596389167000.png" alt="" loading="lazy"></li>
</ul>
<h2 id="建议二、单表优化"> 建议二、单表优化</h2>
<h3 id="建表及需求sql"> 建表及需求sql</h3>
<div><pre><code>
create table book
(
 bid int(4) primary key,
 name varchar(20) not null,
 authorid int(4) not null,
 publicid int(4) not null,
 typeid int(4) not null
);

insert into book values(1,&#39;tjava&#39;,1,1,2);
insert into book values(2,&#39;tjava&#39;,2,1,2);
insert into book values(3,&#39;tjava&#39;,3,2,1);
insert into book values(4,&#39;tjava&#39;,4,2,3);

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p><strong>查询authorid = 1 并且 typeid 等于2或者3 然后根据typeid 排序</strong></p>
<p><code>explain select bid from book where typeid in (2,3) and authorid = 1 order by typeid desc;</code></p>
<div><pre><code>mysql&gt; explain select bid from book where  typeid in (2,3) and authorid = 1  order by typeid desc;
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                       |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+
|  1 | SIMPLE      | book  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    4 |    25.00 | Using where; Using filesort |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+
1 row in set, 1 warning (0.00 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>可以看出来未用到索引,type是all。就是全表查询了。</p>
<h3 id="_1-优化1加索引"> 1. 优化1加索引</h3>
<p><code>alter table book add index idx_bta(bid,typeid,authorid);</code></p>
<div><pre><code>mysql&gt; explain select bid from book where  typeid in (2,3) and authorid = 1  order by typeid desc;
+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+------------------------------------------+
| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra                                    |
+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+------------------------------------------+
|  1 | SIMPLE      | book  | NULL       | index | NULL          | idx_bta | 12      | NULL |    4 |    25.00 | Using where; Using index; Using filesort |
+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+------------------------------------------+
1 row in set, 1 warning (0.00 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>可以看到通过了加索引type由之前的all变成了index,说明有一点进步。但是我们看到还有一个<code>Using filesort</code>.前面我们说了出现这个
是因为额外多了一次查询。根据sql的解析规则，第一个解析的是typeid,第二个是authorid。那么我们先对索引顺序做一个优化。</p>
<h3 id="_2-优化索引顺序"> 2. 优化索引顺序</h3>
<p>复合索引一旦进行了升级优化，就要删除了，否则会进行干扰。<code>drop index idx_bta on book;</code></p>
<p>按照sql执行顺序来创建索引。这里我们其实也可以不创建bid，但是如果不创建bid,就要回表去查询bid,所以也建议加上。
<code>alter table book add index idx_tab(typeid,authorid,bid);</code></p>
<div><pre><code>mysql&gt; explain select bid,typeid from book where  typeid in (2,3) and authorid = 1  order by typeid desc;
+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-----------------------------------------------+
| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra                                         |
+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-----------------------------------------------+
|  1 | SIMPLE      | book  | NULL       | range | idx_tab       | idx_tab | 8       | NULL |    2 |   100.00 | Using where; Backward index scan; Using index |
+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-----------------------------------------------+
1 row in set, 1 warning (0.00 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>可以看到已经没有了,Using filesort。</p>
<h3 id="_3-总结"> 3. 总结</h3>
<ul>
<li>索引优化不会一步到位,要多次优化。</li>
<li>索引顺序会影响查询效率,如果不知道怎么优化,建议sql执行顺序,多尝试几次不同顺序。通过看type的级别来调整。</li>
<li>type如果是range或者ref。其实就可以了。如果是index或者all就要考虑是否要进行优化。</li>
<li>in会是索引失效</li>
</ul>
<h2 id="建议三、多表优化"> 建议三、多表优化</h2>
<h3 id="建表及需求sql-2"> 建表及需求sql</h3>
<div><pre><code>create table teacher2
(
    tid int(4) primary key,
    cid int(4) not null
);

insert into teacher2 values(1,2);
insert into teacher2 values(2,1);
insert into teacher2 values(3,3);

create table course2
(
    cid int(4),
    cname varchar(20)
);
insert into course2 values(1,&#39;java&#39;);
insert into course2 values(2,&#39;python&#39;);
insert into course2 values(3,&#39;kotlin&#39;);
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p><strong>需求sql</strong></p>
<p><code>select * from teacher2 t left outer join course2 c on t.cid=c.cid where c.cname = 'java';</code></p>
<div><pre><code>mysql&gt; select * from teacher2 t left outer join course2 c on t.cid=c.cid where c.cname = &#39;java&#39;;
+-----+-----+------+-------+
| tid | cid | cid  | cname |
+-----+-----+------+-------+
|   2 |   1 |    1 | java  |
+-----+-----+------+-------+
1 row in set (0.00 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>执行计划分析</p>
<div><pre><code>mysql&gt; explain select * from teacher2 t left outer join course2 c on t.cid=c.cid where c.cname = &#39;java&#39;;
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
|  1 | SIMPLE      | c     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where                                        |
|  1 | SIMPLE      | t     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where; Using join buffer (Block Nested Loop) |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
2 rows in set, 1 warning (0.00 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>可以看到有一个<code>Using join buffer</code>。 说明Sql写的太差了，mysql给你加了一个缓存。经过下面的索引优化会去掉。</p>
<h3 id="优化1小表驱动大表"> 优化1小表驱动大表</h3>
<p>当编写语句时候,将数据量小的表放左边(假设此时t表小,on t.cid = c.cid);反之如果c表小(on c.cid = t.tic)</p>
<h3 id="优化2加索引"> 优化2加索引</h3>
<p>索引建立在经常使用的字段上,本例中t.cid使用频繁。</p>
<p><code>alter table teacher2 add index idx_teacher2_cid(cid);</code></p>
<div><pre><code>mysql&gt; explain select * from teacher2 t left outer join course2 c on t.cid=c.cid where c.cname = &#39;java&#39;;
+----+-------------+-------+------------+------+------------------+------------------+---------+------------+------+----------+-------------+
| id | select_type | table | partitions | type | possible_keys    | key              | key_len | ref        | rows | filtered | Extra       |
+----+-------------+-------+------------+------+------------------+------------------+---------+------------+------+----------+-------------+
|  1 | SIMPLE      | c     | NULL       | ALL  | NULL             | NULL             | NULL    | NULL       |    3 |    33.33 | Using where |
|  1 | SIMPLE      | t     | NULL       | ref  | idx_teacher2_cid | idx_teacher2_cid | 4       | test.c.cid |    1 |   100.00 | Using index |
+----+-------------+-------+------------+------+------------------+------------------+---------+------------+------+----------+-------------+
2 rows in set, 1 warning (0.00 sec)

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>给name也加索引</p>
<p><code>alter table course2 add index idx_course2_name(cname);</code></p>
<div><pre><code>mysql&gt; explain select * from teacher2 t left outer join course2 c on t.cid=c.cid where c.cname = &#39;java&#39;;
+----+-------------+-------+------------+------+------------------+------------------+---------+------------+------+----------+-------------+
| id | select_type | table | partitions | type | possible_keys    | key              | key_len | ref        | rows | filtered | Extra       |
+----+-------------+-------+------------+------+------------------+------------------+---------+------------+------+----------+-------------+
|  1 | SIMPLE      | c     | NULL       | ref  | idx_course2_name | idx_course2_name | 83      | const      |    1 |   100.00 | Using where |
|  1 | SIMPLE      | t     | NULL       | ref  | idx_teacher2_cid | idx_teacher2_cid | 4       | test.c.cid |    1 |   100.00 | Using index |
+----+-------------+-------+------------+------+------------------+------------------+---------+------------+------+----------+-------------+
2 rows in set, 1 warning (0.00 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>这样两个查询就都用到了索引。</p>
<h2 id="建议四、sql优化"> 建议四、sql优化</h2>
<h3 id="_1-exist和in"> 1. exist和in</h3>
<p>如果主查询的数据集大用 <code>in</code> ,如果子查询数据量大使用 <code>exist</code></p>
<h3 id="_2-order-by优化"> 2. order by优化</h3>
<p>Using filesort 有两种算法: 双路排序、单路排序(根据IO的次数,即访问磁盘的顺序)</p>
<ul>
<li>MySQL4.1前默认使用双路排序,即扫描两次磁盘(1. 从磁盘读取排序字段,2. 扫描其他字段)</li>
<li>MySQL4.1后默认使用单路排序,即访问一次磁盘(1. 只读取一次字段,然后在buffer中进行排序)</li>
</ul>
<p>但是单路排序有隐患就是不一定是只访问一次磁盘,因为加入数据量特别大,则无法将所有字段的
数据都放到buffer中,要多次分片读取。此时可以考虑调大buffer容量大小。</p>
<p><code>set max_length_for_sort_data = 1024</code> (单位/字节)</p>
<p>如果缓存区大小太小,mysql会自动从单路调整到双路。</p>
<p><strong>建议</strong></p>
<ul>
<li>避免使用<code>select *</code></li>
<li>复合索引不要跨列使用,如果where和order尽量也按照顺序使用</li>
<li>order by 如果是多个字段,建议都是升序或者都是降序</li>
</ul>
<h3 id="_3-慢查询日志"> 3. 慢查询日志</h3>
<p><a href="https://blog.springlearn.cn/posts/3935/" target="_blank" rel="noopener noreferrer">如何找到垃圾SQL语句,你知道这些方式吗？</a></p>
<p>慢sql就是mysql提供的一种日志记录,用于记录响应的时间超过阀值得语句;</p>
<p><strong>查询是否开启慢查询</strong></p>
<p><code>show variables like '%slow_query_log%';</code></p>
<div><pre><code>mysql&gt; show variables like &#39;%slow_query_log%&#39;;
+---------------------+-----------------------------------------+
| Variable_name       | Value                                   |
+---------------------+-----------------------------------------+
| slow_query_log      | OFF                                     |
| slow_query_log_file | /usr/local/var/mysql/localhost-slow.log |
+---------------------+-----------------------------------------+
2 rows in set (0.06 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p><strong>临时开启:</strong></p>
<div><pre><code>set global slow_query_log = 1;
exit;
services mysql restart
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><strong>查询慢查询日志阀值</strong></p>
<p><code>show variables like '%long_query_time%';</code></p>
<div><pre><code>mysql&gt; show variables like &#39;%long_query_time%&#39;;
+-----------------+-----------+
| Variable_name   | Value     |
+-----------------+-----------+
| long_query_time | 10.000000 |
+-----------------+-----------+
1 row in set (0.00 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p><strong>临时设置阀值</strong></p>
<p>修改完成之后要重新登录生效</p>
<div><pre><code>set global long_query_time = 5;
</code></pre>
<div><span>1</span><br></div></div><div><pre><code>mysql&gt; show variables like &#39;%long_query_time%&#39;;
+-----------------+-----------+
| Variable_name   | Value     |
+-----------------+-----------+
| long_query_time | 10.000000 |
+-----------------+-----------+
1 row in set (0.00 sec)

mysql&gt; set global long_query_time = 5;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; show variables like &#39;%long_query_time%&#39;;
+-----------------+-----------+
| Variable_name   | Value     |
+-----------------+-----------+
| long_query_time | 10.000000 |
+-----------------+-----------+
1 row in set (0.00 sec)

mysql&gt; exit
Bye
 liuxin@localhost  ~  mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 9
Server version: 8.0.16 Homebrew

Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

mysql&gt; show variables like &#39;%long_query_time%&#39;;
+-----------------+----------+
| Variable_name   | Value    |
+-----------------+----------+
| long_query_time | 5.000000 |
+-----------------+----------+
1 row in set (0.00 sec)

mysql&gt;

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><h4 id="超过阀值得数量"> 超过阀值得数量</h4>
<p><code>show global status like '%slow_queries%';</code></p>
<div><pre><code>mysql&gt; show global status like &#39;%slow_queries%&#39;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| Slow_queries  | 0     |
+---------------+-------+
1 row in set (0.01 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="总结"> 总结</h2>
<ol>
<li>复合索引,不要跨列或无序使用</li>
<li>复合索引,尽量使用全索引匹配</li>
<li>不要在索引上进行计算、函数、类型转换</li>
<li>复合索引不能使用 != 、 &lt;&gt; 、 is null</li>
<li>like尽量以&quot;常量&quot;开头,不要以&quot;%&quot;开头,否则索引失效</li>
<li>尽量不要使用类型转换（显式、隐式）,否则索引失效。where name = 'lx' 可以。where name
<img src="https://img.springlearn.cn/blog/learn_1596447963000.png" alt="" loading="lazy"></li>
<li>尽量不要用or,否则左右索引都可能失效
<img src="https://img.springlearn.cn/blog/learn_1596448080000.png" alt="" loading="lazy"></li>
</ol>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">SQL索引性能优化</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/SQL%E7%B4%A2%E5%BC%95%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/SQL%E7%B4%A2%E5%BC%95%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<h1 id="建表"> 建表</h1>
<div><pre><code>// 建表
CREATE TABLE IF NOT EXISTS staffs(
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(24) NOT NULL DEFAULT &quot;&quot; COMMENT&#39;姓名&#39;,
    age INT NOT NULL DEFAULT 0 COMMENT&#39;年龄&#39;,
    pos VARCHAR(20) NOT NULL DEFAULT &quot;&quot; COMMENT&#39;职位&#39;,
    add_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT&#39;入职事件&#39;
) CHARSET utf8 COMMENT&#39;员工记录表&#39;;

// 插入数据
INSERT INTO `test`.`staffs` (`name`, `age`, `pos`, `add_time`) VALUES (&#39;z3&#39;, 22, &#39;manager&#39;, now());
INSERT INTO `test`.`staffs` (`name`, `age`, `pos`, `add_time`) VALUES (&#39;July&#39;, 23, &#39;dev&#39;, now());
INSERT INTO `test`.`staffs` (`name`, `age`, `pos`, `add_time`) VALUES (&#39;2000&#39;, 23, &#39;dev&#39;, now());

// 建立复合索引（即一个索引包含多个字段）
ALTER TABLE staffs ADD INDEX idx_staffs_nameAgePos(name, age, pos);

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><hr>
<h2 id="优化一、全部用到索引"> 优化一、全部用到索引</h2>
<h3 id="_1-介绍"> 1. 介绍</h3>
<p>建立的复合索引包含了几个字段，查询的时候最好能全部用到，而且严格按照索引顺序，这样查询效率是最高的。（最理想情况，具体情况具体分析）</p>
<h3 id="_2-sql案例"> 2. SQL案例</h3>
<p><img src="https://img.springlearn.cn/blog/learn_1596353647000.png" alt="" loading="lazy"></p>
<h2 id="优化二、最左前缀法则"> 优化二、最左前缀法则</h2>
<h3 id="_1-介绍-2"> 1. 介绍</h3>
<p>如果建立的是复合索引，索引的顺序要按照建立时的顺序，即从左到右，如：a-&gt;b-&gt;c（和 B+树的数据结构有关）</p>
<h3 id="_2-无效索引举例"> 2. 无效索引举例</h3>
<p>如果用了a和c,那么a索引有效,c无效,因为中间跳过了b</p>
<p>如果用了b和c,那么b索引和c索引都无效,因为跳过了a</p>
<p>如果只用了c,那么也会无效,因为跳过了a和b</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596354258000.png" alt="" loading="lazy"></p>
<h2 id="优化三、不要对索引做以下处理"> 优化三、不要对索引做以下处理</h2>
<h3 id="_1-以下用法会导致索引失效"> 1. 以下用法会导致索引失效</h3>
<ul>
<li>计算，如：+、-、*、/、!=、&lt;&gt;、is null、is not null、or</li>
<li>函数，如：sum()、round()等等</li>
<li>手动/自动类型转换，如：id = &quot;1&quot;，本来是数字，给写成字符串了</li>
</ul>
<p><img src="https://img.springlearn.cn/blog/learn_1596354578000.png" alt="" loading="lazy"></p>
<h2 id="优化四、索引不要放在范围查询右边"> 优化四、索引不要放在范围查询右边</h2>
<h3 id="_1-举例"> 1. 举例</h3>
<p>比如复合索引：a-&gt;b-&gt;c，当 where a=&quot;&quot; and b&gt;10 and 3=&quot;&quot;，这时候只能用到 a 和 b，c 用不到索引，因为在范围之后索引都失效（和 B+树结构有关）</p>
<p>因为b使用了范围,所以右边的索引c就失效了</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596355600000.png" alt="" loading="lazy"></p>
<h2 id="优化五、减少-select-的使用"> 优化五、减少 select * 的使用</h2>
<h3 id="_1-使用覆盖索引"> 1. 使用覆盖索引</h3>
<p>即：select 查询字段和 where 中使用的索引字段一致。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596355952000.png" alt="" loading="lazy"></p>
<h2 id="优化六、like-模糊搜索"> 优化六、like 模糊搜索</h2>
<h3 id="_1-失效情况"> 1. 失效情况</h3>
<p>like &quot;%张三%&quot;
like &quot;%张三&quot;</p>
<h3 id="_2-解决方案"> 2. 解决方案</h3>
<ul>
<li>
<p>使用复合索引，即 like 字段是 select 的查询字段，如：select name from table where name like &quot;%张三%&quot;
使用 like &quot;张三%&quot;</p>
</li>
<li>
<p>使用 like &quot;张三%&quot;</p>
</li>
</ul>
<h2 id="优化七、order-by-优化"> 优化七、order by 优化</h2>
<p>当查询语句中使用 order by 进行排序时，如果没有使用索引进行排序，会出现 filesort 文件内排序，这种情况在数据量大或者并发高的时候，会有性能问题，需要优化。</p>
<h3 id="_1-filesort-出现的情况举例"> 1. filesort 出现的情况举例</h3>
<ul>
<li>order by 字段不是索引字段</li>
<li>order by 字段是索引字段，但是 select 中没有使用覆盖索引，如：<code>select * from staffs order by age asc;</code></li>
<li>order by 中同时存在 ASC 升序排序和 DESC 降序排序，如：<code>select a, b from staffs order by a desc, b asc;</code></li>
<li>order by 多个字段排序时，不是按照索引顺序进行 order by，即不是按照最左前缀法则，如：<code>select a, b from staffs order by b asc, a asc;</code></li>
</ul>
<h3 id="_2-索引层面解决方法"> 2. 索引层面解决方法</h3>
<ul>
<li>使用主键索引排序</li>
<li>按照最左前缀法则，并且使用覆盖索引排序，多个字段排序时，保持排序方向一致</li>
<li>在 SQL 语句中强制指定使用某索引，force index(索引名字)</li>
<li>不在数据库中排序，在代码层面排序</li>
</ul>
<h3 id="_3-order-by-排序算法"> 3. order by 排序算法</h3>
<p><strong>双路排序</strong></p>
<p><em>Mysql4.1 之前是使用双路排序，字面的意思就是两次扫描磁盘，最终得到数据，读取行指针和 ORDER BY 列，对他们进行排序，然后扫描已经排好序的列表，按照列表中的值重新从列表中读取对数据输出。也就是从磁盘读取排序字段，在 buffer 进行排序，再从磁盘读取其他字段。</em></p>
<p>文件的磁盘 IO 非常耗时的，所以在 Mysql4.1 之后，出现了第二种算法，就是单路排序。</p>
<p><em>从磁盘读取查询需要的所有列，按照 orderby 列在 buffer 对它们进行排序，然后扫描排序后的列表进行输出， 它的效率更快一些，避免了第二次读取数据，并且把随机 IO 变成顺序 IO，但是它会使用更多的空间， 因为它把每一行都保存在内存中了。</em></p>
<p>当我们无可避免要使用排序时，索引层面没法在优化的时候又该怎么办呢？尽可能让 MySQL 选择使用第二种单路算法来进行排序。这样可以减少大量的随机 IO 操作,很大幅度地提高排序工作的效率。下面看看单路排序优化需要注意的点</p>
<p><strong>单路排序优化点</strong></p>
<p>增大 max_length_for_sort_data</p>
<p><em>在 MySQL 中,决定使用&quot;双路排序&quot;算法还是&quot;单路排序&quot;算法是通过参数 maxlength_for sort_data 来决定的。当所有返回字段的最大长度小于这个参数值时,MySQL 就会选择&quot;单路排序&quot;算法,反之,则选择&quot;多路排序&quot;算法。所以,如果有充足的内存让 MySQL 存放须要返回的非排序字段,就可以加大这个参数的值来让 MySQL 选择使用&quot;单路排序&quot;算法。</em></p>
<p>去掉不必要的返回字段，避免select *</p>
<p><em>当内存不是很充裕时,不能简单地通过强行加大上面的参数来强迫 MySQL 去使用&quot;单路排序&quot;算法,否则可能会造成 MySQL 不得不将数据分成很多段,然后进行排序,这样可能会得不偿失。此时就须要去掉不必要的返回字段,让返回结果长度适应 max_length_for_sort_data 参数的限制。</em></p>
<p>增大 sort_buffer_size 参数设置</p>
<p><em>这个值如果过小的话,再加上你一次返回的条数过多,那么很可能就会分很多次进行排序,然后最后将每次的排序结果再串联起来,这样就会更慢,增大 sort_buffer_size 并不是为了让 MySQL 选择&quot;单路排序&quot;算法,而是为了让 MySQL 尽量减少在排序过程中对须要排序的数据进行分段,因为分段会造成 MySQL 不得不使用临时表来进行交换排序。</em></p>
<p>但是sort_buffer_size 不是越大越好：</p>
<ul>
<li>Sort_Buffer_Size 是一个 connection 级参数,在每个 connection 第一次需要使用这个 buffer 的时候,一次性分配设置的内存。</li>
<li>Sort_Buffer_Size 并不是越大越好,由于是 connection 级的参数,过大的设置和高并发可能会耗尽系统内存资源。</li>
<li>据说 Sort_Buffer_Size 超过 2M 的时候,就会使用 mmap() 而不是 malloc() 来进行内存分配,导致效率降低。</li>
</ul>
<h2 id="优化八、group-by"> 优化八、group by</h2>
<p>其原理也是先排序后分组，其优化方式可参考order by。where高于having,能写在where限定的条件就不要去having限定了。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">SQL锁机制</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/SQL%E9%94%81%E6%9C%BA%E5%88%B6/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/SQL%E9%94%81%E6%9C%BA%E5%88%B6/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<h2 id="一、场景模拟"> 一、场景模拟</h2>
<div><pre><code><span>create</span> <span>table</span> shop
<span>(</span>
  id <span>int</span><span>(</span><span>4</span><span>)</span> <span>primary</span> <span>key</span> <span>default</span> <span>0</span><span>,</span>
  name <span>varchar</span><span>(</span><span>20</span><span>)</span> <span>default</span> <span>'衣服'</span><span>,</span>
  <span>status</span> <span>varchar</span><span>(</span><span>20</span><span>)</span> <span>default</span> <span>'可售'</span>
<span>)</span><span>engine</span> <span>=</span> <span>innodb</span> <span>default</span> <span>charset</span><span>=</span>utf8<span>;</span>

<span>insert</span> <span>into</span> shop  <span>values</span><span>(</span><span>1</span><span>,</span><span>'衣服'</span><span>,</span><span>'可售'</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code>mysql&gt; select * from shop;
+----+--------+--------+
| id | name   | status |
+----+--------+--------+
|  1 | 衣服   | 可售   |
+----+--------+--------+
1 row in set (0.00 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>有一个X姨夫,两个用户并发操作问题</p>
<p>A先看到衣服: X加锁 -&gt; 试衣服 -&gt; 下单 -&gt; 付款 -&gt; 打包 -&gt; X解锁
B也相对衣服: 发现X已经被A加锁了,等待X解锁。</p>
<h2 id="二、锁知识"> 二、锁知识</h2>
<h3 id="锁类型"> 锁类型</h3>
<p>a. 读锁(共享锁):
b. 写锁(互斥锁): 如果当前写操作没有完毕,则无法进行其他的写操作。</p>
<h3 id="锁范围"> 锁范围</h3>
<ul>
<li>innodb默认行锁(开销大,加锁慢,锁范围小,易死锁,不容器锁冲突,并发度高)</li>
<li>MyISAM默认表锁(开销小,加锁块,无死锁,但是锁范围大容器锁冲突,并发度低)</li>
</ul>
<ol>
<li>表锁(对一张表整体加锁)</li>
<li>行锁(对一行数据进行加锁)</li>
</ol>
<hr>
<h2 id="三、锁分析"> 三、锁分析</h2>
<h3 id="_1-查看加锁的表"> 1. 查看加锁的表</h3>
<p><code>show open tables;</code></p>
<p>1代表加锁</p>
<div><pre><code>mysql&gt; show open tables;
+--------------------+---------------------------+--------+-------------+
| Database           | Table                     | In_use | Name_locked |
+--------------------+---------------------------+--------+-------------+
| test               | emp                       |      0 |           0 |
| test               | test_innodb_lock          |      0 |           0 |
| test               | test03                    |      0 |           0 |
| test               | teacher2                  |      0 |           0 |
| test               | course2                   |      0 |           0 |
| test               | book                      |      0 |           0 |
| test               | shop                      |      1 |           0 |
| test               | staffs                    |      0 |           0 |
| test               | dept                      |      0 |           0 |
+--------------------+---------------------------+--------+-------------+
73 rows in set (0.00 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h3 id="_2-查看锁的严重程度"> 2. 查看锁的严重程度</h3>
<p><code>show status like '%Table_locks%';</code></p>
<div><pre><code>mysql&gt; show status like &#39;%Table_locks%&#39;;
+-----------------------+-------+
| Variable_name         | Value |
+-----------------------+-------+
| Table_locks_immediate | 79    |
| Table_locks_waited    | 0     |
+-----------------------+-------+
2 rows in set (0.00 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p><strong>Table_locks_immediate</strong> 能立马加锁
<strong>Table_locks_waited</strong> 越大说明竞争越大</p>
<p>建议:
Table_locks_immediate/Table_locks_waited &gt; 5000,建议采用innodb,否则建议MyISAM。</p>
<h2 id="四、模拟加表锁"> 四、模拟加表锁</h2>
<p><code>lock table 表1 read/write,表2 read/write</code></p>
<div><pre><code>lock table shop write;
</code></pre>
<div><span>1</span><br></div></div><h3 id="加表读锁"> 加表读锁</h3>
<p>如A会话,对shop表加了read锁,则该会话可以对shop表进行读操作,不能进行写操作。
并且只能读自己加锁了的表,如下面列子最shop加锁,能读shop不能写shop,不能读test03</p>
<p><strong>如果对shop表加了read锁,那么只能对shop进行读,其他任何操作都不行了</strong></p>
<div><pre><code>mysql&gt; lock table shop read;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; select * from shop
    -&gt; ;
+----+--------+-----------+
| id | name   | status    |
+----+--------+-----------+
|  1 | 衣服   | 已占用    |
+----+--------+-----------+
1 row in set (0.00 sec)

mysql&gt; update shop set status = &#39;可售&#39; where id = 1;
ERROR 1099 (HY000): Table &#39;shop&#39; was locked with a READ lock and can&#39;t be updated
mysql&gt; select * from test03;
ERROR 1100 (HY000): Table &#39;test03&#39; was not locked with LOCK TABLES
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p><img src="https://img.springlearn.cn/blog/learn_1596460128000.png" alt="" loading="lazy"></p>
<p>其他B会话中,对于shop表能读不能写,但是不影响操作其他表。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596460283000.png" alt="" loading="lazy"></p>
<h3 id="加表写锁"> 加表写锁</h3>
<ul>
<li>会话A: lock table shop write;
当前会话可以对加了锁的表进行任意操作;但是不能操作其他表。</li>
<li>其他会话B:
当会话A释放了锁,B才能对这个表进行增删改查;</li>
</ul>
<h2 id="五、模拟加行锁"> 五、模拟加行锁</h2>
<div><pre><code><span>create</span> <span>table</span> linelock
<span>(</span>
    id <span>int</span><span>(</span><span>5</span><span>)</span> <span>primary</span> <span>key</span> <span>auto_increment</span><span>,</span>
    name <span>varchar</span><span>(</span><span>20</span><span>)</span>
<span>)</span> <span>engine</span> <span>=</span> <span>innodb</span><span>;</span>

<span>insert</span> <span>into</span> linelock<span>(</span>name<span>)</span> <span>values</span><span>(</span><span>'1'</span><span>)</span><span>;</span>
<span>insert</span> <span>into</span> linelock<span>(</span>name<span>)</span> <span>values</span><span>(</span><span>'2'</span><span>)</span><span>;</span>
<span>insert</span> <span>into</span> linelock<span>(</span>name<span>)</span> <span>values</span><span>(</span><span>'3'</span><span>)</span><span>;</span>
<span>insert</span> <span>into</span> linelock<span>(</span>name<span>)</span> <span>values</span><span>(</span><span>'4'</span><span>)</span><span>;</span>
<span>insert</span> <span>into</span> linelock<span>(</span>name<span>)</span> <span>values</span><span>(</span><span>'5'</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="a窗口写操作"> A窗口写操作</h3>
<p><code>insert into linelock(name) values('6');</code></p>
<p>此时B窗口执行update更新会被锁定。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596463371000.png" alt="" loading="lazy"></p>
<p>当A会话commit之后B就能继续操作了。
<img src="https://img.springlearn.cn/blog/learn_1596463461000.png" alt="" loading="lazy"></p>
<p>行锁是通过事务进行解锁的。</p>
<h3 id="行锁转表锁"> 行锁转表锁</h3>
<p>如果索引列进行了类型转换,则索引失效。</p>
<p>A窗口执行
<code>update linelock set name = 'ai' where name = 3;</code></p>
<p>B窗口执行
<code>update linelock set name = 'ax' where name = 4;</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1596464724000.png" alt="" loading="lazy"></p>
<h3 id="间隙锁"> 间隙锁</h3>
<p>update linelock set name = 'x' where id &gt; 1 and id &lt; 8;</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596465102000.png" alt="" loading="lazy"></p>
<h3 id="行锁分析"> 行锁分析</h3>
<p><code>show status like '%innodb_row_lock%';</code></p>
<div><pre><code>mysql&gt; show status like &#39;%innodb_row_lock%&#39;;
+-------------------------------+--------+
| Variable_name                 | Value  |
+-------------------------------+--------+
| Innodb_row_lock_current_waits | 1      |
| Innodb_row_lock_time          | 207248 |
| Innodb_row_lock_time_avg      | 34541  |
| Innodb_row_lock_time_max      | 51605  |
| Innodb_row_lock_waits         | 6      |
+-------------------------------+--------+
5 rows in set (0.00 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p><img src="https://img.springlearn.cn/blog/learn_1596465415000.png" alt="" loading="lazy"></p>
<table>
<thead>
<tr>
<th>Variable_name</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>Innodb_row_lock_current_waits</td>
<td>当前正在等待的锁的数量</td>
</tr>
<tr>
<td>Innodb_row_lock_time</td>
<td>等待总时长,从系统启动到现在一共等待时间</td>
</tr>
<tr>
<td>Innodb_row_lock_time_avg</td>
<td>平均等待时长</td>
</tr>
<tr>
<td>Innodb_row_lock_time_max</td>
<td>最大等待时长</td>
</tr>
<tr>
<td>Innodb_row_lock_waits</td>
<td>等待的次数</td>
</tr>
</tbody>
</table>
<h3 id="查询语句加锁"> 查询语句加锁</h3>
<p><code>set autocommit=0;</code>
<code>select * from linelock for update;</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1596466172000.png" alt="" loading="lazy"></p>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">explain调优</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/explain/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/explain/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<blockquote>
<p>这篇文章主要讲 explain 如何使用，还有 explain 各种参数概念，之后会讲优化</p>
</blockquote>
<h1 id="一、explain-用法"> 一、Explain 用法</h1>
<p>explain模拟Mysql优化器是如何执行SQL查询语句的，从而知道Mysql是如何处理你的SQL语句的。分析你的查询语句或是表结构的性能瓶颈。</p>
<p><strong>语法</strong>：<code>Explain + SQL 语句;</code></p>
<p>如：<code>Explain select * from user;</code> 会生成如下 SQL 分析结果，下面详细对每个字段进行详解</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596351159000.png" alt="" loading="lazy"></p>
<h2 id="_1-id"> 1. id</h2>
<p>是一组数字，代表多个表之间的查询顺序，或者包含子句查询语句中的顺序，id 总共分为三种情况，依次详解</p>
<h3 id="id相同"> id相同</h3>
<p>id相同，执行顺序由上至下
<img src="https://img.springlearn.cn/blog/learn_1596351240000.png" alt="" loading="lazy"></p>
<h3 id="id不同"> id不同</h3>
<p>id 不同，如果是子查询，id 号会递增，id 值越大优先级越高，越先被执行</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596351303000.png" alt="" loading="lazy"></p>
<h3 id="id相同和不同"> id相同和不同</h3>
<p>id 相同和不同的情况同时存在</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596351331000.png" alt="" loading="lazy"></p>
<h2 id="_2-select-type"> 2. select_type</h2>
<p>select_type 包含以下几种值</p>
<p><code>simple</code>、<code>primary</code>、<code>subquery</code>、<code>derived</code>、<code>union</code>、<code>union result</code></p>
<h3 id="simple"> simple</h3>
<p>简单的 <code>select</code> 查询，查询中不包含子查询或者 <code>union</code> 查询</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596351522000.png" alt="" loading="lazy"></p>
<h3 id="primary"> primary</h3>
<p>如果 SQL 语句中包含任何子查询，那么子查询的最外层会被标记为 <code>primary</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1596351575000.png" alt="" loading="lazy"></p>
<h3 id="subquery"> subquery</h3>
<p>在 <code>select</code> 或者 <code>where</code> 里包含了子查询，那么子查询就会被标记为 <code>subQquery</code>，同三.二同时出现</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596351651000.png" alt="" loading="lazy"></p>
<h3 id="derived"> derived</h3>
<p>在 <code>from</code> 中包含的一个子查询，会被标记为衍生查询，会把查询结果放到一个临时表中</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596351720000.png" alt="" loading="lazy"></p>
<h3 id="union-union-result"> union / union result</h3>
<p>如果有两个 <code>select</code> 查询语句，他们之间用 <code>union</code> 连起来查询，那么第二个 <code>select</code> 会被标记为 <code>union</code>，<code>union</code> 的结果被标记为 <code>union result</code>。它的 id 是为 null 的</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596351779000.png" alt="" loading="lazy"></p>
<h2 id="_3-table"> 3. table</h2>
<p>表示这一行的数据是哪张表的数据</p>
<h2 id="_4-type"> 4. type</h2>
<p>type 是代表 MySQL 使用了哪种索引类型，不同的索引类型的查询效率也是不一样的，type 大致有以下种类。
越往上性能越高。</p>
<table>
<thead>
<tr>
<th>Type类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>system</td>
<td>表中只有一行记录，system 是 const 的特例，几乎不会出现这种情况，可以忽略不计</td>
</tr>
<tr>
<td>const</td>
<td>必须是用主键索引或者唯一索引放到 where 条件中查询</td>
</tr>
<tr>
<td>eq_ref</td>
<td>多表查询中,索引查出来的数据都是唯一的（不能是多个,也不能是0个），常见于唯一索引和主键索引</td>
</tr>
<tr>
<td>ref</td>
<td>不是主键索引，也不是唯一索引，就是普通的索引，可能会返回多个符合条件的行。</td>
</tr>
<tr>
<td>range</td>
<td>体现在对某个索引进行区间范围检索，一般出现在 where 条件中的 between、and、&lt;、&gt;、in 等范围查找中。</td>
</tr>
<tr>
<td>index</td>
<td>将所有的索引树都遍历一遍，查找到符合条件的行。索引文件比数据文件还是要小很多，所以比不用索引全表扫描还是要快很多。</td>
</tr>
<tr>
<td>all</td>
<td>没用到索引，单纯的将表数据全部都遍历一遍，查找到符合条件的数据</td>
</tr>
</tbody>
</table>
<h2 id="_5-possible-keys"> 5. possible_keys</h2>
<p>此次查询中涉及字段上若存在索引，则会被列出来，表示可能会用到的索引，但并不是实际上一定会用到的索引</p>
<h2 id="_6-key"> 6. key</h2>
<p>此次查询中实际上用到的索引</p>
<h2 id="_7-key-len"> 7. key_len</h2>
<p>表示索引中使用的字节数，通过该属性可以知道在查询中使用的索引长度，注意：这个长度是最大可能长度，并非实际使用长度，在不损失精确性的情况下，长度越短查询效率越高</p>
<h2 id="_8-ref"> 8. ref</h2>
<p>显示关联的字段。如果使用常数等值查询，则显示 const，如果是连接查询，则会显示关联的字段。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596352252000.png" alt="" loading="lazy"></p>
<ul>
<li>tb_emp 表为非唯一性索引扫描，实际使用的索引列为 idx_name，由于 tb_emp.name='rose'为一个常量，所以 ref=const。</li>
<li>tb_dept 为唯一索引扫描，从 sql 语句可以看出，实际使用了 PRIMARY 主键索引，ref=db01.tb_emp.deptid 表示关联了 db01 数据库中 tb_emp 表的 deptid 字段。</li>
</ul>
<h2 id="_9-rows"> 9. rows</h2>
<p>根据表信息统计以及索引的使用情况，大致估算说要找到所需记录需要读取的行数，rows 越小越好</p>
<h2 id="_10-extra"> 10. extra</h2>
<p>不适合在其他列显示出来，但在优化时十分重要的信息</p>
<h3 id="using-filesort-重点优化"> using  fileSort（重点优化）</h3>
<p>俗称 &quot; 文件排序 &quot; ，在数据量大的时候几乎是“九死一生”，在 order by 或者在 group by 排序的过程中，order by 的字段不是索引字段，或者 select 查询字段存在不是索引字段，或者 select 查询字段都是索引字段，但是 order by 字段和 select 索引字段的顺序不一致，都会导致 fileSort</p>
<p>如果where后面的查询和order by的索引，不是一个值。就会出现fileSort。</p>
<p>复合索引,夸界,也会出现fileSort。</p>
<p>优化建议: where 什么就order by 什么。 或者 where和order by 按照复合索引顺序，不要跨列或者无序使用
<img src="https://img.springlearn.cn/blog/learn_1596352476000.png" alt="" loading="lazy"></p>
<h3 id="using-temporary-重点优化"> using temporary（重点优化）</h3>
<p>使用了临时表保存中间结果，常见于 order by 和 group by 中。</p>
<p>优化建议: 查询哪些列就用哪些列来order by。 能不用创建临时表就不要创建。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596352573000.png" alt="" loading="lazy"></p>
<h3 id="using-index-重点"> USING index（重点）</h3>
<p>索引覆盖,就是当前sql查询不用读取原文件,只用读取索引。因为查询的列就是索引列</p>
<p>表示相应的 select 操作中使用了覆盖索引（Coveing Index）,避免访问了表的数据行，效率不错！如果同时出现 using where，表明索引被用来执行索引键值的查找；如果没有同时出现 using where，表面索引用来读取数据而非执行查找动作。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596352650000.png" alt="" loading="lazy"></p>
<h3 id="using-where"> Using where</h3>
<p>跟using index相反，要回表去查询。</p>
<p>表明使用了 where 过滤</p>
<h3 id="using-join-buffer"> Using join buffer</h3>
<p>使用了连接缓存</p>
<h3 id="impossible-where"> impossible where</h3>
<p>where 子语句的值总是 false，不能用来获取任何数据。出现这个就要检查sql。</p>
<p>eg: select a from test where a = 1 and a = 2。  a肯定不可能即1又是2</p>
<h3 id="select-tables-optimized-away"> select tables optimized away</h3>
<p>在没有 GROUPBY 子句的情况下，基于索引优化 MIN/MAX 操作或者 对于 MyISAM 存储引擎优化 COUNT(*)操作，不必等到执行阶段再进行计算， 查询执行计划生成的阶段即完成优化。</p>
<h3 id="distinct"> distinct</h3>
<p>优化 distinct，在找到第一匹配的元组后即停止找同样值的工作</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">如何找到垃圾SQL语句,你知道这些方式吗？</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/%E5%9E%83%E5%9C%BESQL/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/%E5%9E%83%E5%9C%BESQL/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<blockquote>
<p>这篇文章主要是讲如何找到需要优化的SQL语句，即找到查询速度非常慢的SQL语句。</p>
</blockquote>
<h1 id="一、慢查询日志"> 一、慢查询日志</h1>
<h2 id="_1-何为慢查询日志"> 1. 何为慢查询日志</h2>
<ul>
<li>慢查询日志是MySQL提供的一种日志记录，它用来记录查询响应时间超过阀值的SQL语句</li>
<li>这个时间阀值通过参数 <code>long_query_time</code> 设置，如果SQL语句查询时间大于这个值，则会被记录到慢查询日志中，这个值默认是10秒</li>
<li>MySQL默认不开启慢查询日志，在需要调优的时候可以手动开启，但是多少会对数据库性能有点影响</li>
</ul>
<h2 id="_2-如何开启慢查询日志"> 2. 如何开启慢查询日志</h2>
<p>查看是否开启了慢查询日志</p>
<p><code>SHOW VARIABLES LIKE '%slow_query_log%'</code></p>
<p>用命令方式开启慢查询日志，但是重启MySQL后此设置会失效</p>
<p><code>set global slow_query_log = 1</code></p>
<p>永久生效开启方式可以在my.cnf里进行配置，在<code>mysqld</code>下新增以下两个参数，重启MySQL即可生效</p>
<div><pre><code>slow_query_log=1
slow_query_log_file=日志文件存储路径
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_3-慢查询时间阀值"> 3. 慢查询时间阀值</h2>
<p>查看慢查询时间阀值</p>
<p><code>SHOW VARIABLES LIKE 'long_query_time%';</code></p>
<p>修改慢查询时间阀值</p>
<p><code>set global long_query_time=3;</code></p>
<p>修改后的时间阀值生效</p>
<p><code>需要重新连接或者新开一个回话才能看到修改值。</code></p>
<p>在MySQL配置文件中修改时间阀值</p>
<div><pre><code>[mysqld]下配置
slow_query_log=1
slow_query_log_file=日志文件存储路径
long_query_time=3
log_output=FILE
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h1 id="二、慢查询日志分析工具"> 二、慢查询日志分析工具</h1>
<p>慢查询日志可能会数据量非常大，那么我们如何快速找到需要优化的SQL语句呢，这个神奇诞生了，它就是mysqldumpshow。</p>
<h2 id="_1-mysqldumpslow-help语法"> 1. mysqldumpslow --help语法</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1596350361000.png" alt="" loading="lazy"></p>
<p>通过mysqldumpslow --help可知这个命令是由三部分组成：mysqldumpslow <code>[日志查找选项] [日志文件存储位置]</code>。</p>
<h2 id="_2-日志查找选项"> 2. 日志查找选项</h2>
<ul>
<li>s：是表示按何种方式排序</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>c</td>
<td>访问次数</td>
</tr>
<tr>
<td>i</td>
<td>锁定时间</td>
</tr>
<tr>
<td>r</td>
<td>返回记录</td>
</tr>
<tr>
<td>t</td>
<td>查询时间</td>
</tr>
<tr>
<td>al</td>
<td>平均锁定时间</td>
</tr>
<tr>
<td>ar</td>
<td>平均返回记录数</td>
</tr>
<tr>
<td>at</td>
<td>平均查询时间</td>
</tr>
</tbody>
</table>
<ul>
<li>t：即为返回前面多少条的数据</li>
<li>g：后边搭配一个正则匹配模式，大小写不敏感的</li>
</ul>
<h2 id="_3-常用分析语法"> 3. 常用分析语法</h2>
<p>查找返回记录做多的10条SQL</p>
<p><code>mysqldumpslow -s r -t 10 日志路径</code></p>
<p>查找使用频率最高的10条SQL</p>
<p><code>mysqldumpslow -s c -t 10 日志路径</code></p>
<p>查找按照时间排序的前10条里包含左连接的SQL</p>
<p><code>mysqldumpslow -s t -t 10 -g &quot;left join&quot; 日志路径</code></p>
<p>通过more查看日志，防止爆屏</p>
<p><code>mysqldumpslow -s r -t 10 日志路径 | more</code></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">海量数据模拟</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%8B%9F/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%8B%9F/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<h2 id="一、创建表"> 一、创建表</h2>
<div><pre><code><span>create</span> <span>table</span> dept
<span>(</span>
 dno <span>int</span><span>(</span><span>5</span><span>)</span> <span>primary</span> <span>key</span> <span>default</span> <span>0</span><span>,</span>
 dname <span>varchar</span><span>(</span><span>20</span><span>)</span> <span>not</span> <span>null</span> <span>default</span> <span>''</span><span>,</span>
 loc <span>varchar</span><span>(</span><span>30</span><span>)</span> <span>default</span> <span>''</span>
<span>)</span> <span>engine</span> <span>=</span><span>innodb</span> <span>default</span> <span>charset</span><span>=</span>utf8<span>;</span>

<span>create</span> <span>table</span> emp
<span>(</span>
 eid <span>int</span><span>(</span><span>5</span><span>)</span> <span>primary</span> <span>key</span><span>,</span>
 ename <span>varchar</span><span>(</span><span>20</span><span>)</span> <span>not</span> <span>null</span> <span>default</span> <span>''</span><span>,</span>
 job <span>varchar</span><span>(</span><span>20</span><span>)</span> <span>not</span> <span>null</span> <span>default</span> <span>''</span><span>,</span>
 deptno <span>int</span><span>(</span><span>5</span><span>)</span> <span>not</span> <span>null</span> <span>default</span> <span>0</span>
<span>)</span> <span>engine</span> <span>=</span><span>innodb</span> <span>default</span>  <span>charset</span><span>=</span>utf8<span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="二、存储函数插入海量数量"> 二、存储函数插入海量数量</h2>
<p>存储过程无return,存储函数有。</p>
<h3 id="_1-创建存储函数生成id和name"> 1. 创建存储函数生成id和name</h3>
<p>name随机字符串</p>
<div><pre><code>delimiter $
create function randstring(n int) returns varchar(255)
begin 
    declare all_str varchar(100) default &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;;
    declare return_str varchar(255) default &#39;&#39;;
    declare i int default 0;
    while i &lt;n
    do
        set return_str = concat(return_str,substring(all_str,rand()*52,1));
        set i = i+1;
    end while;    
    return return_str;
end $
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p><code>ERROR 1418 (HY000): This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable)</code></p>
<p>如果开启了慢慢查询日志,在开启存储函数就会冲突,解决办法1就是管理慢日志查询。</p>
<p>解决办法2:</p>
<p><code>show variables like '%log_bin_trust_function_creators%';</code></p>
<p><code>set global log_bin_trust_function_creators=1;</code></p>
<p>id随机数</p>
<div><pre><code>delimiter $
create function rand_num()returns int(5)
begin
    declare i int default 0;
    set i = floor(rand() * 100);
    return i;
end $;    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="_2-通过存储过程插入海量数据emp"> 2. 通过存储过程插入海量数据emp</h3>
<div><pre><code>create procedure insert_emp(in eid_start int(10),in data_times int(10))
begin
    declare i int default 0;
    set autocommit = 0;
    repeat
        insert into emp values(eid_start + i,randstring(5),&#39;other&#39;,rand_num());
        set i = i + 1;
        until i = data_times
    end repeat;   
    commit;
end $;    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="_2-通过存储过程插入海量数据dept"> 2. 通过存储过程插入海量数据dept</h3>
<div><pre><code>create procedure insert_dept(in dno_start int(10),in data_times int(10))
begin
    declare i int default 0;
    set autocommit = 0;
    repeat
        insert into dept values(dno_start+i,randstring(6),randstring(8));
        set i = i + 1;
        until i = data_times
    end repeat;
commit;
end$    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="_3-插入海量数据"> 3. 插入海量数据</h3>
<p><code>delimiter ;</code>分割符改回原来</p>
<p>员工表插入80w条数据
<code>call insert_emp(1000,800000);</code>
部门表插入30条数据
<code>call insert_dept(10,30);</code></p>
<div><pre><code>mysql&gt; select count(1) from emp;
+----------+
| count(1) |
+----------+
|   800000 |
+----------+
1 row in set (0.05 sec)

mysql&gt; select count(1) from dept;
+----------+
| count(1) |
+----------+
|       30 |
+----------+
1 row in set (0.00 sec)

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="三、利用profiles分析海量数据"> 三、利用profiles分析海量数据</h2>
<h3 id="_1-打开profiles"> 1. 打开profiles</h3>
<div><pre><code>set profiling = on;
show variables like &#39;%profiling%&#39;;

mysql&gt; set profiling = on;
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; show variables like &#39;%profiling%&#39;;
+------------------------+-------+
| Variable_name          | Value |
+------------------------+-------+
| have_profiling         | YES   |
| profiling              | ON    |
| profiling_history_size | 15    |
+------------------------+-------+
3 rows in set (0.00 sec)

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p><img src="https://img.springlearn.cn/blog/learn_1596455359000.png" alt="" loading="lazy"></p>
<h3 id="_2-查询每条耗时"> 2. 查询每条耗时</h3>
<p>profiles会记录每个sql的耗时</p>
<div><pre><code>mysql&gt; show profiles;
+----------+------------+-----------------------------------+
| Query_ID | Duration   | Query                             |
+----------+------------+-----------------------------------+
|        1 | 0.00164000 | show variables like &#39;%profiling%&#39; |
|        2 | 0.04513900 | select count(1) from emp          |
|        3 | 0.00056200 | select count(1) from dept         |
+----------+------------+-----------------------------------+
3 rows in set, 1 warning (0.00 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>但是这样不能精确匹配到耗时在哪里。此时可以使用profile精确来分析sql</p>
<h3 id="_3-精确查询耗时"> 3. 精确查询耗时</h3>
<p><strong>精确</strong>
根据上面的Query_ID来精确查找
<code>show profile all for query 2;</code></p>
<div><pre><code>+--------------------------------+----------+----------+------------+-------------------+---------------------+--------------+---------------+---------------+-------------------+-------------------+-------------------+-------+-------------------------+----------------------+-------------+
| Status                         | Duration | CPU_user | CPU_system | Context_voluntary | Context_involuntary | Block_ops_in | Block_ops_out | Messages_sent | Messages_received | Page_faults_major | Page_faults_minor | Swaps | Source_function         | Source_file          | Source_line |
+--------------------------------+----------+----------+------------+-------------------+---------------------+--------------+---------------+---------------+-------------------+-------------------+-------------------+-------+-------------------------+----------------------+-------------+
| starting                       | 0.000106 | 0.000094 |   0.000012 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | NULL                    | NULL                 |        NULL |
| Executing hook on transaction  | 0.000008 | 0.000004 |   0.000004 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | launch_hook_trans_begin | rpl_handler.cc       |        1106 |
| starting                       | 0.000013 | 0.000010 |   0.000002 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | launch_hook_trans_begin | rpl_handler.cc       |        1108 |
| checking permissions           | 0.000009 | 0.000007 |   0.000003 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | check_access            | sql_authorization.cc |        2202 |
| Opening tables                 | 0.000047 | 0.000045 |   0.000002 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | open_tables             | sql_base.cc          |        5587 |
| init                           | 0.000012 | 0.000008 |   0.000003 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | execute                 | sql_select.cc        |         661 |
| System lock                    | 0.000014 | 0.000012 |   0.000003 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | mysql_lock_tables       | lock.cc              |         332 |
| optimizing                     | 0.000010 | 0.000007 |   0.000002 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | optimize                | sql_optimizer.cc     |         213 |
| statistics                     | 0.000037 | 0.000023 |   0.000014 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 1 |     0 | optimize                | sql_optimizer.cc     |         423 |
| preparing                      | 0.000025 | 0.000023 |   0.000003 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | optimize                | sql_optimizer.cc     |         497 |
| executing                      | 0.000007 | 0.000004 |   0.000003 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | exec                    | sql_executor.cc      |         228 |
| Sending data                   | 0.044768 | 0.072019 |   0.003191 |                 0 |                 810 |            0 |             0 |             0 |                 0 |                 0 |                 9 |     0 | exec                    | sql_executor.cc      |         304 |
| end                            | 0.000018 | 0.000009 |   0.000010 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | execute                 | sql_select.cc        |         714 |
| query end                      | 0.000006 | 0.000004 |   0.000002 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | mysql_execute_command   | sql_parse.cc         |        4520 |
| waiting for handler commit     | 0.000013 | 0.000011 |   0.000001 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | ha_commit_trans         | handler.cc           |        1533 |
| closing tables                 | 0.000009 | 0.000008 |   0.000002 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | mysql_execute_command   | sql_parse.cc         |        4566 |
| freeing items                  | 0.000026 | 0.000012 |   0.000013 |                 0 |                   0 |            0 |             0 |             1 |                 0 |                 0 |                 0 |     0 | mysql_parse             | sql_parse.cc         |        5237 |
| cleaning up                    | 0.000011 | 0.000009 |   0.000002 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | dispatch_command        | sql_parse.cc         |        2147 |
+--------------------------------+----------+----------+------------+-------------------+---------------------+--------------+---------------+---------------+-------------------+-------------------+-------------------+-------+-------------------------+----------------------+-------------+
18 rows in set, 1 warning (0.00 sec)

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>我们可以看到信息太多了,我们其实只用关系几列的数据就行了。</p>
<div><pre><code>mysql&gt; show profile cpu,block io for query 2;
+--------------------------------+----------+----------+------------+--------------+---------------+
| Status                         | Duration | CPU_user | CPU_system | Block_ops_in | Block_ops_out |
+--------------------------------+----------+----------+------------+--------------+---------------+
| starting                       | 0.000106 | 0.000094 |   0.000012 |            0 |             0 |
| Executing hook on transaction  | 0.000008 | 0.000004 |   0.000004 |            0 |             0 |
| starting                       | 0.000013 | 0.000010 |   0.000002 |            0 |             0 |
| checking permissions           | 0.000009 | 0.000007 |   0.000003 |            0 |             0 |
| Opening tables                 | 0.000047 | 0.000045 |   0.000002 |            0 |             0 |
| init                           | 0.000012 | 0.000008 |   0.000003 |            0 |             0 |
| System lock                    | 0.000014 | 0.000012 |   0.000003 |            0 |             0 |
| optimizing                     | 0.000010 | 0.000007 |   0.000002 |            0 |             0 |
| statistics                     | 0.000037 | 0.000023 |   0.000014 |            0 |             0 |
| preparing                      | 0.000025 | 0.000023 |   0.000003 |            0 |             0 |
| executing                      | 0.000007 | 0.000004 |   0.000003 |            0 |             0 |
| Sending data                   | 0.044768 | 0.072019 |   0.003191 |            0 |             0 |
| end                            | 0.000018 | 0.000009 |   0.000010 |            0 |             0 |
| query end                      | 0.000006 | 0.000004 |   0.000002 |            0 |             0 |
| waiting for handler commit     | 0.000013 | 0.000011 |   0.000001 |            0 |             0 |
| closing tables                 | 0.000009 | 0.000008 |   0.000002 |            0 |             0 |
| freeing items                  | 0.000026 | 0.000012 |   0.000013 |            0 |             0 |
| cleaning up                    | 0.000011 | 0.000009 |   0.000002 |            0 |             0 |
+--------------------------------+----------+----------+------------+--------------+---------------+
18 rows in set, 1 warning (0.01 sec)

mysql&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><h3 id="_4-全局查询日志"> 4. 全局查询日志</h3>
<p>仅仅在调优和开发中使用,生产要关闭</p>
<p><code>show variables like '%general_log%';</code></p>
<p>开启全局日志记录并将sql都写入到表中</p>
<div><pre><code>set global general_log = 1;
set global log_output = &#39;table&#39;;
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code>mysql&gt; show variables like &#39;%general_log%&#39;;
+------------------+------------------------------------+
| Variable_name    | Value                              |
+------------------+------------------------------------+
| general_log      | OFF                                |
| general_log_file | /usr/local/var/mysql/localhost.log |
+------------------+------------------------------------+
2 rows in set (0.01 sec)

mysql&gt; set global general_log = 1;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; show variables like &#39;%general_log%&#39;;
+------------------+------------------------------------+
| Variable_name    | Value                              |
+------------------+------------------------------------+
| general_log      | ON                                 |
| general_log_file | /usr/local/var/mysql/localhost.log |
+------------------+------------------------------------+
2 rows in set (0.01 sec)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>开启之后就可以在mysql库中的general_log表中进行查询</p>
<p><code>select * from mysql.general_log;</code>
<img src="https://img.springlearn.cn/blog/learn_1596457337000.png" alt="" loading="lazy"></p>
<p>将sql设置到文件中</p>
<div><pre><code>set global general_log = 1;
set global log_output = &#39;file&#39;;
set global general_log_file=&#39;/Users/liuxin/general.log&#39;;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><img src="https://img.springlearn.cn/blog/learn_1596457737000.png" alt="" loading="lazy"></p>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Java代码规范全部奉上</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/design/Java%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%85%A8%E9%83%A8%E5%A5%89%E4%B8%8A/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/design/Java%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%85%A8%E9%83%A8%E5%A5%89%E4%B8%8A/"/>
    <updated>2021-12-21T05:46:37.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1598165820000.png" alt="" loading="lazy"></p>
<blockquote>
<p>写代码就像写文章, 好的代码就像好的文章,结构严谨,构思清晰。写代码就像写文章, 一不留神就成流水账，为避免这种情况作为软件开发工程师，重要的是设计而不是实现。</p>
</blockquote>
<p><strong>在一个团队中,由于不同经验的开发导致编程风格可能会出现非常混乱的情况,从而导致开发成本上升。难以维护。所以代码规范就显得异常重要了。</strong></p>
<p>本篇文章就是给出编程命名的建议,仅供参考,但是其目的是为了统一规范,提高编程能力,降低开发成本,减少代码维护成本。</p>
<p>契约精神: 做到有法可依，有章可循。</p>
<h2 id="一、类命名"> 一、类命名</h2>
<h3 id="_1-抽象类"> 1. 抽象类</h3>
<p>适用的设计模式为模板模式。抽象是自下往上的设计。由具体实现推断出抽象方法。建议以Abstract开头。</p>
<table>
<thead>
<tr>
<th>建议</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Abstract 或者 Base 开头</td>
<td>BaseUserService、AbstractUserService</td>
</tr>
</tbody>
</table>
<h3 id="_2-枚举类"> 2. 枚举类</h3>
<ul>
<li>枚举是由JVM来保证的单例。可以用来做单例类。</li>
<li>枚举类常用作值判断,不建议每次进行循环判断得到实例。建议由内部维护一个map类型,当做cache。此方法建议放在static静态代码块中实现</li>
</ul>
<table>
<thead>
<tr>
<th>建议</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Enum 作为后缀</td>
<td>GenderEnum</td>
</tr>
</tbody>
</table>
<div><pre><code>public enum ProtocolEnum {

    /**
     * ECHO协议
     */
    ECHO(1, null),

    /**
     * mojito协议
     */
    MOJITO(2, MojitoProtocol.class);

    private byte type;

    private Class&lt;? extends Protocol&gt; protocol;

    private static Map&lt;Byte, ProtocolEnum&gt; cache = new HashMap&lt;&gt;();

    static {
        for (ProtocolEnum protocolEnum : values()) {
            cache.put(protocolEnum.type, protocolEnum);
        }
    }

    public static ProtocolEnum byType(byte type) {
        return cache.get(type);
    }
}    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h3 id="_3-工具类"> 3. 工具类</h3>
<p>工具类常为无状态对象,无状态对象都是线程安全对象,建议使用 <code>final</code> 修饰。</p>
<p>工具类中避免出现业务属性, 如果出现业务属性,抽象出领域层</p>
<table>
<thead>
<tr>
<th>建议</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Utils作为后缀</td>
<td>StringUtils</td>
</tr>
</tbody>
</table>
<h3 id="_4-异常类"> 4. 异常类</h3>
<p>建议保持异常链。</p>
<table>
<thead>
<tr>
<th>建议</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Exception结尾</td>
<td>RuntimeException</td>
</tr>
</tbody>
</table>
<h3 id="_5-接口实现类"> 5. 接口实现类</h3>
<p>众所周知</p>
<table>
<thead>
<tr>
<th>建议</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>接口名+ Impl</td>
<td>UserServiceImpl</td>
</tr>
</tbody>
</table>
<h3 id="_6-设计模式相关类"> 6. 设计模式相关类</h3>
<table>
<thead>
<tr>
<th>建议</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Builder，Factory等</td>
<td>当使用到设计模式时，需要使用对应的设计模式作为后缀，如ThreadFactory</td>
</tr>
</tbody>
</table>
<p><img src="https://img.springlearn.cn/27c9d5187cd283f8d160ec1ed2b5ac89.jpg" alt="" loading="lazy"></p>
<h3 id="_7-处理特定功能的"> 7. 处理特定功能的</h3>
<p>其主要的目的是代码可重复使用。</p>
<table>
<thead>
<tr>
<th>建议</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Handler，Predicate, Validator</td>
<td>表示处理器，校验器，断言，这些类工厂还有配套的方法名如handle，predicate，validate</td>
</tr>
</tbody>
</table>
<h3 id="_8-测试类"> 8. 测试类</h3>
<table>
<thead>
<tr>
<th>建议</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Test结尾</td>
<td>UserServiceTest， 表示用来测试UserService类的</td>
</tr>
</tbody>
</table>
<h3 id="_9-领域模型载体"> 9. 领域模型载体</h3>
<table>
<thead>
<tr>
<th>建议</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>DTO/*Request</td>
<td>数据传输对象</td>
</tr>
<tr>
<td>BO</td>
<td>业务对象</td>
</tr>
<tr>
<td>VO</td>
<td>数据展示对象,用于承载页面数据</td>
</tr>
<tr>
<td>DO</td>
<td>数据持久化对象</td>
</tr>
</tbody>
</table>
<h2 id="二、方法命名"> 二、方法命名</h2>
<p>参考于网络。</p>
<h3 id="_1-布尔判断方法"> 1. 布尔判断方法</h3>
<p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p>
<table>
<thead>
<tr>
<th><strong>位置</strong></th>
<th><strong>单词</strong></th>
<th><strong>意义</strong></th>
<th><strong>例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Prefix</td>
<td>is</td>
<td>对象是否符合期待的状态</td>
<td>isValid</td>
</tr>
<tr>
<td>Prefix</td>
<td>can</td>
<td>对象<strong>能否执行</strong>所期待的动作</td>
<td>canRemove</td>
</tr>
<tr>
<td>Prefix</td>
<td>should</td>
<td>调用方执行某个命令或方法是<strong>好还是不好</strong>,<strong>应不应该</strong>，或者说<strong>推荐还是不推荐</strong></td>
<td>shouldMigrate</td>
</tr>
<tr>
<td>Prefix</td>
<td>has</td>
<td>对象<strong>是否持有</strong>所期待的数据和属性</td>
<td>hasObservers</td>
</tr>
<tr>
<td>Prefix</td>
<td>needs</td>
<td>调用方<strong>是否需要</strong>执行某个命令或方法</td>
<td>needsMigrate</td>
</tr>
</tbody>
</table>
<h3 id="_2-检查的方法"> 2. 检查的方法</h3>
<p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p>
<table>
<thead>
<tr>
<th><strong>单词</strong></th>
<th><strong>意义</strong></th>
<th><strong>例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>ensure</td>
<td>检查是否为期待的状态，不是则抛出异常或返回error code</td>
<td>ensureCapacity</td>
</tr>
<tr>
<td>validate</td>
<td>检查是否为正确的状态，不是则抛出异常或返回error code</td>
<td>validateInputs</td>
</tr>
</tbody>
</table>
<h3 id="_3-按需求才执行的方法"> 3. 按需求才执行的方法</h3>
<p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p>
<table>
<thead>
<tr>
<th><strong>位置</strong></th>
<th><strong>单词</strong></th>
<th><strong>意义</strong></th>
<th><strong>例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Suffix</td>
<td>IfNeeded</td>
<td>需要的时候执行，不需要的时候什么都不做</td>
<td>drawIfNeeded</td>
</tr>
<tr>
<td>Prefix</td>
<td>might</td>
<td>同上</td>
<td>mightCreate</td>
</tr>
<tr>
<td>Prefix</td>
<td>try</td>
<td>尝试执行，失败时抛出异常或是返回errorcode</td>
<td>tryCreate</td>
</tr>
<tr>
<td>Suffix</td>
<td>OrDefault</td>
<td>尝试执行，失败时返回默认值</td>
<td>getOrDefault</td>
</tr>
<tr>
<td>Suffix</td>
<td>OrElse</td>
<td>尝试执行、失败时返回实际参数中指定的值</td>
<td>getOrElse</td>
</tr>
<tr>
<td>Prefix</td>
<td>force</td>
<td>强制尝试执行。error抛出异常或是返回值</td>
<td>forceCreate, forceStop</td>
</tr>
</tbody>
</table>
<h3 id="_4-异步相关方法"> 4. 异步相关方法</h3>
<p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p>
<table>
<thead>
<tr>
<th><strong>位置</strong></th>
<th><strong>单词</strong></th>
<th><strong>意义</strong></th>
<th><strong>例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Prefix</td>
<td>blocking</td>
<td>线程阻塞方法</td>
<td>blockingGetUser</td>
</tr>
<tr>
<td>Suffix</td>
<td>InBackground</td>
<td>执行在后台的线程</td>
<td>doInBackground</td>
</tr>
<tr>
<td>Suffix</td>
<td>Async</td>
<td>异步方法</td>
<td>sendAsync</td>
</tr>
<tr>
<td>Suffix</td>
<td>Sync</td>
<td>对应已有异步方法的同步方法</td>
<td>sendSync</td>
</tr>
<tr>
<td>Prefix or Alone</td>
<td>schedule</td>
<td>Job和Task放入队列</td>
<td>schedule, scheduleJob</td>
</tr>
<tr>
<td>Prefix or Alone</td>
<td>post</td>
<td>同上</td>
<td>postJob</td>
</tr>
<tr>
<td>Prefix or Alone</td>
<td>execute</td>
<td>执行异步方法（注：我一般拿这个做同步方法名）</td>
<td>execute, executeTask</td>
</tr>
<tr>
<td>Prefix or Alone</td>
<td>start</td>
<td>同上</td>
<td>start, startJob</td>
</tr>
<tr>
<td>Prefix or Alone</td>
<td>cancel</td>
<td>停止异步方法</td>
<td>cancel, cancelJob</td>
</tr>
<tr>
<td>Prefix or Alone</td>
<td>stop</td>
<td>同上</td>
<td>stop, stopJob</td>
</tr>
</tbody>
</table>
<h3 id="_5-回调方法"> 5. 回调方法</h3>
<p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p>
<table>
<thead>
<tr>
<th><strong>位置</strong></th>
<th><strong>单词</strong></th>
<th><strong>意义</strong></th>
<th><strong>例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Prefix</td>
<td>on</td>
<td>事件发生时执行</td>
<td>onCompleted</td>
</tr>
<tr>
<td>Prefix</td>
<td>before</td>
<td>事件发生前执行</td>
<td>beforeUpdate</td>
</tr>
<tr>
<td>Prefix</td>
<td>pre</td>
<td>同上</td>
<td>preUpdate</td>
</tr>
<tr>
<td>Prefix</td>
<td>will</td>
<td>同上</td>
<td>willUpdate</td>
</tr>
<tr>
<td>Prefix</td>
<td>after</td>
<td>事件发生后执行</td>
<td>afterUpdate</td>
</tr>
<tr>
<td>Prefix</td>
<td>post</td>
<td>同上</td>
<td>postUpdate</td>
</tr>
<tr>
<td>Prefix</td>
<td>did</td>
<td>同上</td>
<td>didUpdate</td>
</tr>
<tr>
<td>Prefix</td>
<td>should</td>
<td>确认事件是否可以发生时执行</td>
<td>shouldUpdate</td>
</tr>
</tbody>
</table>
<h3 id="_6-操作对象生命周期的方法"> 6. 操作对象生命周期的方法</h3>
<p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p>
<table>
<thead>
<tr>
<th><strong>单词</strong></th>
<th><strong>意义</strong></th>
<th><strong>例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>initialize</td>
<td>初始化。也可作为延迟初始化使用</td>
<td>initialize</td>
</tr>
<tr>
<td>pause</td>
<td>暂停</td>
<td>onPause ，pause</td>
</tr>
<tr>
<td>stop</td>
<td>停止</td>
<td>onStop，stop</td>
</tr>
<tr>
<td>abandon</td>
<td>销毁的替代</td>
<td>abandon</td>
</tr>
<tr>
<td>destroy</td>
<td>同上</td>
<td>destroy</td>
</tr>
<tr>
<td>dispose</td>
<td>同上</td>
<td>dispose</td>
</tr>
</tbody>
</table>
<h3 id="_7-与集合操作相关的方法"> 7. 与集合操作相关的方法</h3>
<p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p>
<table>
<thead>
<tr>
<th><strong>单词</strong></th>
<th><strong>意义</strong></th>
<th><strong>例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>contains</td>
<td>是否持有与指定对象相同的对象</td>
<td>contains</td>
</tr>
<tr>
<td>add</td>
<td>添加</td>
<td>addJob</td>
</tr>
<tr>
<td>append</td>
<td>添加</td>
<td>appendJob</td>
</tr>
<tr>
<td>insert</td>
<td>插入到下标n</td>
<td>insertJob</td>
</tr>
<tr>
<td>put</td>
<td>添加与key对应的元素</td>
<td>putJob</td>
</tr>
<tr>
<td>remove</td>
<td>移除元素</td>
<td>removeJob</td>
</tr>
<tr>
<td>enqueue</td>
<td>添加到队列的最末位</td>
<td>enqueueJob</td>
</tr>
<tr>
<td>dequeue</td>
<td>从队列中头部取出并移除</td>
<td>dequeueJob</td>
</tr>
<tr>
<td>push</td>
<td>添加到栈头</td>
<td>pushJob</td>
</tr>
<tr>
<td>pop</td>
<td>从栈头取出并移除</td>
<td>popJob</td>
</tr>
<tr>
<td>peek</td>
<td>从栈头取出但不移除</td>
<td>peekJob</td>
</tr>
<tr>
<td>find</td>
<td>寻找符合条件的某物</td>
<td>findById</td>
</tr>
</tbody>
</table>
<h3 id="_8-数据增删改查相关的方法"> 8. 数据增删改查相关的方法</h3>
<p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p>
<table>
<thead>
<tr>
<th><strong>单词</strong></th>
<th><strong>意义</strong></th>
<th><strong>例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>create</td>
<td>新创建</td>
<td>createAccount</td>
</tr>
<tr>
<td>new</td>
<td>新创建</td>
<td>newAccount</td>
</tr>
<tr>
<td>from</td>
<td>从既有的某物新建，或是从其他的数据新建</td>
<td>fromConfig</td>
</tr>
<tr>
<td>to</td>
<td>转换</td>
<td>toString</td>
</tr>
<tr>
<td>update</td>
<td>更新既有某物</td>
<td>updateAccount</td>
</tr>
<tr>
<td>load</td>
<td>读取</td>
<td>loadAccount</td>
</tr>
<tr>
<td>fetch</td>
<td>远程读取</td>
<td>fetchAccount</td>
</tr>
<tr>
<td>delete</td>
<td>删除</td>
<td>deleteAccount</td>
</tr>
<tr>
<td>remove</td>
<td>删除</td>
<td>removeAccount</td>
</tr>
<tr>
<td>save</td>
<td>保存</td>
<td>saveAccount</td>
</tr>
<tr>
<td>store</td>
<td>保存</td>
<td>storeAccount</td>
</tr>
<tr>
<td>commit</td>
<td>保存</td>
<td>commitChange</td>
</tr>
<tr>
<td>apply</td>
<td>保存或应用</td>
<td>applyChange</td>
</tr>
<tr>
<td>clear</td>
<td>清除数据或是恢复到初始状态</td>
<td>clearAll</td>
</tr>
<tr>
<td>reset</td>
<td>清除数据或是恢复到初始状态</td>
<td>resetAll</td>
</tr>
</tbody>
</table>
<h3 id="_9-成对出现的动词"> 9. 成对出现的动词</h3>
<p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p>
<table>
<thead>
<tr>
<th><strong>单词</strong></th>
<th><strong>意义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>get获取</td>
<td>set 设置</td>
</tr>
<tr>
<td>add 增加</td>
<td>remove 删除</td>
</tr>
<tr>
<td>create 创建</td>
<td>destory 移除</td>
</tr>
<tr>
<td>start 启动</td>
<td>stop 停止</td>
</tr>
<tr>
<td>open 打开</td>
<td>close 关闭</td>
</tr>
<tr>
<td>read 读取</td>
<td>write 写入</td>
</tr>
<tr>
<td>load 载入</td>
<td>save 保存</td>
</tr>
<tr>
<td>create 创建</td>
<td>destroy 销毁</td>
</tr>
<tr>
<td>begin 开始</td>
<td>end 结束</td>
</tr>
<tr>
<td>backup 备份</td>
<td>restore 恢复</td>
</tr>
<tr>
<td>import 导入</td>
<td>export 导出</td>
</tr>
<tr>
<td>split 分割</td>
<td>merge 合并</td>
</tr>
<tr>
<td>inject 注入</td>
<td>extract 提取</td>
</tr>
<tr>
<td>attach 附着</td>
<td>detach 脱离</td>
</tr>
<tr>
<td>bind 绑定</td>
<td>separate 分离</td>
</tr>
<tr>
<td>view 查看</td>
<td>browse 浏览</td>
</tr>
<tr>
<td>edit 编辑</td>
<td>modify 修改</td>
</tr>
<tr>
<td>select 选取</td>
<td>mark 标记</td>
</tr>
<tr>
<td>copy 复制</td>
<td>paste 粘贴</td>
</tr>
<tr>
<td>undo 撤销</td>
<td>redo 重做</td>
</tr>
<tr>
<td>insert 插入</td>
<td>delete 移除</td>
</tr>
<tr>
<td>add 加入</td>
<td>append 添加</td>
</tr>
<tr>
<td>clean 清理</td>
<td>clear 清除</td>
</tr>
<tr>
<td>index 索引</td>
<td>sort 排序</td>
</tr>
<tr>
<td>find 查找</td>
<td>search 搜索</td>
</tr>
<tr>
<td>increase 增加</td>
<td>decrease 减少</td>
</tr>
<tr>
<td>play 播放</td>
<td>pause 暂停</td>
</tr>
<tr>
<td>launch 启动</td>
<td>run 运行</td>
</tr>
<tr>
<td>compile 编译</td>
<td>execute 执行</td>
</tr>
<tr>
<td>debug 调试</td>
<td>trace 跟踪</td>
</tr>
<tr>
<td>observe 观察</td>
<td>listen 监听</td>
</tr>
<tr>
<td>build 构建</td>
<td>publish 发布</td>
</tr>
<tr>
<td>input 输入</td>
<td>output 输出</td>
</tr>
<tr>
<td>encode 编码</td>
<td>decode 解码</td>
</tr>
<tr>
<td>encrypt 加密</td>
<td>decrypt 解密</td>
</tr>
<tr>
<td>compress 压缩</td>
<td>decompress 解压缩</td>
</tr>
<tr>
<td>pack 打包</td>
<td>unpack 解包</td>
</tr>
<tr>
<td>parse 解析</td>
<td>emit 生成</td>
</tr>
<tr>
<td>connect 连接</td>
<td>disconnect 断开</td>
</tr>
<tr>
<td>send 发送</td>
<td>receive 接收</td>
</tr>
<tr>
<td>download 下载</td>
<td>upload 上传</td>
</tr>
<tr>
<td>refresh 刷新</td>
<td>synchronize 同步</td>
</tr>
<tr>
<td>update 更新</td>
<td>revert 复原</td>
</tr>
<tr>
<td>lock 锁定</td>
<td>unlock 解锁</td>
</tr>
<tr>
<td>check out 签出</td>
<td>check in 签入</td>
</tr>
<tr>
<td>submit 提交</td>
<td>commit 交付</td>
</tr>
<tr>
<td>push 推</td>
<td>pull 拉</td>
</tr>
<tr>
<td>expand 展开</td>
<td>collapse 折叠</td>
</tr>
<tr>
<td>begin 起始</td>
<td>end 结束</td>
</tr>
<tr>
<td>start 开始</td>
<td>finish 完成</td>
</tr>
<tr>
<td>enter 进入</td>
<td>exit 退出</td>
</tr>
<tr>
<td>abort 放弃</td>
<td>quit 离开</td>
</tr>
<tr>
<td>obsolete 废弃</td>
<td>depreciate 废旧</td>
</tr>
<tr>
<td>collect 收集</td>
<td>aggregate 聚集</td>
</tr>
</tbody>
</table>
<h3 id="_10-获取必须的参数"> 10. 获取必须的参数</h3>
<table>
<thead>
<tr>
<th>getRequiredProperty</th>
<th>获取必须的参数,否则报错,该方法一般都要抛出异常</th>
</tr>
</thead>
<tbody>
<tr>
<td>getProperty</td>
<td>非必须参数,可以返回null，不报错，调用方自行判断处理逻辑</td>
</tr>
</tbody>
</table>
<h3 id="_11-获取数据并对数据进行某种处理"> 11. 获取数据并对数据进行某种处理</h3>
<p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p>
<table>
<thead>
<tr>
<th>位置</th>
<th>单词</th>
<th>意义</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>Prefix</td>
<td>resolve</td>
<td>解决某些问题,比如对文本占位符进行填充,并获取到填充后的值</td>
<td>resolvePlaceholders</td>
</tr>
<tr>
<td>Suffix</td>
<td>Placeholders</td>
<td>占位符相关命名</td>
<td>resolvePlaceholders</td>
</tr>
</tbody>
</table>
<h2 id="三、方法编程建议"> 三、方法编程建议</h2>
<h3 id="_1-方法复杂度"> 1. 方法复杂度</h3>
<p>凡是逻辑判断语句均为复杂度。当一个方法中出现了大于等于10个复杂度。建议根据</p>
<p>方法实现进行业务抽离。两个建议点(1. 方法单一职责 2. 方法可重复利用 3. 是否能用策略模式或者命令模式)</p>
<h3 id="_2-方法长度及宽度"> 2.方法长度及宽度</h3>
<p>长度: 方法的长度建议控制在80-120行以内。满足一屏可以放下。
宽度: 当方法超过3个及以上入参,建议使用对象封装(对象容易后期扩展,且不会出现眼花缭乱现象)</p>
<h3 id="_3-关注方法优化编辑器提示"> 3.关注方法优化编辑器提示</h3>
<p>减少出现黄色警告⚠️, 最好不要出现警告。编辑器的警告都是优化点,需要在编程时候考虑进去。</p>
<p>eg: 性能优化、命名不规范、重复代码</p>
<p><img src="https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/a/21643544635/2678603850/7fbfc8ab-22ca-4f92-be04-31c4d1b704e3.png" alt="img" loading="lazy"></p>
<h3 id="_4-方法重复代码"> 4.方法重复代码</h3>
<p>贫血模型的标志性问题</p>
<p>重复代码编辑器会提出警告,此种现象,强烈建议不要出现</p>
<h3 id="_5-方法注释"> 5. 方法注释</h3>
<p>注释是必须要做的(先写注释在做实现)，重在设计。</p>
<p>代码是公司财产, 要对自己对公司对后人负责,先写注释再做实现。</p>
<h2 id="四、项目依赖模型"> 四、项目依赖模型</h2>
<h3 id="_1-领域设计的认识"> 1. 领域设计的认识</h3>
<p>领域划分,用另外一个词形容也非常的合适,就是业务模块化。所有能力都进行能力化抽象,形成模块,形成领域。 当遇到新的业务逻辑,底层的数据结构和数据关系肯定也是一样的。那么就可以像堆积木一样,根据这些模块快速的组装成新的业务逻辑。快速的实现业务的迭代和升级。</p>
<p>关于这个问题,需要结合自己的业务系统来进行抽象和设计。</p>
<p>设计核心: 用面向对象的设计思想对业务进行解耦来做到领域划分。</p>
<h3 id="_2-层次划分"> 2. 层次划分</h3>
<h4 id="基础层-外部调用-db操作"> 基础层(外部调用,db操作)</h4>
<p>注意: 基础层只做适配不做业务</p>
<ul>
<li>db操作以dao结尾</li>
<li>外部调用以Client(Http协议)/Instruction(Rpc协议)
<ul>
<li>改层仅仅做数据适配,不做业务处理。</li>
</ul>
</li>
</ul>
<h4 id="领域层-偏向领域的业务逻辑"> 领域层(偏向领域的业务逻辑)</h4>
<p>以Manager</p>
<h4 id="业务层-对领域层的业务编排"> 业务层(对领域层的业务编排)</h4>
<p>以Service结尾</p>
<h4 id="外观层-可以提供能力-可以提供视图-。"> 外观层(可以提供能力,可以提供视图)。</h4>
<p>以Resource、Facade结尾</p>
<p>有一个完善的领域层,可以方便快速便捷的对业务进行扩展。与其对立的就是贫血模型。没有领域层只有业务层,业务逻辑都堆积在业务层。典型的面向过程设计。</p>
<p><img src="https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/a/21643544635/2678603850/8be6e99c-f5e9-4a8a-bce4-85f5aa3717e7.png" alt="img" loading="lazy"></p>
<h3 id="_3-层次依赖模型"> 3. 层次依赖模型</h3>
<p>maven多模块应用和单模块应用通用。</p>
<p>一定要控制项目的依赖情况。</p>
<p>①service只能出现领域层的依赖, 领域层只能存在dao层和第三方服务层。</p>
<p>②各个层代码不能平行调用(出现平行调用逻辑,要抽象出领域层来封装)。</p>
<p><img src="https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/a/21643544635/2678603850/c08a058d-8c81-45c4-bdc4-82d666a304f7.png" alt="img" loading="lazy"></p>
<p>具体代码体现就是</p>
<ul>
<li>以Service命名的类,里面只能存在Manager</li>
<li>以Manager命名的类,里面只能存在Dao和Client(Http协议)/Instruction(Rpc协议)封装的第三方调用</li>
<li>以Dao命名的类是对数据库的操作</li>
<li>以Client(Http协议)/Instruction(Rpc协议)命名的类,作为适配层与第三方API进行交互封装</li>
</ul>
<h2 id="五、设计模式六大原则"> 五、设计模式六大原则</h2>
<p>代码编程时候要向以下这6大原则,进行向其靠拢。</p>
<h3 id="_1-开闭原则"> 1. 开闭原则</h3>
<p>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</p>
<p><strong>代码设计建议</strong></p>
<p>用抽象构建框架，用实现扩展细节因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。</p>
<h3 id="_2-单一职责"> 2. 单一职责</h3>
<p>不要存在多于一个导致类变更的原因通俗的说，即一个类只负责一项职责。</p>
<p><strong>代码设计建议</strong></p>
<p>在具体方法编写或者类编写时候,类编写时候业务要单一,方法编写时候实现要单一</p>
<p>反例:</p>
<p>UserService 类中提供了获取商品信息的接口</p>
<p>setUserName(String name)方法的时候,对name的值进行了二次处理。</p>
<h3 id="_3-里氏替换原则"> 3. <strong>里氏替换原则</strong></h3>
<p>所有引用基类的地方必须能透明地使用其子类的对象。</p>
<p><strong>代码设计建议</strong></p>
<p>面向接口编程, 子类能透明替换父类。</p>
<h3 id="_4-依赖倒置原则"> 4. <strong>依赖倒置原则</strong></h3>
<p>高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。</p>
<p><strong>代码设计建议</strong></p>
<p>要根据接口或者抽象去设计,不要依赖于细节,eg.项目中要换数据库,不用重新写底层的数据库代码. 就是使用了hibernate一样,替换方言就好了,因为hibernate是根据接口设计的,不同数据库有不同的实现,可以直接使用. eg2: 我生病了要去买药,如果A药铺,没有我就用B药铺买. 因为他们都是药铺,都有一样的功能,可以友好的替换</p>
<h3 id="_5-接口隔离原则"> <strong>5. 接口隔离原则</strong></h3>
<p>客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。</p>
<p><strong>代码设计建议</strong></p>
<p>保持最小的责任。</p>
<p>eg: 接口ConfigurableApplicationContext实现了Lifecycle和Closeable接口。他们其中每个里面定义的接口都很少,为什么不定义到一起呢?</p>
<p>首先第一责任清晰单一,第二做到接口隔离。</p>
<p>当某一个方法只用到生命周期的方法,那么方法就可以写成。</p>
<p>public void stop(Lifecycle lifecycle); 调用时候用-&gt;public void stop(new ConfigurableApplicationContext());</p>
<p>public void close(Closeable closeable); 调用时候用-&gt;public void close(new ConfigurableApplicationContext());</p>
<p>stop里面的实现就只能调用Lifecycle里面的方法,而不能调用ConfigurableApplicationContext里面的方法。从而来达到接口隔离原则</p>
<h3 id="_6-迪米特法则"> 6. <strong>迪米特法则</strong></h3>
<p>一个对象应该对其他对象保持最少的了解。</p>
<p><strong>代码设计建议</strong></p>
<p>减少类与类之间的关系,接口隔离也可以做到。</p>
<h2 id="六、版本迭代"> 六、版本迭代</h2>
<p>master分支版本后缀 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6833em;"></span><span><span>大版本号</span></span><span>.</span></span></span></span>{0进位}.${迭代版本号}.RELEASE</p>
<p>test分支版本号 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6833em;"></span><span><span>大版本号</span></span><span>.</span></span></span></span>{0进位}.${迭代版本号}.SNAPSHOP</p>
<p>迭代版本可追踪，避免出现jar包覆盖无法追踪</p>
<p>迭代版本升级,必须升级迭代版本号。避免出现jar包覆盖无法追踪</p>
<h3 id="_1-大版本定义"> 1. 大版本定义</h3>
<p>APP1.0  APP2.0 APP3.0</p>
<h3 id="_2-迭代版本号"> 2. 迭代版本号</h3>
<p>APP1.0.1  APP1.0版本的第一个迭代</p>
<p>APP1.1.0  APP1.0版本的第十个迭代</p>
<p>APP2.0.2  APP2.0版本的第二个迭代</p>
<p>APP2.1.0  APP2.0版本的第十个迭代</p>
<h2 id="七、代码格式化"> 七、代码格式化</h2>
<p>统一格式化模板,解决多人共同开发场景,代码格式化导致的git提交冲突问题</p>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589360371000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Join大法</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/join/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/databases/sql/join/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1648086269000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">没有规矩不成方圆</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/design/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/design/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1598165820000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">领域驱动模型的思考与认知</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/design/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E8%AE%A4%E7%9F%A5/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/design/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E8%AE%A4%E7%9F%A5/"/>
    <updated>2021-12-21T05:46:37.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>本项目是基于小编的开发经验与心得,分享小编关于领域模型的理解, 个人愚见仅供参考,希望能为渴望进步的你提供帮助。如果你感到有用对你有帮助,请不要吝啬你的关注,求关注,求转发。
文章有三个议题，什么是领域模型,为什么需要领域模型设计,以及领域驱动的项目结构是什么样的?</p>
</blockquote>
<p><img src="https://img.springlearn.cn/blog/learn_1594392162000.png" alt="" loading="lazy"></p>
<h2 id="一、领域驱动模型是什么"> 一、领域驱动模型是什么？</h2>
<p>如果你是第一次听到这个词,嗯,多么恐怖的一件事情呀! 什么是领域模型,一种新的技术吗? 领域模型到底有什么用呢?
为什么那么多大佬都在讲领域模型。网络上充斥着着各种高端的解释,各种高大上的名字,各种复杂的系统设计图。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1595078884000.png" alt="" loading="lazy"></p>
<p>fuck !
身边总是有这样一群人的出现。总喜欢中文里加载者英文,英文中夹杂着中文,仿佛这样能使他们更加自信一样。把你讲懵了,他就自信了。 very fuck !</p>
<p>身为技术人,尽量想把一种事情给将清楚,说明白。而不是用各种抽象的晦涩难懂但看上去高大上的名词给解释。千万不要怕,下面我们通过先做一点小小的铺垫。最后在总结领域模型的理解。</p>
<h3 id="_1-贫血模型"> 1. 贫血模型</h3>
<p>在讲清楚领域模型之前我们先来看引入一个词汇 <strong>“贫血模型”</strong> ，读到这里不要怕。只是一个词汇而已。是对我们平时的项目代码结构的一个形容词。相信无论面前的你
是一个大牛，还是一个刚入行的小菜鸟。你都一定写过这样的代码:</p>
<ul>
<li>dao层: 负责持久化</li>
<li>model层: 数据模型</li>
<li>service层: 服务层</li>
<li>web层: 提供对UI层的访问</li>
</ul>
<p>嗯。这就是一个典型的贫血模型, 哇,真的好形象,这是谁想出来的词汇,真想给他说一句 fuck you!  但是，但是，你还有更好的词汇来形容这种项目结构吗?
所谓贫血模型是指使用的领域对象中只有 <code>setter</code> 和 <code>getter</code> 方法（POJO），所有的业务逻辑都不包含在领域对象中而是放在业务逻辑层。</p>
<p>往往我们入行的初期我们都是在这样的项目结构中进行编程的,那个时候我们的业务往往都是简单的,对于那个时候的我们来说,这样的代码结构真是太好用了。清晰易懂。甚至想说一声 i love code !!!</p>
<p>这个时期,我们的关注点往往不是业务的复杂度,而是技术的使用,语法的使用。以及代码是否能编译通过。所以下面我们来总结一下贫血模型的优点。</p>
<h3 id="_2-贫血模型优点"> 2. 贫血模型优点</h3>
<ol>
<li>被许多程序员所掌握，对于刚入行的同学来说，这种模型很自然很舒服，典型的MVC结构</li>
<li>它非常简单，对于并不复杂的业务，它工作得很好，开发起来非常迅速。它似乎也不需要对领域的充分了解，只要给出要实现功能的每一个步骤，就能实现它。</li>
<li>事务边界相当清楚，一般来说service的每个方法都可以看成一个事务。</li>
</ol>
<h3 id="_3-贫血模型缺点"> 3. 贫血模型缺点</h3>
<p>随着发际线推移,随着历史的变迁,随着候鸟的迁徙。不知不觉我们的业务越来越复杂了。万恶的资本家,总想让我们一夜之间开发一个淘宝,一夜之间开发一个百度,一夜之间开发一个QQ。于是我们的service层,不断的
不断的增加。代码量从100行,200行,300行,10000行刹不住车了。终于小张忍不住了,辞职走了。留下了孤独的你独自承受这忧伤。
<img src="https://img.springlearn.cn/blog/learn_1594392402000.png" alt="" loading="lazy"></p>
<p>这样代码是什么意思？ 这样代码能不能删？这行代码怎么没有走？这样代码能不能拆出去? 这样改万一项目上线崩溃了怎么办? 想一想老婆,望一望孩子。哎,算了吧。于是乎service复杂度指数般的递增。这就是贫血模型的缺点。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1594392441000.png" alt="" loading="lazy"></p>
<p><strong>缺点</strong></p>
<ol>
<li>所有的业务都在service中处理，当业越来越复杂时，service会变得越来越庞大，最终难以理解和维护，轻则项目组解散，重则妻离子散。</li>
<li>将所有的业务放在无状态的service中实际上是一个过程化的设计,这与面向对象的编程风格,相向而行。(你转身离开分手说不出来,海鸟跟鱼相爱只是一场意外)</li>
<li>项目代码写的不少,重用的不多。(fuck and fuck = double kill)</li>
</ol>
<h3 id="_4-充血模型"> 4. 充血模型</h3>
<p>前面说我说了贫血模型,这里顺便提一下充血模型,也不要怕,也只是一个吓人的词汇。前面我们理解了贫血模型，那么充血模型，很容易就能理解。
前面我们说贫血模型实体类只有SET GET方法，逻辑基本在服务层实现。而**充血模型它的实体类里不但有状态，还有行为，即属性和方法都有。它的Service层很薄。**显然者不符合MVC的思想,因为充血模型中model中不仅有数据,还有状态。维护起来非常麻烦。</p>
<h3 id="_5-领域驱动总结"> 5. 领域驱动总结</h3>
<p>针对贫血模型的service层非常复杂臃肿的缺点,领域模型的概念越来越流行起来,至少在一些很多的大公司中,非常盛行。领域模型的概念不仅可以重新去设计service,同时也在微服务设计中有重要的意义。
所以说领域模型其实就是要解决service越来越臃肿的一种设计思想。主要就是对service中的复杂的业务逻辑进行拆分,根据领域来进行拆分。用面向对象的思想去重新设计service。
有人给他起了一个高大上的词汇: 领域模型。</p>
<p>所以最后小编想用一大白话来总结一下领域模型。</p>
<p><strong>领域模型就是要用面向对象的思想去重新设计充斥着复杂业务逻辑的service层。</strong></p>
<h2 id="二、为什么要进行领域模型设计"> 二、为什么要进行领域模型设计?</h2>
<p>相信看到这里的你,一定对领域模型有一个自己的认识。为什么要进行领域模型设计? 相信自己心里一定有一个自己的判断了。贫血模型的项目结构, service层无可避免的非常的臃肿，臃肿到一个方法可能深不见底。对于业务老油条，可能还凑合能看成，<br>
假如你是一个新的同学,当你看到这样的代码一定是崩溃的，假如说注释也没有,那你内心更是崩溃的。假如说这是一个很庞大的系统,很复杂的业务流程,这就更不用说了。
<img src="https://img.springlearn.cn/blog/learn_1594478376000.png" alt="" loading="lazy"></p>
<p>如果读到这里,你还是对领域驱动设计感到迷茫，那么就其实这个标题也可以这样讲: <strong>我们如何对臃肿的service进行面向对象的设计。设计的过程就是对service层的代码进行领域设计。</strong><br>
而我们之所以这样做的目的。</p>
<ol>
<li>为了快乐的coding</li>
<li>为了业务系统的稳定</li>
<li>为了业务更快的迭代升级。</li>
</ol>
<p>当然这一切的前提是你对业务有一个全局的认识,有一个前瞻性的判断,否则也设计不出来,真正适合自身系统的领域驱动模型。</p>
<h2 id="三、领域驱动的项目结构是什么样的"> 三、领域驱动的项目结构是什么样的?</h2>
<p>**一千个人眼里有一千个哈姆雷特,没有最好的项目结构,只有最适合自己的业务系统。**本文只是小编对领域驱动的模块的思考和认识。
仅供参考,希望对你有所启示和引导。</p>
<h3 id="_1-领域划分-模块化建造"> 1. 领域划分|模块化建造</h3>
<p><img src="https://img.springlearn.cn/blog/learn_1594574191000.png" alt="" loading="lazy"></p>
<p>领域划分,小编感觉用另外一个词形容也非常的合适,就是业务模块化。所有能力都进行能力化抽象,形成模块,形成领域。 当遇到新的业务逻辑,底层的数据结构和数据关系肯定也是一样的。那么就可以像堆积木一样,根据这些模块快速的组装成新的业务逻辑。快速的实现业务的迭代和升级。
关于这个问题,需要结合自己的业务系统来进行抽象和设计。而小编的能做的就是,提醒你<strong>模块化设计,领域化设计的重要意义。</strong></p>
<h3 id="_2-项目结构"> 2. 项目结构</h3>
<p>基础层(外部调用,db操作) + 领域层(偏向领域的业务逻辑) + 业务层(对领域层的业务编排) + 外观层(可以提供能力,可以提供视图)。
有一个完善的领域层,可以方便快速便捷的对业务进行扩展。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1595074590000.png" alt="" loading="lazy"></p>
<p>领域层就是模块化设计的积木。丰富的模块化有助于业务扩展。</p>
<p>一定要控制项目的依赖情况。service只能出现领域层的依赖, 领域层只能存在dao层和第三方服务层。各个层代码不能平行调用。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1595069641000.png" alt="" loading="lazy"></p>
<h3 id="_3-编程规范"> 3. 编程规范</h3>
<p>关于项目提出6个注意的点。如果把做项目比作是前线打仗,那么打仗最重要的是战斗成员目标要一致。在目标不一致的情况下一定要进行
充分讨论(项目负责人要做的),说明情况互相妥协指定出统一的项目编程规范。去进行执行。一旦指定不能违背。否则项目质量不保。</p>
<p><strong>项目固然重要,但是作为软件开发工程师,首先要对代码质量做保障。</strong></p>
<p><img src="https://img.springlearn.cn/blog/learn_1595078292000.png" alt="" loading="lazy"></p>
<h3 id="_4-日志设计"> 4. 日志设计</h3>
<p>天下没有完美的项目,任何系统不存在bug是不可能的。想要发现bug并快速定位问题,日志系统的不能缺少的。</p>
<p>日志系统是非常重要的系统, 对系统的监控, 在设计日志系统中,我们需要关注的点</p>
<ol>
<li>日志结构(目的是按照结构解析到日志引擎中)
如果想做日志的搜索平台,一定要进行日志结构化设计,方便被搜索平台的解析。如ELK日志搜索系统。</li>
<li>日志打印降级能力
在遇到大促时候,可以减少不必要的日志打印,要对日志打印做降级的设计</li>
<li>异步输入日志</li>
<li>日志归档</li>
</ol>
<div><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;configuration&gt;
    &lt;!-- 系统日志打印 --&gt;
    &lt;appender name=&quot;logfile&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;File&gt;${logger.logback.logpath}mbp-game-service.log&lt;/File&gt;
        &lt;encoder&gt;
            &lt;Pattern&gt;[%date] [%-5level] %c{40} %line --%mdc{client} [%X{TRACE_LOG_ID}] [%X{dstTraceId}] %msg%n&lt;/Pattern&gt;
            &lt;charset&gt;UTF-8&lt;/charset&gt;
        &lt;/encoder&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;fileNamePattern&gt;${logger.logback.logpath}mbp-game-service.%d{yyyy-MM-dd}.%i.log&lt;/fileNamePattern&gt;
            &lt;maxHistory&gt;30&lt;/maxHistory&gt;
            &lt;TimeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;
                &lt;maxFileSize&gt;512MB&lt;/maxFileSize&gt;
            &lt;/TimeBasedFileNamingAndTriggeringPolicy&gt;
        &lt;/rollingPolicy&gt;
    &lt;/appender&gt;

    &lt;!-- 异步输出 --&gt;
    &lt;appender name=&quot;asyncAppender&quot; class=&quot;ch.qos.logback.classic.AsyncAppender&quot;&gt;
        &lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;
        &lt;discardingThreshold&gt;0&lt;/discardingThreshold&gt;
        &lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;
        &lt;queueSize&gt;1024&lt;/queueSize&gt;
        &lt;!-- 添加附加的appender,最多只能添加一个 --&gt;
        &lt;appender-ref ref=&quot;logfile&quot;/&gt;
    &lt;/appender&gt;


    &lt;!-- 外部jar包 日志级别设置 --&gt;
    &lt;logger level=&quot;${logger.outside.logLevel}&quot; name=&quot;com.ibatis&quot;/&gt;
    &lt;logger level=&quot;${logger.outside.logLevel}&quot; name=&quot;org.springframework&quot;/&gt;
    &lt;logger level=&quot;${logger.outside.logLevel}&quot; name=&quot;java.sql&quot;/&gt;
    &lt;logger level=&quot;${logger.outside.logLevel}&quot; name=&quot;org.apache&quot;/&gt;
    &lt;logger level=&quot;${logger.outside.logLevel}&quot; name=&quot;com.alibaba.dubbo&quot;/&gt;
    &lt;logger level=&quot;${logger.outside.logLevel}&quot; name=&quot;org.I0Itec&quot;/&gt;
    &lt;logger level=&quot;${logger.outside.logLevel}&quot; name=&quot;org.dozer&quot;/&gt;
    &lt;logger level=&quot;${logger.outside.logLevel}&quot; name=&quot;kafka.producer.SyncProducer&quot;/&gt;
    &lt;logger level=&quot;${logger.kafka.outside.logLevel}&quot; name=&quot;org.apache.kafka&quot;/&gt;
    &lt;logger level=&quot;${logger.kafka.outside.logLevel}&quot; name=&quot;org.springframework.kafka&quot;/&gt;

    &lt;!-- 输出到文件，可定义更多的 Appender --&gt;
    &lt;root level=&quot;${logger.logLevel}&quot;&gt;
        &lt;appender-ref ref=&quot;asyncAppender&quot;/&gt;
    &lt;/root&gt;

&lt;/configuration&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br></div></div><p>最后求关注,求订阅,谢谢你的阅读!</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589360371000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">中文文档写作规范</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/design/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/design/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83/"/>
    <updated>2021-12-25T09:26:08.000Z</updated>
    <content type="html"><![CDATA[<div><p>中文技术文档的写作规范。</p>
<p>本篇文章参考与阮一峰大佬的网络日志, 总结比较细致。非常具有借鉴意义, 欢迎大家进行学习。</p>
<ul>
<li>文章参考地址: <a href="https://github.com/ruanyf/document-style-guide" target="_blank" rel="noopener noreferrer">阮一峰的网络日志</a></li>
</ul>
</div>
<h1 id="目录"> 目录</h1>
<ol>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
</ol>
<h2 id="一、标题"> 一、标题</h2>
<h3 id="层级"> 层级</h3>
<p>标题分为四级。</p>
<ul>
<li>一级标题：文章的标题</li>
<li>二级标题：文章主要部分的大标题</li>
<li>三级标题：二级标题下面一级的小标题</li>
<li>四级标题：三级标题下面某一方面的小标题</li>
</ul>
<p>下面是示例。</p>
<div><pre><code><span><span>#</span> 一级标题</span>

<span><span>##</span> 二级标题</span>

<span><span>###</span> 三级标题</span>

<span><span>####</span> 四级标题</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="原则"> 原则</h3>
<p>（1）一级标题下，不能直接出现三级标题。</p>
<p>示例：下面的文章结构，缺少二级标题。</p>
<div><pre><code><span><span>#</span> 一级标题</span>

<span><span>###</span> 三级标题</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（2）标题要避免孤立编号（即同级标题只有一个）。</p>
<p>示例：下面的文章结构，<code>二级标题 A</code>只包含一个三级标题，完全可以省略<code>三级标题 A</code>。</p>
<div><pre><code><span><span>##</span> 二级标题 A</span>

<span><span>###</span> 三级标题 A</span>

<span><span>##</span> 二级标题 B</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>（3）下级标题不重复上一级标题的名字。</p>
<p>示例：下面的文章结构，二级标题与下属的三级标题同名，建议避免。</p>
<div><pre><code><span><span>##</span> 概述</span>

<span><span>###</span> 概述</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（4）谨慎使用四级标题，尽量避免出现，保持层级的简单，防止出现过于复杂的章节。</p>
<p>如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。</p>
<p>示例：下面的结构二要好于结构一。后者适用的场景，主要是较长篇幅的内容。</p>
<div><pre><code>结构一

<span><span>###</span> 三级标题</span>

<span><span>####</span> 四级标题 A</span>

<span><span>####</span> 四级标题 B</span>

<span><span>####</span> 四级标题 C</span>

结构二

<span><span>###</span> 三级标题</span>

<span><span>**</span><span>（1）A</span><span>**</span></span>

<span><span>**</span><span>（2）B</span><span>**</span></span>

<span><span>**</span><span>（3）C</span><span>**</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="二、文本"> 二、文本</h2>
<h3 id="字间距"> 字间距</h3>
<p>（1）全角中文字符与半角英文字符之间，应有一个半角空格。</p>
<div><pre><code>错误：本文介绍如何快速启动Windows系统。

正确：本文介绍如何快速启动 Windows 系统。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（2）全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。</p>
<div><pre><code>正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。

正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>半角的百分号，视同阿拉伯数字。</p>
<div><pre><code>正确：今年我国经济增长率是6.5%。

正确：今年我国经济增长率是 6.5%。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（3）英文单位若不翻译，单位前的阿拉伯数字与单位间不留空格。</p>
<div><pre><code>错误：一部容量为 16 GB 的智能手机

正确：一部容量为 16GB 的智能手机
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（4）半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。</p>
<div><pre><code>错误：他的电脑是 MacBook Air 。

正确：他的电脑是 MacBook Air。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="句子"> 句子</h3>
<p>（1）避免使用长句。</p>
<p>不包含任何标点符号的单个句子，或者以逗号分隔的句子构件，长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，任何情况下都不能接受。</p>
<div><pre><code>错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。

正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>逗号分割的长句，总长度不应该超过 100 字或者正文的 3 行。</p>
<p>（2）尽量使用简单句和并列句，避免使用复合句。</p>
<div><pre><code>并列句：他昨天生病了，没有参加会议。

复合句：那个昨天生病的人没有参加会议。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（3）同样一个意思，尽量使用肯定句表达，不使用否定句表达。</p>
<div><pre><code>错误：请确认没有接通装置的电源。

正确：请确认装置的电源已关闭。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（4）避免使用双重否定句。</p>
<div><pre><code>错误：没有删除权限的用户，不能删除此文件。

正确：用户必须拥有删除权限，才能删除此文件。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="写作风格"> 写作风格</h3>
<p>（1）尽量不使用被动语态，改为使用主动语态。</p>
<div><pre><code>错误：假如此软件尚未被安装，

正确：假如尚未安装这个软件，
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（2）不使用非正式的语言风格。</p>
<div><pre><code>错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！

正确：无法参加本次活动，我深感遗憾。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（3）不使用冷僻、生造或者文言文的词语，而要使用现代汉语的常用表达方式。</p>
<div><pre><code>错误：这是唯二的快速启动的方法。

正确：这是仅有的两种快速启动的方法。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（4）用对“的”、“地”、“得”。</p>
<div><pre><code>她露出了开心的笑容。
（形容词＋的＋名词）

她开心地笑了。
（副词＋地＋动词）

她笑得很开心。
（动词＋得＋副词）
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>（5）使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。</p>
<div><pre><code>错误：从管理系统可以监视中继系统和受其直接控制的分配系统。

正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（6）名词前不要使用过多的形容词。</p>
<div><pre><code>错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。

正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="英文处理"> 英文处理</h3>
<p>（1）英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。</p>
<div><pre><code>英文：⋯information stored in random access memory (RAMs)⋯

中文：……存储在随机存取存储器（RAM）里的信息……
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（2）外文缩写可以使用半角圆点(<code>.</code>)表示缩写。</p>
<div><pre><code>U.S.A.
Apple, Inc.
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>（3）表示中文时，英文省略号（<code>⋯</code>）应改为中文省略号（<code>……</code>）。</p>
<div><pre><code>英文：5 minutes later⋯

中文：5 分钟过去了……
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（4）英文书名或电影名改用中文表达时，双引号应改为书名号。</p>
<div><pre><code>英文：He published an article entitled &quot;The Future of the Aviation&quot;.

中文：他发表了一篇名为《航空业的未来》的文章。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（5）第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。</p>
<div><pre><code>IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。
</code></pre>
<div><span>1</span><br></div></div><p>（6）专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。</p>
<div><pre><code>“American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。

“online transaction processing”（在线事务处理）不是专有名词，不应大写。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="三、段落"> 三、段落</h2>
<h3 id="原则-2"> 原则</h3>
<ul>
<li>一个段落只能有一个主题，或一个中心句子。</li>
<li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。</li>
<li>一个段落的长度不能超过七行，最佳段落长度小于等于四行。</li>
<li>段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。</li>
<li>段落之间使用一个空行隔开。</li>
<li>段落开头不要留出空白字符。</li>
</ul>
<h3 id="引用"> 引用</h3>
<p>引用第三方内容时，应注明出处。</p>
<div><pre><code>One man’s constant is another man’s variable. — Alan Perlis
</code></pre>
<div><span>1</span><br></div></div><p>如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。</p>
<div><pre><code>本文转载自 WikiQuote
</code></pre>
<div><span>1</span><br></div></div><p>使用外部图片时，必须在图片下方或文末标明来源。</p>
<div><pre><code>本文部分图片来自 Wikipedia
</code></pre>
<div><span>1</span><br></div></div><h2 id="四、数值"> 四、数值</h2>
<h3 id="半角数字"> 半角数字</h3>
<p>阿拉伯数字一律使用半角形式，不得使用全角形式。</p>
<div><pre><code>错误： 这件商品的价格是１０００元。

正确： 这件商品的价格是 1000 元。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="千分号"> 千分号</h3>
<p>数值为千位以上，应添加千分号（半角逗号）。</p>
<div><pre><code>XXX 公司的实收资本为 ￥1,258,000 人民币。
</code></pre>
<div><span>1</span><br></div></div><p>对于 4 位以下的数值，千分号是选用的，比如<code>1000</code>和<code>1,000</code>都可以接受。对于 4 位以上的数值，千分号是必须的。</p>
<h3 id="货币"> 货币</h3>
<p>货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。</p>
<div><pre><code>$1,000
1,000 美元
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>英文的货币名称，建议参考国际标准 <a href="https://en.wikipedia.org/wiki/ISO_4217" target="_blank" rel="noopener noreferrer">ISO 4217</a>。</p>
<h3 id="数值范围"> 数值范围</h3>
<p>表示数值范围时，用<code>～</code>或<code>——</code>连接。参见《标点符号》一节的“连接号”部分。</p>
<p>带有单位或百分号时，两个数字建议都要加上单位或百分号。</p>
<div><pre><code>132kg～234kg

67%～89%
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="变化程度的表示法"> 变化程度的表示法</h3>
<p>数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。</p>
<div><pre><code>增加到过去的两倍
（过去为一，现在为二）

增加了两倍
（过去为一，现在为三）
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。</p>
<div><pre><code>降低到百分之八十
（定额是一百，现在是八十）

降低了百分之八十
（原来是一百，现在是二十）
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>不能用“降低 N 倍”或“减少 N 倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。</p>
<h2 id="五、标点符号"> 五、标点符号</h2>
<h3 id="原则-3"> 原则</h3>
<p>（1）中文语句的标点符号，均应该采取全角符号，这样可以与全角文字保持视觉的一致。</p>
<p>（2）如果整句为英文，则该句使用英文/半角标点。</p>
<p>（3）句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。</p>
<h3 id="句号"> 句号</h3>
<p>（1）中文语句的结尾处应该用全角句号（<code>。</code>）。</p>
<p>（2）句子末尾用括号加注时，句号应在括号之外。</p>
<div><pre><code>错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）

正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="逗号"> 逗号</h3>
<p>（1）逗号（<code>，</code>）表示句子内部的一般性停顿。</p>
<p>（2）注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。</p>
<h3 id="顿号"> 顿号</h3>
<p>（1）句子内部的并列词，应该用全角顿号(<code>、</code>) 分隔，而不用逗号，即使并列词是英语也是如此。</p>
<div><pre><code>错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。

正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（2）英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔。</p>
<div><pre><code>例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components.
</code></pre>
<div><span>1</span><br></div></div><h3 id="分号"> 分号</h3>
<p>（1）分号（<code>；</code>）表示复句内部并列分句之间的停顿。</p>
<h3 id="引号"> 引号</h3>
<p>（1）引用时，应该使用全角双引号（<code>“ ”</code>），注意前后双引号不同。</p>
<div><pre><code>例句：许多人都认为客户服务的核心是“友好”和“专业”。
</code></pre>
<div><span>1</span><br></div></div><p>（2）引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>），注意前后单引号不同。</p>
<div><pre><code>例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”
</code></pre>
<div><span>1</span><br></div></div><h3 id="括号"> 括号</h3>
<p>（1）补充说明时，使用全角圆括号（<code>（）</code>），括号前后不加空格。</p>
<div><pre><code>例句：请确认所有的连接（电缆和接插件）均安装牢固。
</code></pre>
<div><span>1</span><br></div></div><p>（2）几种括号的中英文名称。</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">英文</th>
<th style="text-align:right">中文</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>{ }</code></td>
<td style="text-align:center">braces 或 curly brackets</td>
<td style="text-align:right">大括号</td>
</tr>
<tr>
<td><code>[ ]</code></td>
<td style="text-align:center">square brackets 或 brackets</td>
<td style="text-align:right">方括号</td>
</tr>
<tr>
<td><code>&lt; &gt;</code></td>
<td style="text-align:center">angled brackets</td>
<td style="text-align:right">尖括号</td>
</tr>
<tr>
<td><code>( )</code></td>
<td style="text-align:center">parentheses</td>
<td style="text-align:right">圆括号</td>
</tr>
</tbody>
</table>
<h3 id="冒号"> 冒号</h3>
<p>（1）全角冒号（<code>：</code>）常用在需要解释的词语后边，引出解释和说明。</p>
<div><pre><code>例句：请确认以下几项内容：时间、地点、活动名称，以及来宾数量。
</code></pre>
<div><span>1</span><br></div></div><p>（2）表示时间时，应使用半角冒号（<code>:</code>）。</p>
<div><pre><code>例句：早上 8:00
</code></pre>
<div><span>1</span><br></div></div><h3 id="省略号"> 省略号</h3>
<p>（1）省略号（<code>……</code>）表示语句未完、或者语气的不连续。</p>
<p>（2）省略号占两个汉字空间、包含六个省略点，不要使用<code>。。。</code>或<code>...</code>等非标准形式。</p>
<p>（3）省略号不应与“等”这个词一起使用。</p>
<div><pre><code>错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。

正确：我们为会餐准备了各色水果，有香蕉、苹果、梨……

正确：我们为会餐准备了香蕉、苹果、梨等各色水果。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="感叹号"> 感叹号</h3>
<p>（1）应该使用平静的语气叙述，尽量避免使用感叹号（<code>！</code>）。</p>
<p>（2）不得多个感叹号连用，比如<code>！！</code>和<code>!!!</code>。</p>
<h3 id="破折号"> 破折号</h3>
<p>（1）破折号<code>————</code>一般用于进一步解释。</p>
<p>（2）破折号应占两个汉字的位置。如果破折号本身只占一个汉字的位置，那么前后应该留出一个半角空格。</p>
<div><pre><code>例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。

例句：直觉 —— 尽管它并不总是可靠的 —— 告诉我，这事可能出了些问题。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="连接号"> 连接号</h3>
<p>（1）连接号用于连接两个类似的词。</p>
<p>（2）以下场合应该使用直线连接号（<code>-</code>），占一个半角字符的位置。</p>
<ul>
<li>两个名词的复合</li>
<li>图表编号</li>
</ul>
<div><pre><code>例句：氧化-还原反应

例句：图 1-1
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>（3）数值范围（例如日期、时间或数字）应该使用波浪连接号（<code>～</code>），占一个全角字符的位置。</p>
<div><pre><code>例句：2009 年～2011 年
</code></pre>
<div><span>1</span><br></div></div><p>注意，波浪连接号前后两个值都应该加上单位。</p>
<p>（4）波浪连接号也可以用汉字“至”代替。</p>
<div><pre><code>例句：周围温度：-20°C 至 -10°C
</code></pre>
<div><span>1</span><br></div></div><h2 id="六、文档体系"> 六、文档体系</h2>
<h3 id="结构"> 结构</h3>
<p>软件手册是一部完整的书，建议采用下面的结构。</p>
<ul>
<li><strong>简介</strong>（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明</li>
<li><strong>快速上手</strong>（Getting Started）：[可选] [文件] 如何最快速地使用产品</li>
<li><strong>入门篇</strong>（Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程
<ul>
<li><strong>环境准备</strong>（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件</li>
<li><strong>安装</strong>（Installation）：[可选] [文件] 软件的安装方法</li>
<li><strong>设置</strong>（Configuration）：[必备] [文件] 软件的设置</li>
</ul>
</li>
<li><strong>进阶篇</strong>（Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程</li>
<li><strong>API</strong>（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍</li>
<li><strong>FAQ</strong>：[可选] [文件] 常见问题解答</li>
<li><strong>附录</strong>（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容
<ul>
<li><strong>Glossary</strong>：[可选] [文件] 名词解释</li>
<li><strong>Recipes</strong>：[可选] [文件] 最佳实践</li>
<li><strong>Troubleshooting</strong>：[可选] [文件] 故障处理</li>
<li><strong>ChangeLog</strong>：[可选] [文件] 版本说明</li>
<li><strong>Feedback</strong>：[可选] [文件] 反馈方式</li>
</ul>
</li>
</ul>
<p>下面是两个真实范例，可参考。</p>
<ul>
<li><a href="http://redux.js.org/index.html" target="_blank" rel="noopener noreferrer">Redux 手册</a></li>
<li><a href="http://flight-manual.atom.io/" target="_blank" rel="noopener noreferrer">Atom 手册</a></li>
</ul>
<h3 id="文件名"> 文件名</h3>
<p>文档的文件名不得含有空格。</p>
<p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p>
<div><pre><code>错误： 名词解释.md

正确： glossary.md
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>文件名建议只使用小写字母，不使用大写字母。</p>
<div><pre><code>错误：TroubleShooting.md

正确：troubleshooting.md 
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>为了醒目，某些说明文件的文件名，可以使用大写字母，比如<code>README</code>、<code>LICENSE</code>。</p>
<p>文件名包含多个单词时，单词之间建议使用半角的连词线（<code>-</code>）分隔。</p>
<div><pre><code>不佳：advanced_usage.md

正确：advanced-usage.md
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="七、参考链接"> 七、参考链接</h2>
<ul>
<li><a href="http://wenku.baidu.com/view/23cc1a6527d3240c8447efbf.html" target="_blank" rel="noopener noreferrer">产品手册中文写作规范</a>, by 华为</li>
<li><a href="http://guide.daocloud.io/dcs/%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83%E5%92%8C%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83-9153803.html" target="_blank" rel="noopener noreferrer">写作规范和格式规范</a>, by DaoCloud</li>
<li><a href="http://www.hitachi-tc.co.jp/company/thesis/thesis.pdf" target="_blank" rel="noopener noreferrer">技术写作技巧在日汉翻译中的应用</a>, by 刘方</li>
<li><a href="https://www.lengoo.de/documents/styleguides/lengoo_styleguide_ZH.pdf" target="_blank" rel="noopener noreferrer">简体中文规范指南</a>, by lengoo</li>
<li><a href="https://open.leancloud.cn/copywriting-style-guide.html" target="_blank" rel="noopener noreferrer">文档风格指南</a>, by LeanCloud</li>
<li><a href="https://docs.google.com/document/d/1R8lMCPf6zCD5KEA8ekZ5knK77iw9J-vJ6vEopPemqZM/edit" target="_blank" rel="noopener noreferrer">豌豆荚文案风格指南</a>, by 豌豆荚</li>
<li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="noopener noreferrer">中文文案排版指北</a>, by sparanoid</li>
<li><a href="http://w3c.github.io/clreq/" target="_blank" rel="noopener noreferrer">中文排版需求</a>, by W3C</li>
<li><a href="http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html" target="_blank" rel="noopener noreferrer">为什么文件名要小写？</a>, by 阮一峰</li>
<li><a href="https://developers.google.com/style/" target="_blank" rel="noopener noreferrer">Google Developer Documentation Style Guide</a>, by Google</li>
<li><a href="http://www.moe.gov.cn/ewebeditor/uploadfile/2015/01/13/20150113091154536.pdf" target="_blank" rel="noopener noreferrer">出版物上数字用法的规定（国家标准GBT15835－2011）</a></li>
<li><a href="https://baike.baidu.com/item/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E5%9B%BD%E5%AE%B6%E6%A0%87%E5%87%86%E5%87%BA%E7%89%88%E7%89%A9%E6%95%B0%E5%AD%97%E7%94%A8%E6%B3%95" target="_blank" rel="noopener noreferrer">中华人民共和国国家标准出版物数字用法</a></li>
</ul>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">分布式服务</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/"/>
    <updated>2022-05-22T16:24:55.000Z</updated>
    <content type="html"><![CDATA[<Djt/>
<p><strong>本系列文章不讲具体的微服务框架, 只<code>研究其中的实现思路</code>。会从 <code>Spring cloud</code> 和 <code>double</code> 等框架中举例。
从而来了解微服务架构的设计思路。</strong></p>
<h3 id="什么是微服务"> 什么是微服务？</h3>
<p>微服务是一种现代的软件方法，应用程序代码以小的、可管理的部分交付，独立于其他部分。</p>
<h3 id="为什么要构建微服务"> 为什么要构建微服务？</h3>
<p>它们的小规模和相对隔离可以带来许多额外的好处，例如更容易维护、提高生产力、更大的容错性、更好的业务一致性等等。</p>
<p><img src="https://spring.io/images/diagram-microservices-88e01c7d34c688cb49556435c130d352.svg" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="分布式"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-08T04:06:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第10篇:分布式事务处理</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/"/>
    <updated>2022-05-22T16:24:55.000Z</updated>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="分布式"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第07篇:分布式服务熔断</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/"/>
    <updated>2022-05-22T16:24:55.000Z</updated>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="分布式"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第08篇:分布式服务网关</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    <updated>2022-05-22T16:24:55.000Z</updated>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="分布式"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">年终总结汇报大纲</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/design/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%E6%B1%87%E6%8A%A5%E5%A4%A7%E7%BA%B2/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/design/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%E6%B1%87%E6%8A%A5%E5%A4%A7%E7%BA%B2/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p>工作总结框架如下：</p>
<h2 id="一、工作开展情况"> 一、工作开展情况</h2>
<p>1.一年来取得的成绩。</p>
<p>2.在单位主要做了哪些工作。</p>
<p>3.目前正在开展的主要工作。</p>
<p>4.下一步要做的工作。</p>
<h2 id="二、工作中的创新点、亮点以及经验技巧。"> 二、工作中的创新点、亮点以及经验技巧。</h2>
<p>1.哪些环节提高了工作效率。</p>
<p>2.精简和优化了哪些工作流程。</p>
<p>3.为单位节约了哪些成本。</p>
<h2 id="三、存在不足和问题分析"> 三、存在不足和问题分析</h2>
<p>1.工作中遇到了哪些困难。</p>
<p>2.出现困难的原因。</p>
<p>3.是如何解决这些困难的。</p>
<h2 id="四、来年的打算"> 四、来年的打算</h2>
<p>1.工作思路计划</p>
<p>2.需要单位给予的哪些支持。#职场加油站# #冬日</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第03篇:分布式服务调用</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
    <updated>2022-05-22T16:24:55.000Z</updated>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="分布式"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第06篇:分布式服务限流</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E9%99%90%E6%B5%81/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E9%99%90%E6%B5%81/"/>
    <updated>2022-05-22T16:24:55.000Z</updated>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="分布式"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第05篇:分布式服务降级</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/"/>
    <updated>2022-05-22T16:24:55.000Z</updated>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="分布式"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第01篇:分布式注册中心</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <updated>2022-05-22T16:24:55.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1652941175000.png" alt="" loading="lazy"></p>
<h2 id="一、什么是注册中心"> 一、什么是注册中心</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1652941012000.png" alt="" loading="lazy"></p>
<p>什么是<code>注册中心</code>，<code>注册中心</code> 往往是在分布式的应用体系下才会遇到的。对于分布式体系应用都是横向进行扩展。如下图<code>User App</code>这个服务，具有2台服务器
但是当用户从网关进来访问, 网关是如何知道这个 <code>User App</code>有几台服务及每台服务的网络地址是什么呢? 所以就需要有一个地方能收集到每台应用的地址及命名。
往往这个地方就被叫做 <code>注册中心</code>。分布式环境下的应用在启动时候都会向这个地方来注册自己的网络地址，及命名。</p>
<h2 id="二、注册中心的职责"> 二、注册中心的职责</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1652941926000.png" alt="" loading="lazy"></p>
<p><code>但是注册中心只能注册服务吗?</code> 当然不是,如果仅仅只做这个事情，那么岂不是浪费了自己的资源呢? 注册中心要做到</p>
<p><img src="https://img.springlearn.cn/blog/learn_1652942499000.png" alt="" loading="lazy"></p>
<p>好了，我们看下再分布式的环境下，注册中心的位置有多<code>重要</code>了，如果没有了注册中心，网络上的服务都是<code>瞎子</code>了。所以这个系统
的设计我们要重新考虑到他的<code>可用性</code>，以及就算注册中心挂了，各服务之间不要里面就瞎。最起码要留给注册中心一个<code>重启的时间</code>。</p>
<p>好了，知道这么多，我们直接开始设计吧。</p>
<h2 id="三、设计注册中心"> 三、设计注册中心</h2>
<h2 id="_3-1-ip地址获取"> 3.1 ip地址获取</h2>
<p>这里要注意的点是不要拿到了127.0.0.1这个本地回环地址。类似工具网络很多,这不是重点。看下就行。</p>
<div><pre><code><span>public</span> <span>class</span> <span>HostUtils</span> <span>{</span>
    <span>private</span> <span>static</span> <span>String</span> ip<span>;</span>
    <span>private</span> <span>static</span> <span>String</span> hostName<span>;</span>
    <span>private</span> <span>static</span> <span>void</span> <span>resolveHost</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>InetAddress</span> localHost <span>=</span> <span>InetAddress</span><span>.</span><span>getLocalHost</span><span>(</span><span>)</span><span>;</span>
        hostName <span>=</span> localHost<span>.</span><span>getHostName</span><span>(</span><span>)</span><span>;</span>
        ip <span>=</span> localHost<span>.</span><span>getHostAddress</span><span>(</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>localHost<span>.</span><span>isLoopbackAddress</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            <span>Enumeration</span><span><span>&lt;</span><span>NetworkInterface</span><span>></span></span> networkInterfaces <span>=</span> <span>NetworkInterface</span><span>.</span><span>getNetworkInterfaces</span><span>(</span><span>)</span><span>;</span>
            <span>while</span> <span>(</span>networkInterfaces<span>.</span><span>hasMoreElements</span><span>(</span><span>)</span><span>)</span> <span>{</span>
                <span>NetworkInterface</span> networkInterface <span>=</span> networkInterfaces<span>.</span><span>nextElement</span><span>(</span><span>)</span><span>;</span>
                <span>Enumeration</span><span><span>&lt;</span><span>InetAddress</span><span>></span></span> inetAddresses <span>=</span> networkInterface<span>.</span><span>getInetAddresses</span><span>(</span><span>)</span><span>;</span>
                <span>while</span> <span>(</span>inetAddresses<span>.</span><span>hasMoreElements</span><span>(</span><span>)</span><span>)</span> <span>{</span>
                    <span>InetAddress</span> inetAddress <span>=</span> inetAddresses<span>.</span><span>nextElement</span><span>(</span><span>)</span><span>;</span>
                    <span>if</span> <span>(</span><span>!</span>inetAddress<span>.</span><span>isLoopbackAddress</span><span>(</span><span>)</span> <span>&amp;&amp;</span> <span>(</span>inetAddress <span>instanceof</span> <span>Inet4Address</span><span>)</span><span>)</span> <span>{</span>
                        ip <span>=</span> inetAddress<span>.</span><span>getHostAddress</span><span>(</span><span>)</span><span>;</span>
                    <span>}</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
    <span>public</span> <span>static</span> <span>String</span> <span>getIp</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> ip<span>;</span>
    <span>}</span>
    <span>public</span> <span>static</span> <span>String</span> <span>getHostName</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> hostName<span>;</span>
    <span>}</span>
    <span>static</span> <span>{</span>
        <span>try</span> <span>{</span>
            <span>resolveHost</span><span>(</span><span>)</span><span>;</span>
        <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><h2 id="_3-2-通信协议-技术选型"> 3.2 通信协议 &amp; 技术选型</h2>
<p>通信协议一般为了兼容多语言环境, 最好使用的http协议。因为应用比较广泛。当然你也可以自定义协议。这里推荐一个
小编基于Netty封装的通信框架 <a href="https://mojito.springlearn.cn/" target="_blank" rel="noopener noreferrer">mojito</a> 这里我们主要考虑通用性,使用
http协议。因为现在微服务使用 <mark>Spring Cloud</mark> 的较多，所以我们的注册中心的框架选型使用 <mark>Spring Boot</mark></p>
<p>这里我们可以使用SpringBoot的<a href="/learn/spring/Endpoint监控端点扩展/">Endpoint</a> 实现自己的扩展点，同时也可以使用服务自带的健康检查能力,进行状态监控。</p>
<p>下面描述下实现思路</p>
<h2 id="_3-3-交互流程"> 3.3 交互流程</h2>
<h3 id="_3-3-1-服务端能力"> 3.3.1 服务端能力</h3>
<ul>
<li>提供服务注册接口
<ul>
<li>数据可以落到数据库, 同时记录内存缓存，服务量大可以考虑使用redis</li>
<li>同时要落到文件中, 避免数据库挂了能从文件中恢复到缓存中</li>
</ul>
</li>
<li>提供服务下线接口
<ul>
<li>当服务下线，主动调用注册中心下线接口，注册中心要提供被动接受下线能力</li>
<li>当轮训到服务状态不好,主动将服务标记为下线，当服务状态恢复重新标记为正常</li>
</ul>
</li>
<li>提供服务健康检查能力
<ul>
<li>轮训已注册的机器的健康检查接口，动态更新节点状态</li>
<li>启动定时任务,定时发送状态检查,检查客户端服务状态</li>
</ul>
</li>
<li>提供服务发现接口
<ul>
<li>通过传递服务名，返回服务名对应的服务列表</li>
</ul>
</li>
<li>提供应用配置能力
<ul>
<li>做到服务隔离,不要把某个服务的配置,推送到全部服务器,只需要推动到这个服务对应的节点即可</li>
<li>能主动发起配置变更消息</li>
</ul>
</li>
</ul>
<h3 id="_3-3-2-客户端能力"> 3.3.2 客户端能力</h3>
<ul>
<li>服务注册能力
<ul>
<li>实现 <code>ApplicationContextInitializer</code> 应用启动时候读取应用配置,然后将自己注册到注册中心</li>
<li>将注册中心的配置,同时拉下来,放到Spring配置环境</li>
</ul>
</li>
<li>服务重新或者宕机主动下线
<ul>
<li>利用<code>@PreDestroy</code>销毁方法,或者注册<a href="/learn/java/hooks函数/">Jvm Hooks</a>程序</li>
</ul>
</li>
<li>服务发现能力
<ul>
<li>根据服务名获取服务列表接口，同时缓存到本地一份</li>
<li>如果注册中心无响应，要能使用本地缓存, 给注册中心留一个重启的时间</li>
</ul>
</li>
<li>监听服务器配置信息
<ul>
<li>将监听到的配置变更刷新到Spring容器 <a href="/learn/spring/Spring动态绑定配置/">动态绑定配置方案参考</a></li>
</ul>
</li>
<li>打开健康检查</li>
</ul>
<h2 id="四、常见的注册中心"> 四、常见的注册中心</h2>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="分布式"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第04篇:分布式配置中心</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    <updated>2022-05-22T16:24:55.000Z</updated>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="分布式"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第02篇:分布式负载均衡</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <updated>2022-05-22T16:24:55.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1652886627000.png" alt="" loading="lazy"></p>
<h2 id="一、什么叫负载均衡"> 一、什么叫负载均衡</h2>
<p>什么叫<code>负载均衡</code>, 所谓负载。先可以理解为当流量请求到某一个微服务应用, 则这么微服务应用就承受了负载。</p>
<p><code>什么叫均衡</code>如下图，浏览器发送了3次请求,后台有2个节点的微服务应用。但是每次都请求在某一台。而另外一台一直空闲没有流量。这种情况就是不均衡的。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1652839006000.png" alt="" loading="lazy"></p>
<p>已上图为例，实际情况可能并不一定是一次请求，也可能是<code>一次任务的调用</code>。但是不论实际情况是什么, 负载均衡就是要解决一个事情，就是<code>让流量均衡的分布</code>。<code>防止服务器过载运行</code>产生故障。</p>
<h2 id="二、常见解决思路"> 二、常见解决思路</h2>
<p>所谓负载均衡就是从一个集服务器集合中，找到一个最适合的服务器。去进行操作处理。所以首先我们先定义一个服务器集合。
然后我们再通过常见的算法去进行挑选。</p>
<p><code>List&lt;String&gt; services;</code></p>
<h2 id="_2-1-随机算法"> 2.1 随机算法</h2>
<div><pre><code> <span>public</span> <span>static</span> <span>String</span> <span>random</span><span>(</span><span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> services<span>)</span> <span>{</span>
        <span>Random</span> random <span>=</span> <span>new</span> <span>Random</span><span>(</span><span>)</span><span>;</span>
        <span>String</span><span>[</span><span>]</span> addressArr <span>=</span> services<span>.</span><span>toArray</span><span>(</span><span>new</span> <span>String</span><span>[</span><span>0</span><span>]</span><span>)</span><span>;</span>
        <span>// random</span>
        <span>return</span> addressArr<span>[</span>random<span>.</span><span>nextInt</span><span>(</span>services<span>.</span><span>size</span><span>(</span><span>)</span><span>)</span><span>]</span><span>;</span>
 <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_2-2-轮训算法"> 2.2 轮训算法</h2>
<div><pre><code><span>public</span> <span>class</span> <span>RoundBalanceTest</span> <span>{</span>

    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
        <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> services <span>=</span> <span>Arrays</span><span>.</span><span>asList</span><span>(</span><span>"service1"</span><span>,</span> <span>"service2"</span><span>,</span> <span>"service3"</span><span>)</span><span>;</span>
        <span>XxlBalanceTest</span><span>.</span><span>manyRoute</span><span>(</span>i <span>-></span> <span>{</span>
            <span>// 请求次数,取模。serviceKey 可以更细粒度的控制轮训</span>
            <span>ColorConsole</span><span>.</span><span>colorPrintln</span><span>(</span><span>"轮训负载({}):{}"</span><span>,</span> i<span>,</span> <span>round</span><span>(</span>services<span>)</span><span>)</span><span>;</span>
        <span>}</span><span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>static</span> <span>final</span> <span>AtomicInteger</span> atomicInteger <span>=</span> <span>new</span> <span>AtomicInteger</span><span>(</span><span>)</span><span>;</span>

    <span>private</span> <span>static</span> <span>String</span> <span>round</span><span>(</span><span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> services<span>)</span> <span>{</span>
        <span>int</span> count <span>=</span> atomicInteger<span>.</span><span>get</span><span>(</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>count <span>>=</span> <span>Integer</span><span>.</span>MAX_VALUE<span>)</span> <span>{</span>
            atomicInteger<span>.</span><span>set</span><span>(</span><span>0</span><span>)</span><span>;</span>
        <span>}</span>
        atomicInteger<span>.</span><span>incrementAndGet</span><span>(</span><span>)</span><span>;</span>
        <span>String</span><span>[</span><span>]</span> toArray <span>=</span> services<span>.</span><span>toArray</span><span>(</span><span>new</span> <span>String</span><span>[</span><span>0</span><span>]</span><span>)</span><span>;</span>
        <span>return</span> toArray<span>[</span>count <span>%</span> toArray<span>.</span>length<span>]</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h2 id="_2-3-加权算法"> 2.3 加权算法</h2>
<p>加权算法的有很多的变异算法, 可以通过配置的方式，也可以通过某种策略动态的给每台服务器进行加权，从而来提高被轮训到的次数。
这里说两种网上常见的实现。</p>
<h3 id="_2-3-1-简单加权算法"> 2.3.1 简单加权算法</h3>
<p>一个简单暴力的加权算法,如下图。按照权重，重新构建集合。然后再将集合进行取模轮训即可。即可实现一个最简单
的加权算法。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1652884737000.png" alt="" loading="lazy"></p>
<p>代码实现也是比较简单的,如下代码。</p>
<div><pre><code><span>public</span> <span>class</span> <span>WeightBalanceTest</span> <span>{</span>

    <span>private</span> <span>static</span> <span>class</span> <span>Server</span> <span>{</span>

        <span>private</span> <span>String</span> host<span>;</span>

        <span>private</span> <span>Integer</span> port<span>;</span>

        <span>public</span> <span>Server</span><span>(</span><span>String</span> host<span>,</span> <span>Integer</span> port<span>)</span> <span>{</span>
            <span>this</span><span>.</span>host <span>=</span> host<span>;</span>
            <span>this</span><span>.</span>port <span>=</span> port<span>;</span>
        <span>}</span>

        <span>@Override</span>
        <span>public</span> <span>String</span> <span>toString</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> <span>"Server{"</span> <span>+</span>
                    <span>"host='"</span> <span>+</span> host <span>+</span> <span>'\''</span> <span>+</span>
                    <span>", port="</span> <span>+</span> port <span>+</span>
                    <span>'}'</span><span>;</span>
        <span>}</span>
    <span>}</span>

    <span>private</span> <span>static</span> <span>final</span> <span>AtomicInteger</span> atomicInteger <span>=</span> <span>new</span> <span>AtomicInteger</span><span>(</span><span>)</span><span>;</span>

    <span>public</span> <span>static</span> <span>Server</span> <span>round</span><span>(</span><span>List</span><span><span>&lt;</span><span>Server</span><span>></span></span> services<span>)</span> <span>{</span>
        <span>int</span> count <span>=</span> atomicInteger<span>.</span><span>get</span><span>(</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>count <span>>=</span> <span>Integer</span><span>.</span>MAX_VALUE<span>)</span> <span>{</span>
            atomicInteger<span>.</span><span>set</span><span>(</span><span>0</span><span>)</span><span>;</span>
        <span>}</span>
        atomicInteger<span>.</span><span>incrementAndGet</span><span>(</span><span>)</span><span>;</span>
        <span>Server</span><span>[</span><span>]</span> toArray <span>=</span> services<span>.</span><span>toArray</span><span>(</span><span>new</span> <span>Server</span><span>[</span><span>0</span><span>]</span><span>)</span><span>;</span>
        <span>return</span> toArray<span>[</span>count <span>%</span> toArray<span>.</span>length<span>]</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
        <span>Map</span><span><span>&lt;</span><span>Server</span><span>,</span> <span>Integer</span><span>></span></span> confWeight <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        confWeight<span>.</span><span>put</span><span>(</span><span>new</span> <span>Server</span><span>(</span><span>"127.0.0.1"</span><span>,</span> <span>80</span><span>)</span><span>,</span> <span>2</span><span>)</span><span>;</span>
        confWeight<span>.</span><span>put</span><span>(</span><span>new</span> <span>Server</span><span>(</span><span>"127.0.0.1"</span><span>,</span> <span>81</span><span>)</span><span>,</span> <span>3</span><span>)</span><span>;</span>
        confWeight<span>.</span><span>put</span><span>(</span><span>new</span> <span>Server</span><span>(</span><span>"127.0.0.1"</span><span>,</span> <span>82</span><span>)</span><span>,</span> <span>5</span><span>)</span><span>;</span>

        <span>List</span><span><span>&lt;</span><span>Server</span><span>></span></span> servers <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        <span>for</span> <span>(</span><span>Map<span>.</span>Entry</span><span><span>&lt;</span><span>Server</span><span>,</span> <span>Integer</span><span>></span></span> entity <span>:</span> confWeight<span>.</span><span>entrySet</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            <span>Server</span> server <span>=</span> entity<span>.</span><span>getKey</span><span>(</span><span>)</span><span>;</span>
            <span>Integer</span> weight <span>=</span> entity<span>.</span><span>getValue</span><span>(</span><span>)</span><span>;</span>
            <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> weight<span>;</span> i<span>++</span><span>)</span> <span>{</span>
                servers<span>.</span><span>add</span><span>(</span>server<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
        <span>Loops</span><span>.</span><span>loop</span><span>(</span><span>10</span><span>,</span> i <span>-></span> <span>{</span>
            <span>ColorConsole</span><span>.</span><span>colorPrintln</span><span>(</span><span>"第{}次,权重轮训{}"</span><span>,</span> i<span>,</span> <span>round</span><span>(</span>servers<span>)</span><span>)</span><span>;</span>
        <span>}</span><span>)</span><span>;</span>
    <span>}</span>

<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br></div></div><div><pre><code>第0次,权重轮训Server{host=&#39;127.0.0.1&#39;, port=80}  
第1次,权重轮训Server{host=&#39;127.0.0.1&#39;, port=80}  
第2次,权重轮训Server{host=&#39;127.0.0.1&#39;, port=82}  
第3次,权重轮训Server{host=&#39;127.0.0.1&#39;, port=82}  
第4次,权重轮训Server{host=&#39;127.0.0.1&#39;, port=82}  
第5次,权重轮训Server{host=&#39;127.0.0.1&#39;, port=82}  
第6次,权重轮训Server{host=&#39;127.0.0.1&#39;, port=82}  
第7次,权重轮训Server{host=&#39;127.0.0.1&#39;, port=81}  
第8次,权重轮训Server{host=&#39;127.0.0.1&#39;, port=81}  
第9次,权重轮训Server{host=&#39;127.0.0.1&#39;, port=81}  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>但这样还是不均匀的, 相同的ip可能被连续的访问到其实就没有做到负载均衡。</p>
<h3 id="_2-3-2-平滑加权算法"> 2.3.2 平滑加权算法</h3>
<p>主要解决上面那种不平滑的方案。这种方案是由<a href="https://github.com/phusion/nginx/commit/27e94984486058d73157038f7950a0a36ecc6e35" target="_blank" rel="noopener noreferrer">nginx</a>提出来的。
算法的数学原理。</p>
<ul>
<li>最大权重，减总权重</li>
<li>当前权重加上原权重</li>
</ul>
<p>如下权重变化。</p>
<table>
<thead>
<tr>
<th>轮数</th>
<th>选择前的当前权重</th>
<th>选择节点</th>
<th>选择后的当前权重</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>{5, 1, 1}</td>
<td>a</td>
<td>{-2, 1, 1}</td>
</tr>
<tr>
<td>2</td>
<td>{3, 2, 2}</td>
<td>a</td>
<td>{-4, 2, 2}</td>
</tr>
<tr>
<td>3</td>
<td>{1, 3, 3}</td>
<td>b</td>
<td>{1, -4, 3}</td>
</tr>
<tr>
<td>4</td>
<td>{6, -3, 4}</td>
<td>a</td>
<td>{-1, -3, 4}</td>
</tr>
<tr>
<td>5</td>
<td>{4, -2, 5}</td>
<td>c</td>
<td>{4, -2, -2}</td>
</tr>
<tr>
<td>6</td>
<td>{9, -1, -1}</td>
<td>a</td>
<td>{2, -1, -1}</td>
</tr>
<tr>
<td>7</td>
<td>{7, 0, 0}</td>
<td>a</td>
<td>{0, 0, 0}</td>
</tr>
</tbody>
</table>
<p>下面我们通过代码来实现。</p>
<ul>
<li>首先我们定义出服务器模型, <code>weight</code> 是初始配置的权重，<code>currentWeight</code> 是计算后的权重。</li>
<li>初始值 <code>weight = currentWeight</code></li>
</ul>
<div><pre><code>    <span>@Data</span>
    <span>@AllArgsConstructor</span>
    <span>@ToString</span>
    <span>@EqualsAndHashCode</span>
    <span>private</span> <span>static</span> <span>class</span> <span>Server</span> <span>{</span>
        <span>private</span> <span>String</span> host<span>;</span>
        <span>private</span> <span>Integer</span> port<span>;</span>
        <span>// 初始化权重</span>
        <span>private</span> <span>Integer</span> weight<span>;</span>
        <span>// 计算后的当前权重</span>
        <span>private</span> <span>Integer</span> currentWeight<span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>然后我们根据算法的核心点来选择节点。这里我们先不考虑性能只说思路，有了思路在自己来优化代码。</p>
<ol>
<li><mark>line(3-6)</mark>  首先获取总权重</li>
<li><mark>line(8-14)</mark> 然后获取当前最大权重的节点</li>
<li><mark>line(16-21)</mark> 重新计算权重(<code>主要使用算法的思想</code>)
<ul>
<li>当前最大权重节点，重新计算权重。当前权重 = 当前权重 - 总权重 + 原始权重</li>
<li>其他节点，重新计算权重。当前权重 = 当前权重 + 原始权重</li>
</ul>
</li>
</ol>
<div><div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br></div><pre><code>    <span>public</span> <span>static</span> <span>Server</span> <span>selectServer</span><span>(</span><span>List</span><span><span>&lt;</span><span>Server</span><span>></span></span> servers<span>)</span> <span>{</span>
        <span>// 获取总权重</span>
        <span>Integer</span> totalWeight <span>=</span> <span>0</span><span>;</span>
        <span>for</span> <span>(</span><span>Server</span> server <span>:</span> servers<span>)</span> <span>{</span>
            totalWeight <span>+=</span> server<span>.</span><span>getWeight</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
        <span>// 根据权重从小到大排序</span>
        <span>List</span><span><span>&lt;</span><span>Server</span><span>></span></span> sortByCurrentWeight <span>=</span> servers<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>sorted</span><span>(</span><span>Comparator</span><span>.</span><span>comparing</span><span>(</span><span>Server</span><span>::</span><span>getCurrentWeight</span><span>)</span><span>)</span>
                <span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toList</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 集合反转,从大到小排序</span>
        <span>Collections</span><span>.</span><span>reverse</span><span>(</span>sortByCurrentWeight<span>)</span><span>;</span>
        <span>// 当前最大权重</span>
        <span>Server</span> maxWeightServer <span>=</span> sortByCurrentWeight<span>.</span><span>get</span><span>(</span><span>0</span><span>)</span><span>;</span>
        <span>// 重新计算权重</span>
        <span>for</span> <span>(</span><span>Server</span> server <span>:</span> servers<span>)</span> <span>{</span>
            <span>if</span> <span>(</span>server<span>.</span><span>equals</span><span>(</span>maxWeightServer<span>)</span><span>)</span> <span>{</span>
                server<span>.</span><span>setCurrentWeight</span><span>(</span>server<span>.</span><span>getCurrentWeight</span><span>(</span><span>)</span> <span>-</span> totalWeight<span>)</span><span>;</span>
            <span>}</span>
            server<span>.</span><span>setCurrentWeight</span><span>(</span>server<span>.</span><span>getCurrentWeight</span><span>(</span><span>)</span> <span>+</span> server<span>.</span><span>getWeight</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> maxWeightServer<span>;</span>
    <span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>可以看到非常的平滑均匀，每个ip都会被分散。</p>
<div><pre><code>第0次,平滑权重轮训WeightBalanceTest2.Server(host=127,0,0,1, port=8080, weight=4, currentWeight=1)
第1次,平滑权重轮训WeightBalanceTest2.Server(host=127,0,0,1, port=8081, weight=2, currentWeight=-1)
第2次,平滑权重轮训WeightBalanceTest2.Server(host=127,0,0,1, port=8080, weight=4, currentWeight=2)
第3次,平滑权重轮训WeightBalanceTest2.Server(host=127,0,0,1, port=8082, weight=1, currentWeight=-2)
第4次,平滑权重轮训WeightBalanceTest2.Server(host=127,0,0,1, port=8080, weight=4, currentWeight=3)
第5次,平滑权重轮训WeightBalanceTest2.Server(host=127,0,0,1, port=8081, weight=2, currentWeight=0)
第6次,平滑权重轮训WeightBalanceTest2.Server(host=127,0,0,1, port=8080, weight=4, currentWeight=4)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="三、举例子"> 三、举例子</h2>
<p><img src="https://www.gif.cn/Upload/newsucai/2022-05-12/165233481994659.gif" alt="" loading="lazy"></p>
<p><strong>好了前面，我们把常见的负载均衡算法都介绍完了，当然实际中的还有很多变异的算法，但是核心思想基本都是以上的思想。下面我们来
看看常见的开源框架中都使用了那些算法吧。</strong></p>
<p><code>具体算法如何实现不主要研究，只要知道其中的思想即可。如果开发中要使用，在去借鉴就好。</code></p>
<h2 id="_3-1-xxljob"> 3.1 xxljob</h2>
<p>xxl内置了5种负载机制在 <code>LoadBalance</code> 可以找到，其中默认是轮训算法。前两种就不说了，就是上面我们提的。还有其他三种</p>
<ol>
<li>XxlRpcLoadBalanceLRUStrategy
<ul>
<li>LRU，即：最近最少使用淘汰算法（Least Recently Used）</li>
<li>利用迭代器进行轮训: lruItem.entrySet().iterator().next().getKey().并且最长时间没有被用到的会被删除。</li>
</ul>
</li>
<li>XxlRpcLoadBalanceLFUStrategy
<ul>
<li>LFU，即：最不经常使用淘汰算法（Least Frequently Used）。</li>
<li>使用次数最少的会优先被选中</li>
</ul>
</li>
<li>XxlRpcLoadBalanceConsistentHashStrategy
<ul>
<li>一致性Hash算法</li>
<li>思路: 将每个节点进行hash,每个地址虚拟5个节点,然后放到TreeMap里面进行排序。</li>
<li>每次对serviceKey进行hash然后获取TreeMap中距离hash最近的一个节点</li>
<li>每个serviceKey对应的服务是唯一的</li>
</ul>
</li>
</ol>
<p><a href="/learn/other/一致性hash问题/">一致性hash</a></p>
<div><pre><code><span>public</span> <span>enum</span> <span>LoadBalance</span> <span>{</span>
    <span>RANDOM</span><span>(</span><span>new</span> <span>XxlRpcLoadBalanceRandomStrategy</span><span>(</span><span>)</span><span>)</span><span>,</span>
    <span>ROUND</span><span>(</span><span>new</span> <span>XxlRpcLoadBalanceRoundStrategy</span><span>(</span><span>)</span><span>)</span><span>,</span>
    <span>LRU</span><span>(</span><span>new</span> <span>XxlRpcLoadBalanceLRUStrategy</span><span>(</span><span>)</span><span>)</span><span>,</span>
    <span>LFU</span><span>(</span><span>new</span> <span>XxlRpcLoadBalanceLFUStrategy</span><span>(</span><span>)</span><span>)</span><span>,</span>
    <span>CONSISTENT_HASH</span><span>(</span><span>new</span> <span>XxlRpcLoadBalanceConsistentHashStrategy</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>}</span> 

<span>public</span> <span>abstract</span> <span>class</span> <span>XxlRpcLoadBalance</span> <span>{</span>
    <span>// serviceKey 是job的服务名拼接，addressSet是一共能选的机器</span>
    <span>public</span> <span>abstract</span> <span>String</span> <span>route</span><span>(</span><span>String</span> serviceKey<span>,</span> <span>TreeSet</span><span><span>&lt;</span><span>String</span><span>></span></span> addressSet<span>)</span><span>;</span>
<span>}</span>   
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="_3-2-ribbon"> 3.2 Ribbon</h2>
<p><code>Ribbon</code> 是 SpringCloud体系下一个核心的负载均衡组件。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>ILoadBalancer</span> <span>{</span>
    <span>// 添加服务器列表</span>
	<span>public</span> <span>void</span> <span>addServers</span><span>(</span><span>List</span><span><span>&lt;</span><span>Server</span><span>></span></span> newServers<span>)</span><span>;</span>
	<span>// 选择可用的服务</span>
	<span>public</span> <span>Server</span> <span>chooseServer</span><span>(</span><span>Object</span> key<span>)</span><span>;</span>
	<span>// 标记服务下线</span>
	<span>public</span> <span>void</span> <span>markServerDown</span><span>(</span><span>Server</span> server<span>)</span><span>;</span>
	<span>// 当前活跃的服务</span>
    <span>public</span> <span>List</span><span><span>&lt;</span><span>Server</span><span>></span></span> <span>getReachableServers</span><span>(</span><span>)</span><span>;</span>
    <span>// 当前所有的服务</span>
	<span>public</span> <span>List</span><span><span>&lt;</span><span>Server</span><span>></span></span> <span>getAllServers</span><span>(</span><span>)</span><span>;</span>
<span>}</span>

<span>public</span> <span>interface</span> <span>IRule</span><span>{</span>
    <span>// 真正来做选择的接口</span>
    <span>public</span> <span>Server</span> <span>choose</span><span>(</span><span>Object</span> key<span>)</span><span>;</span>
    
    <span>public</span> <span>void</span> <span>setLoadBalancer</span><span>(</span><span>ILoadBalancer</span> lb<span>)</span><span>;</span>
    
    <span>public</span> <span>ILoadBalancer</span> <span>getLoadBalancer</span><span>(</span><span>)</span><span>;</span>    
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p><img src="https://img.springlearn.cn/blog/learn_1652939033000.png" alt="" loading="lazy"></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>实现类</th>
<th>负载均衡策略</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>RoundRobinRule</td>
<td>按照线性轮询策略，即按照一定的顺序依次选取服务实例</td>
</tr>
<tr>
<td>2</td>
<td>RandomRule</td>
<td>随机选取一个服务实例</td>
</tr>
<tr>
<td>3</td>
<td>RetryRule</td>
<td>按照 RoundRobinRule（轮询）的策略来获取服务，如果获取的服务实例为 null 或已经失效，则在指定的时间之内不断地进行重试（重试时获取服务的策略还是 RoundRobinRule 中定义的策略），如果超过指定时间依然没获取到服务实例则返回 null 。</td>
</tr>
<tr>
<td>4</td>
<td>WeightedResponseTimeRule</td>
<td>WeightedResponseTimeRule 是 RoundRobinRule 的一个子类，它对 RoundRobinRule 的功能进行了扩展。  根据平均响应时间，来计算所有服务实例的权重，响应时间越短的服务实例权重越高，被选中的概率越大。刚启动时，如果统计信息不足，则使用线性轮询策略，等信息足够时，再切换到 WeightedResponseTimeRule。</td>
</tr>
<tr>
<td>5</td>
<td>BestAvailableRule</td>
<td>继承自 ClientConfigEnabledRoundRobinRule。先过滤点故障或失效的服务实例，然后再选择并发量最小的服务实例。</td>
</tr>
<tr>
<td>6</td>
<td>AvailabilityFilteringRule</td>
<td>先过滤掉故障或失效的服务实例，然后再选择并发量较小的服务实例。</td>
</tr>
<tr>
<td>7</td>
<td>ZoneAvoidanceRule</td>
<td>默认的负载均衡策略，综合判断服务所在区域（zone）的性能和服务（server）的可用性，来选择服务实例。在没有区域的环境下，该策略与轮询（RandomRule）策略类似。</td>
</tr>
</tbody>
</table>
<h2 id="_3-3-dubbo"> 3.3 dubbo</h2>
<p><code>dubbo</code> 负载均衡接口</p>
<div><pre><code><span>@SPI</span><span>(</span><span>RandomLoadBalance</span><span>.</span>NAME<span>)</span>
<span>public</span> <span>interface</span> <span>LoadBalance</span> <span>{</span>
    <span>@Adaptive</span><span>(</span><span>"loadbalance"</span><span>)</span>
    <span><span>&lt;</span><span>T</span><span>></span></span> <span>Invoker</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>select</span><span>(</span><span>List</span><span><span>&lt;</span><span>Invoker</span><span>&lt;</span><span>T</span><span>></span><span>></span></span> invokers<span>,</span> <span>URL</span> url<span>,</span> <span>Invocation</span> invocation<span>)</span> <span>throws</span> <span>RpcException</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><img src="https://img.springlearn.cn/learn_dad4a02061611976e7f89376d893dfe6.png" alt="" loading="lazy"></p>
<p>可以看到常用的算法都提供了，可能具体的实现方式可能不一样。</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>实现类</th>
<th>负载均衡策略</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>RandomLoadBalance</td>
<td>随机算法</td>
</tr>
<tr>
<td>2</td>
<td>RoundRobinLoadBalance</td>
<td>加权轮训</td>
</tr>
<tr>
<td>3</td>
<td>LeastActiveLoadBalance</td>
<td>当前最少调用的服务先被选中</td>
</tr>
<tr>
<td>4</td>
<td>ConsistentHashLoadBalance</td>
<td>一致性hash算法</td>
</tr>
</tbody>
</table>
<h2 id="四、总结"> 四、总结</h2>
<ul>
<li>xxl的负载均衡是无状态的</li>
<li>Ribbon和dubbo有些策略是有状态的，比如会记录服务当前的活跃次数和耗时将这些也算入到权重</li>
</ul>
<p><code>无状态设计具有通用性比较简答。而有状态设计虽然不能通用,但是会充分考虑到服务器的性能进行负载。</code></p>
<p>假如我们来涉及负载均衡，要采用那种设计呢?</p>
<p>其次我们还有那些场景需要关心呢? 请留下你的评论。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="分布式"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">密码加密的文章</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/guide/encrypt/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/guide/encrypt/"/>
    <updated>2021-12-21T05:46:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="密码加密的文章"> 密码加密的文章</h1>
<p>实际的文章内容。</p>
<p>段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。</p>
<p>段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="使用指南"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第09篇:分布式链路追踪</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    <updated>2022-05-22T16:24:55.000Z</updated>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="分布式"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Markdown 增强</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/guide/markdown/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/guide/markdown/"/>
    <updated>2021-12-21T05:46:37.000Z</updated>
    <summary type="html"><![CDATA[<p><code>vuepress-theme-hope</code> 通过内置 <a href="https://vuepress-theme-hope.github.io/md-enhance" target="_blank" rel="noopener noreferrer">md-enhance</a>，在 Markdown 中启用了更多的语法与新功能。</p>
]]></summary>
    <content type="html"><![CDATA[<p><code>vuepress-theme-hope</code> 通过内置 <a href="https://vuepress-theme-hope.github.io/md-enhance" target="_blank" rel="noopener noreferrer">md-enhance</a>，在 Markdown 中启用了更多的语法与新功能。</p>

<h2 id="一键启用"> 一键启用</h2>
<p>你可以设置 <code>themeconfig.mdEnhance.enableAll</code> 启用 <a href="https://vuepress-theme-hope.github.io/md-enhance" target="_blank" rel="noopener noreferrer">md-enhance</a> 插件的所有功能。</p>
<div><div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br></div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>themeConfig</span><span>:</span> <span>{</span>
    <span>mdEnhance</span><span>:</span> <span>{</span>
      <span>enableAll</span><span>:</span> <span>true</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="新增的更多语法"> 新增的更多语法</h2>
<h3 id="上下角标"> 上下角标</h3>
<p>19<sup>th</sup> H<sub>2</sub>O</p>
<details><summary>代码</summary>
<div><pre><code>19^th^ H<span><span>~</span><span>2</span><span>~</span></span>O
</code></pre>
<div><span>1</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/sup-sub/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="自定义对齐"> 自定义对齐</h3>
<div>
<p>我是居中的</p>
</div>
<div>
<p>我在右对齐</p>
</div>
<details><summary>代码</summary>
<div><pre><code>::: center

我是居中的

:::

::: right

我在右对齐

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/align/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="脚注"> 脚注</h3>
<p>此文字有脚注<sup></sup>.</p>
<details><summary>代码</summary>
<div><pre><code>此文字有脚注[^first].

<span><span>[</span><span>^first</span><span>]</span><span>:</span> 这是脚注内容</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/footnote/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="标记"> 标记</h3>
<p>你可以标记 <mark>重要的内容</mark> 。</p>
<details><summary>代码</summary>
<div><pre><code>你可以标记 ==重要的内容== 。
</code></pre>
<div><span>1</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/mark/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="任务列表"> 任务列表</h3>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-0"><label for="task-item-0"> 计划 1</label></li>
<li><input type="checkbox"  disabled="disabled" id="task-item-1"><label for="task-item-1"> 计划 2</label></li>
</ul>
<details><summary>Code</summary>
<div><pre><code><span>-</span> [x] 计划 1
<span>-</span> [ ] 计划 2
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/guide/markdown/tasklist/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="流程图"> 流程图</h3>
<i>Not supported content</i><details><summary>代码</summary>
<div><pre><code><span><span>```</span><span>flow</span>
<span>cond=>condition: Process?
process=>operation: Process
e=>end: End

cond(yes)->process->e
cond(no)->e</span>
<span>```</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/flowchart/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h2 id="mermaid"> Mermaid</h2>
<Mermaid id="mermaid-64a57060" data-code="graph%20TD%3B%0A%20%20%20%20A--%3EB%3B%0A%20%20%20%20A--%3EC%3B%0A%20%20%20%20B--%3ED%3B%0A%20%20%20%20C--%3ED%3B%0A"></Mermaid><details><summary>代码</summary>
<div><pre><code><span><span>```</span><span>mermaid</span>
<span>graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;</span>
<span>```</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/mermaid/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="tex-语法"> Tex 语法</h3>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:2.4em;vertical-align:-0.95em;"></span><span><span></span><span><span><span><span style="height:1.3714em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.05556em;">∂</span><span><span style="margin-right:0.03588em;">ω</span><span><span><span><span style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.05556em;">∂</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="margin-right:0.1667em;"></span><span><span style="top:0em;"><span>(</span></span><span><span></span><span><span><span><span style="height:1.3414em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>)</span></span></span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:3.0277em;vertical-align:-1.2777em;"></span><span><span style="top:0em;"><span>(</span></span><span><span></span><span><span><span><span style="height:1.3414em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>)</span></span></span><span style="margin-right:0.1667em;"></span><span><span style="top:0em;"><span>{</span></span><span>(</span><span>lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">y</span><span><span>)</span><span><span><span><span style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span><span><span><span style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span style="height:3.05em;"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style="top:-3.05em;"><span style="height:3.05em;"></span><span><span>∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span style="height:3.05em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span><span>​</span></span><span><span style="height:1.2777em;"><span></span></span></span></span></span><span style="margin-right:0.1667em;"></span><span><span></span><span><span><span><span style="height:1.5017em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">ω</span><span><span><span><span style="height:0.7507em;"><span style="top:-2.989em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span>(</span><span>−</span><span>1</span><span><span>)</span><span><span><span><span style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span></span></span></span></span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.1667em;"></span><span>⋯</span><span style="margin-right:0.1667em;"></span><span>(</span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>i</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span>1</span><span>)</span><span>(</span><span>lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">y</span><span><span>)</span><span><span><span><span style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.02778em;">r</span><span>−</span><span>i</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>}</span></span></span></span></span></span></span></p>
<details><summary>代码</summary>
<div><pre><code>$$
\frac {\partial^r} {\partial \omega^r} \left(\frac {y^{\omega}} {\omega}\right)
= \left(\frac {y^{\omega}} {\omega}\right) \left\{(\log y)^r + \sum_{i=1}^r \frac {(-1)^i r \cdots (r-i+1) (\log y)^{r-i}} {\omega^i} \right\}
$$
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/tex/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="代码案例"> 代码案例</h3>

          <div
            id="code-demo-5ac6bc9f"
           
  
 data-title="%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%20Demo"

            data-code="%7B%22html%22%3A%22%3Ch1%3EMr.Hope%3C%2Fh1%3E%5Cn%3Cp%3E%3Cspan%20id%3D%5C%22very%5C%22%3E%E5%8D%81%E5%88%86%3C%2Fspan%3E%20%E5%B8%85%3C%2Fp%3E%5Cn%22%2C%22js%22%3A%22document.querySelector(%5C%22%23very%5C%22).addEventListener(%5C%22click%5C%22%2C%20()%20%3D%3E%20%7B%5Cn%20%20alert(%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22)%3B%5Cn%7D)%3B%5Cn%22%2C%22css%22%3A%22span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>h1</span><span>></span></span>Mr.Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>十分<span><span><span>&lt;/</span>span</span><span>></span></span> 帅<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"十分帅"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo 一个普通 Demo

<span><span>```</span><span>html</span>
<span><span><span><span>&lt;</span>h1</span><span>></span></span>Mr.Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>十分<span><span><span>&lt;/</span>span</span><span>></span></span> 帅<span><span><span>&lt;/</span>p</span><span>></span></span></span>
<span>```</span></span>

<span><span>```</span><span>js</span>
<span>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"十分帅"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span></span>
<span>```</span></span>

<span><span>```</span><span>css</span>
<span><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></details>

          <div
            id="code-demo-693e1878"
           
  data-type="react"
 data-title="%E4%B8%80%E4%B8%AA%20React%20Demo"

            data-code="%7B%22js%22%3A%22export%20default%20class%20App%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.state%20%3D%20%7B%20message%3A%20%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22%20%7D%3B%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%20className%3D%5C%22box-react%5C%22%3E%5Cn%20%20%20%20%20%20%20%20Mr.Hope%20%3Cspan%3E%7Bthis.state.message%7D%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22css%22%3A%22.box-react%20span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>
  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>props<span>)</span><span>;</span>
    <span>this</span><span>.</span>state <span>=</span> <span>{</span> <span>message</span><span>:</span> <span>"十分帅"</span> <span>}</span><span>;</span>
  <span>}</span>
  <span>render</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>(</span>
      <span>&lt;</span>div className<span>=</span><span>"box-react"</span><span>></span>
        Mr<span>.</span>Hope <span>&lt;</span>span<span>></span><span>{</span><span>this</span><span>.</span>state<span>.</span>message<span>}</span><span>&lt;</span><span>/</span>span<span>></span>
      <span>&lt;</span><span>/</span>div<span>></span>
    <span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><div><pre><code><span>.box-react span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo [react] 一个 React Demo

<span><span>```</span><span>js</span>
<span><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>
  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>props<span>)</span><span>;</span>
    <span>this</span><span>.</span>state <span>=</span> <span>{</span> <span>message</span><span>:</span> <span>"十分帅"</span> <span>}</span><span>;</span>
  <span>}</span>
  <span>render</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>(</span>
      <span>&lt;</span>div className<span>=</span><span>"box-react"</span><span>></span>
        Mr<span>.</span>Hope <span>&lt;</span>span<span>></span><span>{</span><span>this</span><span>.</span>state<span>.</span>message<span>}</span><span>&lt;</span><span>/</span>span<span>></span>
      <span>&lt;</span><span>/</span>div<span>></span>
    <span>)</span><span>;</span>
  <span>}</span>
<span>}</span></span>
<span>```</span></span>

<span><span>```</span><span>css</span>
<span><span>.box-react span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></details>

          <div
            id="code-demo-2c0b9cdb"
           
  data-type="vue"
 data-title="%E4%B8%80%E4%B8%AA%20Vue%20Demo"

            data-code="%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22box%5C%22%3E%5Cn%20%20%20%20Mr.Hope%20%3Cspan%3E%7B%7B%20message%20%7D%7D%3C%2Fspan%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20data%3A%20()%20%3D%3E%20(%7B%20message%3A%20%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22%20%7D)%2C%5Cn%7D%3B%5Cn%3C%2Fscript%3E%5Cn%3Cstyle%3E%5Cn.box%20span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%3C%2Fstyle%3E%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>box<span>"</span></span><span>></span></span>
    Mr.Hope <span><span><span>&lt;</span>span</span><span>></span></span>{{ message }}<span><span><span>&lt;/</span>span</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>
<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>(</span><span>{</span> <span>message</span><span>:</span> <span>"十分帅"</span> <span>}</span><span>)</span><span>,</span>
<span>}</span><span>;</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span><span>></span></span><span><span>
<span>.box span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo [vue] 一个 Vue Demo

<span><span>```</span><span>vue</span>
<span>&lt;template>
  &lt;div>
    Mr.Hope &lt;span>{{ message }}&lt;/span>
  &lt;/div>
&lt;/template>
&lt;script>
export default {
  data: () => ({ message: "十分帅" }),
};
&lt;/script>
&lt;style>
.box span {
  color: red;
}
&lt;/style></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div></details>

          <div
            id="code-demo-2869b0e2"
           
  
 data-title="%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%20Demo"

            data-code="%7B%22md%22%3A%22%23%20%E6%A0%87%E9%A2%98%5Cn%5Cn%E5%8D%81%E5%88%86%E5%B8%85%5Cn%22%2C%22ts%22%3A%22const%20message%3A%20string%20%3D%20%5C%22Mr.Hope%5C%22%3B%5Cn%5Cndocument.querySelector(%5C%22h1%5C%22).innerHTML%20%3D%20message%3B%5Cn%22%2C%22scss%22%3A%22h1%20%7B%5Cn%20%20font-style%3A%20italic%3B%5Cn%5Cn%20%20%2B%20p%20%7B%5Cn%20%20%20%20color%3A%20red%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span>#</span> 标题</span>

十分帅
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>const</span> message<span>:</span> <span>string</span> <span>=</span> <span>"Mr.Hope"</span><span>;</span>

document<span>.</span><span>querySelector</span><span>(</span><span>"h1"</span><span>)</span><span>.</span>innerHTML <span>=</span> message<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>h1 </span><span>{</span>
  <span>font-style</span><span>:</span> italic<span>;</span>

  <span>+ p </span><span>{</span>
    <span>color</span><span>:</span> red<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo 一个普通 Demo

<span><span>```</span><span>md</span>
<span><span><span>#</span> 标题</span>

十分帅</span>
<span>```</span></span>

<span><span>```</span><span>ts</span>
<span><span>const</span> message<span>:</span> <span>string</span> <span>=</span> <span>"Mr.Hope"</span><span>;</span>

document<span>.</span><span>querySelector</span><span>(</span><span>"h1"</span><span>)</span><span>.</span>innerHTML <span>=</span> message<span>;</span></span>
<span>```</span></span>

<span><span>```</span><span>scss</span>
<span><span>h1 </span><span>{</span>
  <span>font-style</span><span>:</span> italic<span>;</span>

  <span>+ p </span><span>{</span>
    <span>color</span><span>:</span> red<span>;</span>
  <span>}</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/demo/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="幻灯片"> 幻灯片</h3>
<i>Not supported content</i><details><summary>代码</summary>
<div><pre><code>@slidestart

<span><span>##</span> 幻灯片 1</span>

一个有文字和 <span>[<span>链接</span>](<span>https://mrhope.site</span>)</span> 的段落

<span>---</span>

<span><span>##</span> 幻灯片 2</span>

<span>-</span> 列表 1
<span>-</span> 列表 2

<span>---</span>

<span><span>##</span> 幻灯片 3.1</span>

<span><span>```</span><span>js</span>
<span><span>const</span> a <span>=</span> <span>1</span><span>;</span></span>
<span>```</span></span>

--

<span><span>##</span> 幻灯片 3.2</span>

$$
J(\theta_0,\theta_1) = \sum_{i=0}
$$

@slideend
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/presentation/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h2 id="其他语法"> 其他语法</h2>
<div><p>自定义标题</p>
<p>信息容器</p>
</div>
<div><p>自定义标题</p>
<p>提示容器</p>
</div>
<div><p>自定义标题</p>
<p>警告容器</p>
</div>
<div><p>自定义标题</p>
<p>危险容器</p>
</div>
<details><summary>自定义标题</summary>
<p>详情容器</p>
</details>
<details><summary>代码</summary>
<div><pre><code>::: info 自定义标题

信息容器

:::

::: tip 自定义标题

提示容器

:::

::: warning 自定义标题

警告容器

:::

::: danger 自定义标题

危险容器

:::

::: details 自定义标题

详情容器

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div></details>
<hr>
<section>
<ol>
<li id="footnote1"><p>这是脚注内容 </p>
</li>
</ol>
</section>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="使用指南"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">页面配置</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/guide/page/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/guide/page/"/>
    <updated>2021-12-21T05:46:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="页面信息"> 页面信息</h2>
<p>你可以在 Markdown 的 Frontmatter 中设置页面信息。</p>
<ul>
<li>
<p>作者设置为 Ms.Hope。</p>
</li>
<li>
<p>写作时间应为 2020 年 1 月 1 日</p>
</li>
<li>
<p>分类为 “使用指南”</p>
</li>
<li>
<p>标签为 “页面配置” 和 “使用指南”</p>
</li>
</ul>
<h2 id="页面内容"> 页面内容</h2>
<p>你可以自由在这里书写你的 Markdown。</p>
<div><p>提示</p>
<ul>
<li>
<p>Markdown 文件夹的图片请使用相对链接 <code>./</code> 进行引用。</p>
</li>
<li>
<p><code>.vuepress/public</code> 文件夹的图片，请使用绝对链接 <code>/</code> 进行引用</p>
</li>
</ul>
</div>
<p>主题包含了一个自定义徽章章可以使用:</p>
<blockquote>
<p>文字结尾应该有深蓝色的 徽章文字 徽章。 <i>Not supported content</i></p>
</blockquote>
<h2 id="页面结构"> 页面结构</h2>
<p>此页面应当包含：</p>
<ul>
<li>返回顶部按钮</li>
<li>路径导航</li>
<li>评论</li>
<li>页脚</li>
</ul>
]]></content>
    <author>
      <name>Ms.Hope</name>
    </author>
    <category term="使用指南"/>
    <contributor>
      <name>Ms.Hope</name>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by Ms.Hope</rights>
  </entry>
  <entry>
    <title type="html">组件禁用</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/guide/disable/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/guide/disable/"/>
    <updated>2021-12-21T05:46:37.000Z</updated>
    <summary type="html"><![CDATA[<p>你可以通过设置页面的 Frontmatter，在页面禁用一些功能。</p>
]]></summary>
    <content type="html"><![CDATA[<p>你可以通过设置页面的 Frontmatter，在页面禁用一些功能。</p>

<p>本页面应当禁用了:</p>
<ul>
<li>导航栏</li>
<li>侧边栏</li>
<li>路径导航</li>
<li>页面信息</li>
<li>贡献者</li>
<li>编辑此页链接</li>
<li>更新时间</li>
<li>上一篇/下一篇 链接</li>
<li>评论</li>
<li>页脚</li>
<li>返回顶部按钮</li>
</ul>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="使用指南"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Home</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/home/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/home/"/>
    <updated>2022-04-26T15:44:59.000Z</updated>
    <content type="html"><![CDATA[<Djt/>
<h2 id=""> <i>Not supported content</i> <i>Not supported content</i>  <i>Not supported content</i> <i>Not supported content</i>  <i>Not supported content</i></h2>
<p><img src="https://img.springlearn.cn/blog/learn_1648909278000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">指南</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/guide/test/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/guide/test/"/>
    <updated>2021-12-21T05:46:37.000Z</updated>
    <content type="html"><![CDATA[<p>不是使用自动生成侧边栏，而是使用。自定以侧边栏。</p>
<p>https://vuepress-theme-hope.github.io/zh/guide/layout/sidebar/#%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%88%86%E7%BB%84</p>
<h2 id="一、本站知识阅览"> 一、本站知识阅览</h2>
<h3 id="_1-多撒多"> 1. 多撒多</h3>
<h3 id="_2-fdsa"> 2. fdsa</h3>
<h2 id="二、学习路线参"> 二、学习路线参</h2>
<p>考
范德萨</p>
<h2 id="三、java"> 三、Java</h2>
<p>德萨</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">主要功能与配置演示</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/guide/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/guide/"/>
    <updated>2021-12-21T05:46:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="主要功能与配置演示"> 主要功能与配置演示</h1>
<ul>
<li>
<p><a href="./page.html">页面展示</a></p>
</li>
<li>
<p><a href="./markdown.html">Markdown 展示</a></p>
</li>
<li>
<p><a href="./disable.html">禁用展示</a></p>
</li>
<li>
<p><a href="./encrypt.html">加密展示</a></p>
</li>
</ul>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <category term="使用指南"/>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Java并发包队列之BlockingQueue</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/BlockingQueue/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/BlockingQueue/"/>
    <updated>2022-05-22T07:02:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、什么是blockingqueue"> 一、什么是BlockingQueue</h2>
<p>BlockingQueue即阻塞队列，从阻塞这个词可以看出，在某些情况下对阻塞队列的访问可能会造成阻塞。被阻塞的情况主要有如下两种：</p>
<ol>
<li>当队列满了的时候进行入队列操作</li>
<li>当队列空了的时候进行出队列操作
因此，当一个线程试图对一个已经满了的队列进行入队列操作时，它将会被阻塞，除非有另一个线程做了出队列操作；同样，当一个线程试图对一个空队列进行出队列操作时，它将会被阻塞，除非有另一个线程进行了入队列操作。</li>
</ol>
<h2 id="二、blockingqueue的用法"> 二、BlockingQueue的用法</h2>
<p>阻塞队列主要用在生产者/消费者的场景，下面这幅图展示了一个线程生产、一个线程消费的场景：</p>
<p><img src="http://img.blog.csdn.net/20150929153140497" alt="" loading="lazy"></p>
<p>负责生产的线程不断的制造新对象并插入到阻塞队列中，直到达到这个队列的上限值。队列达到上限值之后生产线程将会被阻塞，直到消费的线程对这个队列进行消费。同理，负责消费的线程不断的从队列中消费对象，直到这个队列为空，当队列为空时，消费线程将会被阻塞，除非队列中有新的对象被插入。</p>
<h2 id="三、blockingqueue接口中的方法"> 三、BlockingQueue接口中的方法</h2>
<p>阻塞队列一共有四套方法分别用来进行insert、remove和examine，当每套方法对应的操作不能马上执行时会有不同的反应，下面这个表格就分类列出了这些方法：</p>
<table>
<thead>
<tr>
<th>-</th>
<th>Throws Exception</th>
<th>Special Value</th>
<th>Blocks</th>
<th>Times Out</th>
</tr>
</thead>
<tbody>
<tr>
<td>Insert</td>
<td>add(o)</td>
<td>offer(o)</td>
<td>put(o)</td>
<td>offer(o, timeout, timeunit)</td>
</tr>
<tr>
<td>Remove</td>
<td>remove(o)</td>
<td>poll()</td>
<td>take()</td>
<td>poll(timeout, timeunit)</td>
</tr>
<tr>
<td>Examine</td>
<td>element()</td>
<td>peek()</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ol>
<li>ThrowsException：如果操作不能马上进行，则抛出异常</li>
<li>SpecialValue：如果操作不能马上进行，将会返回一个特殊的值，一般是true或者false</li>
<li>Blocks:如果操作不能马上进行，操作会被阻塞</li>
<li>TimesOut:如果操作不能马上进行，操作会被阻塞指定的时间，如果指定时间没执行，则返回一个特殊值，一般是true或者false
需要注意的是，我们不能向BlockingQueue中插入null，否则会报NullPointerException。</li>
</ol>
<h2 id="四、blockingqueue的实现类"> 四、BlockingQueue的实现类</h2>
<p>BlockingQueue只是java.util.concurrent包中的一个接口，而在具体使用时，我们用到的是它的实现类，当然这些实现类也位于java.util.concurrent包中。在Java6中，BlockingQueue的实现类主要有以下几种：</p>
<ol>
<li>ArrayBlockingQueue</li>
<li>DelayQueue</li>
<li>LinkedBlockingQueue</li>
<li>PriorityBlockingQueue</li>
<li>SynchronousQueue</li>
</ol>
<h3 id="_4-1-arrayblockingqueue"> 4.1 ArrayBlockingQueue</h3>
<p>ArrayBlockingQueue是一个有边界的阻塞队列，它的内部实现是一个数组。有边界的意思是它的容量是有限的，我们必须在其初始化的时候指定它的容量大小，容量大小一旦指定就不可改变。</p>
<p>ArrayBlockingQueue是以先进先出的方式存储数据，最新插入的对象是尾部，最新移出的对象是头部。下面是一个初始化和使用ArrayBlockingQueue的例子：</p>
<p>BlockingQueue queue = new ArrayBlockingQueue(1024);
queue.put(&quot;1&quot;);
Object object = queue.take();</p>
<h3 id="_4-2-delayqueue"> 4.2 DelayQueue</h3>
<p>DelayQueue阻塞的是其内部元素，DelayQueue中的元素必须实现 java.util.concurrent.Delayed接口，这个接口的定义非常简单：</p>
<div><pre><code>public interface Delayed extends Comparable&lt;Delayed&gt; {
long getDelay(TimeUnit unit);
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>getDelay()方法的返回值就是队列元素被释放前的保持时间，如果返回0或者一个负值，就意味着该元素已经到期需要被释放，此时DelayedQueue会通过其take()方法释放此对象。</p>
<p>从上面Delayed 接口定义可以看到，它还继承了Comparable接口，这是因为DelayedQueue中的元素需要进行排序，一般情况，我们都是按元素过期时间的优先级进行排序。</p>
<p>例1：为一个对象指定过期时间</p>
<p>首先，我们先定义一个元素，这个元素要实现Delayed接口</p>
<div><pre><code>public class DelayedElement implements Delayed {
  private long expired;
  private long delay;
  private String name;

  DelayedElement(String elementName, long delay) {
         this. name = elementName;
         this. delay= delay;
         expired = ( delay + System. currentTimeMillis());
  }

  @Override
  public int compareTo(Delayed o) {
        DelayedElement cached=(DelayedElement) o;
         return cached.getExpired()&gt; expired?1:-1;
  }

  @Override
  public long getDelay(TimeUnit unit) {

         return ( expired - System. currentTimeMillis());
  }

  @Override
  public String toString() {
         return &quot;DelayedElement [delay=&quot; + delay + &quot;, name=&quot; + name + &quot;]&quot;;
  }

  public long getExpired() {
         return expired;
  }

}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><p>设置这个元素的过期时间为3s</p>
<div><pre><code>public class DelayQueueExample {
  public static void main(String[] args) throws InterruptedException {
        DelayQueue&lt;DelayedElement&gt; queue= new DelayQueue&lt;&gt;();
        DelayedElement ele= new DelayedElement( &quot;cache 3 seconds&quot;,3000);
         queue.put( ele);
        System. out.println( queue.take());

  }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>运行这个main函数，我们可以发现，我们需要等待3s之后才会打印这个对象。</p>
<p>其实DelayQueue应用场景很多，比如定时关闭连接、缓存对象，超时处理等各种场景，下面我们就拿学生考试为例让大家更深入的理解DelayQueue的使用。</p>
<p>例2：把所有考试的学生看做是一个DelayQueue，谁先做完题目释放谁</p>
<p>首先，我们构造一个学生对象</p>
<div><pre><code>public class Student implements Runnable,Delayed{
  private String name;  //姓名
  private long costTime;//做试题的时间
  private long finishedTime;//完成时间

  public Student(String name, long costTime) {
         this. name = name;
         this. costTime= costTime;
         finishedTime = costTime + System. currentTimeMillis();
  }

  @Override
  public void run() {
        System. out.println( name + &quot; 交卷,用时&quot; + costTime /1000);
  }

  @Override
  public long getDelay(TimeUnit unit) {
         return ( finishedTime - System. currentTimeMillis());
  }

  @Override
  public int compareTo(Delayed o) {
        Student other = (Student) o;
         return costTime &gt;= other. costTime?1:-1;
  }

}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>然后在构造一个教师对象对学生进行考试</p>
<div><pre><code>public class Teacher {
  static final int STUDENT_SIZE = 30;
  public static void main(String[] args) throws InterruptedException {
        Random r = new Random();
        //把所有学生看做一个延迟队列
        DelayQueue&lt;Student&gt; students = new DelayQueue&lt;Student&gt;();
        //构造一个线程池用来让学生们“做作业”
        ExecutorService exec = Executors.newFixedThreadPool(STUDENT_SIZE);
         for ( int i = 0; i &lt; STUDENT_SIZE; i++) {
               //初始化学生的姓名和做题时间
               students.put( new Student( &quot;学生&quot; + (i + 1), 3000 + r.nextInt(10000)));
        }
        //开始做题
        while(! students.isEmpty()){
               exec.execute( students.take());
        }
         exec.shutdown();
  }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>我们看一下运行结果：</p>
<div><pre><code>学生2 交卷,用时3
学生1 交卷,用时5
学生5 交卷,用时7
学生4 交卷,用时8
学生3 交卷,用时11
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>通过运行结果我们可以发现，每个学生在指定开始时间到达之后就会“交卷”（取决于getDelay()方法），并且是先做完的先交卷（取决于compareTo()方法）。</p>
<h3 id="_4-3-linkedblockingqueue"> 4.3 LinkedBlockingQueue</h3>
<p>LinkedBlockingQueue阻塞队列大小的配置是可选的，如果我们初始化时指定一个大小，它就是有边界的，如果不指定，它就是无边界的。说是无边界，其实是采用了默认大小为Integer.MAX_VALUE的容量 。它的内部实现是一个链表。</p>
<p>和ArrayBlockingQueue一样，LinkedBlockingQueue 也是以先进先出的方式存储数据，最新插入的对象是尾部，最新移出的对象是头部。下面是一个初始化和使LinkedBlockingQueue的例子：</p>
<div><pre><code>BlockingQueue&lt;String&gt; unbounded = new LinkedBlockingQueue&lt;String&gt;();
BlockingQueue&lt;String&gt; bounded   = new LinkedBlockingQueue&lt;String&gt;(1024);
bounded.put(&quot;Value&quot;);
String value = bounded.take();
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="_4-4-priorityblockingqueue"> 4.4 PriorityBlockingQueue</h3>
<p>PriorityBlockingQueue是一个没有边界的队列，它的排序规则和 java.util.PriorityQueue一样。需要注意，PriorityBlockingQueue中允许插入null对象。</p>
<p>所有插入PriorityBlockingQueue的对象必须实现 java.lang.Comparable接口，队列优先级的排序规则就是按照我们对这个接口的实现来定义的。</p>
<p>另外，我们可以从PriorityBlockingQueue获得一个迭代器Iterator，但这个迭代器并不保证按照优先级顺序进行迭代。</p>
<p>下面我们举个例子来说明一下，首先我们定义一个对象类型，这个对象需要实现Comparable接口：</p>
<div><pre><code>public class PriorityElement implements Comparable&lt;PriorityElement&gt; {
private int priority;//定义优先级
PriorityElement(int priority) {
    //初始化优先级
    this.priority = priority;
}
@Override
public int compareTo(PriorityElement o) {
    //按照优先级大小进行排序
    return priority &gt;= o.getPriority() ? 1 : -1;
}
public int getPriority() {
    return priority;
}
public void setPriority(int priority) {
    this.priority = priority;
}
@Override
public String toString() {
    return &quot;PriorityElement [priority=&quot; + priority + &quot;]&quot;;
}
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>然后我们把这些元素随机设置优先级放入队列中</p>
<div><pre><code>public class PriorityBlockingQueueExample {
public static void main(String[] args) throws InterruptedException {
    PriorityBlockingQueue&lt;PriorityElement&gt; queue = new PriorityBlockingQueue&lt;&gt;();
    for (int i = 0; i &lt; 5; i++) {
        Random random=new Random();
        PriorityElement ele = new PriorityElement(random.nextInt(10));
        queue.put(ele);
    }
    while(!queue.isEmpty()){
        System.out.println(queue.take());
    }
}
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>看一下运行结果：</p>
<div><pre><code>PriorityElement [priority=3]
PriorityElement [priority=4]
PriorityElement [priority=5]
PriorityElement [priority=8]
PriorityElement [priority=9]

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="_4-5-synchronousqueue"> 4.5 SynchronousQueue</h3>
<p>SynchronousQueue队列内部仅允许容纳一个元素。当一个线程插入一个元素后会被阻塞，除非这个元素被另一个线程消费。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">没有条件创造条件Condition</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/Condition/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/Condition/"/>
    <updated>2022-01-04T17:14:21.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<p>https://blog.csdn.net/a1439775520/article/details/98471610</p>
<p>Condition 是为了调换 Object 中的 wait()
和notify().</p>
<table>
<thead>
<tr>
<th style="text-align:center">API</th>
<th style="text-align:center">Object</th>
<th style="text-align:center">Condition</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">等待</td>
<td style="text-align:center">wait()</td>
<td style="text-align:center">wait()</td>
</tr>
<tr>
<td style="text-align:center">通知</td>
<td style="text-align:center">notify()</td>
<td style="text-align:center">signal()</td>
</tr>
<tr>
<td style="text-align:center">通知所有</td>
<td style="text-align:center">notifyAll()</td>
<td style="text-align:center">signalAll()</td>
</tr>
</tbody>
</table>
<p><strong>wait是会释放锁</strong></p>
<h2 id="相同点"> 相同点</h2>
<ul>
<li>都必须被包裹在同步代码块中，即加锁</li>
<li>当调用wait都会释放锁</li>
</ul>
<h2 id="不同点"> 不同点</h2>
<ul>
<li>Object 依赖 synchronized 锁</li>
<li>Condition 依赖 Lock 锁</li>
</ul>
<h2 id="objectwait"> ObjectWait</h2>
<div><p>运行结果</p>
<ul>
<li>当前线程进入线程一</li>
<li>当前线程进入线程二</li>
<li>当前线程释放main</li>
<li>当前线程释放main</li>
<li>当前线程退出线程一</li>
<li>当前线程退出线程二</li>
</ul>
</div>
<div><pre><code><span>/**
 * @author liuxin
 * 2022/1/5 12:24 上午
 */</span>
<span>public</span> <span>class</span> <span>ObjectWait</span> <span>{</span>

    <span>public</span> <span>synchronized</span> <span>void</span> <span>objWait</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"当前线程进入"</span> <span>+</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>wait</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"当前线程退出"</span> <span>+</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>synchronized</span> <span>void</span> <span>objNotify</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"当前线程释放"</span> <span>+</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>notify</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>ObjectWait</span> objectWait <span>=</span> <span>new</span> <span>ObjectWait</span><span>(</span><span>)</span><span>;</span>
        <span>// 使用synchronized修饰方法，就是锁的是当前这个示例synchronized(this)</span>
        <span>new</span> <span>Thread</span><span>(</span><span>(</span><span>)</span> <span>-></span> <span>{</span>
            <span>try</span> <span>{</span>
                <span>// 当前进入等待，然后释放锁。wait会释放锁</span>
                objectWait<span>.</span><span>objWait</span><span>(</span><span>)</span><span>;</span>
            <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
                e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span><span>,</span><span>"线程一"</span><span>)</span><span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>

        <span>// 使用synchronized修饰方法，就是锁的是当前这个示例synchronized(this)</span>
        <span>new</span> <span>Thread</span><span>(</span><span>(</span><span>)</span> <span>-></span> <span>{</span>
            <span>try</span> <span>{</span>
                <span>// 当前进入等待，然后释放锁。wait会释放锁</span>
                objectWait<span>.</span><span>objWait</span><span>(</span><span>)</span><span>;</span>
            <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
                e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span><span>,</span><span>"线程二"</span><span>)</span><span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
        <span>Thread</span><span>.</span><span>sleep</span><span>(</span><span>1000L</span><span>)</span><span>;</span>
        <span>// 释放锁后才会放行</span>
        objectWait<span>.</span><span>objNotify</span><span>(</span><span>)</span><span>;</span>
        <span>// 释放锁后才会放行</span>
        objectWait<span>.</span><span>objNotify</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><h2 id="lockwait"> LockWait</h2>
<div><p>运行结果</p>
<ul>
<li>当前线程进入线程一</li>
<li>当前线程进入线程二</li>
<li>当前线程释放main</li>
<li>当前线程释放main</li>
<li>当前线程退出线程一</li>
<li>当前线程退出线程二</li>
</ul>
</div>
<div><pre><code><span>/**
 * @author liuxin
 * 2022/1/5 24:24 上午
 */</span>
<span>public</span> <span>class</span> <span>LockWait</span> <span>{</span>

    <span>private</span> <span>ReentrantLock</span> lock <span>=</span> <span>new</span> <span>ReentrantLock</span><span>(</span><span>)</span><span>;</span>

    <span>private</span> <span>Condition</span> condition <span>=</span> lock<span>.</span><span>newCondition</span><span>(</span><span>)</span><span>;</span>

    <span>public</span> <span>void</span> <span>lockWait</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        lock<span>.</span><span>lock</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"当前线程进入"</span> <span>+</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
        condition<span>.</span><span>await</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"当前线程退出"</span> <span>+</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
        lock<span>.</span><span>unlock</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>void</span> <span>lockNotify</span><span>(</span><span>)</span> <span>{</span>
        lock<span>.</span><span>lock</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"当前线程释放"</span> <span>+</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
        condition<span>.</span><span>signal</span><span>(</span><span>)</span><span>;</span>
        lock<span>.</span><span>unlock</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>LockWait</span> lockWait <span>=</span> <span>new</span> <span>LockWait</span><span>(</span><span>)</span><span>;</span>
        <span>// lock.lock()  线程一: 获取锁,然后wait之后，进入释放锁,然后进入到等待队列</span>
        <span>new</span> <span>Thread</span><span>(</span><span>(</span><span>)</span> <span>-></span> <span>{</span>
            <span>try</span> <span>{</span>
                <span>// 当前进入等待，然后释放锁。</span>
                lockWait<span>.</span><span>lockWait</span><span>(</span><span>)</span><span>;</span>
            <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
                e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span><span>,</span> <span>"线程一"</span><span>)</span><span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
        <span>// lock.lock()  当前线程二获取锁,然后wait之后，进入释放锁,然后进入到等待队列</span>
        <span>new</span> <span>Thread</span><span>(</span><span>(</span><span>)</span> <span>-></span> <span>{</span>
            <span>try</span> <span>{</span>
                <span>// 当前进入等待，然后释放锁。</span>
                lockWait<span>.</span><span>lockWait</span><span>(</span><span>)</span><span>;</span>
            <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
                e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span><span>,</span><span>"线程二"</span><span>)</span><span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>

        <span>Thread</span><span>.</span><span>sleep</span><span>(</span><span>1000L</span><span>)</span><span>;</span>
        <span>// 调用第一次，会唤醒线程一，继续向下执行</span>
        lockWait<span>.</span><span>lockNotify</span><span>(</span><span>)</span><span>;</span>
        <span>// 调用第二次，会唤醒线程二，继续向下执行</span>
        lockWait<span>.</span><span>lockNotify</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">性能优化之@Contended减少伪共享</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/Contended/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/Contended/"/>
    <updated>2022-05-22T07:02:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、什么叫伪共享"> 一、什么叫伪共享</h2>
<p>说到伪共享,就要说CPU缓存,我们程序执行时候信息会被保存到CPU缓存中
而这些缓存中的数据可能被多线程访问,假如一个线程还没处理完，另外一个线程
就对数据进行了修改,就会导致上一个线程发生幻读的情况,比如刚才看到a=1,然后准备a = a+1。
但是还没做,另外一个线程就先将a变成2了。导致了上一个线程计算后本来应该是a = 1 + 1,变成了a = 2 + 1
计算结果就不对了。</p>
<p>那么对于这种情况当然是不允许发生的，解决方案就是当发现另外一个线程更新了共享变量，就会把cpu缓存中的数据给失效。
然后都重新读取最新的变量值。</p>
<p><mark>这里有一个前提是共享变量，因为两个线程都会用到a,所以a是共享变量。</mark></p>
<p>那么我们在聊伪共享就简单了，下面举一个伪共享变量的例子。</p>
<div><pre><code><span>public</span> <span>class</span> <span>ContendedTest</span> <span>{</span>

    <span>volatile</span> <span>long</span> a<span>;</span>
    
    <span>volatile</span> <span>long</span> b<span>;</span>
    
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>ContendedTest</span> c <span>=</span> <span>new</span> <span>ContendedTest</span><span>(</span><span>)</span><span>;</span>
        <span>Thread</span> thread1 <span>=</span> <span>new</span> <span>Thread</span><span>(</span><span>(</span><span>)</span> <span>-></span> <span>{</span>
            <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10000_0000L</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
                c<span>.</span>a <span>=</span> i<span>;</span>
            <span>}</span>
        <span>}</span><span>)</span><span>;</span>
        <span>Thread</span> thread2 <span>=</span> <span>new</span> <span>Thread</span><span>(</span><span>(</span><span>)</span> <span>-></span> <span>{</span>
            <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10000_0000L</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
                c<span>.</span>b <span>=</span> i<span>;</span>
            <span>}</span>
        <span>}</span><span>)</span><span>;</span>
        <span>final</span> <span>long</span> start <span>=</span> <span>System</span><span>.</span><span>nanoTime</span><span>(</span><span>)</span><span>;</span>
        thread1<span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
        thread2<span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
        thread1<span>.</span><span>join</span><span>(</span><span>)</span><span>;</span>
        thread2<span>.</span><span>join</span><span>(</span><span>)</span><span>;</span>
        <span>// 1933</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>(</span><span>System</span><span>.</span><span>nanoTime</span><span>(</span><span>)</span> <span>-</span> start<span>)</span> <span>/</span> <span>100_0000</span><span>)</span><span>;</span>
    <span>}</span>
     
<span>}</span>    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>两个线程分别来更新a和b属性,根据缓存失效的原理,因为a和b都在同一个对象中,当一个属性被更新,就会触发cpu缓存失效。
那么等于这种情况cpu缓存就没什么用了。我们思考下两个线程分别更新a和b，而a和b没有任何关系。那么a和b是共享变量吗?
当然不是,这就叫伪共享。</p>
<h2 id="二、主动告诉程序伪共享"> 二、主动告诉程序伪共享</h2>
<p>我们可以使用 <code>@Contended</code> 来声明伪共享变量,从而是cpu不更新缓存。
本地测试时候记得加上jvm参数 <mark>-XX:-RestrictContended</mark>，否则无效哦。</p>
<div><pre><code><span>public</span> <span>class</span> <span>ContendedTest</span> <span>{</span>

    <span>@Contended</span>
    <span>volatile</span> <span>int</span> a<span>;</span>

    <span>@Contended</span>
    <span>volatile</span> <span>int</span> b<span>;</span>

    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>ContendedTest</span> c <span>=</span> <span>new</span> <span>ContendedTest</span><span>(</span><span>)</span><span>;</span>
        <span>Thread</span> thread1 <span>=</span> <span>new</span> <span>Thread</span><span>(</span><span>(</span><span>)</span> <span>-></span> <span>{</span>
            <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10000_0000L</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
                c<span>.</span>a <span>=</span> i<span>;</span>
            <span>}</span>
        <span>}</span><span>)</span><span>;</span>
        <span>Thread</span> thread2 <span>=</span> <span>new</span> <span>Thread</span><span>(</span><span>(</span><span>)</span> <span>-></span> <span>{</span>
            <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10000_0000L</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
                c<span>.</span>b <span>=</span> i<span>;</span>
            <span>}</span>
        <span>}</span><span>)</span><span>;</span>
        <span>final</span> <span>long</span> start <span>=</span> <span>System</span><span>.</span><span>nanoTime</span><span>(</span><span>)</span><span>;</span>
        thread1<span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
        thread2<span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
        thread1<span>.</span><span>join</span><span>(</span><span>)</span><span>;</span>
        thread2<span>.</span><span>join</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>(</span><span>System</span><span>.</span><span>nanoTime</span><span>(</span><span>)</span> <span>-</span> start<span>)</span> <span>/</span> <span>100_0000</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>那么你猜下性能能提高多少呢? 前者<code>1933</code>后者<code>758ms</code>,差不多2.5倍的样子。</p>
<p>那么留下一个问题? 有多少场景都在使用<code>@Contended</code>呢? 知道的请留言评论。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">循环锁屏障 CyclicBarrier</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/CyclicBarrier/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/CyclicBarrier/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<p>举个例子,五个人开黑,少一个人就开不了。</p>
<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>Throwable</span> <span>{</span>
        <span>CyclicBarrier</span> cb <span>=</span> <span>new</span> <span>CyclicBarrier</span><span>(</span><span>5</span><span>,</span> <span>new</span> <span>Runnable</span><span>(</span><span>)</span> <span>{</span>
            <span>@Override</span>
            <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"人都到齐了,游戏开始进入峡谷"</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span><span>)</span><span>;</span>
        <span>Runnable</span> player <span>=</span> <span>new</span> <span>Runnable</span><span>(</span><span>)</span> <span>{</span>
            <span>@Override</span>
            <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>"已经进来了"</span><span>)</span><span>;</span>
                <span>try</span> <span>{</span>
                    cb<span>.</span><span>await</span><span>(</span><span>)</span><span>;</span>
                <span>}</span> <span>catch</span> <span>(</span><span>Throwable</span> e<span>)</span> <span>{</span>
                    e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span><span>;</span>
        <span>new</span> <span>Thread</span><span>(</span>player<span>,</span> <span>"上路程咬金"</span><span>)</span><span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
        <span>new</span> <span>Thread</span><span>(</span>player<span>,</span> <span>"中路安琪拉"</span><span>)</span><span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
        <span>new</span> <span>Thread</span><span>(</span>player<span>,</span> <span>"下路小鲁班"</span><span>)</span><span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
        <span>new</span> <span>Thread</span><span>(</span>player<span>,</span> <span>"辅助李元芳"</span><span>)</span><span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
        <span>new</span> <span>Thread</span><span>(</span>player<span>,</span> <span>"打野孙悟空"</span><span>)</span><span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">倒计锁 CountDownLatch</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/CountDownLatch/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/CountDownLatch/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<p>上文我们知道了 <code>Semaphore</code> 信号量的用法，那么这一篇基本不用学了。因为原理基本上是一样的。
但是用法不太一样。</p>
<p><code>Semaphore</code> 是获取到资源就执行，获取不到资源就等待。
<code>CountDownLatch</code> 跟 <code>Semaphore</code> 正好相反。</p>
<p>CountDownLatch#await() 可以理解为获取不到资源，就等待。这么说不太好理解，直接看源码吧。</p>
<div><pre><code><span>private</span> <span>static</span> <span>final</span> <span>class</span> <span>Sync</span> <span>extends</span> <span>AbstractQueuedSynchronizer</span> <span>{</span>
        <span>private</span> <span>static</span> <span>final</span> <span>long</span> serialVersionUID <span>=</span> <span>4982264981922014374L</span><span>;</span>

        <span>Sync</span><span>(</span><span>int</span> count<span>)</span> <span>{</span>
            <span>setState</span><span>(</span>count<span>)</span><span>;</span>
        <span>}</span>

        <span>int</span> <span>getCount</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> <span>getState</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>

        <span>protected</span> <span>int</span> <span>tryAcquireShared</span><span>(</span><span>int</span> acquires<span>)</span> <span>{</span>
            <span>// 获取资源,await就是调用这个方法。当tryReleaseShared没有进行扣减之前。</span>
            <span>// 这里一直都是-1。而-1就是获取不到资源进行等待</span>
            <span>return</span> <span>(</span><span>getState</span><span>(</span><span>)</span> <span>==</span> <span>0</span><span>)</span> <span>?</span> <span>1</span> <span>:</span> <span>-</span><span>1</span><span>;</span>
        <span>}</span>

        <span>protected</span> <span>boolean</span> <span>tryReleaseShared</span><span>(</span><span>int</span> releases<span>)</span> <span>{</span>
            <span>// countDown就调用这个方法,进行扣减1</span>
            <span>for</span> <span>(</span><span>;</span><span>;</span><span>)</span> <span>{</span>
                <span>int</span> c <span>=</span> <span>getState</span><span>(</span><span>)</span><span>;</span>
                <span>if</span> <span>(</span>c <span>==</span> <span>0</span><span>)</span>
                    <span>return</span> <span>false</span><span>;</span>
                <span>int</span> nextc <span>=</span> c<span>-</span><span>1</span><span>;</span>
                <span>if</span> <span>(</span><span>compareAndSetState</span><span>(</span>c<span>,</span> nextc<span>)</span><span>)</span>
                    <span>return</span> nextc <span>==</span> <span>0</span><span>;</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><h2 id="常用用法"> 常用用法</h2>
<p><strong>注意:</strong>
<mark>CountDownLatch不可重复使用，当计数器减少到0之后，就废了，无法继续使用了。</mark></p>
<p>CountDownLatch是在java1.5被引入的，跟它一起被引入的并发工具类还有CyclicBarrier、Semaphore、ConcurrentHashMap和BlockingQueue，它们都存在于java.util.concurrent包下。CountDownLatch这个类能够使一个线程等待其他线程完成各自的工作后再执行。例如，应用程序的主线程希望在负责启动框架服务的线程已经启动所有的框架服务之后再执行。</p>
<p>CountDownLatch是通过一个计数器来实现的，计数器的初始值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就会减1。当计数器值到达0时，它表示所有的线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务。</p>
<p><img src="http://incdn1.b0.upaiyun.com/2015/04/f65cc83b7b4664916fad5d1398a36005.png" alt="" loading="lazy"></p>
<h2 id="countdownlatch-存在的意义"> CountDownLatch 存在的意义</h2>
<p>让主线程阻塞，等待线程结束后在运行</p>
<p>直译过来就是倒计数(CountDown)门闩(Latch)。倒计数不用说，门闩的意思顾名思义就是阻止前进。在这里就是指 CountDownLatch.await() 方法在倒计数为0之前会阻塞当前线程。</p>
<p><strong>实现</strong></p>
<p>CountDownLatch内部维护一个最大线程数，当每个线程执行结束，就调用
<code>latch.countDown();</code> 将数量减 1 ,当数量为0的时候，就放弃阻塞主线程，也就是放弃 <code>countDownLatch.await()</code>阻塞的线程</p>
<h2 id="代码解释"> 代码解释</h2>
<div><pre><code> <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span><span>throws</span> <span>Exception</span><span>{</span>
        <span>int</span> pagecount<span>=</span><span>3</span><span>;</span>
        <span>ExecutorService</span> executors <span>=</span> <span>Executors</span><span>.</span><span>newFixedThreadPool</span><span>(</span>pagecount<span>)</span><span>;</span>
        <span>CountDownLatch</span> countDownLatch <span>=</span> <span>new</span> <span>CountDownLatch</span><span>(</span>pagecount<span>)</span><span>;</span>
        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> pagecount<span>;</span> i<span>++</span><span>)</span> <span>{</span>
            <span>// 启动线程抓取</span>
            executors
                    <span>.</span><span>execute</span><span>(</span><span>new</span> <span>Runnable</span><span>(</span><span>)</span> <span>{</span>
                        <span>@Override</span>
                        <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
                            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
                            countDownLatch<span>.</span><span>countDown</span><span>(</span><span>)</span><span>;</span>
                        <span>}</span>
                    <span>}</span><span>)</span><span>;</span>
        <span>}</span>
        countDownLatch<span>.</span><span>await</span><span>(</span><span>)</span><span>;</span><span>//主线程阻塞在这里，等到线程结束,</span>
        <span>//然后关闭线程池</span>
        executors<span>.</span><span>shutdown</span><span>(</span><span>)</span><span>;</span>

    <span>}</span>



</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id="最大缺点"> 最大缺点</h2>
<p>通过前面源码我们发现, <code>CountDownLatch</code> 只有减没有加，所以导致了一个最大的缺点就是
只能使用一次,当扣减为0的时候,那么就不能在继续使用了。所以就要引入 <code>CyclicBarrier</code>了。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Java管理扩展</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/JMX/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/JMX/"/>
    <updated>2021-12-25T09:26:08.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1590919227000.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<p><strong>JMX（Java Management Extensions，即Java管理扩展）是一个为应用程序、设备、系统等植入管理功能的框架。JMX可以跨越一系列异构操作系统平台、系统体系结构和网络传输协议，灵活的开发无缝集成的系统、网络和服务管理应用。</strong></p>
<p>前面是对JMX的介绍，那么JMX在我们日常的开发过程中，有什么实际的意义呢? 相信很多做Java开发的同学都使用过JDK自带的 jconsole 或者 jvisualvm 监控过JVM的运行情况，但不知道有没有留意过它们会有一个MBean的功能/标签，通过MBean可以看到在JVM中运行的组件的一些属性和操作。下面小编就通过一个SpringBoot应用来一探究竟。并教会你如何自定义扩展。</p>
<h2 id="一、实际意义"> 一、实际意义</h2>
<h3 id="_1-启动一个springboot应用"> 1. 启动一个SpringBoot应用</h3>
<p>下面我们以SpringBoot应用为例子，启动一个SpringBoot项目。端口是 <code>8080</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1590921574000.png" alt="" loading="lazy"></p>
<h3 id="_2-命令行打开jconsole"> 2. 命令行打开Jconsole</h3>
<p><img src="https://img.springlearn.cn/blog/learn_1590921682000.png" alt="" loading="lazy"></p>
<h3 id="_3-连接前面的应用"> 3. 连接前面的应用</h3>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbtkkzi1bj30p00ku761.jpg" alt="image-20200531184151871" loading="lazy"></p>
<p>选中MBean标签,然后可以看到一个SpringApplication的类。shutdown是服务下线。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1590921783000.png" alt="" loading="lazy"></p>
<p>当我们点击了shutdown方法后,应用就会自动的关闭了。导致Jconsole连接丢失
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbtpwfbbqj30oy0i2gof.jpg" alt="image-20200531184702204" loading="lazy"></p>
<p>getProperty方法是获取应用中的配置信息。如图我们获取redis的相关信息。可以看到返回值是Spring应用中我们定义的值
6379</p>
<p><img src="https://img.springlearn.cn/blog/learn_1590921918000.png" alt="" loading="lazy"></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbtoo8x1yj30lc07imy6.jpg" alt="image-20200531184553346" loading="lazy"></p>
<p>那么其实这个能力就是利用JMX提供的接口来实现的。下面我们通过分析SpringBoot中的源码来看他是如何实现的。</p>
<hr>
<h2 id="二、源码追踪看springboot应用如何实现"> 二、源码追踪看SpringBoot应用如何实现?</h2>
<p>我们通过看Jconsole工具,可以看到工具里面的类名叫SpringApplication，目录是admin，于是我们就根据这个推测SpringBoot中的命名,果然我们找到两个实现类。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1590922192000.png" alt="" loading="lazy"></p>
<p><strong>1. SpringApplicationAdminMXBean</strong></p>
<p>这个类就是JMX中的MBean，我们可以简单理解这个里面的方法都是可以通过Jconsole来调用的。
通过将这个类注册给JMX管理器就能实现在Jconsole中的数据展示。</p>
<p>首先看<strong>SpringApplicationAdminMXBean</strong></p>
<div><pre><code><span>public</span> <span>interface</span> <span>SpringApplicationAdminMXBean</span> <span>{</span>
   <span>//是否可读</span>
   <span>boolean</span> <span>isReady</span><span>(</span><span>)</span><span>;</span>
   <span>//是否web应用</span>
   <span>boolean</span> <span>isEmbeddedWebApplication</span><span>(</span><span>)</span><span>;</span>
   <span>//获取配置信息</span>
   <span>String</span> <span>getProperty</span><span>(</span><span>String</span> key<span>)</span><span>;</span>
   <span>//下线应用</span>
   <span>void</span> <span>shutdown</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>实现类<strong>SpringApplicationAdmin</strong>,是SpringApplicationAdminMXBeanRegistrar的内部类</p>
<div><pre><code><span>private</span> <span>class</span> <span>SpringApplicationAdmin</span> <span>implements</span> <span>SpringApplicationAdminMXBean</span> <span>{</span>
    <span>// 是否可读，当应用还没起来时候这个值是false</span>
      <span>@Override</span>
      <span>public</span> <span>boolean</span> <span>isReady</span><span>(</span><span>)</span> <span>{</span>
         <span>return</span> <span>SpringApplicationAdminMXBeanRegistrar</span><span>.</span><span>this</span><span>.</span>ready<span>;</span>
      <span>}</span>
      <span>// 是否是web应用</span>
      <span>@Override</span>
      <span>public</span> <span>boolean</span> <span>isEmbeddedWebApplication</span><span>(</span><span>)</span> <span>{</span>
         <span>return</span> <span>SpringApplicationAdminMXBeanRegistrar</span><span>.</span><span>this</span><span>.</span>embeddedWebApplication<span>;</span>
      <span>}</span>
    <span>// 从Spring的配置信息中实时读取值</span>
      <span>@Override</span>
      <span>public</span> <span>String</span> <span>getProperty</span><span>(</span><span>String</span> key<span>)</span> <span>{</span>
         <span>return</span> <span>SpringApplicationAdminMXBeanRegistrar</span><span>.</span><span>this</span><span>.</span>environment<span>.</span><span>getProperty</span><span>(</span>key<span>)</span><span>;</span>
      <span>}</span>
    <span>// 关闭Spring应用</span>
      <span>@Override</span>
      <span>public</span> <span>void</span> <span>shutdown</span><span>(</span><span>)</span> <span>{</span>
         logger<span>.</span><span>info</span><span>(</span><span>"Application shutdown requested."</span><span>)</span><span>;</span>
         <span>SpringApplicationAdminMXBeanRegistrar</span><span>.</span><span>this</span><span>.</span>applicationContext<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
      <span>}</span>

   <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p><strong>2. SpringApplicationAdminMXBeanRegistrar</strong></p>
<p>提供注册能力。这个类中我们可以知道如何注册JMX以及如何取消注册。下面我看这个类如何利用Spring提供的接口能力,来实现应用下线。及注册到JMX上的吧。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1590922871000.png" alt="" loading="lazy"></p>
<p>自动化配置将SpringApplicationAdminMXBeanRegistrar声明成一个Spring中的Bean对象。并配置JMX中的命名及目录。
<img src="https://img.springlearn.cn/blog/learn_1590923451000.png" alt="" loading="lazy"></p>
<h3 id="_1-applicationcontextaware"> 1. ApplicationContextAware</h3>
<p>获得读取上下文能力。在Spring容器中一个bean如何实现了该方法则就可以获取上下文对象。</p>
<div><pre><code>   @Override
   public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
      Assert.state(applicationContext instanceof ConfigurableApplicationContext,
            &quot;ApplicationContext does not implement ConfigurableApplicationContext&quot;);
      this.applicationContext = (ConfigurableApplicationContext) applicationContext;
   }
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="_2-genericapplicationlistener"> 2. GenericApplicationListener</h3>
<p>获取处理事件的能力,同样在Spring中只要实现该接口,就获取了事件监听的能力,不过具体监听什么事件要自己去判断。大家可以根据例子
来理解。</p>
<div><pre><code>  // 根据事件泛型判断是否需要处理，这里判断如果是ApplicationReadyEvent和WebServerInitializedEvent
  // 事件就处理
  @Override
   public boolean supportsEventType(ResolvableType eventType) {
      Class&lt;?&gt; type = eventType.getRawClass();
      if (type == null) {
         return false;
      }
      return ApplicationReadyEvent.class.isAssignableFrom(type)
            || WebServerInitializedEvent.class.isAssignableFrom(type);
   }

   @Override
   public boolean supportsSourceType(Class&lt;?&gt; sourceType) {
      return true;
   }

   @Override
   public void onApplicationEvent(ApplicationEvent event) {
    // 如果Spring已经准备好了,就将this.ready = true;
      if (event instanceof ApplicationReadyEvent) {
         onApplicationReadyEvent((ApplicationReadyEvent) event);
      }
    // 如果是Web应用,this.embeddedWebApplication = true
      if (event instanceof WebServerInitializedEvent) {
         onWebServerInitializedEvent((WebServerInitializedEvent) event);
      }
   }
   //优先级
   @Override
   public int getOrder() {
      return Ordered.HIGHEST_PRECEDENCE;
   }

   void onApplicationReadyEvent(ApplicationReadyEvent event) {
      if (this.applicationContext.equals(event.getApplicationContext())) {
         this.ready = true;
      }
   }

   void onWebServerInitializedEvent(WebServerInitializedEvent event) {
      if (this.applicationContext.equals(event.getApplicationContext())) {
         this.embeddedWebApplication = true;
      }
   }
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><h3 id="_3-environmentaware"> 3. EnvironmentAware</h3>
<p>获取应用配置信息, 和上面一样实现了Aware结尾的接口,都能获取对象的Spring内容的对象实例，然后我们就可以根据该实例,来进行功能扩展。</p>
<div><pre><code>@Override
   public void setEnvironment(Environment environment) {
      this.environment = environment;
   }
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="_4-initializingbean"> 4. InitializingBean</h3>
<p>这里就要着重看了，在初始化时候将MBean注册到JMX上。当然我们可以通过 @PostConstruct注解来声明初始化方法。</p>
<div><pre><code>@Override
   public void afterPropertiesSet() throws Exception {
      MBeanServer server = ManagementFactory.getPlatformMBeanServer();
      server.registerMBean(new SpringApplicationAdmin(), this.objectName);
      if (logger.isDebugEnabled()) {
         logger.debug(&quot;Application Admin MBean registered with name &#39;&quot; + this.objectName + &quot;&#39;&quot;);
      }
   }
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="_5-disposablebean"> 5. DisposableBean</h3>
<p>应用销毁时候,取消注册。同样我们也可以用@PreDestroy注解来实现</p>
<div><pre><code>@Override
   public void destroy() throws Exception {
      ManagementFactory.getPlatformMBeanServer().unregisterMBean(this.objectName);
   }
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>通过对SpringBoot应用源码的追踪，我们大概已经明白JMX的实际意义了，并且能自定义一个能提供类似能力的MBean了吧，但是JMX能做的远远不止如此。</p>
<h2 id="三、自定义mbean"> 三、自定义MBean</h2>
<p>注意接口名必须是MBean结尾，实现类必须去掉MBean</p>
<p>如CustomMBean接口对应的实现类必须是Custom。</p>
<h3 id="_1-代码实现"> 1. 代码实现</h3>
<div><pre><code><span>@Component</span>
<span>public</span> <span>class</span> <span>CustomMbeanRegistrar</span> <span>implements</span> <span>ApplicationContextAware</span><span>,</span> <span>InitializingBean</span><span>,</span> <span>DisposableBean</span> <span>{</span>
    <span>private</span> <span>ConfigurableApplicationContext</span> applicationContext<span>;</span>
    <span>private</span> <span>ObjectName</span> objectName <span>=</span> <span>new</span> <span>ObjectName</span><span>(</span><span>"com.example.demo:type=CustomAdmin,name=CustomMXBean"</span><span>)</span><span>;</span>

    <span>public</span> <span>CustomMbeanRegistrar</span><span>(</span><span>)</span> <span>throws</span> <span>MalformedObjectNameException</span> <span>{</span>
    <span>}</span>
    <span>@Override</span>
    <span>public</span> <span>void</span> <span>destroy</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>ManagementFactory</span><span>.</span><span>getPlatformMBeanServer</span><span>(</span><span>)</span><span>.</span><span>unregisterMBean</span><span>(</span><span>this</span><span>.</span>objectName<span>)</span><span>;</span>
    <span>}</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>afterPropertiesSet</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>MBeanServer</span> server <span>=</span> <span>ManagementFactory</span><span>.</span><span>getPlatformMBeanServer</span><span>(</span><span>)</span><span>;</span>
        server<span>.</span><span>registerMBean</span><span>(</span><span>new</span> <span>Custom</span><span>(</span><span>)</span><span>,</span> <span>this</span><span>.</span>objectName<span>)</span><span>;</span>
    <span>}</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>setApplicationContext</span><span>(</span><span>ApplicationContext</span> applicationContext<span>)</span> <span>throws</span> <span>BeansException</span> <span>{</span>
        <span>this</span><span>.</span>applicationContext <span>=</span> <span>(</span><span>ConfigurableApplicationContext</span><span>)</span> applicationContext<span>;</span>
    <span>}</span>

    <span>public</span> <span>interface</span> <span>CustomMBean</span> <span>{</span>
        <span>int</span> <span>getDatabaseConnectionPoolSize</span><span>(</span><span>)</span><span>;</span>
        <span>void</span> <span>customShutdown</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>class</span> <span>Custom</span> <span>implements</span> <span>CustomMBean</span> <span>{</span>

        <span>/**
         * 获取数据库连接池大小
         *
         * @return 模拟
         */</span>
        <span>@Override</span>
        <span>public</span> <span>int</span> <span>getDatabaseConnectionPoolSize</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> <span>new</span> <span>Random</span><span>(</span><span>)</span><span>.</span><span>nextInt</span><span>(</span><span>100</span><span>)</span><span>;</span>
        <span>}</span>

        <span>/**
         * 自定义一个销毁方法
         */</span>
        <span>public</span> <span>void</span> <span>customShutdown</span><span>(</span><span>)</span> <span>{</span>
            <span>CustomMbeanRegistrar</span><span>.</span><span>this</span><span>.</span>applicationContext<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><h3 id="_2-演示"> 2. 演示</h3>
<p><img src="https://img.springlearn.cn/blog/learn_1590924584000.png" alt="" loading="lazy"></p>
<h2 id="四、总结"> 四、总结</h2>
<p>通过前面的演示,大概我们对JMX在实际中的用处有一个大概的了解了吧。根据这个特性,我们就可以根据我们的需求来定制属于自己的能力。</p>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589360371000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">再也不怕被HashMap欺负了</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/HashMap/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/HashMap/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1596467333000.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<blockquote>
<p>HashMap是我们在日常开发中经常使用的一个结合类型,同时也是面试时候最好提问的集合类型,在这里进行整理
一起学习,进步。</p>
</blockquote>
<h2 id="一、数据结构"> 一、数据结构</h2>
<p>先说两种数据结构, 不用怕, 如果要对付面试只要了解就行了。不用手写实现, 同时也因为已经有人帮我写好,所以开发中我们只要用就行。</p>
<h3 id="_1-二叉树"> 1. 二叉树</h3>
<p><a href="https://www.cs.usfca.edu/~galles/visualization/BST.html" target="_blank" rel="noopener noreferrer">动画展示二叉树</a></p>
<p>本来是一个相对平衡的二叉树(当前数据 &gt; 根节点 ？ 从右边插入 : 从左边插入)。
<img src="https://img.springlearn.cn/blog/learn_1596522740000.png" alt="" loading="lazy">
但是由于在使用的过程中的删除,慢慢的变成了一个瘸腿。此时树的高度越高,数据越多,导致查询叶子
的耗时越长。
<img src="https://img.springlearn.cn/blog/learn_1596522608000.png" alt="" loading="lazy"></p>
<p>于是乎人们在这个数据结构的基础上,研究出新的结构,就是下面的红黑树。</p>
<h3 id="_2-红黑树"> 2. 红黑树</h3>
<p><a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html" target="_blank" rel="noopener noreferrer">动画展示红黑树</a></p>
<p>依次插入7 5 3 2 4 6 8 9 12 11 17 13 14 16</p>
<p>很明显我们可以看出红黑树比二叉树相对比较平衡。
<img src="https://img.springlearn.cn/blog/learn_1596523217000.png" alt="" loading="lazy"></p>
<p>在对比一下二叉树</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596523318000.png" alt="" loading="lazy"></p>
<p>好了关于数据结构的知识就说这么多,可以通过图就能知道这两种数据结构情况了。因为数据结构不是我们本篇研究的点。
所以就提这么多。</p>
<h2 id="二、源码分析"> 二、源码分析</h2>
<p>HashMap 实现了 Map 接口,JDK1.7由 数组 + 链表实现， 1.8后由 数组 + 链表 + 红黑树实现</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596527068000.png" alt="" loading="lazy"></p>
<h3 id="_1-put的源码分析"> 1. put的源码分析</h3>
<p>HashMap中声明的常量信息,注意看。下面源码中会提到。</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>DEFAULT_INITIAL_CAPACITY</td>
<td>默认的初始容量</td>
</tr>
<tr>
<td>MAXIMUM_CAPACITY</td>
<td>最大的容量2^30</td>
</tr>
<tr>
<td>DEFAULT_LOAD_FACTOR</td>
<td>容器个数 size &gt; 负载因子 * 数组长度  就需要进行扩容</td>
</tr>
<tr>
<td>TREEIFY_THRESHOLD</td>
<td>如果数组中某一个链表 &gt;= 8 需要转化为红黑树</td>
</tr>
<tr>
<td>UNTREEIFY_THRESHOLD</td>
<td>如果数组中某一个链表转化为红黑树后的节点 &lt; 6 的时候 继续转为 链表</td>
</tr>
</tbody>
</table>
<div><pre><code> final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;
        if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;
        if ((p = tab[i = (n - 1) &amp; hash]) == null)
            tab[i] = newNode(hash, key, value, null);
        else {
            Node&lt;K,V&gt; e; K k;
            if (p.hash == hash &amp;&amp;
                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))
                e = p;
            //判断是否是树    
            else if (p instanceof TreeNode)
                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);
            //继续用链表    
            else {
                // 循环链表
                for (int binCount = 0; ; ++binCount) {
                    if ((e = p.next) == null) {
                        // 新建节点存储
                        p.next = newNode(hash, key, value, null);
                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st
                            //大于树的阀值,就转换为树结构
                            treeifyBin(tab, hash);
                        break;
                    }
                    if (e.hash == hash &amp;&amp;
                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
                        break;
                    p = e;
                }
            }
            if (e != null) { // existing mapping for key
                V oldValue = e.value;
                if (!onlyIfAbsent || oldValue == null)
                    e.value = value;
                afterNodeAccess(e);
                return oldValue;
            }
        }
        ++modCount;
        if (++size &gt; threshold)
            resize();
        afterNodeInsertion(evict);
        return null;
    }

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div><p>从上面源码中我们可以看到在put时候会判断是链表结构还是红黑树。如果是树就用树put
<code>((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</code>。</p>
<p>如果是链表就循环列表插入数据,如果发现列表长度大于树的阀值就讲链表转换为树</p>
<h3 id="_2-put流程赘述"> 2. put流程赘述</h3>
<ol>
<li>判断 table 是否为 null。为 null 则新建一个 table 数组</li>
<li>调用 hash 获取 该 key 的 hash 值
<img src="https://img.springlearn.cn/blog/learn_1596528441000.png" alt="" loading="lazy"></li>
<li>如果发现有数据,且还是树结构就调用树的put方法</li>
<li>如果发现有数据,是链表的结构就循环插入尾部,如果发现达到了要转换树的长度,就转成红黑树</li>
<li>发现key冲突直接新值替换旧值,并且break;
<img src="https://img.springlearn.cn/blog/learn_1596528854000.png" alt="" loading="lazy"></li>
</ol>
<h2 id="三、面试知识扩展"> 三、面试知识扩展</h2>
<p>前面我们知道了HashMap在1.8之后的优化。这里我们最后再说一个面试题。
问: 1.7时候hashmap在扩容时候回出现死链的问题。问题原因是什么?  已经出现的场景是什么?</p>
<p>首先看下扩容方法 <code>resize</code>
<img src="https://img.springlearn.cn/blog/learn_1596530770000.png" alt="" loading="lazy"></p>
<h3 id="_1-优化1"> 1. 优化1</h3>
<p>jdk1.8在对链表进行扩容时候时候不是直接都去hash了。而是
<code>(e.hash &amp; oldCap) == 0</code> 下标不变
<code>(e.hash &amp; oldCap) != 0</code> 下标 = 原下标 + oldCap</p>
<h3 id="_2-出现的场景"> 2. 出现的场景</h3>
<p>多线程操作扩容</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596531864000.png" alt="" loading="lazy"></p>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">读写锁 ReadWriteLock</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/ReadWriteLock/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/ReadWriteLock/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">重入锁 ReentrantLock</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/ReentrantLock/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/ReentrantLock/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Java异常体系</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/"/>
    <updated>2021-12-25T09:26:08.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1589293715000.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<p>知己知彼方能百战不殆,在小编初学Java时候特别怕程序报异常,经常会因为异常不知所措,相信这个问题应该是所有
初学者都会有的心理感受;如果你也有这种感受,那么只有一种解决方法:
迎难而上,攻克Java异常体系,长痛不如短痛,只要清楚了Java的异常体系,就不会再有这种感受了。下面跟着小编来窥探Java的异常体系吧。</p>
<h1 id="一、java异常体系其实很简单"> 一、Java异常体系其实很简单</h1>
<p>其实Java的异常体系是非常简单的,简单到只要你看过本文就能明白百分之八九十的样子。当你清楚了Java的异常体系
那么在遇到项目执行异常的时候,基本看报错的异常就大概明白问题出在哪里,遇到的错误多了,就成长了,处理的问题就是
你未来在技术路上所积累的财富。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589294764000.png" alt="" loading="lazy"></p>
<p>在Java的异常体系中 <code>Throwable</code> 我们可以理解为是一个根异常,即所有的异常都是它的子类</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589295509000.png" alt="" loading="lazy"></p>
<h1 id="二、error"> 二、Error</h1>
<p>前面我们说了Java的异常体系中 <code>Throwable</code> 可以理解是一个根异常,那么 <code>Error</code> 就是这个根节点的一个子节点。
<code>Error</code> 类对象由 <code>Java</code> 虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。程序无法处理的异常，一般伴随者jvm虚拟机停止，或者断电之类
这种问题，是无法通过程序来解决的。</p>
<p><strong>这种异常基本很少,如果遇到也不要慌,跟你的业务逻辑没有关系,顶多是Java代码写的有问题,只要不是业务问题其实大多都能先通过重启解决;
但是假如项目还未上线,只是在开发过程中出现这种问题一定要弄清楚原因,是那一部分代码编写异常导致的,否则上线可能有重大隐患</strong></p>
<p><strong>经验教学:</strong></p>
<ol>
<li>如果是在项目系统过程中遇到这种问题,可能是因为Jar包冲突导致的。</li>
<li>如果是在项目运行过程中遇到这种问题,可能是因为对象创建过多没有释放,导致堆栈溢出。这个时候就要看GC是否频繁,然后对堆栈日志进行分析,看存在最多的对象是哪一个,然后分析代码解决。</li>
</ol>
<h1 id="三、exception"> 三、Exception</h1>
<p><code>Exception</code> 异常时我们平时在开发中遇到最多，其实 <code>Exception</code> 也分为两种即:</p>
<ol>
<li><code>checkException</code> 编译异常，这种异常，是哪些没有遵守java语言规则，容易看出和解决的</li>
<li><code>uncheckException</code> 运行异常，运行异常，具有不确定性，往往难以排查，包括处理逻辑问题。</li>
</ol>
<p>然而 <code>checkException</code> 和 <code>uncheckException</code> 其实只是一个概念,并没有对应的 <code>Java异常类</code>。我们基本可以忽略
<code>checkException</code> 因为这种异常基本现在的编译器都会给我们做了，我们在写代码时候就会实时的给我提示错误了。我们
只用关心 <code>uncheckException</code>即可。</p>
<p><strong>uncheckException</strong></p>
<p><img src="https://img.springlearn.cn/blog/learn_1589297073000.png" alt="" loading="lazy"></p>
<p><code>RuntimeException</code> + <code>Error</code> 和其子类都是属于 <code>uncheckException</code></p>
<p>前面我们已经对 <code>Error</code> 做了说明，现在就主要来看下 <code>RuntimeException</code>。 <code>RuntimeException</code> 从名字来看就是
运行异常,所谓运行异常就是可能在程序运行过程中发生的异常,这种异常一般是可以通过代码逻辑进行处理的。
我们举例一个例子,我们都知道0不能作为除数。但是假如在下面这个代码中</p>
<div><pre><code>public class Tester {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(&quot;请输入被除数a:&quot;);
        int a = sc.nextInt();
        System.out.print(&quot;请输入除数b:&quot;);
        int b = sc.nextInt();
        System.out.println(&quot;a/b=&quot; + a / b);
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>当输入a=8,b=2,那么结果就是4。</p>
<p><img src="https://i02piccdn.sogoucdn.com/8206a4441e0386c3" alt="" loading="lazy"></p>
<p><strong>假如我们输入b=0呢?</strong></p>
<p>学过数学都知道0不能做除数,程序也不运行你这么输入,但是却不能阻止你,只能通过报错的方式来告诉你。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589298143000.png" alt="" loading="lazy"></p>
<p>那么我们就要对这个异常进行处理,当发现有这个异常就在控制台来提醒用户。那么代码就会变成这样</p>
<div><pre><code>public class Tester {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(&quot;请输入被除数a:&quot;);
        int a = sc.nextInt();
        System.out.print(&quot;请输入除数b:&quot;);
        int b = sc.nextInt();
        try {
            System.out.println(&quot;a/b=&quot; + a / b);
        } catch (ArithmeticException ate) {
            //对算术异常进行捕捉
            System.err.println(&quot;0不能作为除数,请输入不为0的任意数&quot;);
        }
    }
}

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>当出现算术异常直接提示: &quot;0不能作为除数,请输入不为0的任意数&quot;
<img src="https://img.springlearn.cn/blog/learn_1589298261000.png" alt="" loading="lazy"></p>
<p>那么像这种程序中无可避免会出现,且又能通过逻辑来处理的异常就是运行异常。运行异常一般都可以正常运行,只是在特定情况下会导致异常发生。
像这面这个例子,我们只要看到 <code>ArithmeticException</code> 就知道是算术异常。所以只要我们对运行异常类有一个认识，其实就能解决大多数的程序问题了。
下面我们来看下运行异常都要有哪些类把。</p>
<p><img src="https://i03piccdn.sogoucdn.com/f960e6a461d218d2" alt="" loading="lazy"></p>
<p><strong>只要对下面运行异常类进行熟悉了,基本就清楚掌握了Java的异常体系了</strong></p>
<p><img src="https://img.springlearn.cn/blog/learn_1589299119000.png" alt="" loading="lazy"></p>
<p><img src="https://img.springlearn.cn/blog/learn_1589299523000.png" alt="" loading="lazy"></p>
<p>以上就是常见的运行异常类,当然Java中还有很多不常见的异常类。剩下的我们就可以在日常工作中去学习了。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Java编程</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/"/>
    <updated>2022-03-24T17:05:50.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1648126927000.png" alt="" loading="lazy"></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">信号量 Semaphore</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/Semaphore/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/Semaphore/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<h2 id="🚀-知识快读"> 🚀 知识快读</h2>
<p><code>Semaphore</code> 翻译过来就是信号量, 其根本原理就是基于 <code>CAS</code> 共享锁的一种实现。举一个例子。
假设停车场只有三个车位，一开始三个车位都是空的。这时如果同时来了五辆车，看门人允许其中三辆不受阻碍的进入，然后放下车拦，剩下的车则必须在入口等待，此后来的车也都不得不在入口处等待。这时，有一辆车离开停车场，看门人得知后，打开车拦，放入一辆，如果又离开两辆，则又可以放入两辆，如此往复。</p>
<p>那么上面的这个例子可以这样理解，资源一共有3个, 即三个车位。如何来控制这5辆汽车，来合理的使用这3个资源呢?
<code>Semaphore</code> 可以这样来定义。</p>
<div><pre><code><span>// 1. 定一个信号量,声明有3个资源。使用公平模式线程将会按到达的顺序（FIFO）执行(也就是等待时间最长的先执行),如果是非公平，则可以后请求的有可能排在队列的头部。</span>
<span>Semaphore</span> semp <span>=</span> <span>new</span> <span>Semaphore</span><span>(</span><span>3</span><span>)</span><span>;</span>
<span>// 2. 获取1个许可 - 最大允许3个进入，一但超过就让其等待,除非已经释放</span>
semp<span>.</span><span>acquire</span><span>(</span><span>)</span><span>;</span>  
<span>// 3. 释放1个许可 </span>
semp<span>.</span><span>release</span><span>(</span><span>)</span><span>;</span> 
<span>// 4. 获取1许可,失败就返回,不等待</span>
semp<span>.</span><span>tryAcquire</span><span>(</span><span>)</span><span>;</span>  
<span>// 5. 获取2许可,失败就返回,不等待</span>
semp<span>.</span><span>tryAcquire</span><span>(</span><span>2</span><span>)</span><span>;</span>  
<span>// 6. 不允许被中断</span>
semp<span>.</span><span>acquireUninterruptibly</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="知识点1-fair-nofair"> 知识点1: Fair &amp; NoFair</h2>
<p><code>Semaphore</code> 的模式配置,只是构造来定义。</p>
<ul>
<li>默认构造不公平模式, 谁来申请资源,就先尝试获取资源。排队的要等到没有资源进来申请才能继续申请</li>
</ul>
<div><pre><code>    <span>public</span> <span>Semaphore</span><span>(</span><span>int</span> <span>permits</span><span>)</span> <span>{</span>
        sync <span>=</span> <span>new</span> <span>NonfairSync</span><span>(</span><span>permits</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>Semaphore</span><span>(</span><span>int</span> <span>permits</span><span>,</span> <span>boolean</span> fair<span>)</span> <span>{</span>
        sync <span>=</span> fair <span>?</span> <span>new</span> <span>FairSync</span><span>(</span><span>permits</span><span>)</span> <span>:</span> <span>new</span> <span>NonfairSync</span><span>(</span><span>permits</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p><img src="https://img.springlearn.cn/blog/learn_1640531082000.png" alt="" loading="lazy"></p>
<h2 id="知识点2-申请资源"> 知识点2: 申请资源</h2>
<ul>
<li>acquire() 获取1个资源,获取不到就等待,如果线程中断,会直接中断。</li>
<li>acquire(2) 获取2个资源,获取不到就等待,如果线程中断,会直接中断。</li>
<li>tryAcquire() 获取1个资源,获取不到就返回 <code>false</code>,如果线程中断,会直接中断。</li>
<li>acquireUninterruptibly() 获取1个资源,获取不到就等待,不会关心线程中断。</li>
</ul>
<h2 id="知识点3-释放资源"> 知识点3: 释放资源</h2>
<ul>
<li>release() 释放一个资源</li>
<li>release(2) 释放两个资源</li>
</ul>
<h2 id="知识点4-其他api"> 知识点4: 其他API</h2>
<ul>
<li>availablePermits() 当前资源数量</li>
<li>drainPermits() 获取当前资源数量，并将剩余资源清零，直接赋值0</li>
<li>reducePermits(2) 将资源数量，扣减2个</li>
<li>isFair() 是否公平</li>
<li>hasQueuedThreads() 是否还有线程等待</li>
<li>getQueueLength() 还有多少线程等待</li>
<li>getQueuedThreads() 获取所有的线程集合</li>
</ul>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">SPI服务发现机制</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/SPI/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/SPI/"/>
    <updated>2021-12-25T09:26:08.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1590160192000.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<h2 id="一、什么是spi"> 一、什么是SPI</h2>
<p>SPI ，全称为 Service Provider Interface，是一种服务发现机制。JDK中的SPI是通过在ClassPath路径下的META-INF/services文件夹查找扩展文件,自动加载文件里所定义的类。</p>
<p>在小编的理解来,觉得它更是一种思想。即找到服务的接口, 美其名曰: 服务发现机制思想。很多开源框架都有借用这种思想，比如dubbo、jdbc。</p>
<h2 id="二、spi在jdk中如何使用"> 二、SPI在JDK中如何使用</h2>
<p>SPI在JDK中,我们可以使用 <code>ServiceLoader</code> 类进行使用。
<img src="https://img.springlearn.cn/blog/learn_1590225886000.png" alt="" loading="lazy"></p>
<h3 id="_1-前提准备"> 1. 前提准备</h3>
<div><pre><code>public interface SpiService {
    String say();
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>两个实现类</p>
<div><pre><code>public class ASpiServiceImpl implements SpiService {
    static {
        System.out.println(&quot;static init a&quot;);
    }

    {
        System.out.println(&quot;init a&quot;);
    }

    @Override
    public String say() {
        return &quot;A&quot;;
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><div><pre><code>public class BSpiServiceImpl implements SpiService {
    static {
        System.out.println(&quot;static init b&quot;);
    }

    {
        System.out.println(&quot;init b&quot;);
    }
    @Override
    public String say() {
        return &quot;B&quot;;
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id="_2-进行配置"> 2. 进行配置</h3>
<p>在resources中创建META-INF/services目录</p>
<p><img src="https://img.springlearn.cn/blog/learn_1590225980000.png" alt="" loading="lazy"></p>
<div><pre><code>│  └── resources
│      └── META-INF
│          └── services
│              └── com.github.easylog.spi.SpiService
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>com.github.easylog.spi.SpiService文件内容</p>
<div><pre><code>com.github.easylog.spi.impl.ASpiServiceImpl
com.github.easylog.spi.impl.BSpiServiceImpl
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="_3-使用"> 3. 使用</h3>
<p>通过ServiceLoader类我们可以加载到所有配置的实现类,并对实现类进行处理。需要注意一点的是，看4使用注意。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1590226089000.png" alt="" loading="lazy"></p>
<div><pre><code>public class SpiTester {
    public static void main(String[] args) {
        ServiceLoader&lt;SpiService&gt; spiServices = ServiceLoader.load(SpiService.class);
        Iterator&lt;SpiService&gt; iterator = spiServices.iterator();
        while (iterator.hasNext()) {
            SpiService next = iterator.next();
            System.out.println(next.say());
        }
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="_4-使用注意"> 4. 使用注意</h3>
<p>可以看下小编前面声明的两个实现类,都定义了静态代码块和非静态代码块。正常情况当这个字节码被加载,就会执行静态代码块里面的内容，但是实际运行时候却没有执行, 其实是有原因的。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1590223793000.png" alt="" loading="lazy"></p>
<p>可以看到第二个参数是false。即加载时候不进行初始化。</p>
<h2 id="三、dubbo中服务发现思想"> 三、Dubbo中服务发现思想</h2>
<p>服务发现这种思想的特点是: 代码不是硬编码的方式,而是可配置的。只要将要支持的实现类放到指定配置文件下面,就会自动被加载起来了。然后代码中只关心使用即可。我们可以利用这种思想来实现, 框架的扩展,比如前面说了。Dubbo会利用SPI的思想进行，加载用户自定义的过滤器。</p>
<p>这种思想特别适合做服务扩展。现在大多数开源框架中都会使用到这种思想。</p>
<h3 id="_1-定义过滤器"> 1. 定义过滤器</h3>
<p><img src="https://img.springlearn.cn/blog/learn_1590226192000.png" alt="" loading="lazy"></p>
<div><pre><code>@Activate(group = { Constants.PROVIDER })
public class ProviderHelloFilter implements Filter {
  
    @Override
    public Result invoke(Invoker&lt;?&gt; invoker, Invocation invocation) throws RpcException {
        System.out.pringln(&quot;hello ok!&quot;);
        return invoker.invoke(invocation);
    }

}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="_2-添加配置文件"> 2. 添加配置文件</h3>
<p><code>META-INF/dubbo/Interal/com.alibaba.dubbo.rpc.Filter</code></p>
<p>默认支持的过滤器</p>
<p><img src="https://img.springlearn.cn/blog/learn_1590224576000.png" alt="" loading="lazy"></p>
<p>利用SPI原理,我们自定义一个过滤器</p>
<p><img src="https://img.springlearn.cn/blog/learn_1590224824000.png" alt="" loading="lazy"></p>
<h3 id="_3-使用-2"> 3. 使用</h3>
<p>其实API跟JDK中使用ServiceLoader的方式,非常类同。唯一不同的是Dubbo中是使用ExtensionLoader。因为dubbo中做了一些特殊的增强处理。比如在配置文件中支持自定义一个别名key。如上图hello就是key。通过getExtension(&quot;hello&quot;)就能获取指定的实现类。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1590226285000.png" alt="" loading="lazy"></p>
<div><pre><code>public class SpiTester {
    public static void main(String[] args) throws Exception{
        ExtensionLoader&lt;Filter&gt; filterExtensionLoader = ExtensionLoader.getExtensionLoader(Filter.class);
        Set&lt;String&gt; supportedExtensions = filterExtensionLoader.getSupportedExtensions();
        System.out.println(supportedExtensions);
        //[accesslog, activelimit, cache...]
        Filter hello = filterExtensionLoader.getExtension(&quot;hello&quot;);
        //com.github.easylog.spi.ProviderHelloFilter@299a06ac
        System.out.println(hello);
    }
    
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>**那么这种思想你学会了吗? **</p>
<p><img src="https://i04piccdn.sogoucdn.com/96a6f7554ee28b9c" alt="" loading="lazy"></p>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589360371000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">synchronized锁升级</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/synchronized/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/synchronized/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1596467333000.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<h2 id="一、重量级锁"> 一、重量级锁</h2>
<p>什么叫重量级锁？</p>
<p>就是申请资源必须经过kernel(内核也叫操作系统)，调用。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596467437000.png" alt="" loading="lazy"></p>
<h2 id="二、轻量级锁"> 二、轻量级锁</h2>
<p>轻量级锁,是不经过操作系统。轻量级锁是相对于重量级锁来叫的,也可以叫乐观锁。</p>
<p>在Java中乐观锁就是cas操作(compare and swap)根据英文翻译就是比较和交换。
底层都是调用的Unsafe里面的方法,可以看到这些方法是native方法。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596467628000.png" alt="" loading="lazy"></p>
<p>通过看jvm源码,看到c++的代码有一个汇编语言支持cas</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596467784000.png" alt="" loading="lazy"></p>
<p>但是，这条cmpchg1不具有原子性，点进lock_if_mp(%4)里</p>
<p>最终实现是lock cmpxchg 指令：表示在硬件在执行后面的指令会锁定一个北桥总线。（相当于锁定总线，但是比锁总线要轻量级）解决了下面的问题</p>
<h2 id="三、偏向锁"> 三、偏向锁</h2>
<p>顾名思义，它会偏向于第一个访问锁的线程，如果在运行过程中，同步锁只有一个线程访问，不存在多线程争用的情况，则线程是不需要触发同步的，这种情况下，就会给线程加一个偏向锁。
说白了,没有竞争,还叫啥锁呀。就是加了一个标记。认为没有人给你竞争。</p>
<h2 id="四、锁升级步骤"> 四、锁升级步骤</h2>
<p>偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</p>
<p>在jdk1.6之前synchronized直接就是一个重量级锁,一了百了。
jdk优化后出现了,锁升级的概念。</p>
<p>那么其实synchronized的执行过程:</p>
<ol>
<li>检测Mark Word里面是不是当前线程的ID，如果是，表示当前线程处于偏向锁</li>
<li>如果不是，则使用CAS将当前线程的ID替换Mard Word，如果成功则表示当前线程获得偏向锁，置偏向标志位1(前面一个线程刚好释放的情况下,这个才能成功,否则看3)</li>
<li>如果失败，则说明发生竞争，撤销偏向锁，进而升级为轻量级锁。</li>
<li>当前线程使用CAS将对象头的Mark Word替换为锁记录指针，如果成功，当前线程获得锁</li>
<li>如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。</li>
<li>如果自旋成功则依然处于轻量级状态。</li>
<li>如果自旋失败，则升级为重量级锁。</li>
</ol>
<p>翻译成白话问:</p>
<ol>
<li>
<p>当没有人跟你竞争就是一个偏向锁,当cas失败了,说明有人跟你竞争了,这个时候锁就从偏向锁升级成了轻量级锁。</p>
</li>
<li>
<p>轻量级锁的状态下,仍然还有很多线程来竞争,那么此时cas就会比较严重从而浪费cpu执行。就升级为重量级锁。
其次其他等待线程就进入了阻塞状态。</p>
</li>
</ol>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">JVM钩子hooks函数</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/hooks%E5%87%BD%E6%95%B0/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/hooks%E5%87%BD%E6%95%B0/"/>
    <updated>2021-12-25T09:26:08.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1589383784000.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<p>什么是钩子函数,在学习钩子函数之前,小编先提一个问题。</p>
<p><strong>请问在Spring中,如果JVM异常终止,Spring是如何保证会释放掉占用的资源,比如说数据库连接等资源呢?</strong></p>
<p>钩子函数非常简单,简单到小编只用摘抄一段Spring代码即可。走你,现在开始。</p>
<h1 id="问题"> 问题</h1>
<p><code>Spring</code> 容器中 <code>Bean</code> 在什么时候执行销毁方法?</p>
<p>我们知道在Spring中定义销毁方法有两种方式</p>
<ol>
<li>实现 <code>DisposableBean</code> 的 <code>destroy</code> 方法。</li>
<li>使用 <code>@PreDestroy</code> 注解修饰方法</li>
</ol>
<div><pre><code>@Component
public class DataCollectBean implements DisposableBean {

    /**
     * 第一种方法实现 DisposableBean#destroy方法
     *
     * @throws Exception 异常
     */
    @Override
    public void destroy() throws Exception {
        System.err.println(&quot;执行销毁方法&quot;);
    }

    /**
     * 第二种方法使用PreDestroy注解声明销毁方法
     */
    @PreDestroy
    public void customerDestroy() {
        System.err.println(&quot;执行自定义销毁方法&quot;);
    }


}

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h2 id="那么在什么时候执行销毁方法"> 那么在什么时候执行销毁方法?</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1589471346000.png" alt="" loading="lazy"></p>
<ol>
<li>主动执行销毁bean</li>
</ol>
<div><pre><code>    public static void main(String[] args) {
        ConfigurableApplicationContext run = SpringApplication.run(DemoApplication.class, args);
        DataCollectBean bean = run.getBean(DataCollectBean.class);
        //1. 主动销毁bean
        run.getBeanFactory().destroyBean(bean);
    }
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ol start="2">
<li>JVM关闭时候自动执行销毁方法。</li>
</ol>
<p>这里就要用到钩子函数了, <code>Spring</code> 的钩子函数在 <code>AbstractApplicationContext#shutdownHook属性</code></p>
<p>如果我们是SpringBoot项目我们看到在SpringApplication启动时候会注册一个钩子函数</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589473259000.png" alt="" loading="lazy"></p>
<h1 id="如何定义钩子函数"> 如何定义钩子函数?</h1>
<p>简直太简单了，没有任何学习成本。一行代码就能搞定。</p>
<div><pre><code>public class HooksTester {
    public static void main(String[] args) {
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println(&quot;钩子函数执行&quot;);
            }
        }));
        //当主动关闭应用
        while (true);
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p><img src="https://img.springlearn.cn/blog/learn_1589471574000.png" alt="" loading="lazy"></p>
<h1 id="触发钩子函数的场景"> 触发钩子函数的场景</h1>
<p>只要不是机器断电，强制kill -9 强制杀进程，都会触发。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589473502000.png" alt="" loading="lazy"></p>
<h1 id="钩子函数能做什么"> 钩子函数能做什么？</h1>
<p><img src="https://img.springlearn.cn/blog/learn_1589383970000.png" alt="" loading="lazy"></p>
<p>正如上图所示优雅停机,在项目将要关闭时候,主动释放程序占用的资源信息,释放db连接池的连接等其他占用的资源信息。
如果我们是 <code>Spring</code> 项目其实我们不用自己定义钩子函数,我们只要使用Spring提供给我们的销毁方法即可。因为
Spring定义的钩子函数中会去执行, <code>DisposableBean.destory()</code> 和被 <code>PreDestroy</code> 修饰的方法。</p>
<p>我们看下源码</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589472185000.png" alt="" loading="lazy"></p>
<div><pre><code>protected void doClose() {
		// Check whether an actual close attempt is necessary...
		if (this.active.get() &amp;&amp; this.closed.compareAndSet(false, true)) {
			if (logger.isDebugEnabled()) {
				logger.debug(&quot;Closing &quot; + this);
			}

			LiveBeansView.unregisterApplicationContext(this);

			try {
				// Publish shutdown event.
				publishEvent(new ContextClosedEvent(this));
			}
			catch (Throwable ex) {
				logger.warn(&quot;Exception thrown from ApplicationListener handling ContextClosedEvent&quot;, ex);
			}

			// Stop all Lifecycle beans, to avoid delays during individual destruction.
			if (this.lifecycleProcessor != null) {
				try {
					this.lifecycleProcessor.onClose();
				}
				catch (Throwable ex) {
					logger.warn(&quot;Exception thrown from LifecycleProcessor on context close&quot;, ex);
				}
			}

			// Destroy all cached singletons in the context&#39;s BeanFactory.
			destroyBeans();

			// Close the state of this context itself.
			closeBeanFactory();

			// Let subclasses do some final clean-up if they wish...
			onClose();

			// Reset local application listeners to pre-refresh state.
			if (this.earlyApplicationListeners != null) {
				this.applicationListeners.clear();
				this.applicationListeners.addAll(this.earlyApplicationListeners);
			}

			// Switch to inactive.
			this.active.set(false);
		}
	}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><p>可以看到：doClose()方法会执行bean的destroy()，也会执行SmartLifeCycle的stop()方法，我们就可以通过重写这些方法来实现对象的关闭，生命周期的管理，实现平滑shutdown</p>
<p><img src="https://i03piccdn.sogoucdn.com/7eac32473373b70a" alt="" loading="lazy"></p>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589360371000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">分布式锁</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1596467333000.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>在单机环境下多线程操作共享数据时候回用到锁的概念,因为是单机可以直接使用jdk提供的锁机制就可以满足。
但是在微服务场景下,因为是多服务共享数据,此时jdk提供的锁就不能再使用了。于是乎就有了分布式锁。
本文介绍常见的几种可以使用的生产的分布式锁</p>
</div>
<p><strong>本文面向有开发经验的同学,所以场景就不赘述,直接上干货</strong></p>
<h2 id="一、分布式锁具有的品格"> 一、分布式锁具有的品格</h2>
<ul>
<li>基本的加锁和释放锁</li>
<li>具备锁失效机制,防止死锁</li>
<li>非阻塞机制</li>
<li>高性能和高可用</li>
</ul>
<h2 id="二、思考一下如何自己实现"> 二、思考一下如何自己实现?</h2>
<h3 id="_1-db"> 1. db</h3>
<p>根据上面提出的要求,发现只要能满足多服务之前通信就能实现。
比如我们可以用mysql就能实现,比如A服务对一个表加锁和释放锁。B服务就会发现表加了锁。此时B就阻塞了。</p>
<p>当然这明显不满足,非阻塞的机制。另外如果要用一个数据库来做锁的场景也太浪费性能了。</p>
<h3 id="_2-redis"> 2. redis</h3>
<p>利用redis命令来实现,如果返回ok说明获取锁。返回nil说明没有获取到锁。</p>
<p>不阻塞,防止死锁,高性能,都满足</p>
<div><pre><code>set key value [EX seconds] [PX milliseconds] [NX|XX]
EX seconds：设置失效时长，单位秒
PX milliseconds：设置失效时长，单位毫秒
NX：key不存在时设置value，成功返回OK，失败返回(nil)
XX：key存在时设置value，成功返回OK，失败返回(nil)
//对资源加一个锁 key为资源名 value可以为任意 ex为秒 1为过期时间 nx为
127.0.0.1:6379&gt; set ziyuanming 1 ex 1 nx
OK
127.0.0.1:6379&gt; set ziyuanming 1 ex 1 nx
(nil)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="_3-zookeeper"> 3. zookeeper</h3>
<h4 id="获取锁"> 获取锁</h4>
<ol>
<li>在Zookeeper当中创建一个持久节点ParentLock。当第一个客户端想要获得锁时，需要在ParentLock这个节点下面创建一个临时顺序节点 Lock1。</li>
<li>Client1查找ParentLock下面所有的临时顺序节点并排序，判断自己所创建的节点Lock1是不是顺序最靠前的一个。如果是第一个节点，则成功获得锁。</li>
<li>如果再有一个客户端 Client2 前来获取锁，则在ParentLock下载再创建一个临时顺序节点Lock2。
此时Client2发现自己并不是最靠前的就像Lock1注册了一个Watcher,用于监听Lock1节点释放。此时Client2就进入等待状态</li>
<li>Client3,4以此类推</li>
</ol>
<h4 id="释放锁"> 释放锁</h4>
<ol>
<li>Client1释放了锁,此时Zookeeper就讲Lock1移出,并触发了Lock1的Watcher。</li>
<li>Client2一直在监听Lock1的状态,当Lock1节点被删除,Client2里面收到通知获得了锁。</li>
</ol>
<h2 id="三、现成的解决方案"> 三、现成的解决方案</h2>
<h3 id="_1-db的方式就不考虑了"> 1. db的方式就不考虑了</h3>
<p>实现简单,但是不划算,性能也不是最好的。</p>
<h3 id="_2-redis-2"> 2. redis</h3>
<div><pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.redisson&lt;/groupId&gt;
    &lt;artifactId&gt;redisson&lt;/artifactId&gt;
    &lt;version&gt;3.11.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code>
public class RedLockTester {
    public static void main(String[] args) {
        //连接redis
        Config config = new Config();
        config.useSingleServer().setAddress(&quot;redis://127.0.0.1:6379&quot;);
        RedissonClient redisson = Redisson.create(config);
        log.info(&quot;连接Redis&quot;);

        //1.定义锁
        RLock lock = redisson.getLock(&quot;myTest001&quot;);

        try {
            //尝试加锁的超时时间
            Long timeout = 300L;
            //锁过期时间
            Long expire = 30L;
            //2.获取锁
            if (lock.tryLock(timeout, expire, TimeUnit.MILLISECONDS)) {
                //2.1.获取锁成功的处理
                log.info(&quot;加锁成功&quot;);
                //...do something
                log.info(&quot;使用完毕&quot;);
            } else {
                //2.2.获取锁失败的处理
                log.info(&quot;加锁失败&quot;);
                log.info(&quot;其他处理&quot;);
            }
        } catch (InterruptedException e) {
            log.error(&quot;尝试获取分布式锁失败&quot;, e);
        } finally {
            //3.释放锁
            try {
                lock.unlock();
                log.info(&quot;锁释放成功&quot;);
            } catch (Exception e) {
                //do nothing...
            }
        }

        //关闭连接
        redisson.shutdown();
        log.info(&quot;关闭redis连接&quot;);
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><p>通过官方文档能找到实现第三方工具</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596471713000.png" alt="" loading="lazy"></p>
<p><a href="https://www.cnblogs.com/rgcLOVEyaya/p/RGC_LOVE_YAYA_1003days.html" target="_blank" rel="noopener noreferrer">参考文章</a></p>
<h3 id="_3-zookeeper-2"> 3. zookeeper</h3>
<p><a href="https://curator.apache.org/" target="_blank" rel="noopener noreferrer">Curator</a></p>
<div><pre><code>&lt;!-- 对zookeeper的底层api的一些封装 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;
            &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;
            &lt;version&gt;2.12.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 封装了一些高级特性，如：Cache事件监听、选举、分布式锁、分布式Barrier --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;
            &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;
            &lt;version&gt;2.12.0&lt;/version&gt;
        &lt;/dependency&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>几乎对所有的JDK锁都实现了,基于Zookeeper的分布式锁。具体使用方法可以自行百度。</p>
<ul>
<li>InterProcessMutex：分布式可重入排它锁</li>
<li>InterProcessSemaphoreMutex：分布式排它锁</li>
<li>InterProcessReadWriteLock：分布式读写锁</li>
<li>InterProcessMultiLock：将多个锁作为单个实体管理的容器</li>
<li>InterProcessSemaphoreV2 信号量</li>
<li>DistributedBarrier 分布式栅栏</li>
<li>DistributedDoubleBarrier 分布式栅栏</li>
</ul>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T14:58:20.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Java四大引用</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E5%9B%9B%E5%A4%A7%E5%BC%95%E7%94%A8/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E5%9B%9B%E5%A4%A7%E5%BC%95%E7%94%A8/"/>
    <updated>2021-12-25T09:26:08.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<h1 id="一、概念"> 一、概念</h1>
<h2 id="_1-强引用"> 1. 强引用</h2>
<p>new 对象并指向引用变量的都是强引用,开发中大部分都是强引用。对于强引用,JVM宁愿报错<code>OutOfMemoryError</code>错误,是程序异常终止,
也不会回收强引用来解决内存, 对这类情况,可以通过赋值强引用对象=null,从而被JVM回收。
但是一般我们在方法中定义的强引用,会存在方法栈中,当方法运行完,退出,此时方法中的强引用也会因为引用数为0,从而被回收。</p>
<h2 id="_2-软引用"> 2. 软引用</h2>
<p>在内存充足情况下,GC不会回收软引用对象,如果内存空间不足了,才会回收这些对象的内存。也正因为这个特性,所以软引用经常用作缓存对象使用。</p>
<h2 id="_3-弱引用"> 3. 弱引用</h2>
<p>任意GC都会清理掉软引用对象,弱引用是最容易记的,任何的GC动作都会将弱引用对象给回收掉。</p>
<h2 id="_4-虚引用"> 4. 虚引用</h2>
<p>和其他三个不一样,这个不对生命周期,有影响,而是当要回收时候,加入到Queue队列中</p>
<h1 id="二、在jdk中的体现"> 二、在JDK中的体现</h1>
<table>
<thead>
<tr>
<th>类</th>
<th>引用说明</th>
<th>用途</th>
<th>生存时间</th>
<th>被垃圾回收时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>Object</td>
<td>默认new出来的都是强引用</td>
<td>对象正常状态</td>
<td>JVM停止或者无引用被回收</td>
<td>无任务对象使用</td>
</tr>
<tr>
<td>SoftReference</td>
<td>软引用</td>
<td>常用作缓存</td>
<td>当内存不足时候终止</td>
<td>内存不足时候回收</td>
</tr>
<tr>
<td>WeakReference</td>
<td>弱引用</td>
<td>常用作缓存</td>
<td>垃圾回收后终止</td>
<td>任何垃圾回收时</td>
</tr>
<tr>
<td>PhantomReference</td>
<td>虚引用</td>
<td>用于跟踪对象是否被回收</td>
<td>垃圾回收后终止</td>
<td>任何垃圾回收时</td>
</tr>
</tbody>
</table>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589360371000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">委派双亲之类加载器</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E5%A7%94%E6%B4%BE%E5%8F%8C%E4%BA%B2%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E5%A7%94%E6%B4%BE%E5%8F%8C%E4%BA%B2%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    <updated>2021-12-25T09:26:08.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1589811713000.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<ul>
<li>BootStrap ClassLoader：称为启动类加载器，是Java类加载层次中最顶层的类加载器，负责加载JDK中的核心类库，如：rt.jar、resources.jar、charsets.jar等，可通过如下程序获得该类加载器从哪些地方加载了相关的jar或class文件：</li>
<li>Extension ClassLoader：称为扩展类加载器，负责加载Java的扩展类库，默认加载JAVA_HOME/jre/lib/ext/目下的所有jar。</li>
<li>App ClassLoader：称为系统类加载器，负责加载应用程序classpath目录下的所有jar和class文件。</li>
</ul>
<h2 id="一、类加载器"> 一、类加载器</h2>
<p>类的加载在JVM的外部实现。对于任意的一个类，都必须由加载它的类加载器和这个类本身共同确立其在Java虚拟机中的唯一性。JVM提供中类加载器。</p>
<h2 id="二、启动类加载器-bootstrap-classloader"> 二、启动类加载器（Bootstrap ClassLoader）</h2>
<p>负责加载 JAVA_HOME\lib 目录中的，或通过-Xbootclasspath 参数指定路径中的，且被 虚拟机认可（按文件名识别，如 rt.jar）的类。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589811324000.png" alt="" loading="lazy"></p>
<h2 id="三、扩展类加载器-extension-classloader"> 三、扩展类加载器(Extension ClassLoader)</h2>
<p>负责加载 JAVA_HOME\lib\ext 目录中的，或通过 java.ext.dirs 系统变量指定路径中的类 库。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589811366000.png" alt="" loading="lazy"></p>
<h2 id="四、应用程序类加载器-application-classloader"> 四、应用程序类加载器(Application ClassLoader)</h2>
<p>负责加载用户路径（classpath）上的类库。 JVM 通过双亲委派模型进行类的加载，当然我们也可以通过继承 java.lang.ClassLoader 实现自定义的类加载器。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589811400000.png" alt="" loading="lazy"></p>
<h2 id="五、原理解释"> 五、原理解释</h2>
<p>ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。</p>
<h2 id="六、为什么要使用双亲委托这种模型呢"> 六、为什么要使用双亲委托这种模型呢？</h2>
<p>因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。</p>
<h2 id="七、但是jvm在搜索类的时候-又是如何判定两个class是相同的呢"> 七、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？</h2>
<p>JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。</p>
<div><pre><code> /**
         * rt目录:
         * 加载rt.jar的类加载器
         */
        ClassLoader rtClassLoader = StringBuffer.class.getClassLoader();
        System.out.println(rtClassLoader);

        /**
         * lib/ext扩展包
         * sun.misc.Launcher$ExtClassLoader@67b6d4ae
         */
        ClassLoader extClassLoader = EventID.class.getClassLoader();
        System.out.println(extClassLoader);

        /**
         * 当前应用加载器
         * sun.misc.Launcher$AppClassLoader@33909752
         */
        ClassLoader classLoader = BaseSyntaxTest.class.getClassLoader();
        System.out.println(classLoader);

        /**
         * sun.misc.Launcher$AppClassLoader@33909752
         */
        ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();
        System.out.println(currentClassLoader);
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>最后求关注,求订阅,谢谢你的阅读!</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589360371000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">线程安全之原子操作</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1589361031000.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<p><strong>原子特性: 原子是最小的粒子,不可再分</strong></p>
<p>这并不是一个化学课,而是巧妙的借用了化学上的一个概念,即原子是最小的粒子,不可再分;原子操作也是不能再分的操作;
为了能把这个讲明白,下文基本都是大白话,其实Java本来并不是很难,而是总有一些人喜欢把简单的概念给复杂化。小编不喜欢
那种说辞,所以尽量简单易懂。如有问题,欢迎提出问题。共同交流进步,最后谢谢你的阅读。</p>
<hr>
<h1 id="举例说明原子操作重要性"> 举例说明原子操作重要性</h1>
<p>在很多场景中我们需要我们的操作是原子特性的,如果我们写的程序都是单线程的,其实我们没必要考虑原子操作。但是假如
我们写多线程操作,或者是在Web服务中来更新对象属性,那么就必须要来考虑原子操作问题了。</p>
<p>举一个🌰例子A:</p>
<div><pre><code>int a = 1;
</code></pre>
<div><span>1</span><br></div></div><p>可以看到程序对变量 <code>a</code> 操作,其实是有多个步骤进行的。在单线程环境下基本不会发生任何问题
<img src="https://img.springlearn.cn/blog/learn_1589372995000.png" alt="" loading="lazy"></p>
<p>举一个🌰例子B(单线程操作):</p>
<div><pre><code>public class Tester {

    private static Integer a = 1;

    private static AtomicInteger aa = new AtomicInteger(1);

    private static void restore() {
        a = 1;
        aa = new AtomicInteger(1);
    }

    public static void main(String[] args) {
        for (int i = 0; i &lt; 10; i++) {
            test(&quot;第&quot; + i + &quot;次&quot;);
            restore();
        }
    }

    private static void test(String str) {
        for (int i = 1; i &lt;= 1000; i++) {
            new Thread(() -&gt; a = a + 1).start();
            new Thread(() -&gt; aa.addAndGet(1)).start();
        }
        System.out.print(str + &quot;常规操作a=&quot; + a);
        System.out.println(&quot; &lt;===&gt; &quot;+str+&quot;原子操作操作aa=&quot; + aa);
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>规律:</p>
<div><pre><code>        /**
         * i              i+1
         * 1: a = 1 + 1 = 2
         * 2: a = 2 + 1 = 3
         * 3: a = 3 + 1 = 4
         * 4: a = 4 + 1 = 5
         * 5: a = 5 + 1 = 6
         * 6: a = 6 + 1 = 7
         * 7: a = 7 + 1 = 8
         * 8: a = 8 + 1 = 9
         * 9: a = 9 + 1 = 10
         * 10:a = 10 + 1 = 11
         */
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>如上面代码变量a是基本类型,变量aa是原子类型,正常情况对a或者aa进行1000次操作结果都应该是
<code>1001</code>。正常情况我们可以理解是单线程操作。结果也是没有问题的。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589380382000.png" alt="" loading="lazy"></p>
<p>举一个🌰例子C(多线程操作):</p>
<div><pre><code>public class Tester {

    private static Integer a = 1;

    private static AtomicInteger aa = new AtomicInteger(1);

    private static void restore() {
        a = 1;
        aa = new AtomicInteger(1);
    }

    public static void main(String[] args) throws Exception {
        for (int i = 0; i &lt; 10; i++) {
            test(&quot;第&quot; + i + &quot;次&quot;);
            restore();
        }
    }

    private static void test(String str) throws Exception {
        for (int i = 1; i &lt;= 100; i++) {
            new Thread(() -&gt; a = a + 1).start();
            new Thread(() -&gt; a = a + 1).start();

            new Thread(() -&gt; aa.addAndGet(1)).start();
            new Thread(() -&gt; aa.addAndGet(1)).start();
            Thread.sleep(1);
        }
        System.out.print(str + &quot;常规操作a=&quot; + a);
        System.out.println(&quot; &lt;===&gt; &quot; + str + &quot;原子操作操作aa=&quot; + aa);
    }
    
}

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><p>规律:</p>
<div><pre><code>    /**
     * i          2 * i + 1
     * 1: a = 1 + 1 + 1 = 3
     * 2: a = 3 + 1 + 1 = 5
     * 3: a = 5 + 1 + 1 = 7
     * 4: a = 7 + 1 + 1 = 9
     * 5:                 11
     * 6:                 13
     * 7:                 15
     * 8:                 17
     * 9:                 19
     * 10:                21
     */
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>多线程环境下操作会不会有问题呢? 出现了问题。我们看到使用常规操作的a变量出现了数据不一致情况。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589375176000.png" alt="" loading="lazy"></p>
<p>实际上当循环的次数越多,出现错误的几率就越大,如下我们循环了1000次。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589375386000.png" alt="" loading="lazy"></p>
<h1 id="问题分析"> 问题分析</h1>
<p>我们思考为什么基本类型进行多线程操作时候会出现这种情况呢? 其实问题答案最开始已经说了。 我们通过这张图
就可以找到原因。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589372995000.png" alt="" loading="lazy"></p>
<p>对变量的每次操作其实都有3个步骤</p>
<ol>
<li>读取变量值</li>
<li>变量值操作</li>
<li>变量重新赋值。</li>
</ol>
<p>我们模拟一下错误的原因。</p>
<p>当A线程读取a=1,并对1+1。但是还未对变量重新赋值a=2的时候，
B线程也读取了A还未赋值的变量,此时变量还是1,那么B线程因为读取了还未更新的数据,所以也做1+1的操作。然后B对a
重新赋值了此时a=2,是B赋值的。这个时候A因为已经执行完了前两个步骤,最后也重新赋值了a=2。</p>
<p>这样数据就更新丢了。这就是因为数据更新不是原子性从而导致的问题。</p>
<p>因为数据更新丢了,所以出现了。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589380830000.png" alt="" loading="lazy"></p>
<h1 id="如何解决这种问题"> 如何解决这种问题</h1>
<p>如何解决这种问题,其实很简单只要我们保证我们的操作是原子操作即可,简单来说就是将更新的三个步骤合并成一个步骤即可,在Java中JDK已经为我们提供了很多的
原子操作每一个基本类型都对应一个原子操作。</p>
<h2 id="原子基础类"> 原子基础类</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1589378016000.png" alt="" loading="lazy"></p>
<p><strong>原子基础类API</strong></p>
<p><img src="https://img.springlearn.cn/blog/learn_1589378409000.png" alt="" loading="lazy"></p>
<h2 id="原子数组类"> 原子数组类</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1589378718000.png" alt="" loading="lazy"></p>
<p><strong>原子更新数组API</strong></p>
<p><img src="https://img.springlearn.cn/blog/learn_1589378583000.png" alt="" loading="lazy"></p>
<h2 id="原子引用类"> 原子引用类</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1589379304000.png" alt="" loading="lazy"></p>
<p><strong>注意:</strong></p>
<p>想要原子的更新字段，需要两个步骤：</p>
<p>1.每次使用的时候必须使用静态方法newUpdater()创建一个更新器，并且需要设置想要更新的类和属性</p>
<p>2.更新类的字段（属性）必须使用public volatile修饰符</p>
<h1 id="最后我们看一下原子操作的原理"> 最后我们看一下原子操作的原理</h1>
<p><img src="https://img.springlearn.cn/blog/learn_1589379629000.png" alt="" loading="lazy"></p>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589360371000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Lambda函数式编程</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <updated>2021-12-25T09:26:08.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<blockquote>
<p>Java8所有的新特性基本基于函数式编程的思想，函数式编程给Java带来了注入了新鲜的活力。
函数式编程其实并不是很难，小编在学习函数式编程时候刚开始一头雾水，最后仔细观察就发现了其中的小窍门，读了本篇文章如果还没有掌握，就算我输了</p>
</blockquote>
<h1 id="函数式编程"> 函数式编程</h1>
<h2 id="一、lambda表达式"> 一、Lambda表达式</h2>
<p><strong>注意</strong>: 以下方法都可以使用表达式来进行缩写</p>
<p>我们来看Java中如何来定义一个方法</p>
<h3 id="_1-语法"> 1. 语法</h3>
<p><code>()-&gt;{}</code></p>
<p>其中小括号里面可以放入参，大括号就是方法体，里面也允许有返回值。</p>
<p><strong>当方法体中只有返回值而没有其他语句时候，大括号和 <code>return</code> 关键字都可以省略不写。</strong></p>
<h3 id="_2-方法引用"> 2. 方法引用</h3>
<p><em>只要用.引用不报错的，都可以将.换成:</em></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr>
<td>1、引用静态方法</td>
<td>ClassName::staticMethodName</td>
</tr>
<tr>
<td>2、引用构造函数</td>
<td>ClassName::new</td>
</tr>
<tr>
<td>3、引用特定类型的实例方法</td>
<td>ClassName::instanceMethodName</td>
</tr>
<tr>
<td>4、引用特定对象的实例方法</td>
<td>objectName::instanceMethodName</td>
</tr>
</tbody>
</table>
<h2 id="二、java8新增函数式接口"> 二、Java8新增函数式接口</h2>
<h3 id="_1-predicate接口"> 1. Predicate接口</h3>
<p>Predicate 接口只有一个参数，返回boolean类型。该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）</p>
<div><pre><code>Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; 0;
</code></pre>
<div><span>1</span><br></div></div><p>根据前面的语法我们知道小括号里面可以放入参，大括号里面放出参，当大括号里面只有返回值时候，大括号和 <code>return</code> 关键字也可以省略。如上。</p>
<h3 id="_2-function-接口"> 2. Function 接口</h3>
<p>Function 接口有一个参数并且返回一个结果，并附带了一些可以和其他函数组合的默认方法（compose, andThen）：</p>
<div><pre><code>Function&lt;Integer, Integer&gt; function = (x) -&gt; 2 * x;
</code></pre>
<div><span>1</span><br></div></div><p>同理，这个接口有一个入参和出参，如果返回体重不包含其他逻辑，只有一个返回值，大括号和 <code>return</code> 关键字也可以省略。如上。</p>
<h3 id="_3-supplier-接口"> 3. Supplier 接口</h3>
<p>Supplier 接口返回一个任意范型的值，和Function接口不同的是该接口没有任何参数</p>
<div><pre><code>public class Main{
    public static void main(String[] args) {
        //构造方法
        Supplier&lt;Main&gt; supplier = () -&gt; new Main();
        Supplier&lt;Main&gt; mainSupplier = Main::new;
        Supplier&lt;Main&gt; mainSupplier1 = Main::staticMethod;
    }
    private static Main staticMethod() {
        return new Main();
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>因为没有入参，所以小括号里面什么都不用写。当遇到这种情况，同样可以用上面其他两种来替换</p>
<h3 id="_4-consumer-接口"> 4. Consumer 接口</h3>
<p>Consumer 是一个只有入参，但是无出参的接口。</p>
<div><pre><code>public class Main {
    public static void main(String[] args) {
        List&lt;String&gt; dataList = Arrays.asList(&quot;1&quot;, &quot;2&quot;);

        //特定类的静态方法
        dataList.forEach(Main::staticMethod);
        dataList.forEach((x) -&gt; System.out.println(x));
        dataList.forEach(System.out::println);

    }
    private static void staticMethod(String name) {
        System.out.println(&quot;对象静态方法引用:&quot; + name);
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id="三、快速记忆"> 三、快速记忆</h2>
<p>虽然新增的函数式接口并不多，但是想要一次性死记住，还是有一点点的难度。小编的学习方式是
理解这记忆。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>简记</th>
</tr>
</thead>
<tbody>
<tr>
<td>1、Predicate</td>
<td>条件类型</td>
</tr>
<tr>
<td>2、Supplier</td>
<td>无入参，有出参</td>
</tr>
<tr>
<td>3、Function</td>
<td>有入参，有出参</td>
</tr>
<tr>
<td>4、Consumer</td>
<td>有入参，无出参</td>
</tr>
</tbody>
</table>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589360371000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">开个工厂造线程</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%8E%82/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%8E%82/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<h1 id="线程工厂"> 线程工厂</h1>
<p>线程是Java里面很重要的一个概念，具体体现就是Thread这个类。我们平时最常用的创建线程就是在用Executors来创建线程池。在前面的章节
也可以看到，创建线程池时候有一个入参就是线程工厂，ThreadFactory这个类。那么这个类具体有什么用呢? 其实就是为了统一在创建线程时设置一些参数，
如是否守护线程。线程一些特性等，如优先级，名称。</p>
<div><pre><code>	<span>/**
	 * @param threadFactory 线程工厂
     */</span>
      <span>public</span> <span>ThreadPoolExecutor</span><span>(</span><span>int</span> corePoolSize<span>,</span>
                                 <span>int</span> maximumPoolSize<span>,</span>
                                 <span>long</span> keepAliveTime<span>,</span>
                                 <span>TimeUnit</span> unit<span>,</span>
                                 <span>BlockingQueue</span><span><span>&lt;</span><span>Runnable</span><span>></span></span> workQueue<span>,</span>
                                 <span>ThreadFactory</span> threadFactory<span>)</span> <span>{</span>
           <span>this</span><span>(</span>corePoolSize<span>,</span> maximumPoolSize<span>,</span> keepAliveTime<span>,</span> unit<span>,</span> workQueue<span>,</span>
                threadFactory<span>,</span> defaultHandler<span>)</span><span>;</span>
       <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h1 id="自定义"> 自定义</h1>
<p>所谓线程工厂其实就是创建线程使用的。正常情况下我们创建线程是下面这样的。</p>
<div><pre><code>  <span>Thread</span> ret <span>=</span> <span>new</span> <span>Thread</span><span>(</span>runnable<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>但是线程的构造其实并不是只有一个,它有一个线程组的概念,另外也可以给每个线程去设置一个名字。这样的目的是可以通过名字就能辨认是什么线程在执行。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1599299678000.png" alt="" loading="lazy"></p>
<p>那么我们就看下这里面怎么实现的,其实非常简单。</p>
<div><pre><code><span>public</span> <span>class</span> <span>NamedThreadFactory</span> <span>implements</span> <span>ThreadFactory</span> <span>{</span>

  <span>protected</span> <span>static</span> <span>final</span> <span>AtomicInteger</span> POOL_SEQ <span>=</span> <span>new</span> <span>AtomicInteger</span><span>(</span><span>1</span><span>)</span><span>;</span>

  <span>protected</span> <span>final</span> <span>AtomicInteger</span> mThreadNum <span>=</span> <span>new</span> <span>AtomicInteger</span><span>(</span><span>1</span><span>)</span><span>;</span>

  <span>protected</span> <span>final</span> <span>String</span> mPrefix<span>;</span>

  <span>protected</span> <span>final</span> <span>boolean</span> mDaemon<span>;</span>

  <span>protected</span> <span>final</span> <span>ThreadGroup</span> mGroup<span>;</span>

  <span>public</span> <span>NamedThreadFactory</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>(</span><span>"pool-"</span> <span>+</span> POOL_SEQ<span>.</span><span>getAndIncrement</span><span>(</span><span>)</span><span>,</span> <span>false</span><span>)</span><span>;</span>
  <span>}</span>

  <span>public</span> <span>NamedThreadFactory</span><span>(</span><span>String</span> prefix<span>)</span> <span>{</span>
    <span>this</span><span>(</span>prefix<span>,</span> <span>false</span><span>)</span><span>;</span>
  <span>}</span>

  <span>public</span> <span>NamedThreadFactory</span><span>(</span><span>String</span> prefix<span>,</span> <span>boolean</span> daemon<span>)</span> <span>{</span>
    mPrefix <span>=</span> prefix <span>+</span> <span>"-thread-"</span><span>;</span>
    mDaemon <span>=</span> daemon<span>;</span>
    <span>SecurityManager</span> s <span>=</span> <span>System</span><span>.</span><span>getSecurityManager</span><span>(</span><span>)</span><span>;</span>
    mGroup <span>=</span> <span>(</span>s <span>==</span> <span>null</span><span>)</span> <span>?</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getThreadGroup</span><span>(</span><span>)</span> <span>:</span> s<span>.</span><span>getThreadGroup</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>Thread</span> <span>newThread</span><span>(</span><span>Runnable</span> runnable<span>)</span> <span>{</span>
    <span>//就是给线程创建了一个名字和指定了一个线程组</span>
    <span>String</span> name <span>=</span> mPrefix <span>+</span> mThreadNum<span>.</span><span>getAndIncrement</span><span>(</span><span>)</span><span>;</span>
    <span>Thread</span> ret <span>=</span> <span>new</span> <span>Thread</span><span>(</span>mGroup<span>,</span> runnable<span>,</span> name<span>,</span> <span>0</span><span>)</span><span>;</span>
    ret<span>.</span><span>setDaemon</span><span>(</span>mDaemon<span>)</span><span>;</span>
    <span>return</span> ret<span>;</span>
  <span>}</span>

  <span>public</span> <span>ThreadGroup</span> <span>getThreadGroup</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> mGroup<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><p>如此而已,线程工厂就是这样。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">线程安全感</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1608963968000.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<h1 id="线程安全"> 线程安全</h1>
<blockquote>
<p>所谓发生线程安全其实是有一个前提条件,即当有多线程时候才会设计到线程安全,单线程是不存在线程安全的问题的。且只有在有状态对象中才会发生。</p>
</blockquote>
<h2 id="_1-什么叫有状态对象"> 1. 什么叫有状态对象?</h2>
<h3 id="_1-1-无状态对象"> 1.1 无状态对象</h3>
<div><pre><code><span>public</span> <span>class</span> <span>Home</span><span>{</span>
    <span>public</span> <span>String</span> <span>say</span><span>(</span><span>String</span> message<span>)</span><span>{</span>
        <span>return</span> message<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="_1-2-有状态对象"> 1.2 有状态对象</h3>
<div><pre><code><span>public</span> <span>class</span> <span>Home</span><span>{</span>
    <span>//实例变量</span>
    <span>public</span> <span>int</span> age <span>=</span> <span>0</span><span>;</span>
    <span>public</span> <span>String</span> <span>say</span><span>(</span><span>String</span> message<span>)</span><span>{</span>
        <span>return</span> message <span>+</span> <span>(</span>age<span>++</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>为什么说无状态对象不会发生线程安全,线程对公共变量（实例变量，类变量）进行操作才会发生线程安全问题，而方法中变量是保存在每个线程的私有栈中的,所以不存在线程安全问题</p>
<h2 id="_2-什么时候要保证线程安全"> 2. 什么时候要保证线程安全？</h2>
<ol>
<li>当变量属于实例,该实例被多线程操作</li>
<li>当多线程会影响到执行结果时候,需要保证线程安全</li>
<li>当变量属于共享属性时候需要保证线程安全,而方法内变量属于每个
线程的空间,则不需要。</li>
</ol>
<h2 id="_3-如何保证线程安全"> 3. 如何保证线程安全？</h2>
<ol>
<li>原子性 lock操作,Syn...</li>
<li>可见性 volatile</li>
<li>顺序性 防止被重排序</li>
</ol>
<h2 id="_3-1-原子性"> 3.1 原子性</h2>
<p>原子是世界上的最小单位，具有不可分割性。比如 a=0；（a非long和double类型） 这个操作是不可分割的，那么我们说这个操作时原子操作。再比如：a++； 这个操作实际是a = a + 1；是可分割的，所以他不是一个原子操作。非原子操作都会存在线程安全问题，需要我们使用同步技术（sychronized）来让它变成一个原子操作。</p>
<h2 id="_3-2-可见性"> 3.2 可见性</h2>
<p>可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果。另一个线程马上就能看到。比如：用volatile修饰的变量，就会具有可见性。volatile修饰的变量不允许线程内部缓存和重排序，即直接修改内存。所以对其他线程是可见的。</p>
<ul>
<li>volatile 本质是在告诉jvm当前变量在寄存器中的值是不确定的,需要从主存中读取,</li>
<li>synchronized 则是锁定当前变量,只有当前线程可以访问该变量,其他线程被阻塞住.</li>
</ul>
<h2 id="_3-3-那么什么时候用可见性"> 3.3 那么什么时候用可见性？</h2>
<p>当多线程并不直接进行原子性操作的时候，可以用 volatile 修饰,这样可以保证每个线程读取的都是最新的</p>
<h2 id="_3-4-什么时候用原子性"> 3.4 什么时候用原子性?</h2>
<p>当涉及到多个线程对同一个数据进行操作的时候，为了保证在同一刻只有一个操作，就用 synchronized 修饰加锁🔐</p>
<h2 id="_4-servlet线程安全问题思考"> 4. Servlet线程安全问题思考</h2>
<p>Servlet本身是无状态的，一个无状态的Servlet是绝对线程安全的，无状态对象设计也是解决线程安全问题的一种有效手段。</p>
<p>所以，servlet是否线程安全是由它的实现来决定的，如果它内部的属性或方法会被多个线程改变，它就是线程不安全的，反之，就是线程安全的。</p>
<p>在一个无状态的情况下，是不存在线程安全问题的，即使存在那也是跟它的实现类相关</p>
<p>在Servlet中避免使用实例变量是保证Servlet线程安全的最佳选择。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">成熟的线程要懂得拒绝</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<h1 id="拒绝策略"> 拒绝策略</h1>
<p><strong>拒绝策略就是任务实在是已经执行不了，那么就需要你告诉程序，怎么样去拒绝在执行其他任务</strong></p>
<p>在实际开发场景中，基本使用JDK自带的策略就可以完成日常开发，但是作为程序员必须要知道。下面说一下JDK自带有哪些线程策略</p>
<div><pre><code><span>public</span> <span>interface</span> <span>RejectedExecutionHandler</span> <span>{</span>
    <span>void</span> <span>rejectedExecution</span><span>(</span><span>Runnable</span> r<span>,</span> <span>ThreadPoolExecutor</span> executor<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h1 id="四种拒绝策略"> 四种拒绝策略</h1>
<blockquote>
<p>ThreadPoolExecutor类里面是内置了4中拒绝策略，我们一个一个来分析</p>
</blockquote>
<h2 id="_1-callerrunspolicy"> 1. CallerRunsPolicy</h2>
<p>直接执行该任务，如果线程池已经关闭，就不运行</p>
<div><pre><code>    <span>public</span> <span>static</span> <span>class</span> <span>CallerRunsPolicy</span> <span>implements</span> <span>RejectedExecutionHandler</span> <span>{</span>
        <span>public</span> <span>CallerRunsPolicy</span><span>(</span><span>)</span> <span>{</span> <span>}</span>
        <span>public</span> <span>void</span> <span>rejectedExecution</span><span>(</span><span>Runnable</span> r<span>,</span> <span>ThreadPoolExecutor</span> e<span>)</span> <span>{</span>
            <span>if</span> <span>(</span><span>!</span>e<span>.</span><span>isShutdown</span><span>(</span><span>)</span><span>)</span> <span>{</span>
                r<span>.</span><span>run</span><span>(</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_2-abortpolicy-【默认策略】"> 2. AbortPolicy 【默认策略】</h2>
<p>直接报异常，简单粗暴</p>
<div><pre><code><span>public</span> <span>static</span> <span>class</span> <span>AbortPolicy</span> <span>implements</span> <span>RejectedExecutionHandler</span> <span>{</span>
        <span>public</span> <span>AbortPolicy</span><span>(</span><span>)</span> <span>{</span> <span>}</span>
        <span>public</span> <span>void</span> <span>rejectedExecution</span><span>(</span><span>Runnable</span> r<span>,</span> <span>ThreadPoolExecutor</span> e<span>)</span> <span>{</span>
            <span>throw</span> <span>new</span> <span>RejectedExecutionException</span><span>(</span><span>"Task "</span> <span>+</span> r<span>.</span><span>toString</span><span>(</span><span>)</span> <span>+</span>
                                                 <span>" rejected from "</span> <span>+</span>
                                                 e<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_3-discardpolicy"> 3. DiscardPolicy</h2>
<p>直接丢弃，不记录任何信息</p>
<div><pre><code> <span>public</span> <span>static</span> <span>class</span> <span>DiscardPolicy</span> <span>implements</span> <span>RejectedExecutionHandler</span> <span>{</span>
        <span>public</span> <span>DiscardPolicy</span><span>(</span><span>)</span> <span>{</span> <span>}</span>
        <span>public</span> <span>void</span> <span>rejectedExecution</span><span>(</span><span>Runnable</span> r<span>,</span> <span>ThreadPoolExecutor</span> e<span>)</span> <span>{</span>
        <span>}</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_4-discardoldestpolicy"> 4. DiscardOldestPolicy</h2>
<p>丢弃一个老任务，然后执行当前任务</p>
<div><pre><code><span>public</span> <span>static</span> <span>class</span> <span>DiscardOldestPolicy</span> <span>implements</span> <span>RejectedExecutionHandler</span> <span>{</span>
        <span>public</span> <span>DiscardOldestPolicy</span><span>(</span><span>)</span> <span>{</span> <span>}</span>
        <span>public</span> <span>void</span> <span>rejectedExecution</span><span>(</span><span>Runnable</span> r<span>,</span> <span>ThreadPoolExecutor</span> e<span>)</span> <span>{</span>
            <span>if</span> <span>(</span><span>!</span>e<span>.</span><span>isShutdown</span><span>(</span><span>)</span><span>)</span> <span>{</span>
				<span>// Retrieves and removes the head of this queue 移出最头任务，也就是老任务</span>
                e<span>.</span><span>getQueue</span><span>(</span><span>)</span><span>.</span><span>poll</span><span>(</span><span>)</span><span>;</span>
                e<span>.</span><span>execute</span><span>(</span>r<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h1 id="分析"> 分析</h1>
<p>拒绝策略其实很简单，知己知彼百战百胜，在多线程多任务编程场景下，我们可以根据业务特性定义拒绝策略。
比如，在任务满的情况将，任务放到数据库中，或者打印到特殊的日志中，用来恢复任务。</p>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589360371000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">给线程归归类</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E7%BA%BF%E7%A8%8B%E7%BB%84/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E7%BA%BF%E7%A8%8B%E7%BB%84/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<h1 id="线程组"> 线程组</h1>
<p>可以把线程归属到某一个线程组中，线程组中可以有线程对象，也可以有线程组，组中还可以有线程，这样的组织结构有点类似于树的形式，如图所示.</p>
<p>线程组的作用是：可以批量管理线程或线程组对象，有效地对线程或线程组对象进行组织
<img src="https://img.springlearn.cn/blog/learn_1599301362000.png" alt="" loading="lazy"></p>
<p>线程组提供对组内的线程的管理能力,如我们可以用一个线程组里面的线程去执行任务,任何一个任务失败,就把所有组内的线程都给中断。</p>
<div><pre><code><span>public</span> <span>class</span> <span>MThreadGroup</span> <span>extends</span> <span>ThreadGroup</span> <span>{</span>
    <span>public</span> <span>MThreadGroup</span><span>(</span><span>String</span> s<span>)</span> <span>{</span>
        <span>super</span><span>(</span>s<span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>MThreadGroup</span><span>(</span><span>ThreadGroup</span> threadGroup<span>,</span> <span>String</span> s<span>)</span> <span>{</span>
        <span>super</span><span>(</span>threadGroup<span>,</span> s<span>)</span><span>;</span>
    <span>}</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>uncaughtException</span><span>(</span><span>Thread</span> thread<span>,</span> <span>Throwable</span> throwable<span>)</span> <span>{</span>
        <span>//任何一个线程异常就讲所有组内的线程中断</span>
        thread<span>.</span><span>getThreadGroup</span><span>(</span><span>)</span><span>.</span><span>interrupt</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">线程池扫盲</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<p><strong>作者</strong>: 西魏陶渊明
<strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer">https://blog.springlearn.cn/</a></p>
<div><p>西魏陶渊明</p>
<p>莫笑少年江湖梦，谁不少年梦江湖</p>
</div>
<blockquote>
<p>[!TIP]
本篇文章通读时间大概3分钟,希望在三分钟内的讲解，对你有所帮助，
一定要认真看并思考，好了。废话不多数，直接上干货,本节内容我们讲
的是Java的线程池,在讲之前我们首先看一下有哪些线程池，这些线程池
我们不过多讲解,因为我们的关注点是他们是如何实现的,和其运行的原理。</p>
</blockquote>
<h1 id="一、常用线程池列表"> 一、常用线程池列表</h1>
<p>这部分内容,只是帮助你回顾一下线程池的知识，大家重点看方法内的实现</p>
<p>1、构造一个固定线程数目的线程池，配置的corePoolSize与maximumPoolSize大小相同，同时使用了一个无界LinkedBlockingQueue存放阻塞任务，因此多余的任务将存在再阻塞队列，不会由RejectedExecutionHandler处理</p>
<div><pre><code>    <span>public</span> <span>static</span> <span>ExecutorService</span> <span>newFixedThreadPool</span><span>(</span><span>int</span> nThreads<span>)</span> <span>{</span>
        <span>return</span> <span>new</span> <span>ThreadPoolExecutor</span><span>(</span>nThreads<span>,</span> nThreads<span>,</span>
                                      <span>0L</span><span>,</span> <span>TimeUnit</span><span>.</span>MILLISECONDS<span>,</span>
                                      <span>new</span> <span>LinkedBlockingQueue</span><span><span>&lt;</span><span>Runnable</span><span>></span></span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>2、构造一个缓冲功能的线程池，配置corePoolSize=0，maximumPoolSize=Integer.MAX_VALUE，keepAliveTime=60s,以及一个无容量的阻塞队列 SynchronousQueue，因此任务提交之后，将会创建新的线程执行；线程空闲超过60s将会销毁</p>
<div><pre><code>    <span>public</span> <span>static</span> <span>ExecutorService</span> <span>newCachedThreadPool</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>new</span> <span>ThreadPoolExecutor</span><span>(</span><span>0</span><span>,</span> <span>Integer</span><span>.</span>MAX_VALUE<span>,</span>
                                      <span>60L</span><span>,</span> <span>TimeUnit</span><span>.</span>SECONDS<span>,</span>
                                      <span>new</span> <span>SynchronousQueue</span><span><span>&lt;</span><span>Runnable</span><span>></span></span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>3、构造一个只支持一个线程的线程池，配置corePoolSize=maximumPoolSize=1，无界阻塞队列LinkedBlockingQueue；保证任务由一个线程串行执行</p>
<div><pre><code>    <span>public</span> <span>static</span> <span>ExecutorService</span> <span>newSingleThreadExecutor</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>new</span> <span>FinalizableDelegatedExecutorService</span>
            <span>(</span><span>new</span> <span>ThreadPoolExecutor</span><span>(</span><span>1</span><span>,</span> <span>1</span><span>,</span>
                                    <span>0L</span><span>,</span> <span>TimeUnit</span><span>.</span>MILLISECONDS<span>,</span>
                                    <span>new</span> <span>LinkedBlockingQueue</span><span><span>&lt;</span><span>Runnable</span><span>></span></span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>4、构造有定时功能的线程池，配置corePoolSize，无界延迟阻塞队列DelayedWorkQueue；有意思的是：maximumPoolSize=Integer.MAX_VALUE，由于DelayedWorkQueue是无界队列，所以这个值是没有意义的</p>
<div><pre><code>    <span>/**
     * Creates a thread pool that can schedule commands to run after a
     * given delay, or to execute periodically.
     * @param corePoolSize the number of threads to keep in the pool,
     * even if they are idle
     * @return a newly created scheduled thread pool
     * @throws IllegalArgumentException if {@code corePoolSize &lt; 0}
     */</span>
    <span>public</span> <span>static</span> <span>ScheduledExecutorService</span> <span>newScheduledThreadPool</span><span>(</span><span>int</span> corePoolSize<span>)</span> <span>{</span>
        <span>return</span> <span>new</span> <span>ScheduledThreadPoolExecutor</span><span>(</span>corePoolSize<span>)</span><span>;</span>
    <span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h1 id="二、threadpoolexecutor"> 二、ThreadPoolExecutor</h1>
<p>相信大家从上面的众多线程池中都已经看到了这个类,因为上面的线程池底层的构造都是由这个类创建的,</p>
<p>那么我们就开始研究这个类</p>
<div><pre><code><span>/**
 * @since 1.5
 * @author Doug Lea
 */</span>
<span>public</span> <span>class</span> <span>ThreadPoolExecutor</span> <span>extends</span> <span>AbstractExecutorService</span> <span>{</span>
	<span>.</span><span>.</span><span>.</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>首先看一下构造方法，关于注释一定要好好看，每个参数都理解了，那么你就弄懂了</p>
<div><pre><code>
<span>/**
     *
     * @param corePoolSize 核心线程池大小
     * @param maximumPoolSize 线程池最大容量
     * @param keepAliveTime 线程池空闲时，线程存活时间
     * @param unit 时间单位
     * @param workQueue 工作队列
	 * @param threadFactory 线程工厂
     * @throws IllegalArgumentException if one of the following holds:&lt;br>
     *         {@code corePoolSize &lt; 0}&lt;br>
     *         {@code keepAliveTime &lt; 0}&lt;br>
     *         {@code maximumPoolSize &lt;= 0}&lt;br>
     *         {@code maximumPoolSize &lt; corePoolSize}
     * @throws NullPointerException if {@code workQueue} is null
     */</span>
      <span>public</span> <span>ThreadPoolExecutor</span><span>(</span><span>int</span> corePoolSize<span>,</span>
                                 <span>int</span> maximumPoolSize<span>,</span>
                                 <span>long</span> keepAliveTime<span>,</span>
                                 <span>TimeUnit</span> unit<span>,</span>
                                 <span>BlockingQueue</span><span><span>&lt;</span><span>Runnable</span><span>></span></span> workQueue<span>,</span>
                                 <span>ThreadFactory</span> threadFactory<span>)</span> <span>{</span>
           <span>this</span><span>(</span>corePoolSize<span>,</span> maximumPoolSize<span>,</span> keepAliveTime<span>,</span> unit<span>,</span> workQueue<span>,</span>
                threadFactory<span>,</span> defaultHandler<span>)</span><span>;</span>
       <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h1 id="三、构造参数详解"> 三、构造参数详解</h1>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>corePoolSize</td>
<td>核心的线程数</td>
</tr>
<tr>
<td>maximumPoolSize</td>
<td>最大线程池就是说你定义的线程池运行创建的最大线程数量</td>
</tr>
<tr>
<td>keepAliveTime</td>
<td>空闲时间回收，当这个时间后还没有任务执行就将线程回收</td>
</tr>
<tr>
<td>unit</td>
<td>单位,控制上面时间的单位，可以为秒，或者分钟</td>
</tr>
<tr>
<td>workQueue</td>
<td>核心线程都已经去执行任务但是，任务还有，那么久先放到这个队列里，就相当于集合</td>
</tr>
<tr>
<td>threadFactory</td>
<td>创建线程用户的线程工厂,里面只有一个方法就是newThread，你可以自定义线程名</td>
</tr>
</tbody>
</table>
<p><font color=red>上面的文字可能你看的不太明白，小编这里画了一个图，大家仔细看看 </font></p>
<p>这张图是小编之前画的，但是头条压缩了，导致图不太清楚，大家看到字就行了</p>
<p><img src="https://img.springlearn.cn/blog/learn_1640316132000.png" alt="" loading="lazy"></p>
<h2 id="_1-执行顺序"> 1. 执行顺序</h2>
<ol>
<li>首先交给核心线程数来执行corePoolSize</li>
<li>如果核心都用完了，就放到workQueue队列里面</li>
<li>当队列和核心线程数都满了，就继续创建线程，直到等于maximumPoolSize为止</li>
<li>当任务已经塞不下了，就开始执行拒绝策略(下一篇讲)</li>
</ol>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Java异常体系</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java2/Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java2/Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/"/>
    <updated>2021-12-25T09:26:08.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1589293715000.png" alt="" loading="lazy"></p>
<p>知己知彼方能百战不殆,在小编初学Java时候特别怕程序报异常,经常会因为异常不知所措,相信这个问题应该是所有
初学者都会有的心理感受;如果你也有这种感受,那么只有一种解决方法:
迎难而上,攻克Java异常体系,长痛不如短痛,只要清楚了Java的异常体系,就不会再有这种感受了。下面跟着小编来窥探Java的异常体系吧。</p>
<h1 id="一、java异常体系其实很简单"> 一、Java异常体系其实很简单</h1>
<p>其实Java的异常体系是非常简单的,简单到只要你看过本文就能明白百分之八九十的样子。当你清楚了Java的异常体系
那么在遇到项目执行异常的时候,基本看报错的异常就大概明白问题出在哪里,遇到的错误多了,就成长了,处理的问题就是
你未来在技术路上所积累的财富。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589294764000.png" alt="" loading="lazy"></p>
<p>在Java的异常体系中 <code>Throwable</code> 我们可以理解为是一个根异常,即所有的异常都是它的子类</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589295509000.png" alt="" loading="lazy"></p>
<h1 id="二、error"> 二、Error</h1>
<p>前面我们说了Java的异常体系中 <code>Throwable</code> 可以理解是一个根异常,那么 <code>Error</code> 就是这个根节点的一个子节点。
<code>Error</code> 类对象由 <code>Java</code> 虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。程序无法处理的异常，一般伴随者jvm虚拟机停止，或者断电之类
这种问题，是无法通过程序来解决的。</p>
<p><strong>这种异常基本很少,如果遇到也不要慌,跟你的业务逻辑没有关系,顶多是Java代码写的有问题,只要不是业务问题其实大多都能先通过重启解决;
但是假如项目还未上线,只是在开发过程中出现这种问题一定要弄清楚原因,是那一部分代码编写异常导致的,否则上线可能有重大隐患</strong></p>
<p><strong>经验教学:</strong></p>
<ol>
<li>如果是在项目系统过程中遇到这种问题,可能是因为Jar包冲突导致的。</li>
<li>如果是在项目运行过程中遇到这种问题,可能是因为对象创建过多没有释放,导致堆栈溢出。这个时候就要看GC是否频繁,然后对堆栈日志进行分析,看存在最多的对象是哪一个,然后分析代码解决。</li>
</ol>
<h1 id="三、exception"> 三、Exception</h1>
<p><code>Exception</code> 异常时我们平时在开发中遇到最多，其实 <code>Exception</code> 也分为两种即:</p>
<ol>
<li><code>checkException</code> 编译异常，这种异常，是哪些没有遵守java语言规则，容易看出和解决的</li>
<li><code>uncheckException</code> 运行异常，运行异常，具有不确定性，往往难以排查，包括处理逻辑问题。</li>
</ol>
<p>然而 <code>checkException</code> 和 <code>uncheckException</code> 其实只是一个概念,并没有对应的 <code>Java异常类</code>。我们基本可以忽略
<code>checkException</code> 因为这种异常基本现在的编译器都会给我们做了，我们在写代码时候就会实时的给我提示错误了。我们
只用关心 <code>uncheckException</code>即可。</p>
<p><strong>uncheckException</strong></p>
<p><img src="https://img.springlearn.cn/blog/learn_1589297073000.png" alt="" loading="lazy"></p>
<p><code>RuntimeException</code> + <code>Error</code> 和其子类都是属于 <code>uncheckException</code></p>
<p>前面我们已经对 <code>Error</code> 做了说明，现在就主要来看下 <code>RuntimeException</code>。 <code>RuntimeException</code> 从名字来看就是
运行异常,所谓运行异常就是可能在程序运行过程中发生的异常,这种异常一般是可以通过代码逻辑进行处理的。
我们举例一个例子,我们都知道0不能作为除数。但是假如在下面这个代码中</p>
<div><pre><code>public class Tester {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(&quot;请输入被除数a:&quot;);
        int a = sc.nextInt();
        System.out.print(&quot;请输入除数b:&quot;);
        int b = sc.nextInt();
        System.out.println(&quot;a/b=&quot; + a / b);
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>当输入a=8,b=2,那么结果就是4。</p>
<p><img src="https://i02piccdn.sogoucdn.com/8206a4441e0386c3" alt="" loading="lazy"></p>
<p><strong>假如我们输入b=0呢?</strong></p>
<p>学过数学都知道0不能做除数,程序也不运行你这么输入,但是却不能阻止你,只能通过报错的方式来告诉你。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589298143000.png" alt="" loading="lazy"></p>
<p>那么我们就要对这个异常进行处理,当发现有这个异常就在控制台来提醒用户。那么代码就会变成这样</p>
<div><pre><code>public class Tester {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(&quot;请输入被除数a:&quot;);
        int a = sc.nextInt();
        System.out.print(&quot;请输入除数b:&quot;);
        int b = sc.nextInt();
        try {
            System.out.println(&quot;a/b=&quot; + a / b);
        } catch (ArithmeticException ate) {
            //对算术异常进行捕捉
            System.err.println(&quot;0不能作为除数,请输入不为0的任意数&quot;);
        }
    }
}

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>当出现算术异常直接提示: &quot;0不能作为除数,请输入不为0的任意数&quot;
<img src="https://img.springlearn.cn/blog/learn_1589298261000.png" alt="" loading="lazy"></p>
<p>那么像这种程序中无可避免会出现,且又能通过逻辑来处理的异常就是运行异常。运行异常一般都可以正常运行,只是在特定情况下会导致异常发生。
像这面这个例子,我们只要看到 <code>ArithmeticException</code> 就知道是算术异常。所以只要我们对运行异常类有一个认识，其实就能解决大多数的程序问题了。
下面我们来看下运行异常都要有哪些类把。</p>
<p><img src="https://i03piccdn.sogoucdn.com/f960e6a461d218d2" alt="" loading="lazy"></p>
<p><strong>只要对下面运行异常类进行熟悉了,基本就清楚掌握了Java的异常体系了</strong></p>
<p><img src="https://img.springlearn.cn/blog/learn_1589299119000.png" alt="" loading="lazy"></p>
<p><img src="https://img.springlearn.cn/blog/learn_1589299523000.png" alt="" loading="lazy"></p>
<p>以上就是常见的运行异常类,当然Java中还有很多不常见的异常类。剩下的我们就可以在日常工作中去学习了。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">hehe</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java2/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java2/"/>
    <updated>2021-12-25T09:26:08.000Z</updated>
    <content type="html"><![CDATA[<h1 id="hehe"> hehe</h1>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">自定义布局</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/layout/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/layout/"/>
    <updated>2021-12-21T05:46:37.000Z</updated>
    <content type="html"><![CDATA[<p>您可以使用带有 Markdown 支持的插槽来自定义页面布局。</p>
<div><p>注意</p>
<p>此处仅仅是一个演示，你应该自行根据需求添加样式。</p>


</div>
<template #page-top><p>页面顶部内容</p>
</template><template #page-bottom><p>页面底部内容</p>
</template><template #content-top><p>内容顶部内容</p>
</template><template #content-bottom><p>内容底部内容</p>
</template><template #navbar-start><p>导航栏起始内容</p>
</template><template #navbar-center><p>导航栏中部内容</p>
</template><template #navbar-end><p>导航栏末尾内容</p>
</template><template #sidebar-top><p>侧边栏顶部内容</p>
</template><template #sidebar-center><p>侧边栏中部内容</p>
</template><template #sidebar-bottom><p>侧边栏底部内容</p>
</template><p>更多详情，详见 <a href="https://vuepress-theme-hope.github.io/zh/guide/layout/custom/" target="_blank" rel="noopener noreferrer">自定义布局</a>.</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">函数式编程</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/java2/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/java2/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <updated>2021-12-25T09:26:08.000Z</updated>
    <content type="html"><![CDATA[<div><p>提示</p>
<p>Java8所有的新特性基本基于函数式编程的思想，函数式编程给Java带来了注入了新鲜的活力。
函数式编程其实并不是很难，小编在学习函数式编程时候刚开始一头雾水，最后仔细观察就发现了其中的小窍门，读了本篇文章如果还没有掌握，就算我输了
加我微信: lxchinesszz 找我一对一教学</p>
</div>
<h1 id="函数式编程"> 函数式编程</h1>
<h2 id="一、lambda表达式"> 一、Lambda表达式</h2>
<p><strong>注意</strong>: 以下方法都可以使用表达式来进行缩写</p>
<p>我们来看Java中如何来定义一个方法</p>
<h3 id="_1-语法"> 1. 语法</h3>
<p><code>()-&gt;{}</code></p>
<p>其中小括号里面可以放入参，大括号就是方法体，里面也允许有返回值。</p>
<p><strong>当方法体中只有返回值而没有其他语句时候，大括号和 <code>return</code> 关键字都可以省略不写。</strong></p>
<h3 id="_2-方法引用"> 2. 方法引用</h3>
<p><em>只要用.引用不报错的，都可以将.换成:</em></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr>
<td>1、引用静态方法</td>
<td>ClassName::staticMethodName</td>
</tr>
<tr>
<td>2、引用构造函数</td>
<td>ClassName::new</td>
</tr>
<tr>
<td>3、引用特定类型的实例方法</td>
<td>ClassName::instanceMethodName</td>
</tr>
<tr>
<td>4、引用特定对象的实例方法</td>
<td>objectName::instanceMethodName</td>
</tr>
</tbody>
</table>
<h2 id="二、java8新增函数式接口"> 二、Java8新增函数式接口</h2>
<h3 id="_1-predicate接口"> 1. Predicate接口</h3>
<p>Predicate 接口只有一个参数，返回boolean类型。该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）</p>
<div><pre><code>Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; 0;
</code></pre>
<div><span>1</span><br></div></div><p>根据前面的语法我们知道小括号里面可以放入参，大括号里面放出参，当大括号里面只有返回值时候，大括号和 <code>return</code> 关键字也可以省略。如上。</p>
<h3 id="_2-function-接口"> 2. Function 接口</h3>
<p>Function 接口有一个参数并且返回一个结果，并附带了一些可以和其他函数组合的默认方法（compose, andThen）：</p>
<div><pre><code>Function&lt;Integer, Integer&gt; function = (x) -&gt; 2 * x;
</code></pre>
<div><span>1</span><br></div></div><p>同理，这个接口有一个入参和出参，如果返回体重不包含其他逻辑，只有一个返回值，大括号和 <code>return</code> 关键字也可以省略。如上。</p>
<h3 id="_3-supplier-接口"> 3. Supplier 接口</h3>
<p>Supplier 接口返回一个任意范型的值，和Function接口不同的是该接口没有任何参数</p>
<div><pre><code>public class Main{
    public static void main(String[] args) {
        //构造方法
        Supplier&lt;Main&gt; supplier = () -&gt; new Main();
        Supplier&lt;Main&gt; mainSupplier = Main::new;
        Supplier&lt;Main&gt; mainSupplier1 = Main::staticMethod;
    }
    private static Main staticMethod() {
        return new Main();
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>因为没有入参，所以小括号里面什么都不用写。当遇到这种情况，同样可以用上面其他两种来替换</p>
<h3 id="_4-consumer-接口"> 4. Consumer 接口</h3>
<p>Consumer 是一个只有入参，但是无出参的接口。</p>
<div><pre><code>public class Main {
    public static void main(String[] args) {
        List&lt;String&gt; dataList = Arrays.asList(&quot;1&quot;, &quot;2&quot;);

        //特定类的静态方法
        dataList.forEach(Main::staticMethod);
        dataList.forEach((x) -&gt; System.out.println(x));
        dataList.forEach(System.out::println);

    }
    private static void staticMethod(String name) {
        System.out.println(&quot;对象静态方法引用:&quot; + name);
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id="三、快速记忆"> 三、快速记忆</h2>
<p>虽然新增的函数式接口并不多，但是想要一次性死记住，还是有一点点的难度。小编的学习方式是
理解这记忆。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>简记</th>
</tr>
</thead>
<tbody>
<tr>
<td>1、Predicate</td>
<td>条件类型</td>
</tr>
<tr>
<td>2、Supplier</td>
<td>无入参，有出参</td>
</tr>
<tr>
<td>3、Function</td>
<td>有入参，有出参</td>
</tr>
<tr>
<td>4、Consumer</td>
<td>有入参，无出参</td>
</tr>
</tbody>
</table>
<p>最后求关注,求订阅,谢谢你的阅读!</p>
<p><img src="https://img.springlearn.cn/blog/learn_1589360371000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-25T09:26:08.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">maven-resources-plugin</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/maven/maven-resources-plugin/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/maven/maven-resources-plugin/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>maven-resources-plugin</p>
</blockquote>
<p>资源插件处理将项目资源复制到输出目录。有两种不同的资源：主要资源和测试资源。区别在于主要资源是与主要源代码相关联的资源，而测试资源与测试源代码相关联。</p>
<p>因此，这允许主要源代码及其单元测试的资源分离。</p>
<p>从 2.3 版开始，这个插件使用Maven Filtering共享组件来过滤资源。</p>
<p><img src="https://maven.apache.org/images/maventxt_logo_200.gif" alt="" loading="lazy"></p>
<p><a href="https://maven.apache.org/plugins/maven-resources-plugin/" target="_blank" rel="noopener noreferrer">maven-resources-plugin官网</a></p>
<h2 id="主要功能"> 主要功能</h2>
<ul>
<li>
<p>resources:resources
将主源代码的资源复制到主输出目录。
这个目标通常会自动执行，因为它默认绑定到流程资源生命周期阶段。它总是使用 project.build.resources 元素来指定资源，并且默认使用 project.build.outputDirectory 来指定复制目标。</p>
</li>
<li>
<p>resources:testResources
将测试源代码的资源复制到测试输出目录。
这个目标通常会自动执行，因为它默认绑定到 process-test-resources 生命周期阶段。它总是使用 project.build.testResources 元素来指定资源，并且默认使用 project.build.testOutputDirectory 来指定复制目标。</p>
</li>
<li>
<p>resources:copy-resources
将资源复制到输出目录。此目标要求您配置要复制的资源，并指定 outputDirectory。</p>
</li>
</ul>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">maven-surefire-plugin</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/maven/maven-surefire-plugin/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/maven/maven-surefire-plugin/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>maven-surefire-plugin Surefire 插件在test构建生命周期阶段用于执行应用程序的单元测试。</p>
</blockquote>
<p><img src="https://maven.apache.org/images/maventxt_logo_200.gif" alt="" loading="lazy"></p>
<p><a href="https://maven.apache.org/surefire/maven-surefire-plugin/index.html" target="_blank" rel="noopener noreferrer">maven-surefire-plugin官网</a></p>
<h2 id="一、介绍"> 一、介绍</h2>
<p>如果你执行过mvn test或者执行其他maven命令时跑了测试用例，你就已经用过maven-surefire-plugin了。
maven-surefire-plugin是maven里执行测试用例的插件，不显示配置就会用默认配置。
这个插件的surefire:test命令会默认绑定maven执行的test阶段。</p>
<p>如果你自己声明了，那么可以指定自己的版本，并且可以配置自定义的参数。</p>
<h2 id="二、实践"> 二、实践</h2>
<h3 id="_2-1-用法"> 2.1 用法</h3>
<div><pre><code> &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
          &lt;version&gt;3.0.0-M5&lt;/version&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="_2-2-使用方法"> 2.2 使用方法</h3>
<p><code>mvn test</code></p>
<h2 id="三、源码分析"> 三、源码分析</h2>
<h3 id="_3-1-学习目标"> 3.1 学习目标</h3>
<div><p>相关信息</p>
<p>框架整体比较复杂，但是对于我们有学习价值的东西不多，我们没必要太深入研究。在此只提几个关键的知识点学习。</p>
</div>
<ol>
<li>maven-surefire-plugin的常用参数及作用</li>
<li>maven-surefire-plugin实现单测的原理</li>
</ol>
<h3 id="_3-2-学习搭建环境"> 3.2 学习搭建环境</h3>
<div><pre><code>    <span>&lt;!-- 先声明插件版本 --></span>
    <span><span><span>&lt;</span>build</span><span>></span></span>
        <span><span><span>&lt;</span>plugins</span><span>></span></span>
            <span><span><span>&lt;</span>plugin</span><span>></span></span>
                <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.plugins<span><span><span>&lt;/</span>groupId</span><span>></span></span>
                <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-surefire-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
                <span>&lt;!-- JUnit 5 requires Surefire version 2.22.0 or higher --></span>
                <span><span><span>&lt;</span>version</span><span>></span></span>2.22.0<span><span><span>&lt;/</span>version</span><span>></span></span>
            <span><span><span>&lt;/</span>plugin</span><span>></span></span>
        <span><span><span>&lt;/</span>plugins</span><span>></span></span>
    <span><span><span>&lt;/</span>build</span><span>></span></span>
    <span>&lt;!-- 然后引入依赖,方便debug跟进源码--></span>
      <span><span><span>&lt;</span>dependency</span><span>></span></span>
          <span><span><span>&lt;</span>groupId</span><span>></span></span>junit<span><span><span>&lt;/</span>groupId</span><span>></span></span>
          <span><span><span>&lt;</span>artifactId</span><span>></span></span>junit<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
          <span><span><span>&lt;</span>version</span><span>></span></span>4.13.2<span><span><span>&lt;/</span>version</span><span>></span></span>
          <span><span><span>&lt;</span>scope</span><span>></span></span>test<span><span><span>&lt;/</span>scope</span><span>></span></span>
      <span><span><span>&lt;/</span>dependency</span><span>></span></span>
      <span><span><span>&lt;</span>dependency</span><span>></span></span>
          <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.plugins<span><span><span>&lt;/</span>groupId</span><span>></span></span>
          <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-surefire-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
          <span><span><span>&lt;</span>version</span><span>></span></span>3.0.0-M5<span><span><span>&lt;/</span>version</span><span>></span></span>
      <span><span><span>&lt;/</span>dependency</span><span>></span></span>

      <span><span><span>&lt;</span>dependency</span><span>></span></span>
          <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven<span><span><span>&lt;/</span>groupId</span><span>></span></span>
          <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-core<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
          <span><span><span>&lt;</span>version</span><span>></span></span>3.8.4<span><span><span>&lt;/</span>version</span><span>></span></span>
      <span><span><span>&lt;/</span>dependency</span><span>></span></span>

      <span><span><span>&lt;</span>dependency</span><span>></span></span>
          <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.surefire<span><span><span>&lt;/</span>groupId</span><span>></span></span>
          <span><span><span>&lt;</span>artifactId</span><span>></span></span>surefire-junit4<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
          <span><span><span>&lt;</span>version</span><span>></span></span>3.0.0-M5<span><span><span>&lt;/</span>version</span><span>></span></span>
      <span><span><span>&lt;/</span>dependency</span><span>></span></span>

      <span><span><span>&lt;</span>dependency</span><span>></span></span>
          <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven<span><span><span>&lt;/</span>groupId</span><span>></span></span>
          <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-plugin-api<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
          <span><span><span>&lt;</span>version</span><span>></span></span>${dep.maven-api.version}<span><span><span>&lt;/</span>version</span><span>></span></span>
      <span><span><span>&lt;/</span>dependency</span><span>></span></span>
      <span><span><span>&lt;</span>dependency</span><span>></span></span>
          <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven<span><span><span>&lt;/</span>groupId</span><span>></span></span>
          <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-model<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
          <span><span><span>&lt;</span>version</span><span>></span></span>${dep.maven-api.version}<span><span><span>&lt;/</span>version</span><span>></span></span>
      <span><span><span>&lt;/</span>dependency</span><span>></span></span>
      <span><span><span>&lt;</span>dependency</span><span>></span></span>
          <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.plugin-tools<span><span><span>&lt;/</span>groupId</span><span>></span></span>
          <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-plugin-annotations<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
          <span><span><span>&lt;</span>version</span><span>></span></span>${dep.maven-api.version}<span><span><span>&lt;/</span>version</span><span>></span></span>
      <span><span><span>&lt;/</span>dependency</span><span>></span></span>
      <span><span><span>&lt;</span>dependency</span><span>></span></span>
          <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.plugins<span><span><span>&lt;/</span>groupId</span><span>></span></span>
          <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-plugin-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
          <span><span><span>&lt;</span>version</span><span>></span></span>${dep.maven-api.version}<span><span><span>&lt;/</span>version</span><span>></span></span>
      <span><span><span>&lt;/</span>dependency</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br></div></div><h3 id="_3-3-找到插件入口"> 3.3 找到插件入口</h3>
<p><img src="https://img.springlearn.cn/blog/learn_1645113430000.png" alt="" loading="lazy"></p>
<p>前面通过学习知道Mojo是运行的核心类,而SurefirePlugin就是Mojo的子类。
由此可知,如果要学习这个 <code>maven-surefire-plugin</code>，入口就是在SurefirePlugin类。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1644857307000.png" alt="" loading="lazy"></p>
<p><img src="https://img.springlearn.cn/blog/learn_1645114616000.png" alt="" loading="lazy"></p>
<h2 id="四、-带着问题来学习"> 四、 带着问题来学习</h2>
<h3 id="_4-1-常用的参数都有那些"> 4.1 常用的参数都有那些</h3>
<p>大多数为不常用的</p>
<table>
<thead>
<tr>
<th style="text-align:left">是否常用</th>
<th style="text-align:left">参数名</th>
<th style="text-align:center">使用方法</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">常用</td>
<td style="text-align:left">skipTests</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">用于跳过单测</td>
</tr>
<tr>
<td style="text-align:left">常用</td>
<td style="text-align:left">maven.test.skip.exec</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">用于跳过单测</td>
</tr>
<tr>
<td style="text-align:left">常用</td>
<td style="text-align:left">maven.test.skip</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">用于跳过单测</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">testClassesDirectory</td>
<td style="text-align:center">xml配置标签</td>
<td style="text-align:center">指定测试模块目录编译后目录</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">maven.test.dependency.excludes</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">要排除的依赖,格式:groupId:artifactId</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">maven.test.additionalClasspath</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">追加classpath</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">project.build.testSourceDirectory</td>
<td style="text-align:center">xml配置标签</td>
<td style="text-align:center">指定测试模块目录源码目录</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">excludes</td>
<td style="text-align:center">xml配置</td>
<td style="text-align:center">指定规则的类不需要被单测，eg: **/*Test.java</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">surefire.reportNameSuffix</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">test报表后缀</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">maven.test.redirectTestOutputToFile</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">运行的单侧输出重定向到report目录中</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">failIfNoTests</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">如果没有单测就报错</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">forkMode</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">运行模式</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">jvm</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">指定jvm目录,如果不指定会读取系统</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">argLine</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">Jvm运行参数</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">threadCount</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">线程数</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">forkCount</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">指定启用多少个vm,1.5C 以数字结尾,数字乘以cpu核心数</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">reuseForks</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">是否可重新使用forks进程</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">disableXmlReport</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">禁用xml报告</td>
</tr>
<tr>
<td style="text-align:left">不常用</td>
<td style="text-align:left">enableassertions</td>
<td style="text-align:center">-D,或者xml配置标签</td>
<td style="text-align:center">启用断言assert语句</td>
</tr>
</tbody>
</table>
<p><strong>forkMode 可设置值有 “never”， “once”， “always” 和 “pertest”。</strong></p>
<ul>
<li>pretest： 每一个测试创建一个新进程，为每个测试创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归。</li>
<li>once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。</li>
<li>always：在一个进程中并行的运行脚本，Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能，</li>
</ul>
<h3 id="_4-2-知识点"> 4.2 知识点</h3>
<div><pre><code>// 大于等于2.0.0，小于2.1.2
VersionRange range = VersionRange.createFromVersionSpec(&quot;[2.0.0,2.1.2)&quot;);
System.out.println(range.containsVersion(new DefaultArtifactVersion(&quot;1.0&quot;)));
System.out.println(range.containsVersion(new DefaultArtifactVersion(&quot;2.0.0&quot;)));
System.out.println(range.containsVersion(new DefaultArtifactVersion(&quot;2.1.1&quot;)));
System.out.println(range.containsVersion(new DefaultArtifactVersion(&quot;2.1.2&quot;)));
System.out.println(&quot;------------&quot;);
VersionRange range2 = VersionRange.createFromVersionSpec(&quot;[2.0.0-M1SN,2.1.2)&quot;);
System.out.println(range2.containsVersion(new DefaultArtifactVersion(&quot;2.1.1-M2&quot;)));
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">编译卡点插件</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/maven/plugin/artifact-check-maven-plugin/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/maven/plugin/artifact-check-maven-plugin/"/>
    <updated>2022-05-08T04:06:59.000Z</updated>
    <content type="html"><![CDATA[<Pwd/>
<p>小编问一个问题,你们依赖的项目在发布线上环境时候,依赖中是否还会有快照版本呢?
如果有，那你就危险了,因为是快照版本,随时都可以进行覆盖,如果覆盖了之前的版本。很有可能你的项目有很大的风险。
举一个例子,项目A组使用了项目B组提供的一个依赖。开发时候因为都是使用快照包。但是上线B向A提供了一个RELEASE包。
但是A项目组上线时候,忘记使用RELEASE包了。代码运行也完全没问题。
但是突然有一天项目B组将之前的快照包给覆盖了,并且删除了里面的一些代码。这个时候项目A的项目,可能就启动不起来了。
因为他依赖的快照包被覆盖了。</p>
<p>那么如何解决上面的问题呢? 本篇我们就利用我们之前学的知识来开发一个,版本检查的工具。在每次项目编译的时候去进行检查。</p>
<p>通过不同环境，执行不同的参数来对依赖版本进行校验。</p>
<h2 id="一、开发思路"> 一、开发思路</h2>
<p>思路比较简单,在maven 打包时候,通过添加参数的方式,对打包的依赖进行正则分析。当发现有被匹配到的版本。就收集起来。
最后进行阻断,不允许打包通过。</p>
<h2 id="二、开始开发"> 二、开始开发</h2>
<h2 id="_2-1-声明一个mojo插件"> 2.1 声明一个Mojo插件</h2>
<p>本文我们都基于Maven3进行插件开发。使用注解方式进行声明。</p>
<div><pre><code><span>@Mojo</span><span>(</span>name <span>=</span> <span>"versionCheck"</span><span>,</span> defaultPhase <span>=</span> <span>LifecyclePhase</span><span>.</span>PACKAGE<span>,</span> threadSafe <span>=</span> <span>true</span><span>,</span> requiresDependencyCollection <span>=</span> <span>ResolutionScope</span><span>.</span>TEST<span>)</span>
<span>@Execute</span><span>(</span>phase <span>=</span> <span>LifecyclePhase</span><span>.</span>PACKAGE<span>)</span>
<span>public</span> <span>class</span> <span>ArtifactVersionCheckMojo</span> <span>extends</span> <span>AbstractMojo</span> <span>{</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>execute</span><span>(</span><span>)</span> <span>throws</span> <span>MojoExecutionException</span><span>,</span> <span>MojoFailureException</span> <span>{</span>
    
    <span>}</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_2-2-添加拦截规则"> 2.2 添加拦截规则</h2>
<p>拦击规则我们让用户自己进行配置。</p>
<div><pre><code>    <span>@Parameter</span><span>(</span>property <span>=</span> <span>"versionCheckRegular"</span><span>)</span>
    <span>private</span> <span>String</span><span>[</span><span>]</span> assertDependencyRegular<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>用户可以通过set方式注入</p>
<div><pre><code>              <span><span><span>&lt;</span>plugin</span><span>></span></span>
                <span><span><span>&lt;</span>groupId</span><span>></span></span>com.github.lxchinesszz<span><span><span>&lt;/</span>groupId</span><span>></span></span>
                <span><span><span>&lt;</span>artifactId</span><span>></span></span>learn-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
                <span><span><span>&lt;</span>version</span><span>></span></span>1.0.1-SNAPSHOT<span><span><span>&lt;/</span>version</span><span>></span></span>
                <span><span><span>&lt;</span>executions</span><span>></span></span>
                    <span><span><span>&lt;</span>execution</span><span>></span></span>
                        <span><span><span>&lt;</span>phase</span><span>></span></span>package<span><span><span>&lt;/</span>phase</span><span>></span></span>
                        <span><span><span>&lt;</span>goals</span><span>></span></span>
                            <span><span><span>&lt;</span>goal</span><span>></span></span>versionCheck<span><span><span>&lt;/</span>goal</span><span>></span></span>
                        <span><span><span>&lt;/</span>goals</span><span>></span></span>
                    <span><span><span>&lt;/</span>execution</span><span>></span></span>
                <span><span><span>&lt;/</span>executions</span><span>></span></span>
                <span><span><span>&lt;</span>configuration</span><span>></span></span>
                    // 使用标签就行配置
                    <span><span><span>&lt;</span>assertDependencyRegular</span><span>></span></span>
                        <span><span><span>&lt;</span>param</span><span>></span></span>.*SNAPSHOT<span><span><span>&lt;/</span>param</span><span>></span></span>
                    <span><span><span>&lt;/</span>assertDependencyRegular</span><span>></span></span>
                <span><span><span>&lt;/</span>configuration</span><span>></span></span>
            <span><span><span>&lt;/</span>plugin</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>同时也可以使用-D在命令行进行操作。</p>
<p><code>mvn package -DversionCheckRegular=.*SNAPSHOT</code></p>
<h2 id="_2-3-依赖分析"> 2.3 依赖分析</h2>
<p>这里为了避免你的maven版本过低建议你指定版本。</p>
<div><pre><code>        <span><span><span>&lt;</span>dependency</span><span>></span></span>
            <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven<span><span><span>&lt;/</span>groupId</span><span>></span></span>
            <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-core<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
            <span><span><span>&lt;</span>version</span><span>></span></span>3.8.5<span><span><span>&lt;/</span>version</span><span>></span></span>
        <span><span><span>&lt;/</span>dependency</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>我们使用分析工具. DependencyGraphBuilder</p>
<div><pre><code>    <span>ProjectBuildingRequest</span> buildingRequest <span>=</span> <span>new</span> <span>DefaultProjectBuildingRequest</span><span>(</span>session<span>.</span><span>getProjectBuildingRequest</span><span>(</span><span>)</span><span>)</span><span>;</span>
    buildingRequest<span>.</span><span>setProject</span><span>(</span>project<span>)</span><span>;</span>
    <span>DependencyNode</span> rootNode <span>=</span> dependencyGraphBuilder<span>.</span><span>buildDependencyGraph</span><span>(</span>buildingRequest<span>,</span> <span>new</span> <span>ScopeArtifactFilter</span><span>(</span><span>"test"</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="三、使用演示"> 三、使用演示</h2>
<h2 id="_3-1-安装插件"> 3.1 安装插件</h2>
<div><pre><code>    <span><span><span>&lt;</span>build</span><span>></span></span>
        <span><span><span>&lt;</span>plugins</span><span>></span></span>
            <span><span><span>&lt;</span>plugin</span><span>></span></span>
                <span><span><span>&lt;</span>groupId</span><span>></span></span>com.github.lxchinesszz<span><span><span>&lt;/</span>groupId</span><span>></span></span>
                <span><span><span>&lt;</span>artifactId</span><span>></span></span>learn-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
                <span><span><span>&lt;</span>version</span><span>></span></span>1.0.1-SNAPSHOT<span><span><span>&lt;/</span>version</span><span>></span></span>
                <span><span><span>&lt;</span>executions</span><span>></span></span>
                    <span><span><span>&lt;</span>execution</span><span>></span></span>
                        <span><span><span>&lt;</span>phase</span><span>></span></span>package<span><span><span>&lt;/</span>phase</span><span>></span></span>
                        <span><span><span>&lt;</span>goals</span><span>></span></span>
                            <span><span><span>&lt;</span>goal</span><span>></span></span>versionCheck<span><span><span>&lt;/</span>goal</span><span>></span></span>
                        <span><span><span>&lt;/</span>goals</span><span>></span></span>
                    <span><span><span>&lt;/</span>execution</span><span>></span></span>
                <span><span><span>&lt;/</span>executions</span><span>></span></span>
                <span><span><span>&lt;</span>configuration</span><span>></span></span>
                    <span><span><span>&lt;</span>assertDependencyRegular</span><span>></span></span>
                        <span><span><span>&lt;</span>param</span><span>></span></span>.*SNAPSHOT<span><span><span>&lt;/</span>param</span><span>></span></span>
                    <span><span><span>&lt;/</span>assertDependencyRegular</span><span>></span></span>
                <span><span><span>&lt;/</span>configuration</span><span>></span></span>
            <span><span><span>&lt;/</span>plugin</span><span>></span></span>
        <span><span><span>&lt;/</span>plugins</span><span>></span></span>
    <span><span><span>&lt;/</span>build</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h2 id="_3-2-执行打包命令"> 3.2 执行打包命令</h2>
<ul>
<li>因为我们绑定的是package所以我们直接执行插件</li>
</ul>
<p><code>mvn com.github.lxchinesszz:learn-maven-plugin:1.0.1-SNAPSHOT:versionCheck</code></p>
<ul>
<li>或者我们直接执行打包命令,同样会触发插件执行</li>
</ul>
<p><code>mvn package -DversionCheckRegular=.*SNAPSHOT</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1651591415000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-08T04:06:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">spring-boot-maven-plugin</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/maven/spring-boot-maven-plugin/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/maven/spring-boot-maven-plugin/"/>
    <updated>2021-12-21T05:46:37.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>spring-boot-maven-plugin</p>
</blockquote>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Maven基础入门</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/maven/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/maven/"/>
    <updated>2021-12-21T05:46:37.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Maven 翻译为&quot;专家&quot;、&quot;内行&quot;，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。
Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。
Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，Scala 和其他语言编写的项目。Maven 曾是 Jakarta 项目的子项目，现为由 Apache 软件基金会主持的独立 Apache 项目。</p>
</blockquote>
<h2 id="maven-默认插件"> Maven 默认插件</h2>
<p>已知 Maven 使用 plugin 来执行实际操作的，在默认情况下，Maven 会绑定以下几个插件来完成基本操作。</p>
<table>
<thead>
<tr>
<th>plugin</th>
<th>function</th>
<th>life cycle phase</th>
</tr>
</thead>
<tbody>
<tr>
<td>maven-clean-plugin</td>
<td>清理上一次执行创建的目标文件</td>
<td>clean</td>
</tr>
<tr>
<td>maven-resources-plugin</td>
<td>处理源资源文件和测试资源文件</td>
<td>resources,testResources</td>
</tr>
<tr>
<td>maven-compiler-plugin</td>
<td>编译源文件和测试源文件</td>
<td>compile,testCompile</td>
</tr>
<tr>
<td>maven-surefire-plugin</td>
<td>执行测试文件</td>
<td>test</td>
</tr>
<tr>
<td>maven-jar-plugin</td>
<td>创建 jar</td>
<td>jar</td>
</tr>
<tr>
<td>maven-install-plugin</td>
<td>安装 jar，将创建生成的 jar 拷贝到 .m2/repository 下面</td>
<td>install</td>
</tr>
<tr>
<td>maven-deploy-plugin</td>
<td>发布 jar</td>
<td>deploy</td>
</tr>
</tbody>
</table>
<p>如果针对各个 plugin 有特殊配置的话，需要显示指定 plugin 和 属性配置。</p>
<h2 id="maven-生命周期"> Maven 生命周期</h2>
<blockquote>
<p>官网地址: http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html</p>
</blockquote>
<p>下面列出了default,clean和site生命周期的所有构建阶段，它们按照指定的时间点之前的顺序执行。</p>
<p><code>mvn test -X</code> 查看debug日志</p>
<div><pre><code>[DEBUG] Lifecycle clean -&gt; [pre-clean, clean, post-clean]
[DEBUG] Lifecycle site -&gt; [pre-site, site, post-site, site-deploy]
[DEBUG] Lifecycle default -&gt; [validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy]
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="default生命周期"> default生命周期</h3>
<table>
<thead>
<tr>
<th style="text-align:left">阶段</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>validate</code></td>
<td style="text-align:left">验证项目是否正确并且所有必要的信息都可用。</td>
</tr>
<tr>
<td style="text-align:left"><code>initialize</code></td>
<td style="text-align:left">初始化构建状态，例如设置属性或创建目录。</td>
</tr>
<tr>
<td style="text-align:left"><code>generate-sources</code></td>
<td style="text-align:left">生成包含在编译中的任何源代码。</td>
</tr>
<tr>
<td style="text-align:left"><code>process-sources</code></td>
<td style="text-align:left">处理源代码，例如过滤任何值。</td>
</tr>
<tr>
<td style="text-align:left"><code>generate-resources</code></td>
<td style="text-align:left">生成包含在包中的资源。</td>
</tr>
<tr>
<td style="text-align:left"><code>process-resources</code></td>
<td style="text-align:left">将资源复制并处理到目标目录中，准备打包。</td>
</tr>
<tr>
<td style="text-align:left"><code>compile</code></td>
<td style="text-align:left">编译项目的源代码。</td>
</tr>
<tr>
<td style="text-align:left"><code>process-classes</code></td>
<td style="text-align:left">对编译生成的文件进行后处理，例如对 Java 类进行字节码增强。</td>
</tr>
<tr>
<td style="text-align:left"><code>generate-test-sources</code></td>
<td style="text-align:left">生成任何测试源代码以包含在编译中。</td>
</tr>
<tr>
<td style="text-align:left"><code>process-test-sources</code></td>
<td style="text-align:left">处理测试源代码，例如过滤任何值。</td>
</tr>
<tr>
<td style="text-align:left"><code>generate-test-resources</code></td>
<td style="text-align:left">创建用于测试的资源。</td>
</tr>
<tr>
<td style="text-align:left"><code>process-test-resources</code></td>
<td style="text-align:left">将资源复制并处理到测试目标目录中。</td>
</tr>
<tr>
<td style="text-align:left"><code>test-compile</code></td>
<td style="text-align:left">将测试源代码编译到测试目标目录中</td>
</tr>
<tr>
<td style="text-align:left"><code>process-test-classes</code></td>
<td style="text-align:left">对测试编译生成的文件进行后处理，例如对 Java 类进行字节码增强。</td>
</tr>
<tr>
<td style="text-align:left"><code>test</code></td>
<td style="text-align:left">使用合适的单元测试框架运行测试。这些测试不应该要求打包或部署代码。</td>
</tr>
<tr>
<td style="text-align:left"><code>prepare-package</code></td>
<td style="text-align:left">在实际包装之前执行准备包装所需的任何操作。这通常会导致包的解压缩、处理版本。</td>
</tr>
<tr>
<td style="text-align:left"><code>package</code></td>
<td style="text-align:left">获取编译后的代码并将其打包为其可分发格式，例如 JAR。</td>
</tr>
<tr>
<td style="text-align:left"><code>pre-integration-test</code></td>
<td style="text-align:left">在执行集成测试之前执行所需的操作。这可能涉及诸如设置所需环境之类的事情。</td>
</tr>
<tr>
<td style="text-align:left"><code>integration-test</code></td>
<td style="text-align:left">如有必要，处理并部署包到可以运行集成测试的环境中。</td>
</tr>
<tr>
<td style="text-align:left"><code>post-integration-test</code></td>
<td style="text-align:left">执行集成测试后执行所需的操作。这可能包括清理环境。</td>
</tr>
<tr>
<td style="text-align:left"><code>verify</code></td>
<td style="text-align:left">运行任何检查以验证包裹是否有效并符合质量标准。</td>
</tr>
<tr>
<td style="text-align:left"><code>install</code></td>
<td style="text-align:left">将包安装到本地存储库中，用作本地其他项目的依赖项。</td>
</tr>
<tr>
<td style="text-align:left"><code>deploy</code></td>
<td style="text-align:left">在集成或发布环境中完成，将最终包复制到远程存储库以与其他开发人员和项目共享。</td>
</tr>
</tbody>
</table>
<h3 id="site生命周期"> site生命周期</h3>
<table>
<thead>
<tr>
<th style="text-align:left">阶段</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>pre-site</code></td>
<td style="text-align:left">在实际项目现场生成之前执行所需的流程</td>
</tr>
<tr>
<td style="text-align:left"><code>site</code></td>
<td style="text-align:left">生成项目的站点文档</td>
</tr>
<tr>
<td style="text-align:left"><code>post-site</code></td>
<td style="text-align:left">执行完成站点生成和准备站点部署所需的流程</td>
</tr>
<tr>
<td style="text-align:left"><code>site-deploy</code></td>
<td style="text-align:left">将生成的站点文档部署到指定的 Web 服务器</td>
</tr>
</tbody>
</table>
<h3 id="clean生命周期"> clean生命周期</h3>
<table>
<thead>
<tr>
<th style="text-align:left">阶段</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>pre-clean</code></td>
<td style="text-align:left">在实际项目清理之前执行所需的流程</td>
</tr>
<tr>
<td style="text-align:left"><code>clean</code></td>
<td style="text-align:left">删除先前构建生成的所有文件</td>
</tr>
<tr>
<td style="text-align:left"><code>post-clean</code></td>
<td style="text-align:left">执行完成项目清理所需的流程</td>
</tr>
</tbody>
</table>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">自定义插件教程</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/maven/%E8%87%AA%E5%AE%9A%E4%B9%89maven%E6%8F%92%E4%BB%B6/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/maven/%E8%87%AA%E5%AE%9A%E4%B9%89maven%E6%8F%92%E4%BB%B6/"/>
    <updated>2022-05-08T04:06:59.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Maven插件官网: https://maven.apache.org/guides/plugin/guide-java-plugin-development.html</p>
</blockquote>
<div><p>前言介绍</p>
<p>前面我们大概了解了Maven的生命周期,本篇主要是学习如何在Maven的生命周期内指定一些插件的执行。主要分为3个步骤。<br>
<i>Not supported content</i> 第一个步骤先了解学习下Maven官方的命名规则建议。<br>
<i>Not supported content</i> 第二个步骤根据命名规则,我们自定义一个插件 Mojo。<br>
<i>Not supported content</i> 第三个部分学习如何向插件内 Mojo 注入一些，Maven的配置和自定义的配置信息。<br></p>
</div>
<h2 id="一、命名规范"> 一、命名规范</h2>
<ul>
<li>官方的命名规则: <code>maven-&lt;yourplugin&gt;-plugin</code>（注意“Maven”位于插件名称的开头)</li>
<li>个人自定义建议: <code>&lt;yourplugin&gt;-maven-plugin</code>（注意“Maven”位于插件名称的中间)</li>
</ul>
<p>个人不得使用官方命名规则,因为它是 Apache Maven 团队使用的插件保留命名模式。
如果个人使用这种命名模式是会侵犯了 Apache Maven 商标。<code>org.apache.maven.plugins</code></p>
<h2 id="二、自定义插件"> 二、自定义插件</h2>
<p>当我们使用idea创建一个maven插件,里面已经为我们创建了一个Mojo。定义Mojo首先要集成
<code>AbstractMojo</code> 抽象类。另外要声明这个Mojo的名字和Maven执行阶段。有两种方法声明</p>
<p><a href="https://maven.apache.org/developers/mojo-api-specification.html" target="_blank" rel="noopener noreferrer">mojo-api-specification</a></p>
<h3 id="_2-1-使用javadoc的方式声明"> 2.1 使用javadoc的方式声明</h3>
<p>因为maven诞生比较早,当时没有注解。所以使用了javadoc。</p>
<p><a href="https://maven.apache.org/plugin-tools/maven-plugin-tools-java/index.html" target="_blank" rel="noopener noreferrer">Maven Plugin Tool for Java Annotated with Mojo Javadoc Tags</a></p>
<div><pre><code><span>/**
* Goal which touches a timestamp file.
*
* @goal touch
* @phase process-sources
*/</span>
<span>public</span> <span>class</span> <span>MyMojo</span> <span>extends</span> <span>AbstractMojo</span> <span>{</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>execute</span><span>(</span><span>)</span>
    <span>throws</span> <span>MojoExecutionException</span> <span>{</span>
    <span>getLog</span><span>(</span><span>)</span><span>.</span><span>info</span><span>(</span><span>"我是一个Maven插件: FirstDemo"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>指定mvn install 安装到本地仓库,然后找个项目执行一下。</p>
<div><pre><code>[INFO] Scanning for projects...
[INFO]
[INFO] ---------------------&lt; org.example:nobug-learn-01 &gt;---------------------
[INFO] Building nobug-learn-01 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- firstdemo-maven-plugin:1.0-SNAPSHOT:touch (default-cli) @ nobug-learn-01 ---
[INFO] 我是一个Maven插件: FirstDemo
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  0.296 s
[INFO] Finished at: 2021-11-26T17:00:32+08:00
[INFO] ------------------------------------------------------------------------
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="_2-2-使用注解的方式"> 2.2 使用注解的方式</h3>
<p>前面使用javadoc的形式来定义缺失有点显得过时了,现在我们可以使用注解的方式来定义插件。但是首先需要引入注解包
下面这些依赖直接拷贝进去就行，注意如果你的maven版本太低，可能会识别不了注解。所以建议制定下构建插件的maven为
3.5</p>
<p><a href="https://maven.apache.org/plugin-tools/maven-plugin-tools-annotations/index.html" target="_blank" rel="noopener noreferrer">Maven Plugin Tools Java5 Annotations</a></p>
<p>使用 @Mojo 注解定义插件, Mojo中有一个非常重要的属性需要知道下。</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性值</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">插件名称</td>
</tr>
<tr>
<td style="text-align:center">defaultPhase</td>
<td style="text-align:center">绑定的声明周期</td>
</tr>
<tr>
<td style="text-align:center">requiresDependencyResolution</td>
<td style="text-align:center">在插件运行之前就将所有的依赖模块给构建好</td>
</tr>
<tr>
<td style="text-align:center">requiresDependencyCollection</td>
<td style="text-align:center">这个注解不会解析依赖项的文件,只分析依赖关系</td>
</tr>
</tbody>
</table>
<p>建议requiresDependencyCollection是要指定的,不然你得到的maven插件中,是不会分析依赖关系的。</p>
<p><mark>下面的依赖建议你直接拷贝使用</mark></p>
<ul>
<li>注意第一行一定不能忘记</li>
</ul>
<div><div><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code>    <span><span><span>&lt;</span>packaging</span><span>></span></span>maven-plugin<span><span><span>&lt;/</span>packaging</span><span>></span></span> 
    <span><span><span>&lt;</span>properties</span><span>></span></span>
        <span><span><span>&lt;</span>dep.maven-api.version</span><span>></span></span>3.5.2<span><span><span>&lt;/</span>dep.maven-api.version</span><span>></span></span>
    <span><span><span>&lt;/</span>properties</span><span>></span></span>
    <span><span><span>&lt;</span>dependencies</span><span>></span></span>
        <span><span><span>&lt;</span>dependency</span><span>></span></span>
            <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven<span><span><span>&lt;/</span>groupId</span><span>></span></span>
            <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-plugin-api<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
            <span><span><span>&lt;</span>version</span><span>></span></span>${dep.maven-api.version}<span><span><span>&lt;/</span>version</span><span>></span></span>
        <span><span><span>&lt;/</span>dependency</span><span>></span></span>
        <span><span><span>&lt;</span>dependency</span><span>></span></span>
            <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven<span><span><span>&lt;/</span>groupId</span><span>></span></span>
            <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-model<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
            <span><span><span>&lt;</span>version</span><span>></span></span>${dep.maven-api.version}<span><span><span>&lt;/</span>version</span><span>></span></span>
        <span><span><span>&lt;/</span>dependency</span><span>></span></span>
        <span><span><span>&lt;</span>dependency</span><span>></span></span>
            <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.plugin-tools<span><span><span>&lt;/</span>groupId</span><span>></span></span>
            <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-plugin-annotations<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
            <span><span><span>&lt;</span>version</span><span>></span></span>${dep.maven-api.version}<span><span><span>&lt;/</span>version</span><span>></span></span>
        <span><span><span>&lt;/</span>dependency</span><span>></span></span>
        <span><span><span>&lt;</span>dependency</span><span>></span></span>
            <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.plugins<span><span><span>&lt;/</span>groupId</span><span>></span></span>
            <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-plugin-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
            <span><span><span>&lt;</span>version</span><span>></span></span>3.5<span><span><span>&lt;/</span>version</span><span>></span></span>
        <span><span><span>&lt;/</span>dependency</span><span>></span></span>
        <span><span><span>&lt;</span>dependency</span><span>></span></span>
            <span><span><span>&lt;</span>groupId</span><span>></span></span>junit<span><span><span>&lt;/</span>groupId</span><span>></span></span>
            <span><span><span>&lt;</span>artifactId</span><span>></span></span>junit<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
            <span><span><span>&lt;</span>version</span><span>></span></span>3.8.1<span><span><span>&lt;/</span>version</span><span>></span></span>
            <span><span><span>&lt;</span>scope</span><span>></span></span>test<span><span><span>&lt;/</span>scope</span><span>></span></span>
        <span><span><span>&lt;/</span>dependency</span><span>></span></span>
        <span><span><span>&lt;</span>dependency</span><span>></span></span>
            <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven<span><span><span>&lt;/</span>groupId</span><span>></span></span>
            <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-core<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
            <span><span><span>&lt;</span>version</span><span>></span></span>3.8.5<span><span><span>&lt;/</span>version</span><span>></span></span>
        <span><span><span>&lt;/</span>dependency</span><span>></span></span>
    <span><span><span>&lt;/</span>dependencies</span><span>></span></span>
   <span>&lt;!--注意这一步也非常重要，否则如果你系统的maven版本太低，就可能无法识别maven的注解--></span>
    <span><span><span>&lt;</span>build</span><span>></span></span>
    <span><span><span>&lt;</span>plugins</span><span>></span></span>
     <span><span><span>&lt;</span>plugin</span><span>></span></span>
      <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.plugins<span><span><span>&lt;/</span>groupId</span><span>></span></span>
      <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-plugin-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
      <span><span><span>&lt;</span>version</span><span>></span></span>3.5<span><span><span>&lt;/</span>version</span><span>></span></span>
     <span><span><span>&lt;/</span>plugin</span><span>></span></span>
    <span><span><span>&lt;/</span>plugins</span><span>></span></span>
    <span><span><span>&lt;/</span>build</span><span>></span></span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br></div></div><p>Mojo类</p>
<div><pre><code><span>@Mojo</span><span>(</span>name <span>=</span> <span>"myMojo"</span><span>,</span> defaultPhase <span>=</span> <span>LifecyclePhase</span><span>.</span>VALIDATE<span>,</span> threadSafe <span>=</span> <span>true</span><span>)</span>
<span>@Execute</span><span>(</span>phase <span>=</span> <span>LifecyclePhase</span><span>.</span>VALIDATE<span>)</span>
<span>public</span> <span>class</span> <span>MyMojo</span>
        <span>extends</span> <span>AbstractMojo</span> <span>{</span>

    <span>public</span> <span>void</span> <span>execute</span><span>(</span><span>)</span>
            <span>throws</span> <span>MojoExecutionException</span> <span>{</span>
        <span>getLog</span><span>(</span><span>)</span><span>.</span><span>info</span><span>(</span><span>"我是一个Maven插件: FirstDemo"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>注意: 自定义的maven插件是没办法直接就执行的，一定要在build中指定要执行的mojo。如下代码。</p>
<div><pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.example&lt;/groupId&gt;
    &lt;artifactId&gt;firstdemo-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;1.2-SNAPSHOT&lt;/version&gt;
    &lt;executions&gt;
        &lt;execution&gt;
        &lt;!--                        如果插件中没有生命周期,这里要进行声明。如果插件中声明了就不用写这个--&gt;
         &lt;phase&gt;clean&lt;/phase&gt;
         &lt;goals&gt;
         &lt;!--                            自定义的插件,不会自动执行,要在这里进行声明--&gt;
            &lt;goal&gt;myMojo&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="三、参数注入"> 三、参数注入</h2>
<p>maven插件中是可以自定以参数的,通过配置然后传递到Mojo类中。 主要使用 <code>@Parameter</code> 注解完成，下面是详细介绍。</p>
<p>主要使用<code>@Parameter</code>进行定义。</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>声明参数的名字</td>
</tr>
<tr>
<td>alias</td>
<td>声明一个别名</td>
</tr>
<tr>
<td>property</td>
<td>从pom的propertys标签中读取,或是-Dtest=123 使用-D添加到命令行</td>
</tr>
<tr>
<td>defaultValue</td>
<td>字段的默认值</td>
</tr>
<tr>
<td>required</td>
<td>是否必须</td>
</tr>
<tr>
<td>readonly</td>
<td>是否只读</td>
</tr>
</tbody>
</table>
<p>字段的类型可以是多样的。</p>
<h2 id="_3-1-外部参数注入"> 3.1 外部参数注入</h2>
<h3 id="_3-1-1-boolean类型"> 3.1.1 boolean类型</h3>
<p>这包括类型为 boolean 和 Boolean 的变量。 读取配置时，文本“true”会导致参数设置为 true，所有其他文本都会导致参数设置为 false。 例子：</p>
<div><pre><code>    /**
     * My boolean.
     */
    @Parameter
    private boolean myBoolean;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><code>&lt;myBoolean&gt;true&lt;/myBoolean&gt;</code></p>
<h3 id="_3-1-2-integer类型"> 3.1.2 Integer类型</h3>
<p>这包括类型为 byte、Byte、int、Integer、long、Long、short 和 Short 的变量。 读取配置时，使用 Integer.parseInt() 或相应类的 valueOf() 方法将 XML 文件中的文本转换为整数值。 这意味着字符串必须是有效的十进制整数值，仅由数字 0 到 9 组成，前面有一个可选的 - 表示负值。 例子：</p>
<div><pre><code>    /**
     * My Integer.
     */
    @Parameter
    private Integer myInteger;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><code>&lt;myInteger&gt;10&lt;/myInteger&gt;</code></p>
<h3 id="_3-1-3-double类型"> 3.1.3 Double类型</h3>
<p>这包括类型为 double、Double、float 和 Float 的变量。 读取配置时，XML 文件中的文本使用相应类的 valueOf() 方法转换为二进制形式。</p>
<div><pre><code>    /**
     * My Double.
     */
    @Parameter
    private Double myDouble;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><code>&lt;myDouble&gt;1.0&lt;/myDouble&gt;</code></p>
<h3 id="_3-1-4-date类型"> 3.1.4 Date类型</h3>
<p>这包括类型为日期的变量。 读取配置时，XML 文件中的文本使用以下日期格式之一进行转换：“yyyy-MM-dd HH:mm:ss.S a”（示例日期为“2005-10-06 2:22 :55.1 PM”）或“yyyy-MM-dd HH:mm:ssa”（示例日期为“2005-10-06 2:22:55PM”）。 请注意，解析是使用 DateFormat.parse() 完成的，它允许对格式进行一些宽容。 如果该方法可以解析指定的日期和时间，即使它与上面的模式不完全匹配，它也会这样做。 例子：</p>
<div><pre><code>    /**
     * My Date.
     */
    @Parameter
    private Date myDate;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><code>&lt;myDate&gt;2005-10-06 2:22:55.1 PM&lt;/myDate&gt;</code></p>
<h3 id="_3-1-5-file类型"> 3.1.5 File类型</h3>
<p>这包括类型为 File 的变量。 读取配置时，XML 文件中的文本用作所需文件或目录的路径。 如果路径是相对的（不以 / 或 C: 之类的驱动器号开头），则该路径是相对于包含 POM 的目录。 例子：</p>
<div><pre><code>    /**
     * My File.
     */
    @Parameter
    private File myFile;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><code>&lt;myFile&gt;c:\temp&lt;/myFile&gt;</code></p>
<h3 id="_3-1-6-url"> 3.1.6 URL</h3>
<p>这包括变量类型的 URL。 读取配置时，使用 XML 文件中的文本作为 URL。 格式必须遵循 RFC 2396 准则，并且看起来像任何 Web 浏览器 URL (scheme://host:port/path/to/file)。 转换 URL 时，对 URL 任何部分的内容都没有限制。</p>
<div><pre><code>    /**
     * My URL.
     */
    @Parameter
    private URL myURL;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><code>&lt;myURL&gt;http://maven.apache.org&lt;/myURL&gt;</code></p>
<h3 id="_3-1-7-枚举"> 3.1.7 枚举</h3>
<p>也可以使用枚举类型参数。 首先你需要定义你的枚举类型，然后你可以在参数定义中使用枚举类型：</p>
<div><pre><code>    public enum Color {
      GREEN,
      RED,
      BLUE
    }

    /**
     * My Enum
     */
    @Parameter
    private Color myColor;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p><code>&lt;myColor&gt;GREEN&lt;/myColor&gt;</code></p>
<h3 id="_3-1-8-arrays"> 3.1.8 Arrays</h3>
<div><pre><code>    /**
     * My Array.
     */
    @Parameter
    private String[] myArray;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code>&lt;myArray&gt;
  &lt;param&gt;value1&lt;/param&gt;
  &lt;param&gt;value2&lt;/param&gt;
&lt;/myArray&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="_3-1-9-collections"> 3.1.9 Collections</h3>
<p>此类别涵盖任何实现 java.util.Collection 的类，例如 ArrayList 或 HashSet。 这些参数是通过多次指定参数来配置的，就像数组一样。 例子：</p>
<div><pre><code>   /**
     * My List.
     */
    @Parameter
    private List myList;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code>&lt;myList&gt;
  &lt;param&gt;value1&lt;/param&gt;
  &lt;param&gt;value2&lt;/param&gt;
&lt;/myList&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="_3-1-10-maps"> 3.1.10 Maps</h3>
<p>此类别涵盖任何实现 java.util.Map（例如 HashMap）但未实现 java.util.Properties 的类。 这些参数是通过在参数配置中以 <key>value</key> 形式包含 XML 标签来配置的。 例子：</p>
<div><pre><code>    /**
     * My Map.
     */
    @Parameter
    private Map myMap;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code>&lt;myMap&gt;
  &lt;key1&gt;value1&lt;/key1&gt;
  &lt;key2&gt;value2&lt;/key2&gt;
&lt;/myMap&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="_3-1-11-properties"> 3.1.11 Properties</h3>
<p>此类别涵盖实现 java.util.Properties 的任何地图。 这些参数是通过在参数配置中以 <property><name>myName</name> <value>myValue</value> </property> 形式包含 XML 标记来配置的。 例子：</p>
<div><pre><code>    /**
     * My Properties.
     */
    @Parameter
    private Properties myProperties;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code>&lt;myProperties&gt;
  &lt;property&gt;
    &lt;name&gt;propertyName1&lt;/name&gt;
    &lt;value&gt;propertyValue1&lt;/value&gt;
  &lt;property&gt;
  &lt;property&gt;
    &lt;name&gt;propertyName2&lt;/name&gt;
    &lt;value&gt;propertyValue2&lt;/value&gt;
  &lt;property&gt;
&lt;/myProperties&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="_3-1-12-object"> 3.1.12 Object</h3>
<div><pre><code>    /**
     * My Object.
     */
    @Parameter
    private MyObject myObject;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code>&lt;myObject&gt;
  &lt;myField&gt;test&lt;/myField&gt;
&lt;/myObject&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_3-2-maven组件注入"> 3.2 Maven组件注入</h2>
<h3 id="_3-2-1-mavensession"> 3.2.1 MavenSession</h3>
<p>包含Maven执行请求对象和结果,当前模块和总模块。和依赖模块信息等信息</p>
<div><pre><code>    @Parameter(defaultValue = &quot;${session}&quot;, readonly = true)
    private MavenSession session;
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="_3-2-2-mavenproject"> 3.2.2 MavenProject</h3>
<p>当前模块，及模块依赖</p>
<div><pre><code>    @Parameter(defaultValue = &quot;${project}&quot;, readonly = true)
    private MavenProject project;
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="_3-2-3-mojoexecution"> 3.2.3 MojoExecution</h3>
<div><pre><code>    @Parameter(defaultValue = &quot;${mojoExecution}&quot;, readonly = true)
    private MojoExecution mojo;
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="_3-2-4-plugindescriptor"> 3.2.4 PluginDescriptor</h3>
<div><pre><code>    @Parameter(defaultValue = &quot;${plugin}&quot;, readonly = true)
    private PluginDescriptor plugin;
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="_3-2-5-settings"> 3.2.5 Settings</h3>
<div><pre><code>    /**
     * maven的配置信息
     */
    @Parameter(defaultValue = &quot;${settings}&quot;, readonly = true)
    private Settings settings;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="_3-2-6-项目路径"> 3.2.6. 项目路径</h3>
<div><pre><code>    /**
     * 项目路径
     */
    @Parameter(defaultValue = &quot;${project.basedir}&quot;, readonly = true)
    private File basedir;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="_3-2-7-编译后目录"> 3.2.7. 编译后目录</h3>
<div><pre><code>    /**
     * 编译后目录
     */
    @Parameter(defaultValue = &quot;${project.build.directory}&quot;, readonly = true)
    private File target;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="四、插件执行"> 四、插件执行</h2>
<blockquote>
<p>类似问题: https://www.coder.work/article/3592058</p>
</blockquote>
<div><p>注意</p>
<p>我们自己开发的插件,要想执行必须要在项目的pom文件中来指定,插件不会默认来进行执行的。如下。</p>
</div>
<div><pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.example&lt;/groupId&gt;
    &lt;artifactId&gt;firstdemo-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;1.2-SNAPSHOT&lt;/version&gt;
    &lt;executions&gt;
        &lt;execution&gt;
        &lt;!--                        如果插件中没有生命周期,这里要进行声明。如果插件中声明了就不用写这个--&gt;
         &lt;phase&gt;clean&lt;/phase&gt;
         &lt;goals&gt;
         &lt;!--                            自定义的插件,不会自动执行,要在这里进行声明--&gt;
            &lt;goal&gt;myMojo&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-0"><label for="task-item-0"> phase 如果插件中没有生命周期,这里要进行声明。如果插件中声明了就不用写这个</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-1"><label for="task-item-1"> goal  自定义的插件,不会自动执行,要在这里进行声明</label></li>
</ul>
<h3 id="命令行执行"> 命令行执行</h3>
<ul>
<li>
<p><code>mvn org.example:firstdemo-maven-plugin:1.4-SNAPSHOT:myMojo</code></p>
</li>
<li>
<p><code>mvn ${groupId}:${artifactId}:${version}:${mojoName}</code></p>
</li>
</ul>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第11篇:Mybatis权限插件设计</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/AuthPlugin/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/AuthPlugin/"/>
    <updated>2022-04-04T17:49:44.000Z</updated>
    <content type="html"><![CDATA[<PageBanner/>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-30T15:42:58.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第09篇:Mybatis查询限制插件设计</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/LimitPlugin/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/LimitPlugin/"/>
    <updated>2022-04-12T17:26:01.000Z</updated>
    <content type="html"><![CDATA[<PageBanner/>
<h2 id="一、实现目标"> 一、实现目标</h2>
<p>目标: 针对Mysql数据库实现动态修改sql的能力，增加上limit的查询限制。</p>
<h2 id="二、知识扩展"> 二、知识扩展</h2>
<p>首先下了解下有那些的分页技术。</p>
<h2 id="_2-1-物理分页"> 2.1 物理分页</h2>
<p>所谓物理分页是数据库直接提供了分页的预发, 如mysql的limit,oracle的rownum,好处是效率高;不好的地方就是不同数据库有不同的语法。</p>
<h2 id="_2-2-逻辑分页"> 2.2 逻辑分页</h2>
<p>逻辑分页利用游标分页，好处是所有数据库都统一，坏处就是效率低。</p>
<h2 id="二、实现分析"> 二、实现分析</h2>
<p>首先我们先易后难,先说逻辑分页。</p>
<h2 id="_2-1-逻辑分页"> 2.1 逻辑分页</h2>
<p>首先我们看下Mybatis中当执行查询时候的代码,当返回是list时候。会走到executeForMany方法中。
该方法主要判断是否需要进行逻辑分页。代码不难,看就完了。</p>
<div><pre><code><span>public</span> <span>class</span> <span>MapperMethod</span> <span>{</span>
    <span>public</span> <span>Object</span> <span>execute</span><span>(</span><span>SqlSession</span> sqlSession<span>,</span> <span>Object</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
        <span>.</span><span>.</span><span>.</span><span>.</span>
        <span>case</span> SELECT<span>:</span>
        <span>if</span> <span>(</span>method<span>.</span><span>returnsVoid</span><span>(</span><span>)</span> <span>&amp;&amp;</span> method<span>.</span><span>hasResultHandler</span><span>(</span><span>)</span><span>)</span> <span>{</span>
          <span>executeWithResultHandler</span><span>(</span>sqlSession<span>,</span> args<span>)</span><span>;</span>
          result <span>=</span> <span>null</span><span>;</span>
        <span>}</span> <span>else</span> <span>if</span> <span>(</span>method<span>.</span><span>returnsMany</span><span>(</span><span>)</span><span>)</span> <span>{</span>
          result <span>=</span> <span>executeForMany</span><span>(</span>sqlSession<span>,</span> args<span>)</span><span>;</span>
        <span>}</span>  
        <span>.</span><span>.</span><span>.</span>
    <span>}</span>
    
    <span>private</span> <span><span>&lt;</span><span>E</span><span>></span></span> <span>Object</span> <span>executeForMany</span><span>(</span><span>SqlSession</span> sqlSession<span>,</span> <span>Object</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
        <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> result<span>;</span>
        <span>// 参数解析</span>
        <span>Object</span> param <span>=</span> method<span>.</span><span>convertArgsToSqlCommandParam</span><span>(</span>args<span>)</span><span>;</span>
        <span>// 判断是否逻辑分页了。</span>
        <span>if</span> <span>(</span>method<span>.</span><span>hasRowBounds</span><span>(</span><span>)</span><span>)</span> <span>{</span>
          <span>RowBounds</span> rowBounds <span>=</span> method<span>.</span><span>extractRowBounds</span><span>(</span>args<span>)</span><span>;</span>
          result <span>=</span> sqlSession<span>.</span><span>selectList</span><span>(</span>command<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> param<span>,</span> rowBounds<span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
          result <span>=</span> sqlSession<span>.</span><span>selectList</span><span>(</span>command<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> param<span>)</span><span>;</span>
        <span>}</span>
        <span>.</span><span>.</span><span>.</span><span>.</span>   
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>hasRowBounds 可以判断当前的方法是否要走逻辑分页。
MethodSignature#hasRowBounds的逻辑也比较简单,就是判断方法入参中是否包含了RowBounds,如下代码。</p>
<div><pre><code><span>public</span> <span>class</span> <span>MethodSignature</span><span>{</span>
    <span>public</span> <span>MethodSignature</span><span>(</span><span>Configuration</span> configuration<span>,</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> mapperInterface<span>,</span> <span>Method</span> method<span>)</span> <span>{</span>
      <span>this</span><span>.</span>rowBoundsIndex <span>=</span> <span>getUniqueParamIndex</span><span>(</span>method<span>,</span> <span>RowBounds</span><span>.</span><span>class</span><span>)</span><span>;</span>
      <span>this</span><span>.</span>resultHandlerIndex <span>=</span> <span>getUniqueParamIndex</span><span>(</span>method<span>,</span> <span>ResultHandler</span><span>.</span><span>class</span><span>)</span><span>;</span>
      <span>this</span><span>.</span>paramNameResolver <span>=</span> <span>new</span> <span>ParamNameResolver</span><span>(</span>configuration<span>,</span> method<span>)</span><span>;</span>
    <span>}</span>
    <span>private</span> <span>Integer</span> <span>getUniqueParamIndex</span><span>(</span><span>Method</span> method<span>,</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> paramType<span>)</span> <span>{</span>
      <span>Integer</span> index <span>=</span> <span>null</span><span>;</span>
      <span>final</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span><span>[</span><span>]</span> argTypes <span>=</span> method<span>.</span><span>getParameterTypes</span><span>(</span><span>)</span><span>;</span>
      <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> argTypes<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>paramType<span>.</span><span>isAssignableFrom</span><span>(</span>argTypes<span>[</span>i<span>]</span><span>)</span><span>)</span> <span>{</span>
          <span>if</span> <span>(</span>index <span>==</span> <span>null</span><span>)</span> <span>{</span>
            index <span>=</span> i<span>;</span>
          <span>}</span> <span>else</span> <span>{</span>
            <span>throw</span> <span>new</span> <span>BindingException</span><span>(</span>method<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>" cannot have multiple "</span> <span>+</span> paramType<span>.</span><span>getSimpleName</span><span>(</span><span>)</span> <span>+</span> <span>" parameters"</span><span>)</span><span>;</span>
          <span>}</span>
        <span>}</span>
      <span>}</span>
      <span>return</span> index<span>;</span>
    <span>}</span>
    <span>public</span> <span>boolean</span> <span>hasRowBounds</span><span>(</span><span>)</span> <span>{</span>
      <span>return</span> rowBoundsIndex <span>!=</span> <span>null</span><span>;</span>
    <span>}</span>
<span>}</span>    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>如果方法入参中有RowBounds则会逻辑分页,如果没有指定则使用默认RowBounds即不限制数量。说不限制其实也限制了，
就是Integer.MAX_VALUE 😂</p>
<div><pre><code><span>public</span> <span>class</span> <span>DefaultSqlSession</span> <span>implements</span> <span>SqlSession</span> <span>{</span>
  <span>@Override</span>
  <span>public</span> <span><span>&lt;</span><span>E</span><span>></span></span> <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>selectList</span><span>(</span><span>String</span> statement<span>,</span> <span>Object</span> parameter<span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>selectList</span><span>(</span>statement<span>,</span> parameter<span>,</span> <span>RowBounds</span><span>.</span>DEFAULT<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>  

<span>public</span> <span>class</span> <span>RowBounds</span> <span>{</span>

  <span>public</span> <span>static</span> <span>final</span> <span>int</span> NO_ROW_OFFSET <span>=</span> <span>0</span><span>;</span>
  <span>public</span> <span>static</span> <span>final</span> <span>int</span> NO_ROW_LIMIT <span>=</span> <span>Integer</span><span>.</span>MAX_VALUE<span>;</span>
  <span>public</span> <span>static</span> <span>final</span> <span>RowBounds</span> DEFAULT <span>=</span> <span>new</span> <span>RowBounds</span><span>(</span><span>)</span><span>;</span>

  <span>private</span> <span>final</span> <span>int</span> offset<span>;</span>
  <span>private</span> <span>final</span> <span>int</span> limit<span>;</span>

  <span>public</span> <span>RowBounds</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>offset <span>=</span> NO_ROW_OFFSET<span>;</span>
    <span>this</span><span>.</span>limit <span>=</span> NO_ROW_LIMIT<span>;</span>
  <span>}</span>
<span>}</span> 
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>那么逻辑分页的处理游标的地方在哪里呢? 因为前面我们已经对Mybatis的所有执行流程分析过了,所以这个时候我们应该有自己的思考了。
应该是在jdbc执行后 处理返回数据的时候，那么应该就是在DefaultResultSetHandler中。直接看源码吧。</p>
<ul>
<li>line(4-16) 用于处理偏移量, 如从第四页开始,则执行next跳过前三行。</li>
<li>line(17-19) 处理限制数量，如最大查询5行，如果返回值中大于5就返回false就不在添加数据。</li>
<li>line(25) 填过偏移量</li>
<li>line(26) 判断limit</li>
</ul>
<div><div><br><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><br><br><br><br><br><br><br></div><pre><code>
<span>public</span> <span>class</span> <span>DefaultResultSetHandler</span> <span>implements</span> <span>ResultSetHandler</span> <span>{</span>
 
  <span>private</span> <span>void</span> <span>skipRows</span><span>(</span><span>ResultSet</span> rs<span>,</span> <span>RowBounds</span> rowBounds<span>)</span> <span>throws</span> <span>SQLException</span> <span>{</span>
    <span>if</span> <span>(</span>rs<span>.</span><span>getType</span><span>(</span><span>)</span> <span>!=</span> <span>ResultSet</span><span>.</span>TYPE_FORWARD_ONLY<span>)</span> <span>{</span>
      <span>if</span> <span>(</span>rowBounds<span>.</span><span>getOffset</span><span>(</span><span>)</span> <span>!=</span> <span>RowBounds</span><span>.</span>NO_ROW_OFFSET<span>)</span> <span>{</span>
        rs<span>.</span><span>absolute</span><span>(</span>rowBounds<span>.</span><span>getOffset</span><span>(</span><span>)</span><span>)</span><span>;</span>
      <span>}</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> rowBounds<span>.</span><span>getOffset</span><span>(</span><span>)</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span><span>!</span>rs<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span> <span>{</span>
          <span>break</span><span>;</span>
        <span>}</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
  <span>private</span> <span>boolean</span> <span>shouldProcessMoreRows</span><span>(</span><span>ResultContext</span><span><span>&lt;</span><span>?</span><span>></span></span> context<span>,</span> <span>RowBounds</span> rowBounds<span>)</span> <span>{</span>
    <span>return</span> <span>!</span>context<span>.</span><span>isStopped</span><span>(</span><span>)</span> <span>&amp;&amp;</span> context<span>.</span><span>getResultCount</span><span>(</span><span>)</span> <span>&lt;</span> rowBounds<span>.</span><span>getLimit</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>
  
  <span>private</span> <span>void</span> <span>handleRowValuesForSimpleResultMap</span><span>(</span><span>ResultSetWrapper</span> rsw<span>,</span> <span>ResultMap</span> resultMap<span>,</span> <span>ResultHandler</span><span><span>&lt;</span><span>?</span><span>></span></span> resultHandler<span>,</span> <span>RowBounds</span> rowBounds<span>,</span> <span>ResultMapping</span> parentMapping<span>)</span>
      <span>throws</span> <span>SQLException</span> <span>{</span>
    <span>DefaultResultContext</span><span><span>&lt;</span><span>Object</span><span>></span></span> resultContext <span>=</span> <span>new</span> <span>DefaultResultContext</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
    <span>ResultSet</span> resultSet <span>=</span> rsw<span>.</span><span>getResultSet</span><span>(</span><span>)</span><span>;</span>
    <span>skipRows</span><span>(</span>resultSet<span>,</span> rowBounds<span>)</span><span>;</span>
    <span>while</span> <span>(</span><span>shouldProcessMoreRows</span><span>(</span>resultContext<span>,</span> rowBounds<span>)</span> <span>&amp;&amp;</span> <span>!</span>resultSet<span>.</span><span>isClosed</span><span>(</span><span>)</span> <span>&amp;&amp;</span> resultSet<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>ResultMap</span> discriminatedResultMap <span>=</span> <span>resolveDiscriminatedResultMap</span><span>(</span>resultSet<span>,</span> resultMap<span>,</span> <span>null</span><span>)</span><span>;</span>
      <span>Object</span> rowValue <span>=</span> <span>getRowValue</span><span>(</span>rsw<span>,</span> discriminatedResultMap<span>,</span> <span>null</span><span>)</span><span>;</span>
      <span>storeObject</span><span>(</span>resultHandler<span>,</span> resultContext<span>,</span> rowValue<span>,</span> parentMapping<span>,</span> resultSet<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>  
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>好了，知道了这些我们就开始分析我们要如何使用插件了吧。对就是拦截ResultSetHandler,利用反射的方法,将默认的
RowBounds添加limit限制。</p>
<div><pre><code>    <span>/**
     * 那我们就拦截处理结果.
     * 启用反射修改默认的RowBounds limit属性
     */</span>
    <span>@Intercepts</span><span>(</span><span>@Signature</span><span>(</span>type <span>=</span> <span>ResultSetHandler</span><span>.</span><span>class</span><span>,</span> method <span>=</span> <span>"handleResultSets"</span><span>,</span> args <span>=</span> <span>{</span><span>Statement</span><span>.</span><span>class</span><span>}</span><span>)</span><span>)</span>
    <span>public</span> <span>static</span> <span>class</span> <span>DefaultRowBoundsHandler</span> <span>implements</span> <span>Interceptor</span> <span>{</span>

        <span>@Override</span>
        <span>public</span> <span>Object</span> <span>intercept</span><span>(</span><span>Invocation</span> invocation<span>)</span> <span>throws</span> <span>Throwable</span> <span>{</span>
            <span>Object</span> target <span>=</span> invocation<span>.</span><span>getTarget</span><span>(</span><span>)</span><span>;</span>
            <span>Field</span> rowBounds <span>=</span> target<span>.</span><span>getClass</span><span>(</span><span>)</span><span>.</span><span>getDeclaredField</span><span>(</span><span>"rowBounds"</span><span>)</span><span>;</span>
            rowBounds<span>.</span><span>setAccessible</span><span>(</span><span>true</span><span>)</span><span>;</span>
            <span>RowBounds</span> originRowBounds <span>=</span> <span>(</span><span>RowBounds</span><span>)</span> rowBounds<span>.</span><span>get</span><span>(</span>target<span>)</span><span>;</span>
            <span>// 如果是默认的则替换下</span>
            <span>if</span> <span>(</span>originRowBounds<span>.</span><span>equals</span><span>(</span><span>RowBounds</span><span>.</span>DEFAULT<span>)</span><span>)</span> <span>{</span>
                <span>MetaObject</span> metaObject <span>=</span> <span>MetaObject</span><span>.</span><span>forObject</span><span>(</span>originRowBounds<span>,</span> <span>new</span> <span>DefaultObjectFactory</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>DefaultObjectWrapperFactory</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>DefaultReflectorFactory</span><span>(</span><span>)</span><span>)</span><span>;</span>
                metaObject<span>.</span><span>setValue</span><span>(</span><span>"limit"</span><span>,</span> <span>2</span><span>)</span><span>;</span>
            <span>}</span>
            <span>return</span> invocation<span>.</span><span>proceed</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>limitAddRowBounds</span><span>(</span><span>)</span><span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"example01/mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
        <span>// 添加上我们的拦截器</span>
        configuration<span>.</span><span>addInterceptor</span><span>(</span><span>new</span> <span>DefaultRowBoundsHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 参数: autoCommit,从名字上看就是是否自动提交事务</span>
        <span>SqlSession</span> sqlSession <span>=</span> sqlSessionFactory<span>.</span><span>openSession</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>// 获取Mapper</span>
        <span>TUserMapper</span> mapper <span>=</span> configuration<span>.</span><span>getMapperRegistry</span><span>(</span><span>)</span><span>.</span><span>getMapper</span><span>(</span><span>TUserMapper</span><span>.</span><span>class</span><span>,</span> sqlSession<span>)</span><span>;</span>
        <span>// 如果自己加了RowBounds，则不自动加limit</span>
        <span>RowBounds</span> rowBounds <span>=</span> <span>new</span> <span>RowBounds</span><span>(</span><span>0</span><span>,</span> <span>3</span><span>)</span><span>;</span>
        <span>List</span><span><span>&lt;</span><span>TUser</span><span>></span></span> users1 <span>=</span> mapper<span>.</span><span>selectRowBounds</span><span>(</span>rowBounds<span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>users1<span>.</span><span>size</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 如果不加显示,默认limit = 2</span>
        <span>List</span><span><span>&lt;</span><span>TUser</span><span>></span></span> users <span>=</span> mapper<span>.</span><span>selectAll</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>users<span>.</span><span>size</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><p>好了，到这里逻辑分页已经搞定了。注意奥,这里只拦截了 <code>ResultSetHandler#handleResultSets</code> 其他两个没有拦截。
注意奥这里只是一个思路，其实解决还有几种方法，我们要学会举一反三，比如我们也可以拦截 <code>Executor#query</code> 直接修改入参中的RowBounds参数。</p>
<h2 id="_2-2-物理分页"> 2.2 物理分页</h2>
<p>物理分页就是给sql添加上参数。那么sql信息都在哪里呢? 就在下图中。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649779778000.png" alt="" loading="lazy"></p>
<p>那么我们如何能修改参数呢? 当然就是从下面两个类中利用反射来给sql增加上limit了。那么我们在哪里拦截呢?</p>
<p>首先确定拦截地方,首先上面两个类。RawSqlSource(占位符)、DynamicSqlSource(变量符)。都属于MappedStatement的内部属性，只要我们能
拿到MappedStatement就可以了。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649782868000.png" alt="" loading="lazy"></p>
<p>其中Executor中就可以。那么我们开始操作吧。</p>
<ul>
<li>line(14) RawSqlSource 占位符是最好处理的,内部属性就是StaticSqlSource,而StaticSqlSource中的sql是现成的直接造就行了。</li>
<li>line(26) DynamicSqlSource 变量符,稍微有点难搞,因为你不能直接拿到sql,所以我们只能去重写它。如下。</li>
<li>line(48-63) 从DynamicContext拿到原生sql然后,跟上面一样。</li>
</ul>
<div><div><br><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br></div><pre><code>    <span>/**
     * 那我们就拦截处理结果.
     * 启用反射修改默认的RowBounds limit属性
     */</span>
    <span>@Intercepts</span><span>(</span><span>@Signature</span><span>(</span>type <span>=</span> <span>Executor</span><span>.</span><span>class</span><span>,</span> method <span>=</span> <span>"query"</span><span>,</span>
            args <span>=</span> <span>{</span><span>MappedStatement</span><span>.</span><span>class</span><span>,</span> <span>Object</span><span>.</span><span>class</span><span>,</span> <span>RowBounds</span><span>.</span><span>class</span><span>,</span> <span>ResultHandler</span><span>.</span><span>class</span><span>}</span><span>)</span><span>)</span>
    <span>public</span> <span>static</span> <span>class</span> <span>PhysicalHandler</span> <span>implements</span> <span>Interceptor</span> <span>{</span>

        <span>@Override</span>
        <span>public</span> <span>Object</span> <span>intercept</span><span>(</span><span>Invocation</span> invocation<span>)</span> <span>throws</span> <span>Throwable</span> <span>{</span>
            <span>Object</span><span>[</span><span>]</span> args <span>=</span> invocation<span>.</span><span>getArgs</span><span>(</span><span>)</span><span>;</span>
            <span>MappedStatement</span> ms <span>=</span> <span>(</span><span>MappedStatement</span><span>)</span> args<span>[</span><span>0</span><span>]</span><span>;</span>
            <span>SqlSource</span> sqlSource <span>=</span> ms<span>.</span><span>getSqlSource</span><span>(</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>sqlSource <span>instanceof</span> <span>RawSqlSource</span><span>)</span> <span>{</span>
                <span>MetaObject</span> rawSqlSource <span>=</span> ms<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>.</span><span>newMetaObject</span><span>(</span><span>(</span><span>RawSqlSource</span><span>)</span> sqlSource<span>)</span><span>;</span>
                <span>Object</span> staticSqlSource <span>=</span> rawSqlSource<span>.</span><span>getValue</span><span>(</span><span>"sqlSource"</span><span>)</span><span>;</span>
                <span>MetaObject</span> metaObject <span>=</span> ms<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>.</span><span>newMetaObject</span><span>(</span>staticSqlSource<span>)</span><span>;</span>
                <span>String</span> sql <span>=</span> <span>(</span><span>String</span><span>)</span> metaObject<span>.</span><span>getValue</span><span>(</span><span>"sql"</span><span>)</span><span>;</span>
                <span>if</span> <span>(</span>sql<span>.</span><span>indexOf</span><span>(</span><span>"limit"</span><span>)</span> <span>&lt;=</span> <span>0</span><span>)</span> <span>{</span>
                    <span>String</span> limitSql <span>=</span> sql <span>+</span> <span>" limit 2"</span><span>;</span>
                    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>limitSql<span>)</span><span>;</span>
                    metaObject<span>.</span><span>setValue</span><span>(</span><span>"sql"</span><span>,</span> limitSql<span>)</span><span>;</span>
                <span>}</span>
            <span>}</span>
            <span>// 如果是动态sql,则需要解析</span>
            <span>if</span> <span>(</span>sqlSource <span>instanceof</span> <span>DynamicSqlSource</span><span>)</span> <span>{</span>
                <span>MetaObject</span> metaObject <span>=</span> ms<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>.</span><span>newMetaObject</span><span>(</span>ms<span>)</span><span>;</span>
                <span>LimitDynamicSqlSource</span> limitDynamicSqlSource <span>=</span> <span>new</span> <span>LimitDynamicSqlSource</span><span>(</span><span>(</span><span>DynamicSqlSource</span><span>)</span> sqlSource<span>)</span><span>;</span>
                metaObject<span>.</span><span>setValue</span><span>(</span><span>"sqlSource"</span><span>,</span> limitDynamicSqlSource<span>)</span><span>;</span>
            <span>}</span>
            <span>return</span> invocation<span>.</span><span>proceed</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>class</span> <span>LimitDynamicSqlSource</span> <span>implements</span> <span>SqlSource</span> <span>{</span>

        <span>private</span> <span>final</span> <span>Configuration</span> configuration<span>;</span>

        <span>private</span> <span>final</span> <span>SqlNode</span> rootSqlNode<span>;</span>
        
        <span>public</span> <span>LimitDynamicSqlSource</span><span>(</span><span>DynamicSqlSource</span> dynamicSqlSource<span>)</span> <span>{</span>
            <span>MetaObject</span> metaObject <span>=</span> <span>MetaObject</span><span>.</span><span>forObject</span><span>(</span>dynamicSqlSource<span>,</span> <span>new</span> <span>DefaultObjectFactory</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>DefaultObjectWrapperFactory</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>DefaultReflectorFactory</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>this</span><span>.</span>configuration <span>=</span> <span>(</span><span>Configuration</span><span>)</span> metaObject<span>.</span><span>getValue</span><span>(</span><span>"configuration"</span><span>)</span><span>;</span>
            <span>this</span><span>.</span>rootSqlNode <span>=</span> <span>(</span><span>SqlNode</span><span>)</span> metaObject<span>.</span><span>getValue</span><span>(</span><span>"rootSqlNode"</span><span>)</span><span>;</span>
        <span>}</span>

        <span>@Override</span>
        <span>public</span> <span>BoundSql</span> <span>getBoundSql</span><span>(</span><span>Object</span> parameterObject<span>)</span> <span>{</span>
            <span>DynamicContext</span> context <span>=</span> <span>new</span> <span>DynamicContext</span><span>(</span>configuration<span>,</span> parameterObject<span>)</span><span>;</span>
            rootSqlNode<span>.</span><span>apply</span><span>(</span>context<span>)</span><span>;</span>
            <span>SqlSourceBuilder</span> sqlSourceParser <span>=</span> <span>new</span> <span>SqlSourceBuilder</span><span>(</span>configuration<span>)</span><span>;</span>
            <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> parameterType <span>=</span> parameterObject <span>==</span> <span>null</span> <span>?</span> <span>Object</span><span>.</span><span>class</span> <span>:</span> parameterObject<span>.</span><span>getClass</span><span>(</span><span>)</span><span>;</span>
            <span>String</span> sql <span>=</span> context<span>.</span><span>getSql</span><span>(</span><span>)</span><span>;</span>
            <span>String</span> limitSql <span>=</span> sql<span>;</span>
            <span>// 给原生sql增加limit</span>
            <span>if</span> <span>(</span>sql<span>.</span><span>indexOf</span><span>(</span><span>"limit"</span><span>)</span> <span>&lt;=</span> <span>0</span><span>)</span> <span>{</span>
                limitSql <span>=</span> sql <span>+</span> <span>" limit 2"</span><span>;</span>
                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>limitSql<span>)</span><span>;</span>
            <span>}</span>
            <span>SqlSource</span> sqlSource <span>=</span> sqlSourceParser<span>.</span><span>parse</span><span>(</span>limitSql<span>,</span> parameterType<span>,</span> context<span>.</span><span>getBindings</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>BoundSql</span> boundSql <span>=</span> sqlSource<span>.</span><span>getBoundSql</span><span>(</span>parameterObject<span>)</span><span>;</span>
            context<span>.</span><span>getBindings</span><span>(</span><span>)</span><span>.</span><span>forEach</span><span>(</span>boundSql<span>::</span><span>setAdditionalParameter</span><span>)</span><span>;</span>
            <span>return</span> boundSql<span>;</span>
        <span>}</span>
    <span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br></div></div><p>好了我们直接来验证下吧。</p>
<div><pre><code>    <span>/**
     * 物理分页
     * 就是拼装sql
     */</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>physicalLimit</span><span>(</span><span>)</span> <span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"example01/mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
        <span>// 添加上我们的拦截器</span>
        configuration<span>.</span><span>addInterceptor</span><span>(</span><span>new</span> <span>PhysicalHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 参数: autoCommit,从名字上看就是是否自动提交事务</span>
        <span>SqlSession</span> sqlSession <span>=</span> sqlSessionFactory<span>.</span><span>openSession</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>// 获取Mapper</span>
        <span>TUserMapper</span> mapper <span>=</span> configuration<span>.</span><span>getMapperRegistry</span><span>(</span><span>)</span><span>.</span><span>getMapper</span><span>(</span><span>TUserMapper</span><span>.</span><span>class</span><span>,</span> sqlSession<span>)</span><span>;</span>
        <span>List</span><span><span>&lt;</span><span>TUser</span><span>></span></span> users <span>=</span> mapper<span>.</span><span>selectAll</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>users<span>.</span><span>size</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>好了，到这里我们就实现了动态修改sql了。重要的是思路, 思路决定出路。要学会举一反三。本篇所有的代码示例都在</p>
<p><code>com.test.plugin.LimitPluginTest</code></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-30T15:42:58.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第04篇:Mybatis代理对象生成</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/Mapper%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/Mapper%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA/"/>
    <updated>2022-04-12T17:26:01.000Z</updated>
    <content type="html"><![CDATA[<PageBanner/>
<h2 id="一、架构分析"> 一、架构分析</h2>
<p>Mybatis中Mapper一般只是一个接口,  那么为什么能执行数据操作的呢? 那肯定是基于代理没得说。在了解Mybatis如何实现代理
前,  我们先大概看下它的架构是什么样的,  对这些关键的类有个大概的认识,  知道它所处的位置在哪里。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649424512000.png" alt="" loading="lazy"></p>
<p>本篇我们只深入研究下代理层,   学习下mybatis是如何进行代理操作的,   而关于sql的最终执行,   放到下一篇执行流程中来研究。</p>
<h2 id="二、源码分析"> 二、源码分析</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1649301019000.png" alt="" loading="lazy"></p>
<p>首先不要慌,  看上面这个图,  Mybatis的代理流程还是比较简单的。下面主要看下每个核心的类是做什么用的。</p>
<h2 id="_2-1-mapperproxyfactory"> 2.1 MapperProxyFactory</h2>
<ul>
<li>代理工厂里面看代码是比较简单的,  就是利用Proxy创建代理对象。</li>
<li>对于已经生成的代理方法,  直接放到MethodCache缓存起来。</li>
</ul>
<div><pre><code><span>public</span> <span>class</span> <span>MapperProxyFactory</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>{</span>

  <span>private</span> <span>final</span> <span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> mapperInterface<span>;</span>
  <span>private</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>Method</span><span>,</span>   <span>MapperMethodInvoker</span><span>></span></span> methodCache <span>=</span> <span>new</span> <span>ConcurrentHashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>

  <span>// Jdk代理Proxy,  可以看到主要逻辑在MapperProxy中</span>
  <span>protected</span> <span>T</span> <span>newInstance</span><span>(</span><span>MapperProxy</span><span><span>&lt;</span><span>T</span><span>></span></span> mapperProxy<span>)</span> <span>{</span>
    <span>return</span> <span>(</span><span>T</span><span>)</span> <span>Proxy</span><span>.</span><span>newProxyInstance</span><span>(</span>mapperInterface<span>.</span><span>getClassLoader</span><span>(</span><span>)</span><span>,</span>   <span>new</span> <span>Class</span><span>[</span><span>]</span> <span>{</span> mapperInterface <span>}</span><span>,</span>   mapperProxy<span>)</span><span>;</span>
  <span>}</span>

  <span>public</span> <span>T</span> <span>newInstance</span><span>(</span><span>SqlSession</span> sqlSession<span>)</span> <span>{</span>
    <span>final</span> <span>MapperProxy</span><span><span>&lt;</span><span>T</span><span>></span></span> mapperProxy <span>=</span> <span>new</span> <span>MapperProxy</span><span><span>&lt;</span><span>></span></span><span>(</span>sqlSession<span>,</span>   mapperInterface<span>,</span>   methodCache<span>)</span><span>;</span>
    <span>return</span> <span>newInstance</span><span>(</span>mapperProxy<span>)</span><span>;</span>
  <span>}</span>

<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="_2-2-mapperproxy"> 2.2 MapperProxy</h2>
<p>MapperProxy 的代理逻辑也非常简单,  就以下三个能力,  看图理解。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649079715000.png" alt="" loading="lazy"></p>
<p>下面将核心的处理代码给挑选了出来,  增加了注释。</p>
<div><pre><code><span>public</span> <span>class</span> <span>MapperProxy</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>implements</span> <span>InvocationHandler</span><span>,</span>   <span>Serializable</span> <span>{</span>
  <span>@Override</span>
  <span>public</span> <span>Object</span> <span>invoke</span><span>(</span><span>Object</span> proxy<span>,</span>   <span>Method</span> method<span>,</span>   <span>Object</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>Throwable</span> <span>{</span>
    <span>try</span> <span>{</span>
      <span>// Object方法直接执行</span>
      <span>if</span> <span>(</span><span>Object</span><span>.</span><span>class</span><span>.</span><span>equals</span><span>(</span>method<span>.</span><span>getDeclaringClass</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
        <span>return</span> method<span>.</span><span>invoke</span><span>(</span><span>this</span><span>,</span>   args<span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>// 其他方法生成代理方法</span>
        <span>return</span> <span>cachedInvoker</span><span>(</span>method<span>)</span><span>.</span><span>invoke</span><span>(</span>proxy<span>,</span>   method<span>,</span>   args<span>,</span>   sqlSession<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span> <span>catch</span> <span>(</span><span>Throwable</span> t<span>)</span> <span>{</span>
      <span>throw</span> <span>ExceptionUtil</span><span>.</span><span>unwrapThrowable</span><span>(</span>t<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
  
  <span>private</span> <span>MapperMethodInvoker</span> <span>cachedInvoker</span><span>(</span><span>Method</span> method<span>)</span> <span>throws</span> <span>Throwable</span> <span>{</span>
    <span>try</span> <span>{</span>
      <span>return</span> <span>MapUtil</span><span>.</span><span>computeIfAbsent</span><span>(</span>methodCache<span>,</span>   method<span>,</span>   m <span>-></span> <span>{</span>
        <span>// 如果是默认方法</span>
        <span>if</span> <span>(</span>m<span>.</span><span>isDefault</span><span>(</span><span>)</span><span>)</span> <span>{</span>
          <span>try</span> <span>{</span>
            <span>if</span> <span>(</span>privateLookupInMethod <span>==</span> <span>null</span><span>)</span> <span>{</span>
              <span>// 生成java8的语法解析生成代理方法</span>
              <span>return</span> <span>new</span> <span>DefaultMethodInvoker</span><span>(</span><span>getMethodHandleJava8</span><span>(</span>method<span>)</span><span>)</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>
              <span>// // 生成java9的语法解析生成代理方法</span>
              <span>return</span> <span>new</span> <span>DefaultMethodInvoker</span><span>(</span><span>getMethodHandleJava9</span><span>(</span>method<span>)</span><span>)</span><span>;</span>
            <span>}</span>
          <span>}</span> <span>catch</span> <span>(</span><span>IllegalAccessException</span> <span>|</span> <span>InstantiationException</span> <span>|</span> <span>InvocationTargetException</span>
              <span>|</span> <span>NoSuchMethodException</span> e<span>)</span> <span>{</span>
            <span>throw</span> <span>new</span> <span>RuntimeException</span><span>(</span>e<span>)</span><span>;</span>
          <span>}</span>
        <span>}</span> <span>else</span> <span>{</span>
        <span>// 不是默认方法,   生成代理方法 MapperMethod</span>
          <span>return</span> <span>new</span> <span>PlainMethodInvoker</span><span>(</span><span>new</span> <span>MapperMethod</span><span>(</span>mapperInterface<span>,</span>   method<span>,</span>   sqlSession<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span> <span>catch</span> <span>(</span><span>RuntimeException</span> re<span>)</span> <span>{</span>
      <span>Throwable</span> cause <span>=</span> re<span>.</span><span>getCause</span><span>(</span><span>)</span><span>;</span>
      <span>throw</span> cause <span>==</span> <span>null</span> <span>?</span> re <span>:</span> cause<span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br></div></div><h2 id="_2-3-plainmethodinvoker"> 2.3 PlainMethodInvoker</h2>
<p>前面说了代理方法主要有三种场景。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649079715000.png" alt="" loading="lazy"></p>
<ol>
<li>Object方法直接method.invoker(this,  args);</li>
<li>default关键字修饰的方法,  是DefaultMethodInvoker</li>
<li>而更重要的要执行sql的代理Invoker是PlainMethodInvoker</li>
</ol>
<p>PlainMethodInvoker 才是真正处理需要进行sql的具体实现类。真正的代理逻辑在 MapperMethod 中。</p>
<div><pre><code><span>private</span> <span>static</span> <span>class</span> <span>PlainMethodInvoker</span> <span>implements</span> <span>MapperMethodInvoker</span> <span>{</span>
    <span>private</span> <span>final</span> <span>MapperMethod</span> mapperMethod<span>;</span>

    <span>public</span> <span>PlainMethodInvoker</span><span>(</span><span>MapperMethod</span> mapperMethod<span>)</span> <span>{</span>
      <span>super</span><span>(</span><span>)</span><span>;</span>
      <span>this</span><span>.</span>mapperMethod <span>=</span> mapperMethod<span>;</span>
    <span>}</span>

    <span>@Override</span>
    <span>public</span> <span>Object</span> <span>invoke</span><span>(</span><span>Object</span> proxy<span>,</span>   <span>Method</span> method<span>,</span>   <span>Object</span><span>[</span><span>]</span> args<span>,</span>   <span>SqlSession</span> sqlSession<span>)</span> <span>throws</span> <span>Throwable</span> <span>{</span>
      <span>return</span> mapperMethod<span>.</span><span>execute</span><span>(</span>sqlSession<span>,</span>   args<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>MapperMethod,  简单看下流程,   里面有2个重要的实现类,   分别用于判断sql类型,   处理方法参数(解析@Param参数)并最终交给SqlSession执行。到这里就把代理的
流程给搞清楚了。但是具体sql怎么组装参数,   如何调用数据库jdbc接口,   都还没有看到。这部分内容。我们放到下一篇 <a href="../Mybatis%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">第05篇:Mybatis的SQL执行流程分析</a></p>
<div><pre><code><span>public</span> <span>class</span> <span>MapperMethod</span> <span>{</span>

  <span>private</span> <span>final</span> <span>SqlCommand</span> command<span>;</span>
  <span>private</span> <span>final</span> <span>MethodSignature</span> method<span>;</span>

  <span>public</span> <span>MapperMethod</span><span>(</span><span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> mapperInterface<span>,</span>   <span>Method</span> method<span>,</span>   <span>Configuration</span> config<span>)</span> <span>{</span>
    <span>this</span><span>.</span>command <span>=</span> <span>new</span> <span>SqlCommand</span><span>(</span>config<span>,</span>   mapperInterface<span>,</span>   method<span>)</span><span>;</span>
    <span>this</span><span>.</span>method <span>=</span> <span>new</span> <span>MethodSignature</span><span>(</span>config<span>,</span>   mapperInterface<span>,</span>   method<span>)</span><span>;</span>
  <span>}</span>

  <span>public</span> <span>Object</span> <span>execute</span><span>(</span><span>SqlSession</span> sqlSession<span>,</span>   <span>Object</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
    <span>Object</span> result<span>;</span>
    <span>switch</span> <span>(</span>command<span>.</span><span>getType</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>case</span> INSERT<span>:</span> <span>{</span>
        <span>Object</span> param <span>=</span> method<span>.</span><span>convertArgsToSqlCommandParam</span><span>(</span>args<span>)</span><span>;</span>
        result <span>=</span> <span>rowCountResult</span><span>(</span>sqlSession<span>.</span><span>insert</span><span>(</span>command<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span>   param<span>)</span><span>)</span><span>;</span>
        <span>break</span><span>;</span>
      <span>}</span>
      <span>case</span> UPDATE<span>:</span> <span>{</span>
        <span>Object</span> param <span>=</span> method<span>.</span><span>convertArgsToSqlCommandParam</span><span>(</span>args<span>)</span><span>;</span>
        result <span>=</span> <span>rowCountResult</span><span>(</span>sqlSession<span>.</span><span>update</span><span>(</span>command<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span>   param<span>)</span><span>)</span><span>;</span>
        <span>break</span><span>;</span>
      <span>}</span>
      <span>case</span> DELETE<span>:</span> <span>{</span>
        <span>Object</span> param <span>=</span> method<span>.</span><span>convertArgsToSqlCommandParam</span><span>(</span>args<span>)</span><span>;</span>
        result <span>=</span> <span>rowCountResult</span><span>(</span>sqlSession<span>.</span><span>delete</span><span>(</span>command<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span>   param<span>)</span><span>)</span><span>;</span>
        <span>break</span><span>;</span>
      <span>}</span>
      <span>case</span> SELECT<span>:</span>
        <span>if</span> <span>(</span>method<span>.</span><span>returnsVoid</span><span>(</span><span>)</span> <span>&amp;&amp;</span> method<span>.</span><span>hasResultHandler</span><span>(</span><span>)</span><span>)</span> <span>{</span>
          <span>executeWithResultHandler</span><span>(</span>sqlSession<span>,</span>   args<span>)</span><span>;</span>
          result <span>=</span> <span>null</span><span>;</span>
        <span>}</span> <span>else</span> <span>if</span> <span>(</span>method<span>.</span><span>returnsMany</span><span>(</span><span>)</span><span>)</span> <span>{</span>
          result <span>=</span> <span>executeForMany</span><span>(</span>sqlSession<span>,</span>   args<span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>if</span> <span>(</span>method<span>.</span><span>returnsMap</span><span>(</span><span>)</span><span>)</span> <span>{</span>
          result <span>=</span> <span>executeForMap</span><span>(</span>sqlSession<span>,</span>   args<span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>if</span> <span>(</span>method<span>.</span><span>returnsCursor</span><span>(</span><span>)</span><span>)</span> <span>{</span>
          result <span>=</span> <span>executeForCursor</span><span>(</span>sqlSession<span>,</span>   args<span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
          <span>Object</span> param <span>=</span> method<span>.</span><span>convertArgsToSqlCommandParam</span><span>(</span>args<span>)</span><span>;</span>
          result <span>=</span> sqlSession<span>.</span><span>selectOne</span><span>(</span>command<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span>   param<span>)</span><span>;</span>
          <span>if</span> <span>(</span>method<span>.</span><span>returnsOptional</span><span>(</span><span>)</span>
              <span>&amp;&amp;</span> <span>(</span>result <span>==</span> <span>null</span> <span>||</span> <span>!</span>method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>result<span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span><span>)</span><span>)</span> <span>{</span>
            result <span>=</span> <span>Optional</span><span>.</span><span>ofNullable</span><span>(</span>result<span>)</span><span>;</span>
          <span>}</span>
        <span>}</span>
        <span>break</span><span>;</span>
      <span>case</span> FLUSH<span>:</span>
        result <span>=</span> sqlSession<span>.</span><span>flushStatements</span><span>(</span><span>)</span><span>;</span>
        <span>break</span><span>;</span>
      <span>default</span><span>:</span>
        <span>throw</span> <span>new</span> <span>BindingException</span><span>(</span><span>"Unknown execution method for: "</span> <span>+</span> command<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
    <span>if</span> <span>(</span>result <span>==</span> <span>null</span> <span>&amp;&amp;</span> method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>.</span><span>isPrimitive</span><span>(</span><span>)</span> <span>&amp;&amp;</span> <span>!</span>method<span>.</span><span>returnsVoid</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>throw</span> <span>new</span> <span>BindingException</span><span>(</span><span>"Mapper method '"</span> <span>+</span> command<span>.</span><span>getName</span><span>(</span><span>)</span>
          <span>+</span> <span>" attempted to return null from a method with a primitive return type ("</span> <span>+</span> method<span>.</span><span>getReturnType</span><span>(</span><span>)</span> <span>+</span> <span>")."</span><span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> result<span>;</span>
  <span>}</span>

<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-30T15:42:58.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第12篇:Mybatis中反射工具</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/MetaObject/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/MetaObject/"/>
    <updated>2022-05-08T04:06:59.000Z</updated>
    <content type="html"><![CDATA[<div><p>提示</p>
<p>我们知道在java中基于反射的速度相对来说是很慢的, 但是如果对反射信息加了缓存性能可以提升1半以上, 如果在对反射设置了忽略安全检查, 性能更是会再提升1半。那么这个时候
反射带来的性能问题基本可以忽略了。在Mybatis中关于反射的工具就可以很大程度来解决这个问题。本篇讲解下Mybatis中的工具类, 以后在项目中也可以直接使用。</p>
</div>
<h2 id="一、反射缓存类-reflector"> 一、反射缓存类 Reflector</h2>
<p>所有的反射对象都会被生成一个 <code>Reflector</code>, Reflector 会把反射的方法、构造、字段、类型等信息都缓存起来。这样的设计主要是为了解决性能问题。</p>
<div><pre><code><span>public</span> <span>class</span> <span>Reflector</span> <span>{</span>

  <span>private</span> <span>final</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> type<span>;</span>
  <span>private</span> <span>final</span> <span>String</span><span>[</span><span>]</span> readablePropertyNames<span>;</span>
  <span>private</span> <span>final</span> <span>String</span><span>[</span><span>]</span> writablePropertyNames<span>;</span>
  <span>private</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Invoker</span><span>></span></span> setMethods <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  <span>private</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Invoker</span><span>></span></span> getMethods <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  <span>private</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Class</span><span>&lt;</span><span>?</span><span>></span><span>></span></span> setTypes <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  <span>private</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Class</span><span>&lt;</span><span>?</span><span>></span><span>></span></span> getTypes <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  <span>private</span> <span>Constructor</span><span><span>&lt;</span><span>?</span><span>></span></span> defaultConstructor<span>;</span>

  <span>private</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> caseInsensitivePropertyMap <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  
<span>}</span>  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>ReflectorFactory 反射工厂用来缓存反射对象 Reflector</p>
<div><pre><code>
<span>public</span> <span>class</span> <span>DefaultReflectorFactory</span> <span>implements</span> <span>ReflectorFactory</span> <span>{</span>
  <span>private</span> <span>boolean</span> classCacheEnabled <span>=</span> <span>true</span><span>;</span>
  <span>private</span> <span>final</span> <span>ConcurrentMap</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>,</span> <span>Reflector</span><span>></span></span> reflectorMap <span>=</span> <span>new</span> <span>ConcurrentHashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  
  <span>@Override</span>
  <span>public</span> <span>Reflector</span> <span>findForClass</span><span>(</span><span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> type<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>classCacheEnabled<span>)</span> <span>{</span>
      <span>// synchronized (type) removed see issue #461</span>
      <span>return</span> <span>MapUtil</span><span>.</span><span>computeIfAbsent</span><span>(</span>reflectorMap<span>,</span> type<span>,</span> <span>Reflector</span><span>::</span><span>new</span><span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>return</span> <span>new</span> <span>Reflector</span><span>(</span>type<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
  
<span>}</span>  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="二、通过反射操作对象-metaobject"> 二、通过反射操作对象 MetaObject</h2>
<p>MetaObject 从名字来看就是对对象进行操作,他的操作都是通过反射来进行的。</p>
<h2 id="_2-1-简单对象操作"> 2.1 简单对象操作</h2>
<div><pre><code>    <span>@AllArgsConstructor</span>
    <span>@ToString</span>
    <span>public</span> <span>static</span> <span>class</span> <span>Person</span> <span>{</span>

        <span>@Getter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>@Setter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>private</span> <span>String</span> name<span>;</span>

        <span>@Getter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>@Setter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>private</span> <span>int</span> age<span>;</span>

        <span>@Getter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>@Setter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>private</span> <span>Long</span> userId<span>;</span>
    <span>}</span>

    <span>/**
     * 通过反射给对象赋值
     */</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>metaObjectTest</span><span>(</span><span>)</span> <span>{</span>
        <span>Person</span> jay <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>"周杰伦"</span><span>,</span> <span>40</span><span>,</span> <span>1L</span><span>)</span><span>;</span>
        <span>MetaObject</span> jayMetaObject <span>=</span> <span>MetaObject</span><span>.</span><span>forObject</span><span>(</span>jay<span>,</span> <span>new</span> <span>DefaultObjectFactory</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>DefaultObjectWrapperFactory</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>DefaultReflectorFactory</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>jayMetaObject<span>.</span><span>hasGetter</span><span>(</span><span>"name"</span><span>)</span><span>)</span> <span>{</span>
            <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> name <span>=</span> jayMetaObject<span>.</span><span>getGetterType</span><span>(</span><span>"name"</span><span>)</span><span>;</span>
            <span>// class java.lang.String</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>name<span>)</span><span>;</span>
            jayMetaObject<span>.</span><span>setValue</span><span>(</span><span>"name"</span><span>,</span> <span>"昆凌"</span><span>)</span><span>;</span>
            <span>// 昆凌</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>jayMetaObject<span>.</span><span>getValue</span><span>(</span><span>"name"</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>
        <span>// 昆凌</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>jay<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><h2 id="_2-2-嵌套对象操作"> 2.2 嵌套对象操作</h2>
<div><pre><code>    <span>@AllArgsConstructor</span>
    <span>@ToString</span>
    <span>public</span> <span>static</span> <span>class</span> <span>Person</span> <span>{</span>

        <span>@Getter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>@Setter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>private</span> <span>String</span> name<span>;</span>

        <span>@Getter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>@Setter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>private</span> <span>int</span> age<span>;</span>

        <span>@Getter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>@Setter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>private</span> <span>Long</span> userId<span>;</span>
    <span>}</span>
    
    <span>@AllArgsConstructor</span>
    <span>@ToString</span>
    <span>public</span> <span>static</span> <span>class</span> <span>School</span> <span>{</span>

        <span>@Getter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>@Setter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>private</span> <span>String</span> name<span>;</span>

        <span>@Getter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>@Setter</span><span>(</span><span>AccessLevel</span><span>.</span>PRIVATE<span>)</span>
        <span>private</span> <span>Person</span> person<span>;</span>
    <span>}</span>
    
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>fillChildObjectTest</span><span>(</span><span>)</span> <span>{</span>
        <span>School</span> school <span>=</span> <span>new</span> <span>School</span><span>(</span><span>"西天大学"</span><span>,</span> <span>new</span> <span>Person</span><span>(</span><span>"周杰伦"</span><span>,</span> <span>40</span><span>,</span> <span>1L</span><span>)</span><span>)</span><span>;</span>
        <span>MetaObject</span> schoolMetaObject <span>=</span> <span>MetaObject</span><span>.</span><span>forObject</span><span>(</span>school<span>,</span> <span>new</span> <span>DefaultObjectFactory</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>DefaultObjectWrapperFactory</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>DefaultReflectorFactory</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 周杰伦</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>schoolMetaObject<span>.</span><span>getValue</span><span>(</span><span>"person.name"</span><span>)</span><span>)</span><span>;</span>
        schoolMetaObject<span>.</span><span>setValue</span><span>(</span><span>"person.name"</span><span>,</span> <span>"昆凌"</span><span>)</span><span>;</span>
        <span>// 昆凌</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>school<span>.</span><span>getPerson</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><h2 id="三、获取反射信息-metaclass"> 三、获取反射信息 MetaClass</h2>
<p>MetaClass 主要是对 Reflector信息的一个包装并提供些更高级的操作。如跟嵌套类赋值</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>metaClassTest</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>MetaClass</span> metaClass <span>=</span> <span>MetaClass</span><span>.</span><span>forClass</span><span>(</span><span>School</span><span>.</span><span>class</span><span>,</span> <span>new</span> <span>DefaultReflectorFactory</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// class com.test.tool.MetaObjectTest$Person</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>metaClass<span>.</span><span>getGetterType</span><span>(</span><span>"person"</span><span>)</span><span>)</span><span>;</span>

        <span>School</span> school <span>=</span> <span>new</span> <span>School</span><span>(</span><span>)</span><span>;</span>
        <span>Invoker</span> setNameInvoker <span>=</span> metaClass<span>.</span><span>getSetInvoker</span><span>(</span><span>"name"</span><span>)</span><span>;</span>
        <span>// 通过反射给空对象赋值</span>
        setNameInvoker<span>.</span><span>invoke</span><span>(</span>school<span>,</span> <span>new</span> <span>Object</span><span>[</span><span>]</span><span>{</span><span>"Jay"</span><span>}</span><span>)</span><span>;</span>

        <span>// 通过反射获取空对象</span>
        <span>Invoker</span> getNameInvoker <span>=</span> metaClass<span>.</span><span>getGetInvoker</span><span>(</span><span>"name"</span><span>)</span><span>;</span>
        <span>// Jay</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>getNameInvoker<span>.</span><span>invoke</span><span>(</span>school<span>,</span> <span>new</span> <span>Object</span><span>[</span><span>]</span><span>{</span><span>}</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-04-26T15:44:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第06篇:Mybatis缓存设计</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/Mybatis%E4%B8%80%E7%BA%A7%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/Mybatis%E4%B8%80%E7%BA%A7%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/"/>
    <updated>2022-04-12T17:26:01.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://mybatis.net.cn/sqlmap-xml.html#cache" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<div><p>提示</p>
<p>MyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。本篇文章，小编将会在最短的时间呢，通过观察源码来深刻了解Mybatis的
一级二级缓存;然后在说如何定制。</p>
</div>
<h2 id="一、mybatis-cache设计"> 一、Mybatis Cache设计</h2>
<p>在Mybatis中所有的缓存,都是实现自Cache接口。无论是一级缓存还是二级缓存都是实现这个接口。其中一级缓存是本地缓存，二级缓存是一个允许开发者扩展的
缓存(eg: ehcache/或者内置的很多缓存)。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>Cache</span> <span>{</span>

  <span>String</span> <span>getId</span><span>(</span><span>)</span><span>;</span>

  <span>void</span> <span>putObject</span><span>(</span><span>Object</span> key<span>,</span> <span>Object</span> value<span>)</span><span>;</span>

  <span>Object</span> <span>getObject</span><span>(</span><span>Object</span> key<span>)</span><span>;</span>

  <span>Object</span> <span>removeObject</span><span>(</span><span>Object</span> key<span>)</span><span>;</span>

  <span>void</span> <span>clear</span><span>(</span><span>)</span><span>;</span>

  <span>int</span> <span>getSize</span><span>(</span><span>)</span><span>;</span>

  <span>default</span> <span>ReadWriteLock</span> <span>getReadWriteLock</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>null</span><span>;</span>
  <span>}</span>

<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id="二、一级缓存"> 二、一级缓存</h2>
<p>一级缓存是本地缓存,其实就是PerpetualCache这类,它的源码也很简单,其实就是一个Map而已。一般面试的经常说一级缓存称为
SqlSession缓存,我们看其实最终实现是在BaseExecutor进行做的。就这么简单。</p>
<div><pre><code><span>public</span> <span>abstract</span> <span>class</span> <span>BaseExecutor</span> <span>implements</span> <span>Executor</span> <span>{</span>

    <span>// 一级缓存本地缓存</span>
    <span>protected</span> <span>PerpetualCache</span> localCache<span>;</span>
    
    <span>protected</span> <span>BaseExecutor</span><span>(</span><span>Configuration</span> configuration<span>,</span> <span>Transaction</span> transaction<span>)</span> <span>{</span>
        <span>this</span><span>.</span>transaction <span>=</span> transaction<span>;</span>
        <span>this</span><span>.</span>deferredLoads <span>=</span> <span>new</span> <span>ConcurrentLinkedQueue</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        <span>this</span><span>.</span>localCache <span>=</span> <span>new</span> <span>PerpetualCache</span><span>(</span><span>"LocalCache"</span><span>)</span><span>;</span>
    <span>}</span>
    
    <span>// 执行查询后添加到一级缓存中</span>
    <span>private</span> <span><span>&lt;</span><span>E</span><span>></span></span> <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>queryFromDatabase</span><span>(</span><span>MappedStatement</span> ms<span>,</span> <span>Object</span> parameter<span>,</span> <span>RowBounds</span> rowBounds<span>,</span> <span>ResultHandler</span> resultHandler<span>,</span> <span>CacheKey</span> key<span>,</span> <span>BoundSql</span> boundSql<span>)</span> <span>throws</span> <span>SQLException</span> <span>{</span>
        <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> list<span>;</span>
        localCache<span>.</span><span>putObject</span><span>(</span>key<span>,</span> EXECUTION_PLACEHOLDER<span>)</span><span>;</span>
        <span>try</span> <span>{</span>
          list <span>=</span> <span>doQuery</span><span>(</span>ms<span>,</span> parameter<span>,</span> rowBounds<span>,</span> resultHandler<span>,</span> boundSql<span>)</span><span>;</span>
        <span>}</span> <span>finally</span> <span>{</span>
          localCache<span>.</span><span>removeObject</span><span>(</span>key<span>)</span><span>;</span>
        <span>}</span>
        localCache<span>.</span><span>putObject</span><span>(</span>key<span>,</span> list<span>)</span><span>;</span>
        <span>if</span> <span>(</span>ms<span>.</span><span>getStatementType</span><span>(</span><span>)</span> <span>==</span> <span>StatementType</span><span>.</span>CALLABLE<span>)</span> <span>{</span>
          localOutputParameterCache<span>.</span><span>putObject</span><span>(</span>key<span>,</span> parameter<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> list<span>;</span>
      <span>}</span>
<span>}</span>  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id="三、二级缓存"> 三、二级缓存</h2>
<p>二级缓存是基于装饰器模式,它允许开发者自定义缓存的实现,只要实现了Cache接口就行。通过装饰器的设计。
CachingExecutor从MappedStatement#getCache获取缓存的具体实现，从而进行缓存操作。</p>
<p>下面代码是看Mybatis是如何进行装饰器的。注意看注释。如果开启缓存,则包装器对Executor进行包装。</p>
<div><pre><code><span>public</span> <span>class</span> <span>Configuration</span> <span>{</span>
    <span>public</span> <span>Executor</span> <span>newExecutor</span><span>(</span><span>Transaction</span> transaction<span>,</span> <span>ExecutorType</span> executorType<span>)</span> <span>{</span>
        executorType <span>=</span> executorType <span>==</span> <span>null</span> <span>?</span> defaultExecutorType <span>:</span> executorType<span>;</span>
        executorType <span>=</span> executorType <span>==</span> <span>null</span> <span>?</span> <span>ExecutorType</span><span>.</span>SIMPLE <span>:</span> executorType<span>;</span>
        <span>Executor</span> executor<span>;</span>
        <span>if</span> <span>(</span><span>ExecutorType</span><span>.</span>BATCH <span>==</span> executorType<span>)</span> <span>{</span>
          executor <span>=</span> <span>new</span> <span>BatchExecutor</span><span>(</span><span>this</span><span>,</span> transaction<span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>ExecutorType</span><span>.</span>REUSE <span>==</span> executorType<span>)</span> <span>{</span>
          executor <span>=</span> <span>new</span> <span>ReuseExecutor</span><span>(</span><span>this</span><span>,</span> transaction<span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
          executor <span>=</span> <span>new</span> <span>SimpleExecutor</span><span>(</span><span>this</span><span>,</span> transaction<span>)</span><span>;</span>
        <span>}</span>
        <span>// 如果开启缓存,则包装器对Executor进行包装</span>
        <span>if</span> <span>(</span>cacheEnabled<span>)</span> <span>{</span>
          executor <span>=</span> <span>new</span> <span>CachingExecutor</span><span>(</span>executor<span>)</span><span>;</span>
        <span>}</span>
        executor <span>=</span> <span>(</span><span>Executor</span><span>)</span> interceptorChain<span>.</span><span>pluginAll</span><span>(</span>executor<span>)</span><span>;</span>
        <span>return</span> executor<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>CachingExecutor在实际执行时候从MappedStatement#getCache获取缓存的具体实现，从而进行缓存操作。
看到查询是先从二级缓存中获取，如果没有获取到就从一级缓存中获取，还没有就查询db。</p>
<div><pre><code><span>public</span> <span>class</span> <span>CachingExecutor</span> <span>implements</span> <span>Executor</span> <span>{</span>

  <span>@Override</span>
  <span>public</span> <span><span>&lt;</span><span>E</span><span>></span></span> <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>query</span><span>(</span><span>MappedStatement</span> ms<span>,</span> <span>Object</span> parameterObject<span>,</span> <span>RowBounds</span> rowBounds<span>,</span> <span>ResultHandler</span> resultHandler<span>,</span> <span>CacheKey</span> key<span>,</span> <span>BoundSql</span> boundSql<span>)</span>
      <span>throws</span> <span>SQLException</span> <span>{</span>
    <span>// 从MappedStatement获取Cache</span>
    <span>Cache</span> cache <span>=</span> ms<span>.</span><span>getCache</span><span>(</span><span>)</span><span>;</span>
    <span>if</span> <span>(</span>cache <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>flushCacheIfRequired</span><span>(</span>ms<span>)</span><span>;</span>
      <span>if</span> <span>(</span>ms<span>.</span><span>isUseCache</span><span>(</span><span>)</span> <span>&amp;&amp;</span> resultHandler <span>==</span> <span>null</span><span>)</span> <span>{</span>
        <span>ensureNoOutParams</span><span>(</span>ms<span>,</span> boundSql<span>)</span><span>;</span>
        <span>@SuppressWarnings</span><span>(</span><span>"unchecked"</span><span>)</span>
        <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> list <span>=</span> <span>(</span><span>List</span><span><span>&lt;</span><span>E</span><span>></span></span><span>)</span> tcm<span>.</span><span>getObject</span><span>(</span>cache<span>,</span> key<span>)</span><span>;</span>
        <span>if</span> <span>(</span>list <span>==</span> <span>null</span><span>)</span> <span>{</span>
          list <span>=</span> delegate<span>.</span><span>query</span><span>(</span>ms<span>,</span> parameterObject<span>,</span> rowBounds<span>,</span> resultHandler<span>,</span> key<span>,</span> boundSql<span>)</span><span>;</span>
          tcm<span>.</span><span>putObject</span><span>(</span>cache<span>,</span> key<span>,</span> list<span>)</span><span>;</span> <span>// issue #578 and #116</span>
        <span>}</span>
        <span>return</span> list<span>;</span>
      <span>}</span>
    <span>}</span>
    <span>return</span> delegate<span>.</span><span>query</span><span>(</span>ms<span>,</span> parameterObject<span>,</span> rowBounds<span>,</span> resultHandler<span>,</span> key<span>,</span> boundSql<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>注意这里可以看到如果指定了要进行缓存，但是没有指定缓存的type默认是 PERPETUAL(PerpetualCache
)</p>
<h2 id="四、开启二级缓存"> 四、开启二级缓存</h2>
<h2 id="_4-1-内置二级缓存"> 4.1 内置二级缓存</h2>
<ol>
<li>首先开启配置</li>
<li>同时在Mapper文件中添加<cache/>标签 (XMLMapperBuilder#cacheElement)</li>
<li>或者是在Mapper类上添加@CacheNamespace注解(MapperAnnotationBuilder#parseCache)</li>
</ol>
<div><pre><code><span>&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span><span>&lt;!</span><span>DOCTYPE</span> <span>configuration</span>
        <span>PUBLIC</span> <span>"-//mybatis.org//DTD Config 3.0//EN"</span>
        <span>"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span>></span></span>
<span><span><span>&lt;</span>configuration</span><span>></span></span>
    <span>&lt;!-- 指定Mybatis使用log4j --></span>
    <span><span><span>&lt;</span>settings</span><span>></span></span>
        <span><span><span>&lt;</span>setting</span> <span>name</span><span><span>=</span><span>"</span>logImpl<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>LOG4J<span>"</span></span><span>/></span></span>
        // 通过 cacheEnabled 进行配置,如果不配置默认是true
        <span><span><span>&lt;</span>setting</span> <span>name</span><span><span>=</span><span>"</span>cacheEnabled<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>false<span>"</span></span><span>/></span></span>
    <span><span><span>&lt;/</span>settings</span><span>></span></span>
<span><span><span>&lt;/</span>configuration</span><span>></span></span>

<span>&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span><span>&lt;!</span><span>DOCTYPE</span> <span>mapper</span> <span>PUBLIC</span> <span>"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span>"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span>></span></span>
<span><span><span>&lt;</span>mapper</span> <span>namespace</span><span><span>=</span><span>"</span>orm.example.dal.mapper.TUserMapper<span>"</span></span><span>></span></span>
    // 添加cache标签
    <span><span><span>&lt;</span>cache</span><span>/></span></span>
<span><span><span>&lt;/</span>mapper</span><span>></span></span>    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">eviction</td>
<td style="text-align:left">缓存回收策略</td>
</tr>
<tr>
<td style="text-align:left">flushInterval</td>
<td style="text-align:left">缓存刷新间隔，缓存多长时间刷新一次，默认不清空，设置一个毫秒值</td>
</tr>
<tr>
<td style="text-align:left">readOnly</td>
<td style="text-align:left">是否只读；true 只读</td>
</tr>
<tr>
<td style="text-align:left">size</td>
<td style="text-align:left">缓存存放多少个元素</td>
</tr>
<tr>
<td style="text-align:left">type</td>
<td style="text-align:left">指定自定义缓存的全类名(实现Cache 接口即可)</td>
</tr>
<tr>
<td style="text-align:left">blocking</td>
<td style="text-align:left">若缓存中找不到对应的key，是否会一直blocking，直到有对应的数据进入缓存。</td>
</tr>
</tbody>
</table>
<p>一共可以使用的二级缓存有以下这些。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1648571791000.png" alt="" loading="lazy"></p>
<h2 id="_4-2-外置二级缓存"> 4.2 外置二级缓存</h2>
<p>只要实现了Cache接口那么Mybatis就会调用这个接口实现进行缓存。下面只说一个思路。如下通过指定EhcacheCache
就可以将这个二级缓存的能力，交给Mybatis进行调用了。</p>
<div><pre><code><span><span><span>&lt;</span>cache</span> <span>type</span><span><span>=</span><span>"</span>org.mybatis.caches.ehcache.EhcacheCache<span>"</span></span> <span>></span></span> 
      <span><span><span>&lt;</span>property</span> <span>name</span><span><span>=</span><span>"</span>timeToIdleSeconds<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>3600<span>"</span></span><span>/></span></span>
      <span><span><span>&lt;</span>property</span> <span>name</span><span><span>=</span><span>"</span>timeToLiveSeconds<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>3600<span>"</span></span><span>/></span></span>
      <span>&lt;!-- 同ehcache参数maxElementsInMemory --></span>
    <span><span><span>&lt;</span>property</span> <span>name</span><span><span>=</span><span>"</span>maxEntriesLocalHeap<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>1000<span>"</span></span><span>/></span></span>
    <span>&lt;!-- 同ehcache参数maxElementsOnDisk --></span>
      <span><span><span>&lt;</span>property</span> <span>name</span><span><span>=</span><span>"</span>maxEntriesLocalDisk<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>10000000<span>"</span></span><span>/></span></span>
      <span><span><span>&lt;</span>property</span> <span>name</span><span><span>=</span><span>"</span>memoryStoreEvictionPolicy<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>LRU<span>"</span></span><span>/></span></span>
<span><span><span>&lt;/</span>cache</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-30T15:42:58.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第10篇:Mybatis分页插件设计</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/PagePlugin/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/PagePlugin/"/>
    <updated>2022-04-04T17:49:44.000Z</updated>
    <content type="html"><![CDATA[<PageBanner/>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-30T15:42:58.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第13篇:Mybatis中打印Sql信息</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/Mybatissql%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/Mybatissql%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0/"/>
    <updated>2022-05-08T04:06:59.000Z</updated>
    <content type="html"><![CDATA[<div><p>Sql打印需求</p>
<p>在Mybatis中如果我们要对我们的sql信息进行检查, 只能启动Spring容器, 去执行根据成功和失败来判断我们的逻辑是否有问题。
此时会比较耗时,因为要启动容器。基于这个痛点, 本文要设计一个工具。使我们不依赖Spring容器,也不依赖任何外部插件，直接就把
Sql信息的打印出来。</p>
</div>
<p>仓库地址: https://github.com/lxchinesszz/mybatis-sql-helper</p>
<p>使用方法</p>
<div><pre><code><span>OrderBatchEntityQuery</span> query <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>OrderBatchEntityQuery</span><span>.</span><span>class</span><span>)</span><span>;</span>
<span>// 如果需要绑定xml就使用bindMapper</span>
<span>QuickMapperChecker</span><span>.</span><span>analyse</span><span>(</span><span>QuickMapperChecker</span><span>.</span><span>mock</span><span>(</span><span>IOrderMapper</span><span>.</span><span>class</span><span>)</span><span>.</span><span>list</span><span>(</span>query<span>)</span><span>)</span>
   <span>.</span><span>bindMapper</span><span>(</span><span>"mapper/center/ReplenishOrderMapper.xml"</span><span>)</span><span>.</span><span>printSql</span><span>(</span><span>)</span><span>;</span>   
<span>// 如果完全依赖注解跟简单</span>
<span>QuickMapperChecker</span><span>.</span><span>analyse</span><span>(</span><span>QuickMapperChecker</span><span>.</span><span>mock</span><span>(</span><span>IOrderMapper</span><span>.</span><span>class</span><span>)</span><span>.</span><span>list</span><span>(</span>query<span>)</span><span>)</span>
   <span>.</span><span>printSql</span><span>(</span><span>)</span><span>;</span>   
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="一、设计思路"> 一、设计思路</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1651310469000.png" alt="" loading="lazy"></p>
<p>基于前面我们对Mybatis的学习,我们知道所有的sql信息,都会被解析成MappedStatement,并保存在 Configuration。
那么我们要做的</p>
<p>第一步就是解析sql信息成MappedStatement。而在Mybatis中的sql是可以写在Mapper.xml也可以使用注解形式,
直接写到接口类中的。</p>
<p>第二个知识点,Mybatis中是可以使用很多标签的如 <where/> <if/> <foreach/> <include/> 这些标签要先处理成sql信息。</p>
<p>第三步组装sql信息, 前面的学习我们知道sql信息如果是$变量符,那么会在直接会编译成sql信息。而动态sql是由DynamicSqlSource来直接解析参数
生成sql的。那么我们就需要将#占位符都调换成变量符,然后利用DynamicSqlSource给直接生成sql信息的。</p>
<p>第四步sql信息格式化。</p>
<p>第五步使用方法设计。</p>
<h2 id="二、思路实现"> 二、思路实现</h2>
<h2 id="_2-1-mappedstatement解析"> 2.1 MappedStatement解析</h2>
<h3 id="_2-1-1-xml参数解析"> 2.1.1 xml参数解析</h3>
<div><pre><code><span>private</span> <span>void</span> <span>loadMappedStatementByMapperFile</span><span>(</span><span>String</span> mapperXmlFile<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
    <span>InputStream</span> resourceAsStream <span>=</span> <span>Resources</span><span>.</span><span>getResourceAsStream</span><span>(</span>mapperXmlFile<span>)</span><span>;</span>
    <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>XNode</span><span>></span></span> sqlFragments <span>=</span> configuration<span>.</span><span>getSqlFragments</span><span>(</span><span>)</span><span>;</span>
    <span>new</span> <span>XMLMapperBuilder</span><span>(</span>resourceAsStream<span>,</span> configuration<span>,</span> mapperXmlFile<span>,</span> sqlFragments<span>)</span><span>.</span><span>parse</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="_2-1-2-注解sql解析"> 2.1.2 注解sql解析</h3>
<div><pre><code><span>private</span> <span>void</span> <span>loadMappedStatementByAnnotation</span><span>(</span><span>)</span> <span>{</span>
    <span>MapperAnnotationBuilder</span> mapperAnnotationBuilder <span>=</span>
        <span>new</span> <span>MapperAnnotationBuilder</span><span>(</span>configuration<span>,</span> quickMapperChecker<span>.</span>mapper<span>)</span><span>;</span>
    mapperAnnotationBuilder<span>.</span><span>parse</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>当执行完上面的代码,所有MappedStatement就生成了并保存到你指定的Configuration中了。</p>
<h2 id="_2-2-sql中标签解析"> 2.2 Sql中标签解析</h2>
<h3 id="_2-2-1-include-标签解析"> 2.2.1 Include 标签解析</h3>
<p>拿到所有的sql执行标签&quot;select|insert|update|delete&quot;,去执行include参数替换。
includeParser.applyIncludes(child.getNode());执行后 include 标签就替换成真正的sql片段了。</p>
<div><pre><code> <span>private</span> <span>XNode</span> <span>findNode</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>InputStream</span> resourceAsStream <span>=</span> <span>Resources</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>this</span><span>.</span>mapperFile<span>)</span><span>;</span>
        <span>XPathParser</span> xPathParser <span>=</span> <span>new</span> <span>XPathParser</span><span>(</span>resourceAsStream<span>)</span><span>;</span>
        <span>XNode</span> mapperNode <span>=</span> xPathParser<span>.</span><span>evalNode</span><span>(</span><span>"/mapper"</span><span>)</span><span>;</span>
        <span>List</span><span><span>&lt;</span><span>XNode</span><span>></span></span> children <span>=</span> mapperNode<span>.</span><span>getChildren</span><span>(</span><span>)</span><span>;</span>
        <span>for</span> <span>(</span><span>XNode</span> child <span>:</span> children<span>)</span> <span>{</span>
            <span>if</span> <span>(</span>child<span>.</span><span>getStringAttribute</span><span>(</span><span>"id"</span><span>)</span><span>.</span><span>equals</span><span>(</span>quickMapperChecker<span>.</span>methodName<span>)</span><span>)</span> <span>{</span>
                <span>MapperBuilderAssistant</span> mapperBuilderAssistant <span>=</span>
                    <span>new</span> <span>MapperBuilderAssistant</span><span>(</span>configuration<span>,</span> quickMapperChecker<span>.</span>mapperFile<span>)</span><span>;</span>
                mapperBuilderAssistant<span>.</span><span>setCurrentNamespace</span><span>(</span>mapper<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
                <span>XMLIncludeTransformer</span> includeParser <span>=</span> <span>new</span> <span>XMLIncludeTransformer</span><span>(</span>configuration<span>,</span> mapperBuilderAssistant<span>)</span><span>;</span>
                includeParser<span>.</span><span>applyIncludes</span><span>(</span>child<span>.</span><span>getNode</span><span>(</span><span>)</span><span>)</span><span>;</span>
                <span>return</span> child<span>;</span>
            <span>}</span>
        <span>}</span>
        <span>// "select|insert|update|delete"</span>
        <span>return</span> <span>null</span><span>;</span>
    <span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id="_2-2-1-其他标签解析"> 2.2.1 其他标签解析</h3>
<div><pre><code> <span>private</span> <span>void</span> <span>initNodeHandlerMap</span><span>(</span><span>)</span> <span>{</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"trim"</span><span>,</span> <span>new</span> <span>TrimHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"where"</span><span>,</span> <span>new</span> <span>WhereHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"set"</span><span>,</span> <span>new</span> <span>SetHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"foreach"</span><span>,</span> <span>new</span> <span>ForEachHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"if"</span><span>,</span> <span>new</span> <span>IfHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"choose"</span><span>,</span> <span>new</span> <span>ChooseHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"when"</span><span>,</span> <span>new</span> <span>IfHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"otherwise"</span><span>,</span> <span>new</span> <span>OtherwiseHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"bind"</span><span>,</span> <span>new</span> <span>BindHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>这里我们要使用XMLScriptBuilder#parseDynamicTags。很可惜这个方法是受到保护的。
我们只能使用反射来对参数进行解析。</p>
<div><pre><code> <span>// 解析xml中的标签信息</span>
 <span>Method</span> parseDynamicTags <span>=</span> <span>XMLScriptBuilder</span><span>.</span><span>class</span><span>.</span><span>getDeclaredMethod</span><span>(</span><span>"parseDynamicTags"</span><span>,</span> <span>XNode</span><span>.</span><span>class</span><span>)</span><span>;</span>
 parseDynamicTags<span>.</span><span>setAccessible</span><span>(</span><span>true</span><span>)</span><span>;</span>

 <span>XMLScriptBuilder</span> xmlScriptBuilder <span>=</span> <span>new</span> <span>XMLScriptBuilder</span><span>(</span>configuration<span>,</span> node<span>)</span><span>;</span>
 <span>MixedSqlNode</span> rootSqlNode <span>=</span> <span>(</span><span>MixedSqlNode</span><span>)</span>parseDynamicTags<span>.</span><span>invoke</span><span>(</span>xmlScriptBuilder<span>,</span> node<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="_2-2-2-bind参数生成"> 2.2.2 bind参数生成</h3>
<p>这里要说明下,我们举一个列子。以下面例子,我们拿到的参数是query。</p>
<div><pre><code><span>List</span><span><span>&lt;</span><span>OrderDO</span><span>></span></span> <span>list</span><span>(</span><span>@Param</span><span>(</span><span>"query"</span><span>)</span> <span>OrderBatchEntityQuery</span> query<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>而他的xml比较复杂的。</p>
<div><pre><code><span><span><span>&lt;</span>select</span> <span>id</span><span><span>=</span><span>"</span>list<span>"</span></span> <span>resultType</span><span><span>=</span><span>"</span>com.center.dal.entity.OrderDO<span>"</span></span><span>></span></span>
        select *
        from order as ro
                 left join order_detail rod on ro.id = rod.replenish_order_id
        <span><span><span>&lt;</span>where</span><span>></span></span>
            <span><span><span>&lt;</span>if</span> <span>test</span><span><span>=</span><span>"</span>@com.center.dal.util.MybatisIfUtils@isNotEmpty(query.ids)<span>"</span></span><span>></span></span>
                and ro.id in
                <span><span><span>&lt;</span>foreach</span> <span>collection</span><span><span>=</span><span>"</span>query.ids<span>"</span></span> <span>open</span><span><span>=</span><span>"</span>(<span>"</span></span> <span>separator</span><span><span>=</span><span>"</span>,<span>"</span></span> <span>index</span><span><span>=</span><span>"</span>index<span>"</span></span> <span>item</span><span><span>=</span><span>"</span>id<span>"</span></span>
                         <span>close</span><span><span>=</span><span>"</span>)<span>"</span></span><span>></span></span>
                    #{id}
                <span><span><span>&lt;/</span>foreach</span><span>></span></span>
            <span><span><span>&lt;/</span>if</span><span>></span></span>
            <span><span><span>&lt;</span>if</span> <span>test</span><span><span>=</span><span>"</span>@com.center.dal.util.MybatisIfUtils@isNotEmpty(query.orderCode)<span>"</span></span><span>></span></span>
                and ro.order_code = #{query.orderCode}
            <span><span><span>&lt;/</span>if</span><span>></span></span>
            <span><span><span>&lt;</span>if</span> <span>test</span><span><span>=</span><span>"</span>@com.center.dal.util.MybatisIfUtils@isNotEmpty(query.statusList)<span>"</span></span><span>></span></span>
                and ro.status in
                <span><span><span>&lt;</span>foreach</span> <span>collection</span><span><span>=</span><span>"</span>query.statusList<span>"</span></span> <span>open</span><span><span>=</span><span>"</span>(<span>"</span></span> <span>separator</span><span><span>=</span><span>"</span>,<span>"</span></span> <span>index</span><span><span>=</span><span>"</span>index<span>"</span></span> <span>item</span><span><span>=</span><span>"</span>status<span>"</span></span>
                         <span>close</span><span><span>=</span><span>"</span>)<span>"</span></span><span>></span></span>
                    #{status}
                <span><span><span>&lt;/</span>foreach</span><span>></span></span>
            <span><span><span>&lt;/</span>if</span><span>></span></span>
            <span><span><span>&lt;</span>if</span> <span>test</span><span><span>=</span><span>"</span>@com.center.dal.util.MybatisIfUtils@isNotEmpty(query.title)<span>"</span></span><span>></span></span>
                and ro.title = #{query.title}
            <span><span><span>&lt;/</span>if</span><span>></span></span>
            <span><span><span>&lt;</span>if</span> <span>test</span><span><span>=</span><span>"</span>@com.center.dal.util.MybatisIfUtils@isNotEmpty(query.salesWarehouseId)<span>"</span></span><span>></span></span>
                and ro.sales_warehouse_id = #{query.salesWarehouseId}
            <span><span><span>&lt;/</span>if</span><span>></span></span>
            <span><span><span>&lt;</span>if</span> <span>test</span><span><span>=</span><span>"</span>@com.center.dal.util.MybatisIfUtils@isNotEmpty(query.brandCode)<span>"</span></span><span>></span></span>
                and ro.brand_code = #{query.brandCode}
            <span><span><span>&lt;/</span>if</span><span>></span></span>
            <span><span><span>&lt;</span>if</span> <span>test</span><span><span>=</span><span>"</span>@com.center.dal.util.MybatisIfUtils@isNotEmpty(query.businessLineId)<span>"</span></span><span>></span></span>
                and ro.business_line_id = #{query.businessLineId}
            <span><span><span>&lt;/</span>if</span><span>></span></span>
            <span><span><span>&lt;</span>if</span> <span>test</span><span><span>=</span><span>"</span>@com.center.dal.util.MybatisIfUtils@isNotEmpty(query.signOwnerCode)<span>"</span></span><span>></span></span>
                and ro.sign_owner_code = #{query.signOwnerCode}
            <span><span><span>&lt;/</span>if</span><span>></span></span>
            <span><span><span>&lt;</span>if</span> <span>test</span><span><span>=</span><span>"</span>@com.center.dal.util.MybatisIfUtils@isNotEmpty(query.storageOwnerCode)<span>"</span></span><span>></span></span>
                and ro.storage_owner_code = #{query.storageOwnerCode}
            <span><span><span>&lt;/</span>if</span><span>></span></span>
            <span><span><span>&lt;</span>if</span> <span>test</span><span><span>=</span><span>"</span>@com.center.dal.util.MybatisIfUtils@isNotEmpty(query.goodsBarcodes)<span>"</span></span><span>></span></span>
                and rod.goods_barcode in
                <span><span><span>&lt;</span>foreach</span> <span>collection</span><span><span>=</span><span>"</span>query.goodsBarcodes<span>"</span></span> <span>open</span><span><span>=</span><span>"</span>(<span>"</span></span> <span>separator</span><span><span>=</span><span>"</span>,<span>"</span></span> <span>index</span><span><span>=</span><span>"</span>index<span>"</span></span> <span>item</span><span><span>=</span><span>"</span>goods_barcode<span>"</span></span>
                         <span>close</span><span><span>=</span><span>"</span>)<span>"</span></span><span>></span></span>
                    #{goods_barcode}
                <span><span><span>&lt;/</span>foreach</span><span>></span></span>
            <span><span><span>&lt;/</span>if</span><span>></span></span>
        <span><span><span>&lt;/</span>where</span><span>></span></span>
    <span><span><span>&lt;/</span>select</span><span>></span></span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br></div></div><p>以上参数分为2部分,一部分是原始方法参数的解析。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1651311823000.png" alt="" loading="lazy"></p>
<p>而BoundsSql中ParameterMapping是这样的。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1651311916000.png" alt="" loading="lazy"></p>
<p>需要拿到参数中每个的数据信息。</p>
<div><pre><code> <span>// 解析xml中的标签信息</span>
 <span>Method</span> parseDynamicTags <span>=</span> <span>XMLScriptBuilder</span><span>.</span><span>class</span><span>.</span><span>getDeclaredMethod</span><span>(</span><span>"parseDynamicTags"</span><span>,</span> <span>XNode</span><span>.</span><span>class</span><span>)</span><span>;</span>
 parseDynamicTags<span>.</span><span>setAccessible</span><span>(</span><span>true</span><span>)</span><span>;</span>

 <span>XMLScriptBuilder</span> xmlScriptBuilder <span>=</span> <span>new</span> <span>XMLScriptBuilder</span><span>(</span>configuration<span>,</span> node<span>)</span><span>;</span>
 <span>MixedSqlNode</span> rootSqlNode <span>=</span> <span>(</span><span>MixedSqlNode</span><span>)</span>parseDynamicTags<span>.</span><span>invoke</span><span>(</span>xmlScriptBuilder<span>,</span> node<span>)</span><span>;</span>
 <span>DynamicContext</span> context <span>=</span> <span>new</span> <span>DynamicContext</span><span>(</span>configuration<span>,</span> namedParams<span>)</span><span>;</span>
 rootSqlNode<span>.</span><span>apply</span><span>(</span>context<span>)</span><span>;</span>
 <span>// 标签信息参数解析</span>
 <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Object</span><span>></span></span> bindings <span>=</span> context<span>.</span><span>getBindings</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><img src="https://img.springlearn.cn/blog/learn_1651312104000.png" alt="" loading="lazy"></p>
<p>到这里复杂标签中的参数就获取到了。</p>
<h2 id="_2-3-占位符替换成变量符"> 2.3 占位符替换成变量符</h2>
<h3 id="_2-3-1-占位符替换变量符"> 2.3.1 占位符替换变量符</h3>
<p>因为#占位符都会先调换成?。而参数都会按照顺序放在ParameterMapping中。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1651312283000.png" alt="" loading="lazy"></p>
<p>这里我们要写代码将?替换成${ParameterMapping#getProperty}。</p>
<div><pre><code>    <span>/**
     * 处理占位符已经被替换成?的时候，用于将占位符重新替换成变量符
     *
     * @param sql
     *            占位符sql
     * @param index
     *            占位符当前处理的索引
     * @param parameterMappings
     *            占位符参数信息
     * @return String 变量符sql
     */</span>
    <span>private</span> <span>String</span> <span>resetSql</span><span>(</span><span>String</span> sql<span>,</span> <span>int</span> index<span>,</span> <span>List</span><span><span>&lt;</span><span>ParameterMapping</span><span>></span></span> parameterMappings<span>,</span> <span>MetaObject</span> metaObject<span>)</span> <span>{</span>
        <span>int</span> i <span>=</span> sql<span>.</span><span>indexOf</span><span>(</span><span>"?"</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>i <span>></span> <span>-</span><span>1</span><span>)</span> <span>{</span>
            <span>ParameterMapping</span> parameterMapping <span>=</span> parameterMappings<span>.</span><span>get</span><span>(</span>index<span>)</span><span>;</span>
            <span>String</span> property <span>=</span> parameterMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>;</span>
            <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> javaType <span>=</span> parameterMapping<span>.</span><span>getJavaType</span><span>(</span><span>)</span><span>;</span>
            <span>Object</span> value <span>=</span> metaObject<span>.</span><span>getValue</span><span>(</span>parameterMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>String</span> s<span>;</span>
            <span>if</span> <span>(</span>javaType<span>.</span><span>equals</span><span>(</span><span>String</span><span>.</span><span>class</span><span>)</span> <span>||</span> value <span>instanceof</span> <span>String</span><span>)</span> <span>{</span>
                s <span>=</span> sql<span>.</span><span>replaceFirst</span><span>(</span><span>"\\?"</span><span>,</span> <span>"\"\\${"</span> <span>+</span> property <span>+</span> <span>"}\""</span><span>)</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>
                s <span>=</span> sql<span>.</span><span>replaceFirst</span><span>(</span><span>"\\?"</span><span>,</span> <span>"\\${"</span> <span>+</span> property <span>+</span> <span>"}"</span><span>)</span><span>;</span>
            <span>}</span>
            sql <span>=</span> <span>resetSql</span><span>(</span>s<span>,</span> <span>++</span>index<span>,</span> parameterMappings<span>,</span> metaObject<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> sql<span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h3 id="_2-3-2-生成sql"> 2.3.2 生成Sql</h3>
<p>利用变量符能直接生成sql的能力，我们直接将参数准备好，使用就好了。</p>
<div><pre><code> <span>// 获取原始参数信息</span>
 <span>Object</span> namedParams <span>=</span> paramNameResolver<span>.</span><span>getNamedParams</span><span>(</span>quickMapperChecker<span>.</span>args<span>)</span><span>;</span>
 <span>// 复杂参数解析</span>
 <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Object</span><span>></span></span> bindings <span>=</span> context<span>.</span><span>getBindings</span><span>(</span><span>)</span><span>;</span>
 <span>// 标签参数 + 原始参数</span>
 <span>(</span><span>(</span><span>Map</span><span>)</span>namedParams<span>)</span><span>.</span><span>putAll</span><span>(</span>bindings<span>)</span><span>;</span>
 <span>TextSqlNode</span> textSqlNode <span>=</span> <span>new</span> <span>TextSqlNode</span><span>(</span><span>resetSql</span><span>(</span>sql<span>,</span> <span>0</span><span>,</span> parameterMappings<span>,</span> metaObject<span>)</span><span>)</span><span>;</span>
 <span>new</span> <span>DynamicSqlSource</span><span>(</span>configuration<span>,</span> textSqlNode<span>)</span><span>.</span><span>getBoundSql</span><span>(</span>namedParams<span>)</span><span>.</span><span>getSql</span><span>(</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_2-4-sql格式化"> 2.4 sql格式化</h2>
<p>这里我们就直接使用druid库中的sql格式化工具</p>
<div><pre><code>       <span><span><span>&lt;</span>dependency</span><span>></span></span>
            <span><span><span>&lt;</span>groupId</span><span>></span></span>com.alibaba<span><span><span>&lt;/</span>groupId</span><span>></span></span>
            <span><span><span>&lt;</span>artifactId</span><span>></span></span>druid<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
            <span><span><span>&lt;</span>version</span><span>></span></span>1.2.6<span><span><span>&lt;/</span>version</span><span>></span></span>
        <span><span><span>&lt;/</span>dependency</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这里因为我们知道是mysql数据库所以执行使用mysql格式化</p>
<div><pre><code><span>SQLUtils</span><span>.</span><span>formatMySql</span><span>(</span>boundSql<span>.</span><span>getSql</span><span>(</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_2-5-使用方法设计"> 2.5 使用方法设计</h2>
<p>基于上门的代码,首先我们已经不依赖Spring容器了,所以要想分析sql就不用启动整个项目了。
直接将要分析的类和方法进行执行就行了。</p>
<div><pre><code><span>OrderBatchEntityQuery</span> query <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>OrderBatchEntityQuery</span><span>.</span><span>class</span><span>)</span><span>;</span>
<span>// 如果需要绑定xml就使用bindMapper</span>
<span>QuickMapperChecker</span><span>.</span><span>analyse</span><span>(</span><span>QuickMapperChecker</span><span>.</span><span>mock</span><span>(</span><span>IOrderMapper</span><span>.</span><span>class</span><span>)</span><span>.</span><span>list</span><span>(</span>query<span>)</span><span>)</span>
   <span>.</span><span>bindMapper</span><span>(</span><span>"mapper/center/ReplenishOrderMapper.xml"</span><span>)</span><span>.</span><span>printSql</span><span>(</span><span>)</span><span>;</span>   
<span>// 如果完全依赖注解跟简单</span>
<span>QuickMapperChecker</span><span>.</span><span>analyse</span><span>(</span><span>QuickMapperChecker</span><span>.</span><span>mock</span><span>(</span><span>IOrderMapper</span><span>.</span><span>class</span><span>)</span><span>.</span><span>list</span><span>(</span>query<span>)</span><span>)</span>
   <span>.</span><span>printSql</span><span>(</span><span>)</span><span>;</span>   
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="三、完整代码"> 三、完整代码</h2>
<p>代码较为简单这里附带源码</p>
<h2 id="_3-1-mybatis-使用"> 3.1 Mybatis 使用</h2>
<div><pre><code><span>@NoArgsConstructor</span>
<span>public</span> <span>class</span> <span>QuickMapperChecker</span> <span>{</span>

    <span>/**
     * 方法签名id
     */</span>
    <span>@Getter</span>
    <span>public</span> <span>String</span> mapperId<span>;</span>

    <span>@Setter</span>
    <span>public</span> <span>String</span> methodName<span>;</span>

    <span>/**
     * 方法参数
     */</span>
    <span>@Getter</span>
    <span>private</span> <span>Object</span><span>[</span><span>]</span> args<span>;</span>

    <span>/**
     * 参数解析器
     */</span>
    <span>@Getter</span>
    <span>private</span> <span>ParamNameResolver</span> paramNameResolver<span>;</span>

    <span>/**
     * mapper类型
     */</span>
    <span>private</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> mapper<span>;</span>

    <span>/**
     * mybatis配置
     */</span>
    <span>@Getter</span>
    <span>private</span> <span>Configuration</span> configuration<span>;</span>

    <span>@Getter</span>
    <span>@Setter</span>
    <span>private</span> <span>String</span> mapperFile<span>;</span>

    <span>private</span> <span>boolean</span> simple<span>;</span>

    <span>public</span> <span>QuickMapperChecker</span><span>(</span><span>String</span> mapperId<span>,</span> <span>Object</span><span>[</span><span>]</span> args<span>,</span> <span>ParamNameResolver</span> paramNameResolver<span>,</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> mapper<span>,</span>
                              <span>Configuration</span> configuration<span>)</span> <span>{</span>
        <span>this</span><span>.</span>mapperId <span>=</span> mapperId<span>;</span>
        <span>this</span><span>.</span>args <span>=</span> args<span>;</span>
        <span>this</span><span>.</span>paramNameResolver <span>=</span> paramNameResolver<span>;</span>
        <span>this</span><span>.</span>mapper <span>=</span> mapper<span>;</span>
        <span>this</span><span>.</span>configuration <span>=</span> configuration<span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>QuickMapperChecker</span> <span>proxy</span><span>(</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>isNull</span><span>(</span>quickMapperChecker<span>)</span><span>)</span> <span>{</span>
            quickMapperChecker <span>=</span> <span>new</span> <span>QuickMapperChecker</span><span>(</span><span>)</span><span>;</span>
            quickMapperChecker<span>.</span>simple <span>=</span> <span>true</span><span>;</span>
        <span>}</span>
        <span>return</span> quickMapperChecker<span>;</span>
    <span>}</span>

    <span>private</span> <span>static</span> <span>QuickMapperChecker</span> quickMapperChecker<span>;</span>

    <span>private</span> <span>static</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>,</span> <span>Object</span><span>></span></span> PRIMITIVE_WRAPPER_TYPE_MAP <span>=</span> <span>new</span> <span>IdentityHashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>8</span><span>)</span><span>;</span>

    <span>static</span> <span>{</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Boolean</span><span>.</span><span>class</span><span>,</span> <span>false</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Byte</span><span>.</span><span>class</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Character</span><span>.</span><span>class</span><span>,</span> <span>""</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Double</span><span>.</span><span>class</span><span>,</span> <span>0D</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Float</span><span>.</span><span>class</span><span>,</span> <span>0L</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Integer</span><span>.</span><span>class</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Long</span><span>.</span><span>class</span><span>,</span> <span>0L</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Short</span><span>.</span><span>class</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Void</span><span>.</span><span>class</span><span>,</span> <span>Void</span><span>.</span>TYPE<span>)</span><span>;</span>

        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>boolean</span><span>.</span><span>class</span><span>,</span> <span>false</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>byte</span><span>.</span><span>class</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>char</span><span>.</span><span>class</span><span>,</span> <span>""</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>double</span><span>.</span><span>class</span><span>,</span> <span>0D</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>float</span><span>.</span><span>class</span><span>,</span> <span>0L</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>int</span><span>.</span><span>class</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>long</span><span>.</span><span>class</span><span>,</span> <span>0L</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>short</span><span>.</span><span>class</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>void</span><span>.</span><span>class</span><span>,</span> <span>null</span><span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>static</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span><span>[</span><span>]</span> <span>interfacesFromMapper</span><span>(</span><span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> mapper<span>)</span> <span>{</span>
        <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span><span>[</span><span>]</span> interfaces <span>=</span> mapper<span>.</span><span>getInterfaces</span><span>(</span><span>)</span><span>;</span>
        <span>List</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>></span></span> interfacesClass <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>interfaces<span>.</span>length <span>></span> <span>0</span><span>)</span> <span>{</span>
            interfacesClass<span>.</span><span>addAll</span><span>(</span><span>Arrays</span><span>.</span><span>asList</span><span>(</span>interfaces<span>)</span><span>)</span><span>;</span>
        <span>}</span>
        <span>if</span> <span>(</span>mapper<span>.</span><span>isInterface</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            interfacesClass<span>.</span><span>add</span><span>(</span>mapper<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> interfacesClass<span>.</span><span>toArray</span><span>(</span><span>new</span> <span>Class</span><span>[</span><span>]</span><span>{</span><span>}</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>mock</span><span>(</span><span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> mapper<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>return</span> <span>mock</span><span>(</span>mapper<span>,</span> <span>new</span> <span>Configuration</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@SuppressWarnings</span><span>(</span><span>"unchecked"</span><span>)</span>
    <span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>mock</span><span>(</span><span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> mapper<span>,</span> <span>Configuration</span> configuration<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>return</span> <span>(</span><span>T</span><span>)</span> <span>Proxy</span><span>.</span><span>newProxyInstance</span><span>(</span>mapper<span>.</span><span>getClassLoader</span><span>(</span><span>)</span><span>,</span> <span>interfacesFromMapper</span><span>(</span>mapper<span>)</span><span>,</span>
                <span>(</span>proxy<span>,</span> method<span>,</span> args<span>)</span> <span>-></span> <span>{</span>
                    <span>String</span> mapperId <span>=</span> method<span>.</span><span>getDeclaringClass</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>"."</span> <span>+</span> method<span>.</span><span>getName</span><span>(</span><span>)</span><span>;</span>
                    <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>isNull</span><span>(</span>quickMapperChecker<span>)</span><span>)</span> <span>{</span>
                        quickMapperChecker <span>=</span> <span>new</span> <span>QuickMapperChecker</span><span>(</span>mapperId<span>,</span> args<span>,</span>
                                <span>new</span> <span>ParamNameResolver</span><span>(</span>configuration<span>,</span> method<span>)</span><span>,</span> mapper<span>,</span> configuration<span>)</span><span>;</span>
                        quickMapperChecker<span>.</span><span>setMethodName</span><span>(</span>method<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
                    <span>}</span> <span>else</span> <span>{</span>
                        <span>boolean</span> simple <span>=</span> quickMapperChecker<span>.</span>simple<span>;</span>
                        quickMapperChecker <span>=</span> <span>new</span> <span>QuickMapperChecker</span><span>(</span>mapperId<span>,</span> args<span>,</span>
                                <span>new</span> <span>ParamNameResolver</span><span>(</span>configuration<span>,</span> method<span>)</span><span>,</span> mapper<span>,</span> configuration<span>)</span><span>;</span>
                        quickMapperChecker<span>.</span>simple <span>=</span> simple<span>;</span>
                        quickMapperChecker<span>.</span><span>setMethodName</span><span>(</span>method<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
                    <span>}</span>
                    <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> returnType <span>=</span> method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>;</span>
                    <span>Object</span> result <span>=</span> PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>get</span><span>(</span>returnType<span>)</span><span>;</span>
                    <span>if</span> <span>(</span>quickMapperChecker<span>.</span>simple<span>)</span> <span>{</span>
                        quickMapperChecker<span>.</span><span>printSql</span><span>(</span><span>)</span><span>;</span>
                    <span>}</span>
                    <span>return</span> <span>Objects</span><span>.</span><span>nonNull</span><span>(</span>result<span>)</span> <span>?</span> result <span>:</span> <span>new</span> <span>DefaultObjectFactory</span><span>(</span><span>)</span><span>.</span><span>create</span><span>(</span>returnType<span>)</span><span>;</span>
                <span>}</span><span>)</span><span>;</span>
    <span>}</span>

    <span>/**
     * 处理占位符已经被替换成?的时候，用于将占位符重新替换成变量符
     *
     * @param sql               占位符sql
     * @param index             占位符当前处理的索引
     * @param parameterMappings 占位符参数信息
     * @return String 变量符sql
     */</span>
    <span>private</span> <span>String</span> <span>resetSql</span><span>(</span><span>String</span> sql<span>,</span> <span>int</span> index<span>,</span> <span>List</span><span><span>&lt;</span><span>ParameterMapping</span><span>></span></span> parameterMappings<span>,</span> <span>MetaObject</span> metaObject<span>)</span> <span>{</span>
        <span>int</span> i <span>=</span> sql<span>.</span><span>indexOf</span><span>(</span><span>"?"</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>i <span>></span> <span>-</span><span>1</span><span>)</span> <span>{</span>
            <span>ParameterMapping</span> parameterMapping <span>=</span> parameterMappings<span>.</span><span>get</span><span>(</span>index<span>)</span><span>;</span>
            <span>String</span> property <span>=</span> parameterMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>;</span>
            <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> javaType <span>=</span> parameterMapping<span>.</span><span>getJavaType</span><span>(</span><span>)</span><span>;</span>
            <span>Object</span> value <span>=</span> metaObject<span>.</span><span>getValue</span><span>(</span>parameterMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>String</span> s<span>;</span>
            <span>if</span> <span>(</span>javaType<span>.</span><span>equals</span><span>(</span><span>String</span><span>.</span><span>class</span><span>)</span> <span>||</span> value <span>instanceof</span> <span>String</span><span>)</span> <span>{</span>
                s <span>=</span> sql<span>.</span><span>replaceFirst</span><span>(</span><span>"\\?"</span><span>,</span> <span>"\"\\${"</span> <span>+</span> property <span>+</span> <span>"}\""</span><span>)</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>
                s <span>=</span> sql<span>.</span><span>replaceFirst</span><span>(</span><span>"\\?"</span><span>,</span> <span>"\\${"</span> <span>+</span> property <span>+</span> <span>"}"</span><span>)</span><span>;</span>
            <span>}</span>
            sql <span>=</span> <span>resetSql</span><span>(</span>s<span>,</span> <span>++</span>index<span>,</span> parameterMappings<span>,</span> metaObject<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> sql<span>;</span>
    <span>}</span>

    <span>/**
     * sql打印
     *
     * @return String
     * @throws Exception 未知异常
     */</span>
    <span>public</span> <span>String</span> <span>getSql</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>if</span> <span>(</span><span>!</span><span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span><span>this</span><span>.</span>mapperFile<span>)</span><span>)</span> <span>{</span>
            <span>loadMappedStatementByMapperFile</span><span>(</span><span>this</span><span>.</span>mapperFile<span>)</span><span>;</span>
        <span>}</span>
        <span>loadMappedStatementByAnnotation</span><span>(</span><span>)</span><span>;</span>
        <span>boolean</span> hasMapped <span>=</span> configuration<span>.</span><span>hasStatement</span><span>(</span>quickMapperChecker<span>.</span>mapperId<span>)</span><span>;</span>
        <span>if</span> <span>(</span><span>!</span>hasMapped<span>)</span> <span>{</span>
            <span>throw</span> <span>new</span> <span>RuntimeException</span><span>(</span>
                    <span>"未找到MappedStatement,请检查是否需要绑定mapper xml文件:["</span> <span>+</span> quickMapperChecker<span>.</span>mapperId <span>+</span> <span>"]"</span><span>)</span><span>;</span>
        <span>}</span>
        <span>MappedStatement</span> mappedStatement <span>=</span> configuration<span>.</span><span>getMappedStatement</span><span>(</span>quickMapperChecker<span>.</span>mapperId<span>)</span><span>;</span>
        <span>SqlSource</span> sqlSource <span>=</span> mappedStatement<span>.</span><span>getSqlSource</span><span>(</span><span>)</span><span>;</span>
        <span>Object</span> namedParams <span>=</span> paramNameResolver<span>.</span><span>getNamedParams</span><span>(</span>quickMapperChecker<span>.</span>args<span>)</span><span>;</span>
        <span>BoundSql</span> boundSql <span>=</span> mappedStatement<span>.</span><span>getBoundSql</span><span>(</span>namedParams<span>)</span><span>;</span>
        <span>// 占位符</span>
        <span>if</span> <span>(</span>sqlSource <span>instanceof</span> <span>RawSqlSource</span> <span>||</span> sqlSource <span>instanceof</span> <span>DynamicSqlSource</span><span>)</span> <span>{</span>
            <span>// 占位sql，将#替换成$</span>
            <span>String</span> sql <span>=</span> boundSql<span>.</span><span>getSql</span><span>(</span><span>)</span><span>;</span>
            <span>List</span><span><span>&lt;</span><span>ParameterMapping</span><span>></span></span> parameterMappings <span>=</span> boundSql<span>.</span><span>getParameterMappings</span><span>(</span><span>)</span><span>;</span>
            <span>XNode</span> node <span>=</span> <span>findNode</span><span>(</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>nonNull</span><span>(</span>node<span>)</span><span>)</span> <span>{</span>
                <span>// 解析xml中的标签信息</span>
                <span>Method</span> parseDynamicTags <span>=</span> <span>XMLScriptBuilder</span><span>.</span><span>class</span><span>.</span><span>getDeclaredMethod</span><span>(</span><span>"parseDynamicTags"</span><span>,</span> <span>XNode</span><span>.</span><span>class</span><span>)</span><span>;</span>
                parseDynamicTags<span>.</span><span>setAccessible</span><span>(</span><span>true</span><span>)</span><span>;</span>

                <span>XMLScriptBuilder</span> xmlScriptBuilder <span>=</span> <span>new</span> <span>XMLScriptBuilder</span><span>(</span>configuration<span>,</span> node<span>)</span><span>;</span>
                <span>MixedSqlNode</span> rootSqlNode <span>=</span> <span>(</span><span>MixedSqlNode</span><span>)</span> parseDynamicTags<span>.</span><span>invoke</span><span>(</span>xmlScriptBuilder<span>,</span> node<span>)</span><span>;</span>
                <span>DynamicContext</span> context <span>=</span> <span>new</span> <span>DynamicContext</span><span>(</span>configuration<span>,</span> namedParams<span>)</span><span>;</span>
                rootSqlNode<span>.</span><span>apply</span><span>(</span>context<span>)</span><span>;</span>
                <span>// 标签信息参数解析</span>
                <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Object</span><span>></span></span> bindings <span>=</span> context<span>.</span><span>getBindings</span><span>(</span><span>)</span><span>;</span>
                <span>// 标签参数 + 原始参数</span>
                <span>(</span><span>(</span><span>Map</span><span>)</span> namedParams<span>)</span><span>.</span><span>putAll</span><span>(</span>bindings<span>)</span><span>;</span>
            <span>}</span>
            <span>MetaObject</span> metaObject <span>=</span> configuration<span>.</span><span>newMetaObject</span><span>(</span>namedParams<span>)</span><span>;</span>
            <span>processDate</span><span>(</span>parameterMappings<span>,</span> metaObject<span>)</span><span>;</span>
            <span>TextSqlNode</span> textSqlNode <span>=</span> <span>new</span> <span>TextSqlNode</span><span>(</span><span>resetSql</span><span>(</span>sql<span>,</span> <span>0</span><span>,</span> parameterMappings<span>,</span> metaObject<span>)</span><span>)</span><span>;</span>
            <span>return</span> <span>SQLUtils</span>
                    <span>.</span><span>formatMySql</span><span>(</span><span>(</span><span>new</span> <span>DynamicSqlSource</span><span>(</span>configuration<span>,</span> textSqlNode<span>)</span><span>.</span><span>getBoundSql</span><span>(</span>namedParams<span>)</span><span>.</span><span>getSql</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>return</span> <span>SQLUtils</span><span>.</span><span>formatMySql</span><span>(</span>boundSql<span>.</span><span>getSql</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>

    <span>private</span> <span>void</span> <span>processDate</span><span>(</span><span>List</span><span><span>&lt;</span><span>ParameterMapping</span><span>></span></span> parameterMappings<span>,</span> <span>MetaObject</span> metaObject<span>)</span> <span>{</span>
        <span>for</span> <span>(</span><span>ParameterMapping</span> parameterMapping <span>:</span> parameterMappings<span>)</span> <span>{</span>
            <span>String</span> property <span>=</span> parameterMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>;</span>
            <span>Object</span> value <span>=</span> metaObject<span>.</span><span>getValue</span><span>(</span>property<span>)</span><span>;</span>
            <span>if</span> <span>(</span>value <span>instanceof</span> <span>Date</span><span>)</span> <span>{</span>
                metaObject<span>.</span><span>setValue</span><span>(</span>property<span>,</span> <span>DatePatternEnum</span><span>.</span>DATE_TIME_PATTERN<span>.</span><span>format</span><span>(</span><span>(</span><span>Date</span><span>)</span> value<span>)</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>

    <span>private</span> <span>XNode</span> <span>findNode</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>InputStream</span> resourceAsStream <span>=</span> <span>Resources</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>this</span><span>.</span>mapperFile<span>)</span><span>;</span>
        <span>XPathParser</span> xPathParser <span>=</span> <span>new</span> <span>XPathParser</span><span>(</span>resourceAsStream<span>)</span><span>;</span>
        <span>XNode</span> mapperNode <span>=</span> xPathParser<span>.</span><span>evalNode</span><span>(</span><span>"/mapper"</span><span>)</span><span>;</span>
        <span>List</span><span><span>&lt;</span><span>XNode</span><span>></span></span> children <span>=</span> mapperNode<span>.</span><span>getChildren</span><span>(</span><span>)</span><span>;</span>
        <span>for</span> <span>(</span><span>XNode</span> child <span>:</span> children<span>)</span> <span>{</span>
            <span>if</span> <span>(</span>child<span>.</span><span>getStringAttribute</span><span>(</span><span>"id"</span><span>)</span><span>.</span><span>equals</span><span>(</span>quickMapperChecker<span>.</span>methodName<span>)</span><span>)</span> <span>{</span>
                <span>MapperBuilderAssistant</span> mapperBuilderAssistant <span>=</span>
                        <span>new</span> <span>MapperBuilderAssistant</span><span>(</span>configuration<span>,</span> quickMapperChecker<span>.</span>mapperFile<span>)</span><span>;</span>
                mapperBuilderAssistant<span>.</span><span>setCurrentNamespace</span><span>(</span>mapper<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
                <span>XMLIncludeTransformer</span> includeParser <span>=</span> <span>new</span> <span>XMLIncludeTransformer</span><span>(</span>configuration<span>,</span> mapperBuilderAssistant<span>)</span><span>;</span>
                includeParser<span>.</span><span>applyIncludes</span><span>(</span>child<span>.</span><span>getNode</span><span>(</span><span>)</span><span>)</span><span>;</span>
                <span>return</span> child<span>;</span>
            <span>}</span>
        <span>}</span>
        <span>// "select|insert|update|delete"</span>
        <span>return</span> <span>null</span><span>;</span>
    <span>}</span>

    <span>;</span>

    <span>private</span> <span>void</span> <span>loadMappedStatementByAnnotation</span><span>(</span><span>)</span> <span>{</span>
        <span>MapperAnnotationBuilder</span> mapperAnnotationBuilder <span>=</span>
                <span>new</span> <span>MapperAnnotationBuilder</span><span>(</span>configuration<span>,</span> quickMapperChecker<span>.</span>mapper<span>)</span><span>;</span>
        mapperAnnotationBuilder<span>.</span><span>parse</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>void</span> <span>loadMappedStatementByMapperFile</span><span>(</span><span>String</span> mapperXmlFile<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>InputStream</span> resourceAsStream <span>=</span> <span>Resources</span><span>.</span><span>getResourceAsStream</span><span>(</span>mapperXmlFile<span>)</span><span>;</span>
        <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>XNode</span><span>></span></span> sqlFragments <span>=</span> configuration<span>.</span><span>getSqlFragments</span><span>(</span><span>)</span><span>;</span>
        <span>new</span> <span>XMLMapperBuilder</span><span>(</span>resourceAsStream<span>,</span> configuration<span>,</span> mapperXmlFile<span>,</span> sqlFragments<span>)</span><span>.</span><span>parse</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>void</span> <span>printSql</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>ColorConsole</span><span>.</span><span>colorPrintln</span><span>(</span><span>"🚀 格式化SQL:"</span><span>)</span><span>;</span>
        <span>ColorConsole</span><span>.</span><span>colorPrintln</span><span>(</span><span>AnsiColor</span><span>.</span>BRIGHT_MAGENTA<span>,</span> <span>"{}"</span><span>,</span> <span>getSql</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>/**
     * sql信息进行检查
     *
     * @param t   泛型
     * @param &lt;T> 泛型
     * @return QuickMapperChecker
     */</span>
    <span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>QuickMapperChecker</span> <span>analyse</span><span>(</span><span>T</span> t<span>)</span> <span>{</span>
        <span>// 1. 调用方法</span>
        <span>return</span> quickMapperChecker<span>;</span>
    <span>}</span>

    <span>/**
     * 绑定mapper文件
     *
     * @param mapperFile mapper文件地址
     * @return QuickMapperChecker
     */</span>
    <span>public</span> <span>QuickMapperChecker</span> <span>bindMapper</span><span>(</span><span>String</span> mapperFile<span>)</span> <span>{</span>
        quickMapperChecker<span>.</span><span>setMapperFile</span><span>(</span>mapperFile<span>)</span><span>;</span>
        <span>return</span> quickMapperChecker<span>;</span>
    <span>}</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br><span>153</span><br><span>154</span><br><span>155</span><br><span>156</span><br><span>157</span><br><span>158</span><br><span>159</span><br><span>160</span><br><span>161</span><br><span>162</span><br><span>163</span><br><span>164</span><br><span>165</span><br><span>166</span><br><span>167</span><br><span>168</span><br><span>169</span><br><span>170</span><br><span>171</span><br><span>172</span><br><span>173</span><br><span>174</span><br><span>175</span><br><span>176</span><br><span>177</span><br><span>178</span><br><span>179</span><br><span>180</span><br><span>181</span><br><span>182</span><br><span>183</span><br><span>184</span><br><span>185</span><br><span>186</span><br><span>187</span><br><span>188</span><br><span>189</span><br><span>190</span><br><span>191</span><br><span>192</span><br><span>193</span><br><span>194</span><br><span>195</span><br><span>196</span><br><span>197</span><br><span>198</span><br><span>199</span><br><span>200</span><br><span>201</span><br><span>202</span><br><span>203</span><br><span>204</span><br><span>205</span><br><span>206</span><br><span>207</span><br><span>208</span><br><span>209</span><br><span>210</span><br><span>211</span><br><span>212</span><br><span>213</span><br><span>214</span><br><span>215</span><br><span>216</span><br><span>217</span><br><span>218</span><br><span>219</span><br><span>220</span><br><span>221</span><br><span>222</span><br><span>223</span><br><span>224</span><br><span>225</span><br><span>226</span><br><span>227</span><br><span>228</span><br><span>229</span><br><span>230</span><br><span>231</span><br><span>232</span><br><span>233</span><br><span>234</span><br><span>235</span><br><span>236</span><br><span>237</span><br><span>238</span><br><span>239</span><br><span>240</span><br><span>241</span><br><span>242</span><br><span>243</span><br><span>244</span><br><span>245</span><br><span>246</span><br><span>247</span><br><span>248</span><br><span>249</span><br><span>250</span><br><span>251</span><br><span>252</span><br><span>253</span><br><span>254</span><br><span>255</span><br><span>256</span><br><span>257</span><br><span>258</span><br><span>259</span><br><span>260</span><br><span>261</span><br><span>262</span><br><span>263</span><br><span>264</span><br><span>265</span><br><span>266</span><br><span>267</span><br><span>268</span><br><span>269</span><br><span>270</span><br><span>271</span><br><span>272</span><br><span>273</span><br></div></div><h2 id="_3-2-mybatis-plus-使用"> 3.2 Mybatis Plus 使用</h2>
<div><pre><code><span>/**
 * 无需启动容器对sql信息进行检查
 *
 * @author liuxin 2022/4/27 17:48
 */</span>
<span>@NoArgsConstructor</span>
<span>public</span> <span>class</span> <span>QuickMapperPlusChecker</span> <span>{</span>

    <span>/**
     * 方法签名id
     */</span>
    <span>@Getter</span>
    <span>public</span> <span>String</span> mapperId<span>;</span>

    <span>@Setter</span>
    <span>public</span> <span>String</span> methodName<span>;</span>

    <span>/**
     * 方法参数
     */</span>
    <span>@Getter</span>
    <span>private</span> <span>Object</span><span>[</span><span>]</span> args<span>;</span>

    <span>/**
     * 参数解析器
     */</span>
    <span>@Getter</span>
    <span>private</span> <span>ParamNameResolver</span> paramNameResolver<span>;</span>

    <span>/**
     * mapper类型
     */</span>
    <span>private</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> mapper<span>;</span>

    <span>/**
     * mybatis配置
     */</span>
    <span>@Getter</span>
    <span>private</span> <span>MybatisConfiguration</span> configuration<span>;</span>

    <span>@Getter</span>
    <span>@Setter</span>
    <span>private</span> <span>String</span> mapperFile<span>;</span>

    <span>private</span> <span>boolean</span> simple<span>;</span>

    <span>public</span> <span>QuickMapperPlusChecker</span><span>(</span><span>String</span> mapperId<span>,</span> <span>Object</span><span>[</span><span>]</span> args<span>,</span> <span>ParamNameResolver</span> paramNameResolver<span>,</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> mapper<span>,</span>
        <span>MybatisConfiguration</span> configuration<span>)</span> <span>{</span>
        <span>this</span><span>.</span>mapperId <span>=</span> mapperId<span>;</span>
        <span>this</span><span>.</span>args <span>=</span> args<span>;</span>
        <span>this</span><span>.</span>paramNameResolver <span>=</span> paramNameResolver<span>;</span>
        <span>this</span><span>.</span>mapper <span>=</span> mapper<span>;</span>
        <span>this</span><span>.</span>configuration <span>=</span> configuration<span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>QuickMapperPlusChecker</span> <span>proxy</span><span>(</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>isNull</span><span>(</span>quickMapperChecker<span>)</span><span>)</span> <span>{</span>
            quickMapperChecker <span>=</span> <span>new</span> <span>QuickMapperPlusChecker</span><span>(</span><span>)</span><span>;</span>
            quickMapperChecker<span>.</span>simple <span>=</span> <span>true</span><span>;</span>
        <span>}</span>
        <span>return</span> quickMapperChecker<span>;</span>
    <span>}</span>

    <span>private</span> <span>static</span> <span>QuickMapperPlusChecker</span> quickMapperChecker<span>;</span>

    <span>private</span> <span>static</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>,</span> <span>Object</span><span>></span></span> PRIMITIVE_WRAPPER_TYPE_MAP <span>=</span> <span>new</span> <span>IdentityHashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>8</span><span>)</span><span>;</span>

    <span>static</span> <span>{</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Boolean</span><span>.</span><span>class</span><span>,</span> <span>false</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Byte</span><span>.</span><span>class</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Character</span><span>.</span><span>class</span><span>,</span> <span>""</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Double</span><span>.</span><span>class</span><span>,</span> <span>0D</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Float</span><span>.</span><span>class</span><span>,</span> <span>0L</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Integer</span><span>.</span><span>class</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Long</span><span>.</span><span>class</span><span>,</span> <span>0L</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Short</span><span>.</span><span>class</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>Void</span><span>.</span><span>class</span><span>,</span> <span>Void</span><span>.</span>TYPE<span>)</span><span>;</span>

        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>boolean</span><span>.</span><span>class</span><span>,</span> <span>false</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>byte</span><span>.</span><span>class</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>char</span><span>.</span><span>class</span><span>,</span> <span>""</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>double</span><span>.</span><span>class</span><span>,</span> <span>0D</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>float</span><span>.</span><span>class</span><span>,</span> <span>0L</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>int</span><span>.</span><span>class</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>long</span><span>.</span><span>class</span><span>,</span> <span>0L</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>short</span><span>.</span><span>class</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>put</span><span>(</span><span>void</span><span>.</span><span>class</span><span>,</span> <span>null</span><span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>static</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span><span>[</span><span>]</span> <span>interfacesFromMapper</span><span>(</span><span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> mapper<span>)</span> <span>{</span>
        <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span><span>[</span><span>]</span> interfaces <span>=</span> mapper<span>.</span><span>getInterfaces</span><span>(</span><span>)</span><span>;</span>
        <span>List</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>></span></span> interfacesClass <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>interfaces<span>.</span>length <span>></span> <span>0</span><span>)</span> <span>{</span>
            interfacesClass<span>.</span><span>addAll</span><span>(</span><span>Arrays</span><span>.</span><span>asList</span><span>(</span>interfaces<span>)</span><span>)</span><span>;</span>
        <span>}</span>
        <span>if</span> <span>(</span>mapper<span>.</span><span>isInterface</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            interfacesClass<span>.</span><span>add</span><span>(</span>mapper<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> interfacesClass<span>.</span><span>toArray</span><span>(</span><span>new</span> <span>Class</span><span>[</span><span>]</span> <span>{</span><span>}</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>mock</span><span>(</span><span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> mapper<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>return</span> <span>mock</span><span>(</span>mapper<span>,</span> <span>new</span> <span>MybatisConfiguration</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@SuppressWarnings</span><span>(</span><span>"unchecked"</span><span>)</span>
    <span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>mock</span><span>(</span><span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> mapper<span>,</span> <span>MybatisConfiguration</span> configuration<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>return</span> <span>(</span><span>T</span><span>)</span><span>Proxy</span><span>.</span><span>newProxyInstance</span><span>(</span>mapper<span>.</span><span>getClassLoader</span><span>(</span><span>)</span><span>,</span> <span>interfacesFromMapper</span><span>(</span>mapper<span>)</span><span>,</span>
            <span>(</span>proxy<span>,</span> method<span>,</span> args<span>)</span> <span>-></span> <span>{</span>
                <span>String</span> mapperId <span>=</span> mapper<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>"."</span> <span>+</span> method<span>.</span><span>getName</span><span>(</span><span>)</span><span>;</span>
                <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>isNull</span><span>(</span>quickMapperChecker<span>)</span><span>)</span> <span>{</span>
                    quickMapperChecker <span>=</span> <span>new</span> <span>QuickMapperPlusChecker</span><span>(</span>mapperId<span>,</span> args<span>,</span>
                        <span>new</span> <span>ParamNameResolver</span><span>(</span>configuration<span>,</span> method<span>)</span><span>,</span> mapper<span>,</span> configuration<span>)</span><span>;</span>
                    quickMapperChecker<span>.</span><span>setMethodName</span><span>(</span>method<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
                <span>}</span> <span>else</span> <span>{</span>
                    <span>boolean</span> simple <span>=</span> quickMapperChecker<span>.</span>simple<span>;</span>
                    quickMapperChecker <span>=</span> <span>new</span> <span>QuickMapperPlusChecker</span><span>(</span>mapperId<span>,</span> args<span>,</span>
                        <span>new</span> <span>ParamNameResolver</span><span>(</span>configuration<span>,</span> method<span>)</span><span>,</span> mapper<span>,</span> configuration<span>)</span><span>;</span>
                    quickMapperChecker<span>.</span>simple <span>=</span> simple<span>;</span>
                    quickMapperChecker<span>.</span><span>setMethodName</span><span>(</span>method<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
                <span>}</span>
                <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> returnType <span>=</span> method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>;</span>
                <span>Object</span> result <span>=</span> PRIMITIVE_WRAPPER_TYPE_MAP<span>.</span><span>get</span><span>(</span>returnType<span>)</span><span>;</span>
                <span>if</span> <span>(</span>quickMapperChecker<span>.</span>simple<span>)</span> <span>{</span>
                    quickMapperChecker<span>.</span><span>printSql</span><span>(</span><span>)</span><span>;</span>
                <span>}</span>
                <span>return</span> <span>Objects</span><span>.</span><span>nonNull</span><span>(</span>result<span>)</span> <span>?</span> result <span>:</span> <span>new</span> <span>DefaultObjectFactory</span><span>(</span><span>)</span><span>.</span><span>create</span><span>(</span>returnType<span>)</span><span>;</span>
            <span>}</span><span>)</span><span>;</span>
    <span>}</span>

    <span>/**
     * 处理占位符已经被替换成?的时候，用于将占位符重新替换成变量符
     *
     * @param sql
     *            占位符sql
     * @param index
     *            占位符当前处理的索引
     * @param parameterMappings
     *            占位符参数信息
     * @return String 变量符sql
     */</span>
    <span>private</span> <span>String</span> <span>resetSql</span><span>(</span><span>String</span> sql<span>,</span> <span>int</span> index<span>,</span> <span>List</span><span><span>&lt;</span><span>ParameterMapping</span><span>></span></span> parameterMappings<span>,</span> <span>MetaObject</span> metaObject<span>)</span> <span>{</span>
        <span>int</span> i <span>=</span> sql<span>.</span><span>indexOf</span><span>(</span><span>"?"</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>i <span>></span> <span>-</span><span>1</span><span>)</span> <span>{</span>
            <span>ParameterMapping</span> parameterMapping <span>=</span> parameterMappings<span>.</span><span>get</span><span>(</span>index<span>)</span><span>;</span>
            <span>String</span> property <span>=</span> parameterMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>;</span>
            <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> javaType <span>=</span> parameterMapping<span>.</span><span>getJavaType</span><span>(</span><span>)</span><span>;</span>
            <span>Object</span> value <span>=</span> metaObject<span>.</span><span>getValue</span><span>(</span>parameterMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>String</span> s<span>;</span>
            <span>if</span> <span>(</span>javaType<span>.</span><span>equals</span><span>(</span><span>String</span><span>.</span><span>class</span><span>)</span> <span>||</span> value <span>instanceof</span> <span>String</span><span>)</span> <span>{</span>
                s <span>=</span> sql<span>.</span><span>replaceFirst</span><span>(</span><span>"\\?"</span><span>,</span> <span>"\"\\${"</span> <span>+</span> property <span>+</span> <span>"}\""</span><span>)</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>
                s <span>=</span> sql<span>.</span><span>replaceFirst</span><span>(</span><span>"\\?"</span><span>,</span> <span>"\\${"</span> <span>+</span> property <span>+</span> <span>"}"</span><span>)</span><span>;</span>
            <span>}</span>
            sql <span>=</span> <span>resetSql</span><span>(</span>s<span>,</span> <span>++</span>index<span>,</span> parameterMappings<span>,</span> metaObject<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> sql<span>;</span>
    <span>}</span>

    <span>/**
     * sql打印
     * 
     * @return String
     * @throws Exception
     *             未知异常
     */</span>
    <span>public</span> <span>String</span> <span>getSql</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>if</span> <span>(</span><span>!</span><span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span><span>this</span><span>.</span>mapperFile<span>)</span><span>)</span> <span>{</span>
            <span>loadMappedStatementByMapperFile</span><span>(</span><span>this</span><span>.</span>mapperFile<span>)</span><span>;</span>
        <span>}</span>
        <span>loadMappedStatementByAnnotation</span><span>(</span><span>)</span><span>;</span>
        <span>new</span> <span>SqlRunnerInjector</span><span>(</span><span>)</span><span>.</span><span>inject</span><span>(</span>configuration<span>)</span><span>;</span>
        <span>boolean</span> hasMapped <span>=</span> configuration<span>.</span><span>hasStatement</span><span>(</span>quickMapperChecker<span>.</span>mapperId<span>)</span><span>;</span>
        <span>if</span> <span>(</span><span>!</span>hasMapped<span>)</span> <span>{</span>
            <span>throw</span> <span>new</span> <span>RuntimeException</span><span>(</span>
                <span>"未找到MappedStatement,请检查是否需要绑定mapper xml文件:["</span> <span>+</span> quickMapperChecker<span>.</span>mapperId <span>+</span> <span>"]"</span><span>)</span><span>;</span>
        <span>}</span>
        <span>MappedStatement</span> mappedStatement <span>=</span> configuration<span>.</span><span>getMappedStatement</span><span>(</span>quickMapperChecker<span>.</span>mapperId<span>)</span><span>;</span>
        <span>SqlSource</span> sqlSource <span>=</span> mappedStatement<span>.</span><span>getSqlSource</span><span>(</span><span>)</span><span>;</span>
        <span>Object</span> namedParams <span>=</span> paramNameResolver<span>.</span><span>getNamedParams</span><span>(</span>quickMapperChecker<span>.</span>args<span>)</span><span>;</span>
        <span>BoundSql</span> boundSql <span>=</span> mappedStatement<span>.</span><span>getBoundSql</span><span>(</span>namedParams<span>)</span><span>;</span>
        <span>// 占位符</span>
        <span>if</span> <span>(</span>sqlSource <span>instanceof</span> <span>RawSqlSource</span> <span>||</span> sqlSource <span>instanceof</span> <span>DynamicSqlSource</span><span>)</span> <span>{</span>
            <span>// 占位sql，将#替换成$</span>
            <span>String</span> sql <span>=</span> boundSql<span>.</span><span>getSql</span><span>(</span><span>)</span><span>;</span>
            <span>List</span><span><span>&lt;</span><span>ParameterMapping</span><span>></span></span> parameterMappings <span>=</span> boundSql<span>.</span><span>getParameterMappings</span><span>(</span><span>)</span><span>;</span>

            <span>XNode</span> node <span>=</span> <span>findNode</span><span>(</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>nonNull</span><span>(</span>node<span>)</span><span>)</span> <span>{</span>
                <span>XMLScriptBuilder</span> xmlScriptBuilder <span>=</span> <span>new</span> <span>XMLScriptBuilder</span><span>(</span>configuration<span>,</span> node<span>)</span><span>;</span>
                <span>// 解析xml中的标签信息</span>
                <span>Method</span> parseDynamicTags <span>=</span> <span>XMLScriptBuilder</span><span>.</span><span>class</span><span>.</span><span>getDeclaredMethod</span><span>(</span><span>"parseDynamicTags"</span><span>,</span> <span>XNode</span><span>.</span><span>class</span><span>)</span><span>;</span>
                parseDynamicTags<span>.</span><span>setAccessible</span><span>(</span><span>true</span><span>)</span><span>;</span>
                <span>MixedSqlNode</span> rootSqlNode <span>=</span> <span>(</span><span>MixedSqlNode</span><span>)</span>parseDynamicTags<span>.</span><span>invoke</span><span>(</span>xmlScriptBuilder<span>,</span> node<span>)</span><span>;</span>
                <span>DynamicContext</span> context <span>=</span> <span>new</span> <span>DynamicContext</span><span>(</span>configuration<span>,</span> namedParams<span>)</span><span>;</span>
                rootSqlNode<span>.</span><span>apply</span><span>(</span>context<span>)</span><span>;</span>
                <span>// 标签信息参数解析</span>
                <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Object</span><span>></span></span> bindings <span>=</span> context<span>.</span><span>getBindings</span><span>(</span><span>)</span><span>;</span>
                <span>// 标签参数 + 原始参数</span>
                <span>(</span><span>(</span><span>Map</span><span>)</span>namedParams<span>)</span><span>.</span><span>putAll</span><span>(</span>bindings<span>)</span><span>;</span>
            <span>}</span>
            <span>MetaObject</span> metaObject <span>=</span> configuration<span>.</span><span>newMetaObject</span><span>(</span>namedParams<span>)</span><span>;</span>
            <span>processDate</span><span>(</span>parameterMappings<span>,</span> metaObject<span>)</span><span>;</span>
            <span>TextSqlNode</span> textSqlNode <span>=</span> <span>new</span> <span>TextSqlNode</span><span>(</span><span>resetSql</span><span>(</span>sql<span>,</span> <span>0</span><span>,</span> parameterMappings<span>,</span> metaObject<span>)</span><span>)</span><span>;</span>
            <span>return</span> <span>SQLUtils</span>
                <span>.</span><span>formatMySql</span><span>(</span><span>(</span><span>new</span> <span>DynamicSqlSource</span><span>(</span>configuration<span>,</span> textSqlNode<span>)</span><span>.</span><span>getBoundSql</span><span>(</span>namedParams<span>)</span><span>.</span><span>getSql</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>return</span> <span>SQLUtils</span><span>.</span><span>formatMySql</span><span>(</span>boundSql<span>.</span><span>getSql</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>

    <span>private</span> <span>void</span> <span>processDate</span><span>(</span><span>List</span><span><span>&lt;</span><span>ParameterMapping</span><span>></span></span> parameterMappings<span>,</span> <span>MetaObject</span> metaObject<span>)</span> <span>{</span>
        <span>for</span> <span>(</span><span>ParameterMapping</span> parameterMapping <span>:</span> parameterMappings<span>)</span> <span>{</span>
            <span>String</span> property <span>=</span> parameterMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>;</span>
            <span>Object</span> value <span>=</span> metaObject<span>.</span><span>getValue</span><span>(</span>property<span>)</span><span>;</span>
            <span>if</span> <span>(</span>value <span>instanceof</span> <span>Date</span><span>)</span> <span>{</span>
                metaObject<span>.</span><span>setValue</span><span>(</span>property<span>,</span> <span>DatePatternEnum</span><span>.</span>DATE_TIME_PATTERN<span>.</span><span>format</span><span>(</span><span>(</span><span>Date</span><span>)</span>value<span>)</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>

    <span>private</span> <span>XNode</span> <span>findNode</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>if</span> <span>(</span><span>StringUtils</span><span>.</span><span>isNotBlank</span><span>(</span><span>this</span><span>.</span>mapperFile<span>)</span><span>)</span> <span>{</span>
            <span>InputStream</span> resourceAsStream <span>=</span> <span>Resources</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>this</span><span>.</span>mapperFile<span>)</span><span>;</span>
            <span>XPathParser</span> xPathParser <span>=</span> <span>new</span> <span>XPathParser</span><span>(</span>resourceAsStream<span>)</span><span>;</span>
            <span>XNode</span> mapperNode <span>=</span> xPathParser<span>.</span><span>evalNode</span><span>(</span><span>"/mapper"</span><span>)</span><span>;</span>
            <span>List</span><span><span>&lt;</span><span>XNode</span><span>></span></span> children <span>=</span> mapperNode<span>.</span><span>getChildren</span><span>(</span><span>)</span><span>;</span>
            <span>for</span> <span>(</span><span>XNode</span> child <span>:</span> children<span>)</span> <span>{</span>
                <span>if</span> <span>(</span>child<span>.</span><span>getStringAttribute</span><span>(</span><span>"id"</span><span>)</span><span>.</span><span>equals</span><span>(</span>quickMapperChecker<span>.</span>methodName<span>)</span><span>)</span> <span>{</span>
                    <span>MapperBuilderAssistant</span> mapperBuilderAssistant <span>=</span>
                        <span>new</span> <span>MapperBuilderAssistant</span><span>(</span>configuration<span>,</span> quickMapperChecker<span>.</span>mapperFile<span>)</span><span>;</span>
                    mapperBuilderAssistant<span>.</span><span>setCurrentNamespace</span><span>(</span>mapper<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
                    <span>XMLIncludeTransformer</span> includeParser <span>=</span>
                        <span>new</span> <span>XMLIncludeTransformer</span><span>(</span>configuration<span>,</span> mapperBuilderAssistant<span>)</span><span>;</span>
                    includeParser<span>.</span><span>applyIncludes</span><span>(</span>child<span>.</span><span>getNode</span><span>(</span><span>)</span><span>)</span><span>;</span>
                    <span>return</span> child<span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
        <span>// "select|insert|update|delete"</span>
        <span>return</span> <span>null</span><span>;</span>
    <span>}</span><span>;</span>

    <span>private</span> <span>void</span> <span>loadMappedStatementByAnnotation</span><span>(</span><span>)</span> <span>{</span>
        <span>MybatisMapperAnnotationBuilder</span> mapperAnnotationBuilder <span>=</span>
            <span>new</span> <span>MybatisMapperAnnotationBuilder</span><span>(</span>configuration<span>,</span> quickMapperChecker<span>.</span>mapper<span>)</span><span>;</span>
        mapperAnnotationBuilder<span>.</span><span>parse</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>void</span> <span>loadMappedStatementByMapperFile</span><span>(</span><span>String</span> mapperXmlFile<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>InputStream</span> resourceAsStream <span>=</span> <span>Resources</span><span>.</span><span>getResourceAsStream</span><span>(</span>mapperXmlFile<span>)</span><span>;</span>
        <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>XNode</span><span>></span></span> sqlFragments <span>=</span> configuration<span>.</span><span>getSqlFragments</span><span>(</span><span>)</span><span>;</span>
        <span>new</span> <span>XMLMapperBuilder</span><span>(</span>resourceAsStream<span>,</span> configuration<span>,</span> mapperXmlFile<span>,</span> sqlFragments<span>)</span><span>.</span><span>parse</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>void</span> <span>printSql</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>ColorConsole</span><span>.</span><span>colorPrintln</span><span>(</span><span>"🚀 格式化SQL:"</span><span>)</span><span>;</span>
        <span>ColorConsole</span><span>.</span><span>colorPrintln</span><span>(</span><span>AnsiColor</span><span>.</span>BRIGHT_MAGENTA<span>,</span> <span>"{}"</span><span>,</span> <span>getSql</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>/**
     * sql信息进行检查
     * 
     * @param t
     *            泛型
     * @return QuickMapperChecker
     * @param &lt;T>
     *            泛型
     */</span>
    <span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>QuickMapperPlusChecker</span> <span>analyse</span><span>(</span><span>T</span> t<span>)</span> <span>{</span>
        <span>// 1. 调用方法</span>
        <span>return</span> quickMapperChecker<span>;</span>
    <span>}</span>

    <span>/**
     * 绑定mapper文件
     * 
     * @param mapperFile
     *            mapper文件地址
     * @return QuickMapperChecker
     */</span>
    <span>public</span> <span>QuickMapperPlusChecker</span> <span>bindMapper</span><span>(</span><span>String</span> mapperFile<span>)</span> <span>{</span>
        quickMapperChecker<span>.</span><span>setMapperFile</span><span>(</span>mapperFile<span>)</span><span>;</span>
        <span>return</span> quickMapperChecker<span>;</span>
    <span>}</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br><span>153</span><br><span>154</span><br><span>155</span><br><span>156</span><br><span>157</span><br><span>158</span><br><span>159</span><br><span>160</span><br><span>161</span><br><span>162</span><br><span>163</span><br><span>164</span><br><span>165</span><br><span>166</span><br><span>167</span><br><span>168</span><br><span>169</span><br><span>170</span><br><span>171</span><br><span>172</span><br><span>173</span><br><span>174</span><br><span>175</span><br><span>176</span><br><span>177</span><br><span>178</span><br><span>179</span><br><span>180</span><br><span>181</span><br><span>182</span><br><span>183</span><br><span>184</span><br><span>185</span><br><span>186</span><br><span>187</span><br><span>188</span><br><span>189</span><br><span>190</span><br><span>191</span><br><span>192</span><br><span>193</span><br><span>194</span><br><span>195</span><br><span>196</span><br><span>197</span><br><span>198</span><br><span>199</span><br><span>200</span><br><span>201</span><br><span>202</span><br><span>203</span><br><span>204</span><br><span>205</span><br><span>206</span><br><span>207</span><br><span>208</span><br><span>209</span><br><span>210</span><br><span>211</span><br><span>212</span><br><span>213</span><br><span>214</span><br><span>215</span><br><span>216</span><br><span>217</span><br><span>218</span><br><span>219</span><br><span>220</span><br><span>221</span><br><span>222</span><br><span>223</span><br><span>224</span><br><span>225</span><br><span>226</span><br><span>227</span><br><span>228</span><br><span>229</span><br><span>230</span><br><span>231</span><br><span>232</span><br><span>233</span><br><span>234</span><br><span>235</span><br><span>236</span><br><span>237</span><br><span>238</span><br><span>239</span><br><span>240</span><br><span>241</span><br><span>242</span><br><span>243</span><br><span>244</span><br><span>245</span><br><span>246</span><br><span>247</span><br><span>248</span><br><span>249</span><br><span>250</span><br><span>251</span><br><span>252</span><br><span>253</span><br><span>254</span><br><span>255</span><br><span>256</span><br><span>257</span><br><span>258</span><br><span>259</span><br><span>260</span><br><span>261</span><br><span>262</span><br><span>263</span><br><span>264</span><br><span>265</span><br><span>266</span><br><span>267</span><br><span>268</span><br><span>269</span><br><span>270</span><br><span>271</span><br><span>272</span><br><span>273</span><br><span>274</span><br><span>275</span><br><span>276</span><br><span>277</span><br><span>278</span><br><span>279</span><br><span>280</span><br><span>281</span><br><span>282</span><br><span>283</span><br><span>284</span><br><span>285</span><br><span>286</span><br><span>287</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-08T04:06:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第05篇:Mybatis的SQL执行流程分析</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/Mybatis%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/Mybatis%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <updated>2022-04-12T17:26:01.000Z</updated>
    <content type="html"><![CDATA[<PageBanner/>
<h2 id="一、前言"> 一、前言</h2>
<p>前面我们知道了Mybatis是如何进行代理的, 但是最终 <code>PlainMethodInvoker</code> 中是如何将参数转组装成Sql,并执行处理Sql返回值的地方还都没看到。本篇我们就带着如下三个问题开始我们的探索吧。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649427915000.png" alt="" loading="lazy"></p>
<p>本篇内容因为涉及跟jdbc的知识,如果对这部分内容有点遗忘,请先<a href="./../mybatis/环境搭建/#_2-2-1-jdbc驱动">JDBC知识复习</a>，另本篇内容知识点较多,目录较复杂,建议根据文字结合
代码在实践的过程中一起学习。最好也可以自己debug一下。会收获更大。做好准备现在发车。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649428750000.png" alt="" loading="lazy"></p>
<h2 id="二、流程分析"> 二、流程分析</h2>
<h2 id="_2-1-sql是如何组装参数的"> 2.1 Sql是如何组装参数的?</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1649428892000.png" alt="" loading="lazy"></p>
<p>在组装参数之前我们先来提一个小问题,sql的类型是如何判断的。sql类型有增删该查。
除了查询会有结果集外，其他三种都是返回更新行数。他们对应的处理逻辑也是不一样的。
我们要先弄清这个问题。</p>
<h3 id="_2-1-1-sql类型如何判断"> 2.1.1 sql类型如何判断?</h3>
<p>我们知道sql的类型是可以通过关键字来判断的,如select/update/delete/insert。那么在Mybatis中哪里能输入sql呢?
一种有2种方式。</p>
<ol>
<li>在Mapper.xml中直接编写sql，如下示例。</li>
</ol>
<div><pre><code><span>&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span><span>&lt;!</span><span>DOCTYPE</span> <span>mapper</span> <span>PUBLIC</span> <span>"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span>"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span>></span></span>
<span><span><span>&lt;</span>mapper</span> <span>namespace</span><span><span>=</span><span>"</span>orm.example.dal.mapper.TUserMapper<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>delete</span> <span>id</span><span><span>=</span><span>"</span>deleteByPrimaryKey<span>"</span></span> <span>parameterType</span><span><span>=</span><span>"</span>java.lang.String<span>"</span></span><span>></span></span>
        delete from T_USER
        where token_id = #{tokenId,jdbcType=CHAR}
    <span><span><span>&lt;/</span>delete</span><span>></span></span>
    <span><span><span>&lt;</span>insert</span> <span>id</span><span><span>=</span><span>"</span>insert<span>"</span></span> <span>parameterType</span><span><span>=</span><span>"</span>orm.example.dal.model.TUser<span>"</span></span><span>></span></span>
        insert into T_USER (token_id, uid, name)
        values (#{tokenId,jdbcType=CHAR}, #{uid,jdbcType=INTEGER}, #{name,jdbcType=CHAR})
    <span><span><span>&lt;/</span>insert</span><span>></span></span>
    <span><span><span>&lt;</span>update</span> <span>id</span><span><span>=</span><span>"</span>updateByPrimaryKey<span>"</span></span> <span>parameterType</span><span><span>=</span><span>"</span>orm.example.dal.model.TUser<span>"</span></span><span>></span></span>
        update T_USER
        set uid = #{uid,jdbcType=INTEGER},
        name = #{name,jdbcType=CHAR}
        where token_id = #{tokenId,jdbcType=CHAR}
    <span><span><span>&lt;/</span>update</span><span>></span></span>
    <span><span><span>&lt;</span>select</span> <span>id</span><span><span>=</span><span>"</span>selectAll<span>"</span></span> <span>resultMap</span><span><span>=</span><span>"</span>BaseResultMap<span>"</span></span><span>></span></span>
        select token_id, uid, name
        from T_USER
    <span><span><span>&lt;/</span>select</span><span>></span></span>

<span><span><span>&lt;/</span>mapper</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><ol start="2">
<li>在Mapper类中使用注解编写sql</li>
</ol>
<div><pre><code><span>public</span> <span>interface</span> <span>TUserMapper</span> <span>{</span>
    <span>@Select</span><span>(</span><span>"select * from t_user where id = #{id}"</span><span>)</span>
    <span>TUser</span> <span>selectById</span><span>(</span><span>Long</span> id<span>)</span><span>;</span>
<span>}</span>    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>这些sql信息都保存在 MappedStatement。在PlainMethodInvoker通过SqlCommand进行调用。</p>
<ul>
<li>line(9) 最终通过type = ms.getSqlCommandType() 获取sql的类型</li>
</ul>
<div><div><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br></div><pre><code><span>SqlCommand</span> sqlCommand <span>=</span> <span>new</span> <span>SqlCommand</span><span>(</span>config<span>,</span> mapperInterface<span>,</span> method<span>)</span><span>;</span>

<span>// 构造参数中找MappedStatement</span>
<span>public</span> <span>SqlCommand</span><span>(</span><span>Configuration</span> configuration<span>,</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> mapperInterface<span>,</span> <span>Method</span> method<span>)</span> <span>{</span>
      <span>final</span> <span>String</span> methodName <span>=</span> method<span>.</span><span>getName</span><span>(</span><span>)</span><span>;</span>
      <span>final</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> declaringClass <span>=</span> method<span>.</span><span>getDeclaringClass</span><span>(</span><span>)</span><span>;</span>
      <span>MappedStatement</span> ms <span>=</span> <span>resolveMappedStatement</span><span>(</span>mapperInterface<span>,</span> methodName<span>,</span> declaringClass<span>,</span>
          configuration<span>)</span><span>;</span>
      type <span>=</span> ms<span>.</span><span>getSqlCommandType</span><span>(</span><span>)</span><span>;</span>
<span>}</span>          
<span>// 寻找方法是接口全路径名.方法名</span>
<span>private</span> <span>MappedStatement</span> <span>resolveMappedStatement</span><span>(</span><span>)</span><span>{</span>
    <span>String</span> statementId <span>=</span> mapperInterface<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>"."</span> <span>+</span> methodName<span>;</span>
    configuration<span>.</span><span>hasStatement</span><span>(</span>statementId<span>)</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>那么MappedStatement中的SqlCommandType是如何获取的呢?</p>
<h3 id="_2-1-1-1-xml文件方式"> 2.1.1.1 xml文件方式</h3>
<p>解析xml标签来实现</p>
<p>XMLMapperBuilder#parseStatementNode</p>
<ul>
<li>line(11) 通过标签来映射成指定的类型SqlCommandType</li>
</ul>
<div><div><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br></div><pre><code>public class XMLStatementBuilder extends BaseBuilder {
 public void parseStatementNode() {
    String id = context.getStringAttribute("id");
    String databaseId = context.getStringAttribute("databaseId");

    if (!databaseIdMatchesCurrent(id, databaseId, this.requiredDatabaseId)) {
      return;
    }

    String nodeName = context.getNode().getNodeName();
    SqlCommandType sqlCommandType = SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH));
  }
}  
public enum SqlCommandType {
  UNKNOWN, INSERT, UPDATE, DELETE, SELECT, FLUSH
}    
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id="_2-1-1-2-注解方式"> 2.1.1.2 注解方式</h3>
<p>一定是解析注解方法 AnnotationWrapper。将不同的注解解析成SqlCommandType。如下伪代码。通过解析方法上的注解,判断注解类型,来确定sql的类型。
MapperAnnotationBuilder#getAnnotationWrapper(method, true, statementAnnotationTypes)</p>
<div><pre><code><span>private</span> <span>class</span> <span>AnnotationWrapper</span> <span>{</span>
    <span>private</span> <span>final</span> <span>Annotation</span> annotation<span>;</span>
    <span>private</span> <span>final</span> <span>String</span> databaseId<span>;</span>
    <span>private</span> <span>final</span> <span>SqlCommandType</span> sqlCommandType<span>;</span>

    <span>AnnotationWrapper</span><span>(</span><span>Annotation</span> annotation<span>)</span> <span>{</span>
      <span>super</span><span>(</span><span>)</span><span>;</span>
      <span>this</span><span>.</span>annotation <span>=</span> annotation<span>;</span>
      <span>if</span> <span>(</span>annotation <span>instanceof</span> <span>Select</span><span>)</span> <span>{</span>
        databaseId <span>=</span> <span>(</span><span>(</span><span>Select</span><span>)</span> annotation<span>)</span><span>.</span><span>databaseId</span><span>(</span><span>)</span><span>;</span>
        sqlCommandType <span>=</span> <span>SqlCommandType</span><span>.</span>SELECT<span>;</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>annotation <span>instanceof</span> <span>Update</span><span>)</span> <span>{</span>
        databaseId <span>=</span> <span>(</span><span>(</span><span>Update</span><span>)</span> annotation<span>)</span><span>.</span><span>databaseId</span><span>(</span><span>)</span><span>;</span>
        sqlCommandType <span>=</span> <span>SqlCommandType</span><span>.</span>UPDATE<span>;</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>annotation <span>instanceof</span> <span>Insert</span><span>)</span> <span>{</span>
        databaseId <span>=</span> <span>(</span><span>(</span><span>Insert</span><span>)</span> annotation<span>)</span><span>.</span><span>databaseId</span><span>(</span><span>)</span><span>;</span>
        sqlCommandType <span>=</span> <span>SqlCommandType</span><span>.</span>INSERT<span>;</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>annotation <span>instanceof</span> <span>Delete</span><span>)</span> <span>{</span>
        databaseId <span>=</span> <span>(</span><span>(</span><span>Delete</span><span>)</span> annotation<span>)</span><span>.</span><span>databaseId</span><span>(</span><span>)</span><span>;</span>
        sqlCommandType <span>=</span> <span>SqlCommandType</span><span>.</span>DELETE<span>;</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>annotation <span>instanceof</span> <span>SelectProvider</span><span>)</span> <span>{</span>
        databaseId <span>=</span> <span>(</span><span>(</span><span>SelectProvider</span><span>)</span> annotation<span>)</span><span>.</span><span>databaseId</span><span>(</span><span>)</span><span>;</span>
        sqlCommandType <span>=</span> <span>SqlCommandType</span><span>.</span>SELECT<span>;</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>annotation <span>instanceof</span> <span>UpdateProvider</span><span>)</span> <span>{</span>
        databaseId <span>=</span> <span>(</span><span>(</span><span>UpdateProvider</span><span>)</span> annotation<span>)</span><span>.</span><span>databaseId</span><span>(</span><span>)</span><span>;</span>
        sqlCommandType <span>=</span> <span>SqlCommandType</span><span>.</span>UPDATE<span>;</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>annotation <span>instanceof</span> <span>InsertProvider</span><span>)</span> <span>{</span>
        databaseId <span>=</span> <span>(</span><span>(</span><span>InsertProvider</span><span>)</span> annotation<span>)</span><span>.</span><span>databaseId</span><span>(</span><span>)</span><span>;</span>
        sqlCommandType <span>=</span> <span>SqlCommandType</span><span>.</span>INSERT<span>;</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>annotation <span>instanceof</span> <span>DeleteProvider</span><span>)</span> <span>{</span>
        databaseId <span>=</span> <span>(</span><span>(</span><span>DeleteProvider</span><span>)</span> annotation<span>)</span><span>.</span><span>databaseId</span><span>(</span><span>)</span><span>;</span>
        sqlCommandType <span>=</span> <span>SqlCommandType</span><span>.</span>DELETE<span>;</span>
      <span>}</span> <span>else</span> <span>{</span>
        sqlCommandType <span>=</span> <span>SqlCommandType</span><span>.</span>UNKNOWN<span>;</span>
        <span>if</span> <span>(</span>annotation <span>instanceof</span> <span>Options</span><span>)</span> <span>{</span>
          databaseId <span>=</span> <span>(</span><span>(</span><span>Options</span><span>)</span> annotation<span>)</span><span>.</span><span>databaseId</span><span>(</span><span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>if</span> <span>(</span>annotation <span>instanceof</span> <span>SelectKey</span><span>)</span> <span>{</span>
          databaseId <span>=</span> <span>(</span><span>(</span><span>SelectKey</span><span>)</span> annotation<span>)</span><span>.</span><span>databaseId</span><span>(</span><span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
          databaseId <span>=</span> <span>""</span><span>;</span>
        <span>}</span>
      <span>}</span>
    <span>}</span>

    <span>Annotation</span> <span>getAnnotation</span><span>(</span><span>)</span> <span>{</span>
      <span>return</span> annotation<span>;</span>
    <span>}</span>

    <span>SqlCommandType</span> <span>getSqlCommandType</span><span>(</span><span>)</span> <span>{</span>
      <span>return</span> sqlCommandType<span>;</span>
    <span>}</span>
<span>}</span>    

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br></div></div><p>到这里我们知道了sql类型是如何区分出来的，既然能区分出来，就知道如何去执行sql了。
是不是很简单? 当然看的话很简单，但是如何让你自己来找，你能找到吗? 所以建议在阅读的时候
要自己去源码中找找。</p>
<h3 id="_2-1-2-sql参数如何组装"> 2.1.2 sql参数如何组装?</h3>
<p>在mybatis中有两种处理sql参数的地方,第一种是<code>#{}</code> 占位符，第二种是<code>${}</code> 变量符。这两种都是处理参数的方式。那说到这里,不得不提的就是sql注入的黑客技术。
sql注入就是就是利用了变量符。将我们原来的sql进行恶意的修改。举一个例子。下面根据用户id和用户密码查询用户信息。</p>
<p><code>select * from t_user as u where u.pass = ${user_pass} and u.id = ${user_id}</code></p>
<p>那么如何在不知道密码只有用户id的情况下查询到用户信息呢? 我们只需要将sql转换成下面这样即可。</p>
<p><code>select * from t_user as u where u.pass = '' or 1 = 1 and u.id = ${user_id}</code></p>
<p>那mybatis允许我们这样做吗? 允许，如果我们使用的是 <code>${}</code> 变量符,那么mybatis只是将参数和变量符进行替换。你输入的参数可能也会被当成sql去执行了。如下代码示例。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>T4UserMapper</span> <span>{</span>
    <span>/**
     * 获取用户信息
     *
     * @param uid     用户id
     * @param tokenId token
     * @return TUser
     */</span>
    <span>@Select</span><span>(</span><span>"select * from t_user where token_id = ${token_id} and uid = ${uid}"</span><span>)</span>
    <span>TUser</span> <span>queryUserById</span><span>(</span><span>@Param</span><span>(</span><span>"uid"</span><span>)</span> <span>Long</span> uid<span>,</span> <span>@Param</span><span>(</span><span>"token_id"</span><span>)</span> <span>String</span> tokenId<span>)</span><span>;</span>
<span>}</span>
<span>public</span> <span>class</span> <span>Test</span><span>{</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>sql</span><span>(</span><span>)</span><span>{</span>
        <span>// 读取配置信息</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"example05/mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
        <span>SqlSession</span> sqlSession <span>=</span> sqlSessionFactory<span>.</span><span>openSession</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>// debug</span>
        <span>T4UserMapper</span> mapper <span>=</span> configuration<span>.</span><span>getMapper</span><span>(</span><span>T4UserMapper</span><span>.</span><span>class</span><span>,</span> sqlSession<span>)</span><span>;</span>
        <span>// 模拟sql注入</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>mapper<span>.</span><span>queryUserById</span><span>(</span><span>37L</span><span>,</span><span>"0 or 1 = 1"</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>    

<span>Setting</span> autocommit <span>to</span> <span>false</span> on JDBC <span>Connection</span> <span>[</span><span><span>com<span>.</span>mysql<span>.</span>cj<span>.</span>jdbc<span>.</span></span>ConnectionImpl</span><span>@62ddbd7e</span><span>]</span>
<span>==</span><span>></span>  <span>Preparing</span><span>:</span> select <span>*</span> from t_user where token_id <span>=</span> <span>0</span> or <span>1</span> <span>=</span> <span>1</span> and uid <span>=</span> <span>37</span>
<span>==</span><span>></span> <span>Parameters</span><span>:</span> 
<span>&lt;=</span><span>=</span>    <span>Columns</span><span>:</span> uid<span>,</span> name<span>,</span> token_id
<span>&lt;=</span><span>=</span>        <span>Row</span><span>:</span> <span>37</span><span>,</span> 无天<span>,</span> <span>60</span>
<span>&lt;=</span><span>=</span>      <span>Total</span><span>:</span> <span>1</span>
<span>TUser</span><span>(</span>tokenId<span>=</span><span>null</span><span>,</span> uid<span>=</span><span>37</span><span>,</span> name<span>=</span>无天<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><p>要想避免这样的问题,我们只需要将<code>${}</code> 变量符,都替换成<code>#{}</code> 占位符就好了。那么Mybatis只会将你的参数当做是参数处理，不会当做是sql执行。如下代码示例。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>T4UserMapper</span> <span>{</span>
    <span>/**
     * 获取用户信息
     *
     * @param uid     用户id
     * @param tokenId token
     * @return TUser
     */</span>
    <span>@Select</span><span>(</span><span>"select * from t_user where token_id = #{token_id} and uid = #{uid}"</span><span>)</span>
    <span>TUser</span> <span>queryUserById</span><span>(</span><span>@Param</span><span>(</span><span>"uid"</span><span>)</span> <span>Long</span> uid<span>,</span> <span>@Param</span><span>(</span><span>"token_id"</span><span>)</span> <span>String</span> tokenId<span>)</span><span>;</span>
<span>}</span>
<span>public</span> <span>class</span> <span>Test</span><span>{</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>sql</span><span>(</span><span>)</span><span>{</span>
        <span>// 读取配置信息</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"example05/mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
        <span>SqlSession</span> sqlSession <span>=</span> sqlSessionFactory<span>.</span><span>openSession</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>// debug</span>
        <span>T4UserMapper</span> mapper <span>=</span> configuration<span>.</span><span>getMapper</span><span>(</span><span>T4UserMapper</span><span>.</span><span>class</span><span>,</span> sqlSession<span>)</span><span>;</span>
        <span>// 模拟sql注入 => null</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>mapper<span>.</span><span>queryUserById</span><span>(</span><span>37L</span><span>,</span><span>"0 or 1 = 1"</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>  

<span>Created</span> connection <span>798981583.</span>
<span>Setting</span> autocommit <span>to</span> <span>false</span> on JDBC <span>Connection</span> <span>[</span><span><span>com<span>.</span>mysql<span>.</span>cj<span>.</span>jdbc<span>.</span></span>ConnectionImpl</span><span>@2f9f7dcf</span><span>]</span>
<span>==</span><span>></span>  <span>Preparing</span><span>:</span> select <span>*</span> from t_user where token_id <span>=</span> <span>?</span> and uid <span>=</span> <span>?</span>
<span>==</span><span>></span> <span>Parameters</span><span>:</span> <span>0</span> or <span>1</span> <span>=</span> <span>1</span><span>(</span><span>String</span><span>)</span><span>,</span> <span>37</span><span>(</span><span>Long</span><span>)</span>
<span>&lt;=</span><span>=</span>      <span>Total</span><span>:</span> <span>0</span>
<span>null</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>以上演示代码可以在 <code>com.test.example05.SqlParseTest</code>中找到。那么无论是变量符还是占位符，其实都是sql组装,下面我们正式开始学习。</p>
<p><mark>同样我们先提两个问题</mark></p>
<p><img src="https://img.springlearn.cn/blog/learn_1649510242000.png" alt="" loading="lazy"></p>
<h3 id="_2-1-2-1-方法参数如何来解析"> 2.1.2.1 方法参数如何来解析</h3>
<p><img src="https://img.springlearn.cn/blog/learn_1649510559000.png" alt="" loading="lazy"></p>
<p>关键代码就在MapperMethod的execute的入参 Object [] args;
关于参数的处理都在这里处理了。MethodSignature#convertArgsToSqlCommandParam。</p>
<div><pre><code><span>public</span> <span>class</span> <span>MapperMethod</span> <span>{</span>
  <span>public</span> <span>Object</span> <span>execute</span><span>(</span><span>SqlSession</span> sqlSession<span>,</span> <span>Object</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
    <span>Object</span> result<span>;</span>
    <span>switch</span> <span>(</span>command<span>.</span><span>getType</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>case</span> INSERT<span>:</span> <span>{</span>
        <span>Object</span> param <span>=</span> method<span>.</span><span>convertArgsToSqlCommandParam</span><span>(</span>args<span>)</span><span>;</span>
        result <span>=</span> <span>rowCountResult</span><span>(</span>sqlSession<span>.</span><span>insert</span><span>(</span>command<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> param<span>)</span><span>)</span><span>;</span>
        <span>break</span><span>;</span>
      <span>}</span>
      <span>case</span> UPDATE<span>:</span> <span>{</span>
        <span>Object</span> param <span>=</span> method<span>.</span><span>convertArgsToSqlCommandParam</span><span>(</span>args<span>)</span><span>;</span>
        result <span>=</span> <span>rowCountResult</span><span>(</span>sqlSession<span>.</span><span>update</span><span>(</span>command<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> param<span>)</span><span>)</span><span>;</span>
        <span>break</span><span>;</span>
      <span>}</span>
      <span>case</span> DELETE<span>:</span> <span>{</span>
        <span>Object</span> param <span>=</span> method<span>.</span><span>convertArgsToSqlCommandParam</span><span>(</span>args<span>)</span><span>;</span>
        result <span>=</span> <span>rowCountResult</span><span>(</span>sqlSession<span>.</span><span>delete</span><span>(</span>command<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> param<span>)</span><span>)</span><span>;</span>
        <span>break</span><span>;</span>
      <span>}</span>
    <span>.</span><span>.</span><span>.</span><span>.</span>  
    <span>return</span> result<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><div><pre><code><span>public</span> <span>Object</span> <span>convertArgsToSqlCommandParam</span><span>(</span><span>Object</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
    <span>return</span> paramNameResolver<span>.</span><span>getNamedParams</span><span>(</span>args<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>参数会被解析成什么样呢? 关键代码就在这里。</p>
<div><pre><code> <span>public</span> <span>Object</span> <span>getNamedParams</span><span>(</span><span>Object</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
    <span>final</span> <span>int</span> paramCount <span>=</span> names<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
    <span>// 没有参数直接返回</span>
    <span>if</span> <span>(</span>args <span>==</span> <span>null</span> <span>||</span> paramCount <span>==</span> <span>0</span><span>)</span> <span>{</span>
      <span>return</span> <span>null</span><span>;</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>!</span>hasParamAnnotation <span>&amp;&amp;</span> paramCount <span>==</span> <span>1</span><span>)</span> <span>{</span>
      <span>// 没有注解只有一个参数</span>
      <span>Object</span> value <span>=</span> args<span>[</span>names<span>.</span><span>firstKey</span><span>(</span><span>)</span><span>]</span><span>;</span>
      <span>return</span> <span>wrapToMapIfCollection</span><span>(</span>value<span>,</span> useActualParamName <span>?</span> names<span>.</span><span>get</span><span>(</span><span>0</span><span>)</span> <span>:</span> <span>null</span><span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>final</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Object</span><span>></span></span> param <span>=</span> <span>new</span> <span>ParamMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
      <span>int</span> i <span>=</span> <span>0</span><span>;</span>
      <span>// names key = 参数下标 value = @Param里面的值</span>
      <span>for</span> <span>(</span><span>Map<span>.</span>Entry</span><span><span>&lt;</span><span>Integer</span><span>,</span> <span>String</span><span>></span></span> entry <span>:</span> names<span>.</span><span>entrySet</span><span>(</span><span>)</span><span>)</span> <span>{</span>
        <span>// key = @Param里面的值,value = args[index] 真实数据</span>
        param<span>.</span><span>put</span><span>(</span>entry<span>.</span><span>getValue</span><span>(</span><span>)</span><span>,</span> args<span>[</span>entry<span>.</span><span>getKey</span><span>(</span><span>)</span><span>]</span><span>)</span><span>;</span>
        <span>// 生成param1,参数</span>
        <span>final</span> <span>String</span> genericParamName <span>=</span> GENERIC_NAME_PREFIX <span>+</span> <span>(</span>i <span>+</span> <span>1</span><span>)</span><span>;</span>
        <span>// ensure not to overwrite parameter named with @Param</span>
        <span>if</span> <span>(</span><span>!</span>names<span>.</span><span>containsValue</span><span>(</span>genericParamName<span>)</span><span>)</span> <span>{</span>
          param<span>.</span><span>put</span><span>(</span>genericParamName<span>,</span> args<span>[</span>entry<span>.</span><span>getKey</span><span>(</span><span>)</span><span>]</span><span>)</span><span>;</span>
        <span>}</span>
        i<span>++</span><span>;</span>
      <span>}</span>
      <span>return</span> param<span>;</span>
    <span>}</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>我们直接说结论,如果方法签名中使用了@Param注解结论,则占位符中的参数名就是注解的值。如果没有注解在就是arg+参数的位置.</p>
<p><code>com.test.example04.MethodSignatureTest</code></p>
<table>
<thead>
<tr>
<th style="text-align:left">参数类型</th>
<th style="text-align:left">方法签名</th>
<th style="text-align:left">参数值</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">解析单参数不带@Param</td>
<td style="text-align:left">TUser queryUserByName(String name)</td>
<td style="text-align:left">methodSignature.convertArgsToSqlCommandParam(new Object[]{&quot;孙悟空&quot;})</td>
<td style="text-align:left">孙悟空</td>
</tr>
<tr>
<td style="text-align:left">解析单参数带@Param</td>
<td style="text-align:left">TUser queryUserById(@Param(&quot;userId&quot;) Long id)</td>
<td style="text-align:left">methodSignature.convertArgsToSqlCommandParam(new Object[]{1L})</td>
<td style="text-align:left">{userId=1, param1=1}</td>
</tr>
<tr>
<td style="text-align:left">解析多参数不带@Param</td>
<td style="text-align:left">TUser queryUserByTokenId(Long tokenId,String name)</td>
<td style="text-align:left">methodSignature.convertArgsToSqlCommandParam(new Object[]{1L, &quot;孙悟空&quot;})</td>
<td style="text-align:left">{arg0=1, arg1=孙悟空, param1=1, param2=孙悟空}</td>
</tr>
<tr>
<td style="text-align:left">解析多参数带@Param</td>
<td style="text-align:left">TUser queryUserByTokenId(@Param(&quot;tokenId&quot;) Long tokenId, @Param(&quot;name&quot;) String name)</td>
<td style="text-align:left">methodSignature.convertArgsToSqlCommandParam(new Object[]{1L, &quot;孙悟空&quot;})</td>
<td style="text-align:left">{tokenId=1, name=孙悟空, param1=1, param2=孙悟空}</td>
</tr>
</tbody>
</table>
<p>如果项目编译中设置了编译后保存参数名，那么可以获取代码中编写的参数名。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649512062000.png" alt="" loading="lazy"></p>
<p>好了到这里我们知道方法的参数最终都会被Mybatis重新解析,解析后的结果可以看以上的表格。主要就是为拼装参数提前准备数据。下面我们看sql信息最终是如何最终组装的吧。</p>
<h3 id="_2-1-2-2-方法参数组装"> 2.1.2.2 方法参数组装</h3>
<p><img src="https://img.springlearn.cn/blog/learn_1649512620000.png" alt="" loading="lazy"></p>
<p>这里我们思考一下，变量符应该是动态sql,在调用jdbc时候应该是下面的例子。</p>
<div><pre><code> <span>PreparedStatement</span> preparedStatement <span>=</span> connection<span>.</span><span>prepareStatement</span><span>(</span><span>"select * from t_user where token_id = 0 or 1 = 1 and uid = 37"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>那么我们就寻找哪里有这样的代码。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649514573000.png" alt="" loading="lazy"></p>
<p>PreparedStatementHandler#instantiateStatement.</p>
<div><pre><code><span>@Override</span>
  <span>protected</span> <span>Statement</span> <span>instantiateStatement</span><span>(</span><span>Connection</span> connection<span>)</span> <span>throws</span> <span>SQLException</span> <span>{</span>
    <span>String</span> sql <span>=</span> boundSql<span>.</span><span>getSql</span><span>(</span><span>)</span><span>;</span>
    <span>if</span> <span>(</span>mappedStatement<span>.</span><span>getKeyGenerator</span><span>(</span><span>)</span> <span>instanceof</span> <span>Jdbc3KeyGenerator</span><span>)</span> <span>{</span>
      <span>String</span><span>[</span><span>]</span> keyColumnNames <span>=</span> mappedStatement<span>.</span><span>getKeyColumns</span><span>(</span><span>)</span><span>;</span>
      <span>if</span> <span>(</span>keyColumnNames <span>==</span> <span>null</span><span>)</span> <span>{</span>
        <span>return</span> connection<span>.</span><span>prepareStatement</span><span>(</span>sql<span>,</span> <span>PreparedStatement</span><span>.</span>RETURN_GENERATED_KEYS<span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>return</span> connection<span>.</span><span>prepareStatement</span><span>(</span>sql<span>,</span> keyColumnNames<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span>mappedStatement<span>.</span><span>getResultSetType</span><span>(</span><span>)</span> <span>==</span> <span>ResultSetType</span><span>.</span>DEFAULT<span>)</span> <span>{</span>
      <span>return</span> connection<span>.</span><span>prepareStatement</span><span>(</span>sql<span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>return</span> connection<span>.</span><span>prepareStatement</span><span>(</span>sql<span>,</span> mappedStatement<span>.</span><span>getResultSetType</span><span>(</span><span>)</span><span>.</span><span>getValue</span><span>(</span><span>)</span><span>,</span> <span>ResultSet</span><span>.</span>CONCUR_READ_ONLY<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>关键的代码就在这里静态sql,直接从MappedStatement#getBoundSql(Object parameterObject)#getSql()获取组装后的代码。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649514858000.png" alt="" loading="lazy"></p>
<div><pre><code>  <span>@Override</span>
  <span>public</span> <span><span>&lt;</span><span>E</span><span>></span></span> <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>doQuery</span><span>(</span><span>MappedStatement</span> ms<span>,</span> <span>Object</span> parameter<span>,</span> <span>RowBounds</span> rowBounds<span>,</span> <span>ResultHandler</span> resultHandler<span>,</span> <span>BoundSql</span> boundSql<span>)</span> <span>throws</span> <span>SQLException</span> <span>{</span>
    <span>Statement</span> stmt <span>=</span> <span>null</span><span>;</span>
    <span>try</span> <span>{</span>
      <span>Configuration</span> configuration <span>=</span> ms<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
      <span>StatementHandler</span> handler <span>=</span> configuration<span>.</span><span>newStatementHandler</span><span>(</span>wrapper<span>,</span> ms<span>,</span> parameter<span>,</span> rowBounds<span>,</span> resultHandler<span>,</span> boundSql<span>)</span><span>;</span>
      stmt <span>=</span> <span>prepareStatement</span><span>(</span>handler<span>,</span> ms<span>.</span><span>getStatementLog</span><span>(</span><span>)</span><span>)</span><span>;</span>
      <span>return</span> handler<span>.</span><span>query</span><span>(</span>stmt<span>,</span> resultHandler<span>)</span><span>;</span>
    <span>}</span> <span>finally</span> <span>{</span>
      <span>closeStatement</span><span>(</span>stmt<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
  
  <span>// 这里parameterObject就是前面对方法参数的解析返回值。通过mappedStatement.getBoundSql(parameterObject)组装静态sql</span>
  <span>protected</span> <span>PreparedStatementHandler</span><span>(</span><span>Executor</span> executor<span>,</span> <span>MappedStatement</span> mappedStatement<span>,</span> <span>Object</span> parameterObject<span>,</span> <span>RowBounds</span> rowBounds<span>,</span> <span>ResultHandler</span> resultHandler<span>,</span> <span>BoundSql</span> boundSql<span>)</span> <span>{</span>
    <span>this</span><span>.</span>configuration <span>=</span> mappedStatement<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
    <span>this</span><span>.</span>executor <span>=</span> executor<span>;</span>
    <span>this</span><span>.</span>mappedStatement <span>=</span> mappedStatement<span>;</span>
    <span>this</span><span>.</span>rowBounds <span>=</span> rowBounds<span>;</span>

    <span>this</span><span>.</span>typeHandlerRegistry <span>=</span> configuration<span>.</span><span>getTypeHandlerRegistry</span><span>(</span><span>)</span><span>;</span>
    <span>this</span><span>.</span>objectFactory <span>=</span> configuration<span>.</span><span>getObjectFactory</span><span>(</span><span>)</span><span>;</span>
    <span>if</span> <span>(</span>boundSql <span>==</span> <span>null</span><span>)</span> <span>{</span> <span>// issue #435, get the key before calculating the statement</span>
      <span>generateKeys</span><span>(</span>parameterObject<span>)</span><span>;</span>
      boundSql <span>=</span> mappedStatement<span>.</span><span>getBoundSql</span><span>(</span>parameterObject<span>)</span><span>;</span>
    <span>}</span>

    <span>this</span><span>.</span>boundSql <span>=</span> boundSql<span>;</span>
    <span>this</span><span>.</span>parameterHandler <span>=</span> configuration<span>.</span><span>newParameterHandler</span><span>(</span>mappedStatement<span>,</span> parameterObject<span>,</span> boundSql<span>)</span><span>;</span>
    <span>this</span><span>.</span>resultSetHandler <span>=</span> configuration<span>.</span><span>newResultSetHandler</span><span>(</span>executor<span>,</span> mappedStatement<span>,</span> rowBounds<span>,</span> parameterHandler<span>,</span> resultHandler<span>,</span> boundSql<span>)</span><span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><p>好了，到这里我们就知道静态sql是哪里组装的了。关键点就在BoundSql这个类是如何构建的。我们以注解方式举例。</p>
<p>在构建MappedStatement的时候,MapperBuilderAssistant#parse会解析Mapper类所有的方法,获取方法上的注解,生成Sql的信息。
判断sql类型,如果是${}变量符,Sql资源就是DynamicSqlSource动态Sql。如果是#{}占位符就是RawSqlSource会将占位符替换成<code>?</code>,同时生成ParameterMapping信息
用于方法执行时候使用PreparedStatement去set参数信息。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649520231000.png" alt="" loading="lazy"></p>
<p>下面我们以示例中的代码来看下BoundSql中究竟有什么信息。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649520894000.png" alt="" loading="lazy"></p>
<p>那么对于第一种DynamicSqlSource动态sql,参数信息是如何组装的呢?</p>
<div><pre><code><span>public</span> <span>class</span> <span>DynamicSqlSource</span> <span>implements</span> <span>SqlSource</span> <span>{</span>

  <span>private</span> <span>final</span> <span>Configuration</span> configuration<span>;</span>
  <span>private</span> <span>final</span> <span>SqlNode</span> rootSqlNode<span>;</span>

  <span>public</span> <span>DynamicSqlSource</span><span>(</span><span>Configuration</span> configuration<span>,</span> <span>SqlNode</span> rootSqlNode<span>)</span> <span>{</span>
    <span>this</span><span>.</span>configuration <span>=</span> configuration<span>;</span>
    <span>this</span><span>.</span>rootSqlNode <span>=</span> rootSqlNode<span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>BoundSql</span> <span>getBoundSql</span><span>(</span><span>Object</span> parameterObject<span>)</span> <span>{</span>
    <span>DynamicContext</span> context <span>=</span> <span>new</span> <span>DynamicContext</span><span>(</span>configuration<span>,</span> parameterObject<span>)</span><span>;</span>
    <span>// 处理sql中如果有&lt;if>&lt;where>&lt;Trim>等自带标签的情况,同时处理将变量符提供换成真正的参数。</span>
    rootSqlNode<span>.</span><span>apply</span><span>(</span>context<span>)</span><span>;</span>
    <span>// 当执行完上面的流程变量符就被替换成真正的参数了。下面在看是否同时也包含了#{}占位符,如果包含就替换成?</span>
    <span>// 在调换成?的同时新增一个ParameterMapping对象</span>
    <span>SqlSourceBuilder</span> sqlSourceParser <span>=</span> <span>new</span> <span>SqlSourceBuilder</span><span>(</span>configuration<span>)</span><span>;</span>
    <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> parameterType <span>=</span> parameterObject <span>==</span> <span>null</span> <span>?</span> <span>Object</span><span>.</span><span>class</span> <span>:</span> parameterObject<span>.</span><span>getClass</span><span>(</span><span>)</span><span>;</span>
    <span>SqlSource</span> sqlSource <span>=</span> sqlSourceParser<span>.</span><span>parse</span><span>(</span>context<span>.</span><span>getSql</span><span>(</span><span>)</span><span>,</span> parameterType<span>,</span> context<span>.</span><span>getBindings</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>BoundSql</span> boundSql <span>=</span> sqlSource<span>.</span><span>getBoundSql</span><span>(</span>parameterObject<span>)</span><span>;</span>
    context<span>.</span><span>getBindings</span><span>(</span><span>)</span><span>.</span><span>forEach</span><span>(</span>boundSql<span>::</span><span>setAdditionalParameter</span><span>)</span><span>;</span>
    <span>return</span> boundSql<span>;</span>
  <span>}</span>

<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>核心的方法就是变量符替换,下面直接将核心的代码展示出来。</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>dynamicSql</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"example05/mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
        <span>// 生成动态Sql</span>
        <span>TextSqlNode</span> textSqlNode <span>=</span> <span>new</span> <span>TextSqlNode</span><span>(</span><span>"select * from t_user where token_id = ${token_id} and uid = ${uid}"</span><span>)</span><span>;</span>
        <span>DynamicSqlSource</span> dynamicSqlSource <span>=</span> <span>new</span> <span>DynamicSqlSource</span><span>(</span>configuration<span>,</span> textSqlNode<span>)</span><span>;</span>

        <span>// 装参数</span>
        <span>MapperMethod<span>.</span>ParamMap</span><span><span>&lt;</span><span>Object</span><span>></span></span> paramMap <span>=</span> <span>new</span> <span>MapperMethod<span>.</span>ParamMap</span><span><span>&lt;</span><span>Object</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        paramMap<span>.</span><span>put</span><span>(</span><span>"uid"</span><span>,</span><span>37L</span><span>)</span><span>;</span>
        paramMap<span>.</span><span>put</span><span>(</span><span>"token_id"</span><span>,</span><span>"0 or 1 = 1"</span><span>)</span><span>;</span>
        <span>BoundSql</span> boundSql <span>=</span> dynamicSqlSource<span>.</span><span>getBoundSql</span><span>(</span>paramMap<span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>boundSql<span>.</span><span>getSql</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
    
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>dynamicSql2</span><span>(</span><span>)</span><span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"example05/mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>

        <span>// 装参数</span>
        <span>MapperMethod<span>.</span>ParamMap</span><span><span>&lt;</span><span>Object</span><span>></span></span> paramMap <span>=</span> <span>new</span> <span>MapperMethod<span>.</span>ParamMap</span><span><span>&lt;</span><span>Object</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        paramMap<span>.</span><span>put</span><span>(</span><span>"uid"</span><span>,</span><span>37L</span><span>)</span><span>;</span>
        paramMap<span>.</span><span>put</span><span>(</span><span>"token_id"</span><span>,</span><span>"0 or 1 = 1"</span><span>)</span><span>;</span>
        <span>DynamicContext</span> context <span>=</span> <span>new</span> <span>DynamicContext</span><span>(</span>configuration<span>,</span> paramMap<span>)</span><span>;</span>

        <span>// 生成动态Sql</span>
        <span>TextSqlNode</span> textSqlNode <span>=</span> <span>new</span> <span>TextSqlNode</span><span>(</span><span>"select * from t_user where token_id = ${token_id} and uid = ${uid}"</span><span>)</span><span>;</span>
        textSqlNode<span>.</span><span>apply</span><span>(</span>context<span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>context<span>.</span><span>getSql</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><p>好了，我们知道动态sql其实就是${}，变量符号替换。
下面我们看静态sql是如何处理占位符的吧。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649523284000.png" alt="" loading="lazy"></p>
<p>前面我们说了静态sql,在初始化时候就会将占位符替换成? 同时生成一个ParameterMapping对象,然后在执行sql时候通过PreparedStatement进行set参数信息。
那么我们先看占位符如何替换成?的吧。实现逻辑其实就在RawSqlSource的构造方法中。</p>
<ul>
<li>line(1-5) 在Mybatis初始化时候,会生成RawSqlSource。在构造中去调换占位符</li>
<li>line(8-19) 占位符替换的实现方式,最终生成StaticSqlSource</li>
<li>line(22-28) 占位符返回?的同时,生成一个ParameterMapping对象</li>
</ul>
<div><div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br></div><pre><code><span>public</span> <span>RawSqlSource</span><span>(</span><span>Configuration</span> configuration<span>,</span> <span>String</span> sql<span>,</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> parameterType<span>)</span> <span>{</span>
    <span>SqlSourceBuilder</span> sqlSourceParser <span>=</span> <span>new</span> <span>SqlSourceBuilder</span><span>(</span>configuration<span>)</span><span>;</span>
    <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> clazz <span>=</span> parameterType <span>==</span> <span>null</span> <span>?</span> <span>Object</span><span>.</span><span>class</span> <span>:</span> parameterType<span>;</span>
    sqlSource <span>=</span> sqlSourceParser<span>.</span><span>parse</span><span>(</span>sql<span>,</span> clazz<span>,</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>}</span>
  
<span>// sql = select * from t_user where token_id = #{token_id} and uid = #{uid}</span>
<span>public</span> <span>SqlSource</span> <span>parse</span><span>(</span><span>String</span> originalSql<span>,</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> parameterType<span>,</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Object</span><span>></span></span> additionalParameters<span>)</span> <span>{</span>
    <span>ParameterMappingTokenHandler</span> handler <span>=</span> <span>new</span> <span>ParameterMappingTokenHandler</span><span>(</span>configuration<span>,</span> parameterType<span>,</span> additionalParameters<span>)</span><span>;</span>
    <span>// 对</span>
    <span>GenericTokenParser</span> parser <span>=</span> <span>new</span> <span>GenericTokenParser</span><span>(</span><span>"#{"</span><span>,</span> <span>"}"</span><span>,</span> handler<span>)</span><span>;</span>
    <span>String</span> sql<span>;</span>
    <span>if</span> <span>(</span>configuration<span>.</span><span>isShrinkWhitespacesInSql</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      sql <span>=</span> parser<span>.</span><span>parse</span><span>(</span><span>removeExtraWhitespaces</span><span>(</span>originalSql<span>)</span><span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      sql <span>=</span> parser<span>.</span><span>parse</span><span>(</span>originalSql<span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> <span>new</span> <span>StaticSqlSource</span><span>(</span>configuration<span>,</span> sql<span>,</span> handler<span>.</span><span>getParameterMappings</span><span>(</span><span>)</span><span>)</span><span>;</span>
  <span>}</span>
 
 <span>// 会将占位符号#{token_id}替换成 ？同时生成一个ParameterMapping对象。</span>
 <span>private</span> <span>static</span> <span>class</span> <span>ParameterMappingTokenHandler</span> <span>extends</span> <span>BaseBuilder</span> <span>implements</span> <span>TokenHandler</span> <span>{</span>
    <span>// content = token_id</span>
    <span>@Override</span>
    <span>public</span> <span>String</span> <span>handleToken</span><span>(</span><span>String</span> content<span>)</span> <span>{</span>
      parameterMappings<span>.</span><span>add</span><span>(</span><span>buildParameterMapping</span><span>(</span>content<span>)</span><span>)</span><span>;</span>
      <span>return</span> <span>"?"</span><span>;</span>
    <span>}</span>
 <span>}</span>  
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>到这里占位符的解析已经很清楚了。BoundSql中的数据我们也知道了，我们直接看参数组装的逻辑吧。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649524815000.png" alt="" loading="lazy"></p>
<ol>
<li>从boundSql中获取占位符信息。</li>
<li>根据占位符获取参数信息</li>
<li>根据参数类型确定使用那个TypeHandler，如果都没有指定就用UnknownTypeHandler</li>
<li>UnknownTypeHandler会根据参数的类型，从默认配置中找到要用的类型,如果是Long类型就是PreparedStatement#setLong，如果是String类型就是PreparedStatement#setString</li>
</ol>
<div><pre><code><span>public</span> <span>class</span> <span>DefaultParameterHandler</span> <span>implements</span> <span>ParameterHandler</span> <span>{</span>
  <span>@Override</span>
  <span>public</span> <span>void</span> <span>setParameters</span><span>(</span><span>PreparedStatement</span> ps<span>)</span> <span>{</span>
    <span>ErrorContext</span><span>.</span><span>instance</span><span>(</span><span>)</span><span>.</span><span>activity</span><span>(</span><span>"setting parameters"</span><span>)</span><span>.</span><span>object</span><span>(</span>mappedStatement<span>.</span><span>getParameterMap</span><span>(</span><span>)</span><span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>List</span><span><span>&lt;</span><span>ParameterMapping</span><span>></span></span> parameterMappings <span>=</span> boundSql<span>.</span><span>getParameterMappings</span><span>(</span><span>)</span><span>;</span>
    <span>if</span> <span>(</span>parameterMappings <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> parameterMappings<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
        <span>ParameterMapping</span> parameterMapping <span>=</span> parameterMappings<span>.</span><span>get</span><span>(</span>i<span>)</span><span>;</span>
        <span>if</span> <span>(</span>parameterMapping<span>.</span><span>getMode</span><span>(</span><span>)</span> <span>!=</span> <span>ParameterMode</span><span>.</span>OUT<span>)</span> <span>{</span>
          <span>Object</span> value<span>;</span>
          <span>String</span> propertyName <span>=</span> parameterMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>;</span>
          <span>if</span> <span>(</span>boundSql<span>.</span><span>hasAdditionalParameter</span><span>(</span>propertyName<span>)</span><span>)</span> <span>{</span> <span>// issue #448 ask first for additional params</span>
            value <span>=</span> boundSql<span>.</span><span>getAdditionalParameter</span><span>(</span>propertyName<span>)</span><span>;</span>
          <span>}</span> <span>else</span> <span>if</span> <span>(</span>parameterObject <span>==</span> <span>null</span><span>)</span> <span>{</span>
            value <span>=</span> <span>null</span><span>;</span>
          <span>}</span> <span>else</span> <span>if</span> <span>(</span>typeHandlerRegistry<span>.</span><span>hasTypeHandler</span><span>(</span>parameterObject<span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
            value <span>=</span> parameterObject<span>;</span>
          <span>}</span> <span>else</span> <span>{</span>
            <span>MetaObject</span> metaObject <span>=</span> configuration<span>.</span><span>newMetaObject</span><span>(</span>parameterObject<span>)</span><span>;</span>
            value <span>=</span> metaObject<span>.</span><span>getValue</span><span>(</span>propertyName<span>)</span><span>;</span>
          <span>}</span>
          <span>TypeHandler</span> typeHandler <span>=</span> parameterMapping<span>.</span><span>getTypeHandler</span><span>(</span><span>)</span><span>;</span>
          <span>JdbcType</span> jdbcType <span>=</span> parameterMapping<span>.</span><span>getJdbcType</span><span>(</span><span>)</span><span>;</span>
          <span>if</span> <span>(</span>value <span>==</span> <span>null</span> <span>&amp;&amp;</span> jdbcType <span>==</span> <span>null</span><span>)</span> <span>{</span>
            jdbcType <span>=</span> configuration<span>.</span><span>getJdbcTypeForNull</span><span>(</span><span>)</span><span>;</span>
          <span>}</span>
          <span>try</span> <span>{</span>
            typeHandler<span>.</span><span>setParameter</span><span>(</span>ps<span>,</span> i <span>+</span> <span>1</span><span>,</span> value<span>,</span> jdbcType<span>)</span><span>;</span>
          <span>}</span> <span>catch</span> <span>(</span><span>TypeException</span> <span>|</span> <span>SQLException</span> e<span>)</span> <span>{</span>
            <span>throw</span> <span>new</span> <span>TypeException</span><span>(</span><span>"Could not set parameters for mapping: "</span> <span>+</span> parameterMapping <span>+</span> <span>". Cause: "</span> <span>+</span> e<span>,</span> e<span>)</span><span>;</span>
          <span>}</span>
        <span>}</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>

<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><p>好了到这里我们就搞清楚Mybatis中的参数是如何组装的了。 以及Jdbc是如何执行sql的了。
这部分内容比较复杂，仅仅通过看是看不明白的，建议根据文中的代码自己走一边。加深理解。</p>
<p>下面我们看Mybatis是如何处理返回值的吧。</p>
<h2 id="_2-2-sql结果集是如何转换方法返回值的"> 2.2 Sql结果集是如何转换方法返回值的?</h2>
<p>我们重新回到PreparedStatementHandler中跟数据库打交道的地方,当PreparedStatement#execute发送sql给数据库后,最终处理结果集的类是
ResultHandler，下面我们就围绕这个类做分析。</p>
<div><pre><code>  <span>@Override</span>
  <span>public</span> <span><span>&lt;</span><span>E</span><span>></span></span> <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>query</span><span>(</span><span>Statement</span> statement<span>,</span> <span>ResultHandler</span> resultHandler<span>)</span> <span>throws</span> <span>SQLException</span> <span>{</span>
    <span>PreparedStatement</span> ps <span>=</span> <span>(</span><span>PreparedStatement</span><span>)</span> statement<span>;</span>
    ps<span>.</span><span>execute</span><span>(</span><span>)</span><span>;</span>
    <span>return</span> resultSetHandler<span>.</span><span>handleResultSets</span><span>(</span>ps<span>)</span><span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>ResultSetHandler,我们看接口定义,处理结果集就在这里了。我们再来看实现。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>ResultSetHandler</span> <span>{</span>

  <span><span>&lt;</span><span>E</span><span>></span></span> <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>handleResultSets</span><span>(</span><span>Statement</span> stmt<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>

  <span><span>&lt;</span><span>E</span><span>></span></span> <span>Cursor</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>handleCursorResultSets</span><span>(</span><span>Statement</span> stmt<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>

  <span>void</span> <span>handleOutputParameters</span><span>(</span><span>CallableStatement</span> cs<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>

<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>默认的实现DefaultResultSetHandler。Mybatis实现较为复杂，我们一开始可能看不懂。我们先用原生的jdbc来自己实现一边。
然后脑子里有一个思路，然后在根据思路来看DefaultResultSetHandler的实现吧。</p>
<h3 id="_2-2-1-jdbc提供的结果处理api"> 2.2.1 JDBC提供的结果处理API</h3>
<p>思路是statement执行完后会返回结果集ResultSet。
结果集包含了返回的数据及这些数据对应的字段信息。
然后拿到这些字段信息分别从结果集中获取数据。下面的代码如果明白了，我们就去看Mybatis中的源码</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>resultMetaData</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>String</span> dbUrl <span>=</span> <span>"jdbc:mysql://127.0.0.1:3306/test"</span><span>;</span>
        <span>String</span> user <span>=</span> <span>"root"</span><span>;</span>
        <span>String</span> pass <span>=</span> <span>"123456"</span><span>;</span>
        <span>// 1. 获取数据库连接</span>
        <span>Connection</span> connection <span>=</span> <span>DriverManager</span><span>.</span><span>getConnection</span><span>(</span>dbUrl<span>,</span> user<span>,</span> pass<span>)</span><span>;</span>
        <span>Statement</span> statement <span>=</span> connection<span>.</span><span>createStatement</span><span>(</span><span>)</span><span>;</span>
        <span>// 2. 执行sql语句获取结果集</span>
        <span>ResultSet</span> resultSet <span>=</span> statement<span>.</span><span>executeQuery</span><span>(</span><span>"select uid,name,token_id as tokenId from T_User"</span><span>)</span><span>;</span>
        <span>// 3. 从结果集中，获取数据库返回的数据列名</span>
        <span>ResultSetMetaData</span> metaData <span>=</span> resultSet<span>.</span><span>getMetaData</span><span>(</span><span>)</span><span>;</span>
        <span>int</span> columnCount <span>=</span> metaData<span>.</span><span>getColumnCount</span><span>(</span><span>)</span><span>;</span>
        <span>// 所有的列名</span>
        <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> columnNames <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        <span>// 列名对应的java类型</span>
        <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Class</span><span>&lt;</span><span>?</span><span>></span><span>></span></span> column2JavaTypeAsMap <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> columnCount<span>;</span> i<span>++</span><span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"字段:"</span> <span>+</span> metaData<span>.</span><span>getColumnName</span><span>(</span>i<span>)</span> <span>+</span> <span>"是否自增:"</span> <span>+</span> metaData<span>.</span><span>isAutoIncrement</span><span>(</span>i<span>)</span><span>)</span><span>;</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"字段名:"</span> <span>+</span> metaData<span>.</span><span>getColumnName</span><span>(</span>i<span>)</span><span>)</span><span>;</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"字段别名:"</span> <span>+</span> metaData<span>.</span><span>getColumnLabel</span><span>(</span>i<span>)</span><span>)</span><span>;</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"MySql字段类型:"</span> <span>+</span> metaData<span>.</span><span>getColumnTypeName</span><span>(</span>i<span>)</span><span>)</span><span>;</span>
            <span>// Java 类的完全限定名称</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"Java字段类型:"</span> <span>+</span> metaData<span>.</span><span>getColumnClassName</span><span>(</span>i<span>)</span><span>)</span><span>;</span>
            <span>// 获取指定列的指定列大小。</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"字段长度:"</span> <span>+</span> metaData<span>.</span><span>getPrecision</span><span>(</span>i<span>)</span><span>)</span><span>;</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"字段保留小数位:"</span> <span>+</span> metaData<span>.</span><span>getScale</span><span>(</span>i<span>)</span><span>)</span><span>;</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"字段属于的表名:"</span> <span>+</span> metaData<span>.</span><span>getTableName</span><span>(</span>i<span>)</span><span>)</span><span>;</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"是否可为空:"</span> <span>+</span> metaData<span>.</span><span>isNullable</span><span>(</span>i<span>)</span><span>)</span><span>;</span>
            <span>// 这里使用别名,如果没有别名的情况,别名跟字段名是一样的。</span>
            columnNames<span>.</span><span>add</span><span>(</span>metaData<span>.</span><span>getColumnLabel</span><span>(</span>i<span>)</span><span>)</span><span>;</span>
            column2JavaTypeAsMap<span>.</span><span>put</span><span>(</span>metaData<span>.</span><span>getColumnLabel</span><span>(</span>i<span>)</span><span>,</span> <span>Class</span><span>.</span><span>forName</span><span>(</span>metaData<span>.</span><span>getColumnClassName</span><span>(</span>i<span>)</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>
        <span>int</span> row <span>=</span> <span>1</span><span>;</span>
        <span>while</span> <span>(</span>resultSet<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"----------第"</span> <span>+</span> row <span>+</span> <span>"行数据开始----------"</span><span>)</span><span>;</span>
            <span>for</span> <span>(</span><span>String</span> columnName <span>:</span> columnNames<span>)</span> <span>{</span>
                <span>Object</span> columnValue <span>=</span> <span>getValue</span><span>(</span>columnName<span>,</span> resultSet<span>,</span> column2JavaTypeAsMap<span>)</span><span>;</span>
                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"列:"</span> <span>+</span> columnName <span>+</span> <span>":value:"</span> <span>+</span> columnValue<span>)</span><span>;</span>
            <span>}</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"----------第"</span> <span>+</span> row <span>+</span> <span>"行数据结束----------"</span><span>)</span><span>;</span>
            row<span>++</span><span>;</span>
        <span>}</span>
        resultSet<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
        statement<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
        connection<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>/**
     * 根据不同的字段类型,调用不同的方法获取数据
     *
     * @param columnName           列名
     * @param resultSet            集合集
     * @param column2JavaTypeAsMap 字段对应的Java类型
     * @return 结果值
     * @throws Exception 未知异常
     */</span>
    <span>public</span> <span>Object</span> <span>getValue</span><span>(</span><span>String</span> columnName<span>,</span> <span>ResultSet</span> resultSet<span>,</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Class</span><span>&lt;</span><span>?</span><span>></span><span>></span></span> column2JavaTypeAsMap<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> column2JavaType <span>=</span> column2JavaTypeAsMap<span>.</span><span>get</span><span>(</span>columnName<span>)</span><span>;</span>
        <span>Object</span> value <span>=</span> <span>null</span><span>;</span>
        <span>if</span> <span>(</span>column2JavaType<span>.</span><span>equals</span><span>(</span><span>Integer</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>
            value <span>=</span> resultSet<span>.</span><span>getInt</span><span>(</span>columnName<span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>if</span> <span>(</span>column2JavaType<span>.</span><span>equals</span><span>(</span><span>String</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>
            value <span>=</span> resultSet<span>.</span><span>getString</span><span>(</span>columnName<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> value<span>;</span>
    <span>}</span>
    
字段<span>:</span>uid是否自增<span>:</span><span>true</span>
字段名<span>:</span>uid
字段别名<span>:</span>uid
<span>MySql</span>字段类型<span>:</span>INT
<span>Java</span>字段类型<span>:</span><span><span>java<span>.</span>lang<span>.</span></span>Integer</span>
字段长度<span>:</span><span>11</span>
字段保留小数位<span>:</span><span>0</span>
字段属于的表名<span>:</span>t_user
是否可为空<span>:</span><span>0</span>
字段<span>:</span>name是否自增<span>:</span><span>false</span>
字段名<span>:</span>name
字段别名<span>:</span>name
<span>MySql</span>字段类型<span>:</span>CHAR
<span>Java</span>字段类型<span>:</span><span><span>java<span>.</span>lang<span>.</span></span>String</span>
字段长度<span>:</span><span>32</span>
字段保留小数位<span>:</span><span>0</span>
字段属于的表名<span>:</span>t_user
是否可为空<span>:</span><span>1</span>
字段<span>:</span>token_id是否自增<span>:</span><span>false</span>
字段名<span>:</span>token_id
字段别名<span>:</span>tokenId
<span>MySql</span>字段类型<span>:</span>CHAR
<span>Java</span>字段类型<span>:</span><span><span>java<span>.</span>lang<span>.</span></span>String</span>
字段长度<span>:</span><span>64</span>
字段保留小数位<span>:</span><span>0</span>
字段属于的表名<span>:</span>t_user
是否可为空<span>:</span><span>0</span>
<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>第<span>1</span>行数据开始<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>
列<span>:</span>uid<span>:</span>value<span>:</span><span>37</span>
列<span>:</span>name<span>:</span>value<span>:</span>无天
列<span>:</span>tokenId<span>:</span>value<span>:</span><span>60</span>
<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>第<span>1</span>行数据结束<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>
<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>第<span>2</span>行数据开始<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>
列<span>:</span>uid<span>:</span>value<span>:</span><span>9846</span>
列<span>:</span>name<span>:</span>value<span>:</span>斗战胜佛
列<span>:</span>tokenId<span>:</span>value<span>:</span><span>80</span>
<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>第<span>2</span>行数据结束<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>
<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>第<span>3</span>行数据开始<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>
列<span>:</span>uid<span>:</span>value<span>:</span><span>9847</span>
列<span>:</span>name<span>:</span>value<span>:</span>净坛使者
列<span>:</span>tokenId<span>:</span>value<span>:</span><span>90</span>
<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>第<span>3</span>行数据结束<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>
<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>第<span>4</span>行数据开始<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>
列<span>:</span>uid<span>:</span>value<span>:</span><span>9848</span>
列<span>:</span>name<span>:</span>value<span>:</span>无量功德佛祖
列<span>:</span>tokenId<span>:</span>value<span>:</span><span>100</span>
<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>第<span>4</span>行数据结束<span>--</span><span>--</span><span>--</span><span>--</span><span>--</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br></div></div><p>ResultSetMetaData 方法是比较重要的，这里把他常用的api方法及解释以表格形式列举一下。
当我们拿到返回的列名，就可以直接根据列名来返回数据了。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">含义</th>
<th style="text-align:left">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ResultSetMetaData#getColumnName</td>
<td style="text-align:left">获取数据库字段名</td>
<td style="text-align:left">name</td>
</tr>
<tr>
<td style="text-align:left">ResultSetMetaData#getColumnLabel</td>
<td style="text-align:left">查询语句中字段别名,如果没有保持跟字段名一致</td>
<td style="text-align:left">user_id as userId,这里就是userId</td>
</tr>
<tr>
<td style="text-align:left">ResultSetMetaData#getColumnTypeName</td>
<td style="text-align:left">返回Sql字段类型</td>
<td style="text-align:left">INT、CHAR</td>
</tr>
<tr>
<td style="text-align:left">ResultSetMetaData#getColumnClassName</td>
<td style="text-align:left">返回Java字段类型的完整限定名</td>
<td style="text-align:left">java.lang.String、java.lang.Integer</td>
</tr>
<tr>
<td style="text-align:left">ResultSetMetaData#getPrecision</td>
<td style="text-align:left">获取定义的字段长度</td>
<td style="text-align:left">int(11),返回11</td>
</tr>
<tr>
<td style="text-align:left">ResultSetMetaData#getScale</td>
<td style="text-align:left">获取字段定义的保留小数位</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">ResultSetMetaData#getTableName</td>
<td style="text-align:left">字段对应的表</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">ResultSetMetaData#isNullable</td>
<td style="text-align:left">字段是否可以为空</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">ResultSetMetaData#isAutoIncrement</td>
<td style="text-align:left">是否数据库自增字段</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">ResultSetMetaData#isAutoIncrement</td>
<td style="text-align:left">是否数据库自增字段</td>
<td style="text-align:left">-</td>
</tr>
</tbody>
</table>
<h3 id="_2-2-2-mybatis获取结果集"> 2.2.2 Mybatis获取结果集</h3>
<p>思考下结果集可能是什么?</p>
<ol>
<li>场景一: 可能返回的是List</li>
</ol>
<div><pre><code>    <span>@Select</span><span>(</span><span>"select * from t_user"</span><span>)</span>
    <span>List</span><span><span>&lt;</span><span>TUser</span><span>></span></span> <span>queryAllUsers</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ol start="2">
<li>场景二: 可能返回的是单个对象</li>
</ol>
<div><pre><code>    <span>@Select</span><span>(</span><span>"select * from t_user where uid = #{uid}"</span><span>)</span>
    <span>TUser</span> <span>queryUserByPlaceholderId</span><span>(</span><span>@Param</span><span>(</span><span>"uid"</span><span>)</span> <span>Long</span> uid<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ol start="3">
<li>场景三: 更新语句返回结果集是条数。</li>
</ol>
<div><pre><code>    <span>@Update</span><span>(</span><span>"update t_user set name = #{name}"</span><span>)</span>
    <span>int</span> <span>updateName</span><span>(</span><span>@Param</span><span>(</span><span>"uid"</span><span>)</span> <span>Long</span> uid<span>,</span> <span>@Param</span><span>(</span><span>"name"</span><span>)</span> <span>String</span> name<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ol start="4">
<li>场景四: 更新语句返回boolean</li>
</ol>
<div><pre><code>    <span>@Update</span><span>(</span><span>"update t_user set name = #{name} where uid = #{uid}"</span><span>)</span>
    <span>boolean</span> <span>updateNameById</span><span>(</span><span>@Param</span><span>(</span><span>"uid"</span><span>)</span> <span>Long</span> uid<span>,</span> <span>@Param</span><span>(</span><span>"name"</span><span>)</span> <span>String</span> name<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>分别来分析。</p>
<h3 id="场景一"> 场景一:</h3>
<div><pre><code><span>public</span> <span>class</span> <span>MapperMethod</span> <span>{</span>
    <span>private</span> <span>final</span> <span>MethodSignature</span> method<span>;</span>
    <span>public</span> <span>Object</span> <span>execute</span><span>(</span><span>SqlSession</span> sqlSession<span>,</span> <span>Object</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
        <span>Object</span> result<span>;</span>
        <span>switch</span> <span>(</span>command<span>.</span><span>getType</span><span>(</span><span>)</span><span>)</span> <span>{</span>
          <span>case</span> SELECT<span>:</span>
            <span>if</span> <span>(</span>method<span>.</span><span>returnsVoid</span><span>(</span><span>)</span> <span>&amp;&amp;</span> method<span>.</span><span>hasResultHandler</span><span>(</span><span>)</span><span>)</span> <span>{</span>
              <span>executeWithResultHandler</span><span>(</span>sqlSession<span>,</span> args<span>)</span><span>;</span>
              result <span>=</span> <span>null</span><span>;</span>
            <span>}</span> <span>else</span> <span>if</span> <span>(</span>method<span>.</span><span>returnsMany</span><span>(</span><span>)</span><span>)</span> <span>{</span>
              result <span>=</span> <span>executeForMany</span><span>(</span>sqlSession<span>,</span> args<span>)</span><span>;</span>
            <span>}</span> <span>else</span> <span>if</span> <span>(</span>method<span>.</span><span>returnsMap</span><span>(</span><span>)</span><span>)</span> <span>{</span>
              result <span>=</span> <span>executeForMap</span><span>(</span>sqlSession<span>,</span> args<span>)</span><span>;</span>
            <span>}</span> <span>else</span> <span>if</span> <span>(</span>method<span>.</span><span>returnsCursor</span><span>(</span><span>)</span><span>)</span> <span>{</span>
              result <span>=</span> <span>executeForCursor</span><span>(</span>sqlSession<span>,</span> args<span>)</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>
              <span>Object</span> param <span>=</span> method<span>.</span><span>convertArgsToSqlCommandParam</span><span>(</span>args<span>)</span><span>;</span>
              result <span>=</span> sqlSession<span>.</span><span>selectOne</span><span>(</span>command<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> param<span>)</span><span>;</span>
              <span>if</span> <span>(</span>method<span>.</span><span>returnsOptional</span><span>(</span><span>)</span>
                  <span>&amp;&amp;</span> <span>(</span>result <span>==</span> <span>null</span> <span>||</span> <span>!</span>method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>result<span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span><span>)</span><span>)</span> <span>{</span>
                result <span>=</span> <span>Optional</span><span>.</span><span>ofNullable</span><span>(</span>result<span>)</span><span>;</span>
              <span>}</span>
            <span>}</span>
            <span>break</span><span>;</span>
          <span>case</span> FLUSH<span>:</span>
            result <span>=</span> sqlSession<span>.</span><span>flushStatements</span><span>(</span><span>)</span><span>;</span>
            <span>break</span><span>;</span>
          <span>default</span><span>:</span>
            <span>throw</span> <span>new</span> <span>BindingException</span><span>(</span><span>"Unknown execution method for: "</span> <span>+</span> command<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>
        <span>if</span> <span>(</span>result <span>==</span> <span>null</span> <span>&amp;&amp;</span> method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>.</span><span>isPrimitive</span><span>(</span><span>)</span> <span>&amp;&amp;</span> <span>!</span>method<span>.</span><span>returnsVoid</span><span>(</span><span>)</span><span>)</span> <span>{</span>
          <span>throw</span> <span>new</span> <span>BindingException</span><span>(</span><span>"Mapper method '"</span> <span>+</span> command<span>.</span><span>getName</span><span>(</span><span>)</span>
              <span>+</span> <span>" attempted to return null from a method with a primitive return type ("</span> <span>+</span> method<span>.</span><span>getReturnType</span><span>(</span><span>)</span> <span>+</span> <span>")."</span><span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> result<span>;</span>
      <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><p>可以看到这里对于方法的返回值判断是根据MethodSignature,MethodSignature不仅提供了对参数的解析,同时也是对方法的分析。
包括判断方法的返回值，我们看它的内部属性。</p>
<div><pre><code> <span>public</span> <span>static</span> <span>class</span> <span>MethodSignature</span> <span>{</span>
    <span>// 是否返回集合</span>
    <span>private</span> <span>final</span> <span>boolean</span> returnsMany<span>;</span>
    <span>// 是否返回是map结构</span>
    <span>private</span> <span>final</span> <span>boolean</span> returnsMap<span>;</span>
    <span>// 是否没有返回值</span>
    <span>private</span> <span>final</span> <span>boolean</span> returnsVoid<span>;</span>
    <span>// 是否返回的是游标</span>
    <span>private</span> <span>final</span> <span>boolean</span> returnsCursor<span>;</span>
    <span>// 是否返回的是Optional对象</span>
    <span>private</span> <span>final</span> <span>boolean</span> returnsOptional<span>;</span>
    <span>// 返回值类型</span>
    <span>private</span> <span>final</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> returnType<span>;</span>
    <span>// 返回map结构使用的key字段</span>
    <span>private</span> <span>final</span> <span>String</span> mapKey<span>;</span>
    <span>// 如果入参是ResultHandler 记录器下标</span>
    <span>private</span> <span>final</span> <span>Integer</span> resultHandlerIndex<span>;</span>
    <span>// 如果参数是RowBounds，记录其下标</span>
    <span>private</span> <span>final</span> <span>Integer</span> rowBoundsIndex<span>;</span>
    <span>// 参数处理</span>
    <span>private</span> <span>final</span> <span>ParamNameResolver</span> paramNameResolver<span>;</span>
    
  <span>}</span>  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>如果发现是返回List。则MethodSignature#returnsMany=true。直接调用SqlSession#selectList</p>
<div><pre><code><span>private</span> <span><span>&lt;</span><span>E</span><span>></span></span> <span>Object</span> <span>executeForMany</span><span>(</span><span>SqlSession</span> sqlSession<span>,</span> <span>Object</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
    <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> result<span>;</span>
    <span>Object</span> param <span>=</span> method<span>.</span><span>convertArgsToSqlCommandParam</span><span>(</span>args<span>)</span><span>;</span>
    <span>// 方法中是否包含逻辑分页参数RowBounds</span>
    <span>if</span> <span>(</span>method<span>.</span><span>hasRowBounds</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>// 如果有就获取逻辑分页参数</span>
      <span>RowBounds</span> rowBounds <span>=</span> method<span>.</span><span>extractRowBounds</span><span>(</span>args<span>)</span><span>;</span>
      <span>// 执行sql</span>
      result <span>=</span> sqlSession<span>.</span><span>selectList</span><span>(</span>command<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> param<span>,</span> rowBounds<span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      result <span>=</span> sqlSession<span>.</span><span>selectList</span><span>(</span>command<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> param<span>)</span><span>;</span>
    <span>}</span>
    <span>// issue #510 Collections &amp; arrays support</span>
    <span>if</span> <span>(</span><span>!</span>method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>.</span><span>isAssignableFrom</span><span>(</span>result<span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>.</span><span>isArray</span><span>(</span><span>)</span><span>)</span> <span>{</span>
        <span>return</span> <span>convertToArray</span><span>(</span>result<span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>return</span> <span>convertToDeclaredCollection</span><span>(</span>sqlSession<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>,</span> result<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span>
    <span>return</span> result<span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>最终在DefaultResultSetHandler#handleResultSets处理返回值。下面的代码看了先不要害怕,其实
思路跟我们用jdbc来处理是一样的。第一要拿到返回的数据信息。第二要将返回的数据信息包装成方法的返回值。
只不过Mybatis将上面的两个能力,都提供成了对应的接口。其中数据的返回集就是ResultSetWrapper,从返回集中获取数据是TypeHandler。
而将数据库返回的行数据，转换成方法的返回值就要用到ResultMap。</p>
<div><pre><code>  <span>@Override</span>
  <span>public</span> <span>List</span><span><span>&lt;</span><span>Object</span><span>></span></span> <span>handleResultSets</span><span>(</span><span>Statement</span> stmt<span>)</span> <span>throws</span> <span>SQLException</span> <span>{</span>
    <span>ErrorContext</span><span>.</span><span>instance</span><span>(</span><span>)</span><span>.</span><span>activity</span><span>(</span><span>"handling results"</span><span>)</span><span>.</span><span>object</span><span>(</span>mappedStatement<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>;</span>

    <span>final</span> <span>List</span><span><span>&lt;</span><span>Object</span><span>></span></span> multipleResults <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>

    <span>int</span> resultSetCount <span>=</span> <span>0</span><span>;</span>
    <span>// 读取返回的数据信息(jdbcType,javaType,列名和别名)</span>
    <span>ResultSetWrapper</span> rsw <span>=</span> <span>getFirstResultSet</span><span>(</span>stmt<span>)</span><span>;</span>
    <span>// Mapper签名中找到返回集应该信息</span>
    <span>List</span><span><span>&lt;</span><span>ResultMap</span><span>></span></span> resultMaps <span>=</span> mappedStatement<span>.</span><span>getResultMaps</span><span>(</span><span>)</span><span>;</span>
    <span>int</span> resultMapCount <span>=</span> resultMaps<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
    <span>// 做个校验,如果sql执行后没有任何返回信息，但是Mapper签名中却指定了返回映射信息。则会报错告警 A query was run and no Result Maps were found for the Mapped Statement</span>
    <span>validateResultMapsCount</span><span>(</span>rsw<span>,</span> resultMapCount<span>)</span><span>;</span>
    <span>while</span> <span>(</span>rsw <span>!=</span> <span>null</span> <span>&amp;&amp;</span> resultMapCount <span>></span> resultSetCount<span>)</span> <span>{</span>
      <span>ResultMap</span> resultMap <span>=</span> resultMaps<span>.</span><span>get</span><span>(</span>resultSetCount<span>)</span><span>;</span>
      <span>// 处理返回集</span>
      <span>handleResultSet</span><span>(</span>rsw<span>,</span> resultMap<span>,</span> multipleResults<span>,</span> <span>null</span><span>)</span><span>;</span>
      rsw <span>=</span> <span>getNextResultSet</span><span>(</span>stmt<span>)</span><span>;</span>
      <span>cleanUpAfterHandlingResultSet</span><span>(</span><span>)</span><span>;</span>
      resultSetCount<span>++</span><span>;</span>
    <span>}</span>

    <span>String</span><span>[</span><span>]</span> resultSets <span>=</span> mappedStatement<span>.</span><span>getResultSets</span><span>(</span><span>)</span><span>;</span>
    <span>if</span> <span>(</span>resultSets <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>while</span> <span>(</span>rsw <span>!=</span> <span>null</span> <span>&amp;&amp;</span> resultSetCount <span>&lt;</span> resultSets<span>.</span>length<span>)</span> <span>{</span>
        <span>ResultMapping</span> parentMapping <span>=</span> nextResultMaps<span>.</span><span>get</span><span>(</span>resultSets<span>[</span>resultSetCount<span>]</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>parentMapping <span>!=</span> <span>null</span><span>)</span> <span>{</span>
          <span>String</span> nestedResultMapId <span>=</span> parentMapping<span>.</span><span>getNestedResultMapId</span><span>(</span><span>)</span><span>;</span>
          <span>ResultMap</span> resultMap <span>=</span> configuration<span>.</span><span>getResultMap</span><span>(</span>nestedResultMapId<span>)</span><span>;</span>
          <span>handleResultSet</span><span>(</span>rsw<span>,</span> resultMap<span>,</span> <span>null</span><span>,</span> parentMapping<span>)</span><span>;</span>
        <span>}</span>
        rsw <span>=</span> <span>getNextResultSet</span><span>(</span>stmt<span>)</span><span>;</span>
        <span>cleanUpAfterHandlingResultSet</span><span>(</span><span>)</span><span>;</span>
        resultSetCount<span>++</span><span>;</span>
      <span>}</span>
    <span>}</span>

    <span>return</span> <span>collapseSingleResultList</span><span>(</span>multipleResults<span>)</span><span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><p>下面我们看这几个关键类。ResultSetWrapper。这个的源码是不是有点想我们前面自己写的原生jdbc的方法了?
拿到返回的列名和对应的java类型。</p>
<div><pre><code> <span>public</span> <span>ResultSetWrapper</span><span>(</span><span>ResultSet</span> rs<span>,</span> <span>Configuration</span> configuration<span>)</span> <span>throws</span> <span>SQLException</span> <span>{</span>
    <span>super</span><span>(</span><span>)</span><span>;</span>
    <span>this</span><span>.</span>typeHandlerRegistry <span>=</span> configuration<span>.</span><span>getTypeHandlerRegistry</span><span>(</span><span>)</span><span>;</span>
    <span>this</span><span>.</span>resultSet <span>=</span> rs<span>;</span>
    <span>final</span> <span>ResultSetMetaData</span> metaData <span>=</span> rs<span>.</span><span>getMetaData</span><span>(</span><span>)</span><span>;</span>
    <span>final</span> <span>int</span> columnCount <span>=</span> metaData<span>.</span><span>getColumnCount</span><span>(</span><span>)</span><span>;</span>
    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> columnCount<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      columnNames<span>.</span><span>add</span><span>(</span>configuration<span>.</span><span>isUseColumnLabel</span><span>(</span><span>)</span> <span>?</span> metaData<span>.</span><span>getColumnLabel</span><span>(</span>i<span>)</span> <span>:</span> metaData<span>.</span><span>getColumnName</span><span>(</span>i<span>)</span><span>)</span><span>;</span>
      jdbcTypes<span>.</span><span>add</span><span>(</span><span>JdbcType</span><span>.</span><span>forCode</span><span>(</span>metaData<span>.</span><span>getColumnType</span><span>(</span>i<span>)</span><span>)</span><span>)</span><span>;</span>
      classNames<span>.</span><span>add</span><span>(</span>metaData<span>.</span><span>getColumnClassName</span><span>(</span>i<span>)</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>TypeHandler 是从jdbc中获取数据的接口，这个功能就跟前面我们用原生API实现时候的getValue方法类似。
主要是根据数据的类型，来确定是调用ResultSet#getString还是调用ResultSet#getInt等方法。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>TypeHandler</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>{</span>

  <span>void</span> <span>setParameter</span><span>(</span><span>PreparedStatement</span> ps<span>,</span> <span>int</span> i<span>,</span> <span>T</span> parameter<span>,</span> <span>JdbcType</span> jdbcType<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>

  <span>T</span> <span>getResult</span><span>(</span><span>ResultSet</span> rs<span>,</span> <span>String</span> columnName<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>

  <span>T</span> <span>getResult</span><span>(</span><span>CallableStatement</span> cs<span>,</span> <span>int</span> columnIndex<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>ResultMap 是返回数据对应的Java对象。会在生成MappedStatement时候构建完成。如果是在xml中定义了就是 <code>&lt;resultMap/&gt;</code> 标签,如果没有就是
根据返回类自动生成一个resultMap。可以看到这个类属性其实跟他的标签是一样的。</p>
<div><pre><code><span>public</span> <span>class</span> <span>ResultMap</span> <span>{</span>
  <span>private</span> <span>Configuration</span> configuration<span>;</span>

  <span>// 如果配置了&lt;resultMap id="BaseResultMap" ，就是类全路径名+BaseResultMap。如果没有就是类名加方法名+Inline</span>
  <span>private</span> <span>String</span> id<span>;</span>
  <span>private</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> type<span>;</span>
  <span>private</span> <span>List</span><span><span>&lt;</span><span>ResultMapping</span><span>></span></span> resultMappings<span>;</span>
  <span>private</span> <span>List</span><span><span>&lt;</span><span>ResultMapping</span><span>></span></span> idResultMappings<span>;</span>
  <span>private</span> <span>List</span><span><span>&lt;</span><span>ResultMapping</span><span>></span></span> constructorResultMappings<span>;</span>
  <span>private</span> <span>List</span><span><span>&lt;</span><span>ResultMapping</span><span>></span></span> propertyResultMappings<span>;</span>
  <span>private</span> <span>Set</span><span><span>&lt;</span><span>String</span><span>></span></span> mappedColumns<span>;</span>
  <span>private</span> <span>Set</span><span><span>&lt;</span><span>String</span><span>></span></span> mappedProperties<span>;</span>
  <span>private</span> <span>Discriminator</span> discriminator<span>;</span>
  <span>private</span> <span>boolean</span> hasNestedResultMaps<span>;</span>
  <span>private</span> <span>boolean</span> hasNestedQueries<span>;</span>
  <span>private</span> <span>Boolean</span> autoMapping<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>ResultMap的标签功能比较强大,我们深入研究下。举一个例子。</p>
<div><pre><code><span>/**
 * 一个学校，一个校长，多个学生
 * name,headMaster(id,name),users()
 * 2022/4/10 22:07
 */</span>
<span>@Data</span>
<span>public</span> <span>class</span> <span>School</span> <span>{</span>

    <span>private</span> <span>Long</span> id<span>;</span>

    <span>private</span> <span>String</span> name<span>;</span>

    <span>private</span> <span>SchoolHeadMaster</span> schoolHeadMaster<span>;</span>

    <span>private</span> <span>List</span><span><span>&lt;</span><span>Student</span><span>></span></span> students<span>;</span>

<span>}</span>
<span>@Data</span>
<span>public</span> <span>class</span> <span>SchoolHeadMaster</span> <span>{</span>

    <span>private</span> <span>Long</span> id<span>;</span>

    <span>private</span> <span>String</span> name<span>;</span>
<span>}</span>

<span>@Data</span>
<span>public</span> <span>class</span> <span>Student</span> <span>{</span>

    <span>private</span> <span>Long</span> id<span>;</span>

    <span>private</span> <span>String</span> name<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>配置文件如下</p>
<div><pre><code><span><span><span>&lt;</span>mapper</span> <span>namespace</span><span><span>=</span><span>"</span>orm.example.dal.mapper.SchoolMapper<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>resultMap</span> <span>id</span><span><span>=</span><span>"</span>BaseResultMap<span>"</span></span> <span>type</span><span><span>=</span><span>"</span>orm.example.dal.model.TUser<span>"</span></span><span>></span></span>
        <span><span><span>&lt;</span>id</span> <span>column</span><span><span>=</span><span>"</span>token_id<span>"</span></span> <span>jdbcType</span><span><span>=</span><span>"</span>CHAR<span>"</span></span> <span>property</span><span><span>=</span><span>"</span>tokenId<span>"</span></span><span>/></span></span>
        <span><span><span>&lt;</span>result</span> <span>column</span><span><span>=</span><span>"</span>uid<span>"</span></span> <span>jdbcType</span><span><span>=</span><span>"</span>INTEGER<span>"</span></span> <span>property</span><span><span>=</span><span>"</span>uid<span>"</span></span><span>/></span></span>
        <span><span><span>&lt;</span>result</span> <span>column</span><span><span>=</span><span>"</span>name<span>"</span></span> <span>jdbcType</span><span><span>=</span><span>"</span>CHAR<span>"</span></span> <span>property</span><span><span>=</span><span>"</span>name<span>"</span></span><span>/></span></span>
    <span><span><span>&lt;/</span>resultMap</span><span>></span></span>

    <span><span><span>&lt;</span>resultMap</span> <span>id</span><span><span>=</span><span>"</span>schoolResultMap<span>"</span></span> <span>type</span><span><span>=</span><span>"</span>orm.example.dal.model.School<span>"</span></span><span>></span></span>
        <span><span><span>&lt;</span>result</span> <span>column</span><span><span>=</span><span>"</span>schoolId<span>"</span></span> <span>jdbcType</span><span><span>=</span><span>"</span>CHAR<span>"</span></span> <span>property</span><span><span>=</span><span>"</span>id<span>"</span></span><span>/></span></span>
        <span><span><span>&lt;</span>result</span> <span>column</span><span><span>=</span><span>"</span>schoolName<span>"</span></span> <span>jdbcType</span><span><span>=</span><span>"</span>CHAR<span>"</span></span> <span>property</span><span><span>=</span><span>"</span>name<span>"</span></span><span>/></span></span>
        <span>&lt;!--        学校校长跟学校关系1对1--></span>
        <span><span><span>&lt;</span>association</span> <span>property</span><span><span>=</span><span>"</span>schoolHeadMaster<span>"</span></span> <span>javaType</span><span><span>=</span><span>"</span>orm.example.dal.model.SchoolHeadMaster<span>"</span></span><span>></span></span>
            <span><span><span>&lt;</span>id</span> <span>column</span><span><span>=</span><span>"</span>hmId<span>"</span></span> <span>property</span><span><span>=</span><span>"</span>id<span>"</span></span><span>/></span></span>
            <span><span><span>&lt;</span>result</span> <span>column</span><span><span>=</span><span>"</span>schoolHeadName<span>"</span></span> <span>jdbcType</span><span><span>=</span><span>"</span>CHAR<span>"</span></span> <span>property</span><span><span>=</span><span>"</span>name<span>"</span></span><span>/></span></span>
        <span><span><span>&lt;/</span>association</span><span>></span></span>
        <span>&lt;!--        学生关系是1对n--></span>
        <span><span><span>&lt;</span>collection</span> <span>property</span><span><span>=</span><span>"</span>students<span>"</span></span> <span>javaType</span><span><span>=</span><span>"</span>list<span>"</span></span> <span>ofType</span><span><span>=</span><span>"</span>orm.example.dal.model.Student<span>"</span></span><span>></span></span>
            <span><span><span>&lt;</span>id</span> <span>column</span><span><span>=</span><span>"</span>studentId<span>"</span></span> <span>property</span><span><span>=</span><span>"</span>id<span>"</span></span><span>/></span></span>
            <span><span><span>&lt;</span>result</span> <span>column</span><span><span>=</span><span>"</span>studentName<span>"</span></span> <span>jdbcType</span><span><span>=</span><span>"</span>CHAR<span>"</span></span> <span>property</span><span><span>=</span><span>"</span>name<span>"</span></span><span>/></span></span>
        <span><span><span>&lt;/</span>collection</span><span>></span></span>
    <span><span><span>&lt;/</span>resultMap</span><span>></span></span>


    <span><span><span>&lt;</span>select</span> <span>id</span><span><span>=</span><span>"</span>selectSchool<span>"</span></span> <span>resultMap</span><span><span>=</span><span>"</span>schoolResultMap<span>"</span></span><span>></span></span>
        select school.id as 'schoolId', school.name as 'schoolName', hm.id as 'hmId', hm.name as 'schoolHeadName', s.name as 'studentName', s.id as 'studentId'
        from school
                 left join head_master hm on hm.id = school.head_master_id
                 left join student s on school.id = s.school_id
    <span><span><span>&lt;/</span>select</span><span>></span></span>
<span><span><span>&lt;/</span>mapper</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>执行数据验证 <code>com.test.example05.ResultMapTest#parseResultMap</code></p>
<ul>
<li>line(11-22) 获取MappedStatement观察复杂对象ResultMap是什么样。</li>
</ul>
<p><img src="https://img.springlearn.cn/blog/learn_1649604916000.png" alt="" loading="lazy"></p>
<ul>
<li>line(25-26) 观察mybatis如何填充数据。</li>
</ul>
<div><div><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><div>&nbsp;</div><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>parseResultMap</span><span>(</span><span>)</span> <span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"example05/mybatisConfig-ResultMap.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>

        <span>// 只要看这个复杂对象如何映射。</span>
        <span>MappedStatement</span> selectSchool <span>=</span> configuration<span>.</span><span>getMappedStatement</span><span>(</span><span>"orm.example.dal.mapper.SchoolMapper.selectSchool"</span><span>)</span><span>;</span>
        <span>ResultMap</span> resultMap <span>=</span> selectSchool<span>.</span><span>getResultMaps</span><span>(</span><span>)</span><span>.</span><span>get</span><span>(</span><span>0</span><span>)</span><span>;</span>
        <span>// 确定是一个复杂对象，规则是XMLMapperBuilder#processNestedResultMappings,只要发现查询语句对象的结果中有以下标签"association", "collection", "case"。就是复杂sql</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"是否复杂对象:"</span> <span>+</span> resultMap<span>.</span><span>hasNestedResultMaps</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>List</span><span><span>&lt;</span><span>ResultMapping</span><span>></span></span> propertyResultMappings <span>=</span> resultMap<span>.</span><span>getPropertyResultMappings</span><span>(</span><span>)</span><span>;</span>
        <span>for</span> <span>(</span><span>ResultMapping</span> propertyResultMapping <span>:</span> propertyResultMappings<span>)</span> <span>{</span>
            <span>// 1. 属性:id,db列名:schoolId,JavaType:class java.lang.Long</span>
            <span>// 2. 属性:name,db列名:schoolName,JavaType:class java.lang.String</span>
            <span>// 3. 属性:schoolHeadMaster,db列名:null,JavaType:class orm.example.dal.model.SchoolHeadMaster,映射NestedResultMapId</span>
            <span>// 4. 属性:students,db列名:null,JavaType:interface java.util.List,映射NestedResultMapId</span>
            <span>printResultMapping</span><span>(</span>propertyResultMapping<span>,</span> configuration<span>)</span><span>;</span>
        <span>}</span>

        <span>// [School(id=1, name=西天小学, schoolHeadMaster=SchoolHeadMaster(id=1, name=如来), students=[Student(id=1, name=孙悟空), Student(id=2, name=猪八戒), Student(id=3, name=唐三藏)])]</span>
        <span>List</span><span><span>&lt;</span><span>School</span><span>></span></span> schools <span>=</span> configuration<span>.</span><span>getMapper</span><span>(</span><span>SchoolMapper</span><span>.</span><span>class</span><span>,</span> sqlSessionFactory<span>.</span><span>openSession</span><span>(</span><span>false</span><span>)</span><span>)</span><span>.</span><span>selectSchool</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>schools<span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>static</span> <span>void</span> <span>printResultMapping</span><span>(</span><span>ResultMapping</span> propertyResultMapping<span>,</span> <span>Configuration</span> configuration<span>)</span> <span>{</span>
        <span>String</span> property <span>=</span> propertyResultMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"属性:"</span> <span>+</span> property <span>+</span> <span>",db列名:"</span> <span>+</span> propertyResultMapping<span>.</span><span>getColumn</span><span>(</span><span>)</span> <span>+</span> <span>",JavaType:"</span> <span>+</span> propertyResultMapping<span>.</span><span>getJavaType</span><span>(</span><span>)</span> <span>+</span> <span>",映射NestedResultMapId:"</span> <span>+</span> propertyResultMapping<span>.</span><span>getNestedResultMapId</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>String</span> nestedResultMapId <span>=</span> propertyResultMapping<span>.</span><span>getNestedResultMapId</span><span>(</span><span>)</span><span>;</span>
        <span>// 如果不等于空,说明是复杂对象。从配置文件中获取复杂属性的映射集合</span>
        <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>nonNull</span><span>(</span>nestedResultMapId<span>)</span><span>)</span> <span>{</span>
            <span>ResultMap</span> nestedResultMap <span>=</span> configuration<span>.</span><span>getResultMap</span><span>(</span>nestedResultMapId<span>)</span><span>;</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>nestedResultMap<span>.</span><span>getType</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"是否复杂对象:"</span> <span>+</span> nestedResultMap<span>.</span><span>hasNestedResultMaps</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>List</span><span><span>&lt;</span><span>ResultMapping</span><span>></span></span> propertyResultMappings <span>=</span> nestedResultMap<span>.</span><span>getPropertyResultMappings</span><span>(</span><span>)</span><span>;</span>
            <span>for</span> <span>(</span><span>ResultMapping</span> resultMapping <span>:</span> propertyResultMappings<span>)</span> <span>{</span>
                <span>printResultMapping</span><span>(</span>resultMapping<span>,</span> configuration<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><p>下面我们就看如何填充数据了。同样我们直接手撸代码。</p>
<table>
<thead>
<tr>
<th style="text-align:left">schoolId</th>
<th style="text-align:left">schoolName</th>
<th style="text-align:left">hmId</th>
<th style="text-align:left">schoolHeadName</th>
<th style="text-align:left">studentName</th>
<th style="text-align:left">studentId</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">西天小学</td>
<td style="text-align:left">1</td>
<td style="text-align:left">如来</td>
<td style="text-align:left">孙悟空</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">西天小学</td>
<td style="text-align:left">1</td>
<td style="text-align:left">如来</td>
<td style="text-align:left">猪八戒</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">西天小学</td>
<td style="text-align:left">1</td>
<td style="text-align:left">如来</td>
<td style="text-align:left">唐三藏</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">湖畔大学</td>
<td style="text-align:left">2</td>
<td style="text-align:left">马云</td>
<td style="text-align:left">马化腾</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">湖畔大学</td>
<td style="text-align:left">2</td>
<td style="text-align:left">马云</td>
<td style="text-align:left">谢霆锋</td>
<td style="text-align:left">5</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">湖畔大学</td>
<td style="text-align:left">2</td>
<td style="text-align:left">马云</td>
<td style="text-align:left">张学友</td>
<td style="text-align:left">6</td>
</tr>
</tbody>
</table>
<p>Mybatis中处理返回值，分一下基础。简单对象和复杂对象这里我们直接用复杂对象距离。
可以看到School中有2个基本属性和1个对象属性还有一个集合属性。</p>
<p>看这个图。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649604916000.png" alt="" loading="lazy"></p>
<p>这部分示例代码在 <code>com.test.example05.ResultMapTest#handlerResultSet</code></p>
<ul>
<li>line(26) 首先我们要获取数据库返回列信息</li>
<li>line(30) 一行一行读取数据，每次执行ResultSet#next就是下一行</li>
<li>line(41) 因为我们School中有一个是集合属性,需要将多行数据转换成一行。此时我们执行完getRowValue
会生成一个数据。但是这个数据不能直接就用, 还需要将第二行的数据也赋值到第一行的返回值中,这是我们就将
第一行的数据返回值,带进去。</li>
<li>line(41) 我们如何知道这6行数据如何合并。规则: 简单对象进行拼接，School中简单对象是id,和name。</li>
<li>line(44) getRowValue中的每个方法都要注意看</li>
<li>line(93-99) 主要处理是否需要合并行，合并行的时候直接填充数据接口。而不是合并则缓存中查不到数据，就重新生成一个结果。</li>
<li>line(104) 判断ResultMap是否是一个复杂对象,这里School是一个复杂对象,因为不仅有一个HeadMaster还有一个List的学生集合。</li>
<li>line(109) 第一次进去这里会有4个对象,id，name,schoolHeadMaster,students</li>
<li>line(115-118) 对于School中的id和name都会在这几行被执行了。可以看到根据javaType找到了TypeHandler，然后TypeHandler负责取值。</li>
<li>line(141) 对于schoolHeadMaster这个属性,是复杂对象,School中的Java类型是SchoolHeadMaster和他对应的ResultMap中的类型是一样的，
则递归去获取数据,因为SchoolHeadMaster中也是都简单类型的id和name,所以最终也会在line(115-118)被执行了。</li>
<li>line(125-138) School中的students，java类型是List,ResultMap中类型是Student，所以要先从第一行的数据去获取这个属性
看List是否被实例化了，如果没有就实例化。然后执行add操作给list中数据追加值。</li>
</ul>
<p>主要这里我们使用了MetaObject这个工具,是一个包装方法。不详细介绍了，如果还不清楚请跳转</p>
<p><a href="http://localhost:8080/learn/mybatis/%E6%A0%B8%E5%BF%83%E7%B1%BB%E4%BB%8B%E7%BB%8D/#_1-5-objectwrapperfactory-%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E5%B7%A5%E5%8E%82" target="_blank" rel="noopener noreferrer">第03篇:Mybatis核心类详细介绍</a></p>
<div><div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>handlerResultSet</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>

        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"example05/mybatisConfig-ResultMap.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>

        <span>// 只要看这个复杂对象如何映射。</span>
        <span>MappedStatement</span> selectSchool <span>=</span> configuration<span>.</span><span>getMappedStatement</span><span>(</span><span>"orm.example.dal.mapper.SchoolMapper.selectSchool"</span><span>)</span><span>;</span>
        <span>ResultMap</span> resultMap <span>=</span> selectSchool<span>.</span><span>getResultMaps</span><span>(</span><span>)</span><span>.</span><span>get</span><span>(</span><span>0</span><span>)</span><span>;</span>

        <span>PreparedStatement</span> preparedStatement <span>=</span> <span>execute</span><span>(</span><span>"select school.id   as 'schoolId',\n"</span> <span>+</span>
                <span>"       school.name as 'schoolName',\n"</span> <span>+</span>
                <span>"       hm.id       as 'hmId',\n"</span> <span>+</span>
                <span>"       hm.name     as 'schoolHeadName',\n"</span> <span>+</span>
                <span>"       s.name      as 'studentName',\n"</span> <span>+</span>
                <span>"       s.id        as 'studentId'\n"</span> <span>+</span>
                <span>"from school\n"</span> <span>+</span>
                <span>"         left join head_master hm on hm.id = school.head_master_id\n"</span> <span>+</span>
                <span>"         left join student s on school.id = s.school_id"</span><span>)</span><span>;</span>
        <span>// 2. 执行sql语句获取结果集</span>
        preparedStatement<span>.</span><span>execute</span><span>(</span><span>)</span><span>;</span>
        <span>ResultSetWrapper</span> firstResultSet <span>=</span> <span>getFirstResultSet</span><span>(</span>preparedStatement<span>,</span> configuration<span>)</span><span>;</span>
        <span>ResultSet</span> resultSet <span>=</span> firstResultSet<span>.</span><span>getResultSet</span><span>(</span><span>)</span><span>;</span>
        <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Object</span><span>></span></span> one2ManyAsMap <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        <span>// 3. 处理结果转换,一行一行读取数据</span>
        <span>while</span> <span>(</span>resultSet<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            <span>// 3.1 用于判断多行数据是否要合并 规则: 简单对象属性，如果一样则可以合并。</span>
            <span>// 如: 下面数据返回值是 List&lt;School> schools；School（Long id,String name,SchoolHeadMaster schoolHeadMaster,List&lt;Student> students）</span>
            <span>//INSERT INTO MY_TABLE(schoolId, schoolName, hmId, schoolHeadName, studentName, studentId) VALUES (1, '西天小学', 1, '如来', '孙悟空', 1);</span>
            <span>//INSERT INTO MY_TABLE(schoolId, schoolName, hmId, schoolHeadName, studentName, studentId) VALUES (1, '西天小学', 1, '如来', '猪八戒', 2);</span>
            <span>//INSERT INTO MY_TABLE(schoolId, schoolName, hmId, schoolHeadName, studentName, studentId) VALUES (1, '西天小学', 1, '如来', '唐三藏', 3);</span>
            <span>//INSERT INTO MY_TABLE(schoolId, schoolName, hmId, schoolHeadName, studentName, studentId) VALUES (2, '湖畔大学', 2, '马云', '马化腾', 4);</span>
            <span>//INSERT INTO MY_TABLE(schoolId, schoolName, hmId, schoolHeadName, studentName, studentId) VALUES (2, '湖畔大学', 2, '马云', '谢霆锋', 5);</span>
            <span>//INSERT INTO MY_TABLE(schoolId, schoolName, hmId, schoolHeadName, studentName, studentId) VALUES (2, '湖畔大学', 2, '马云', '张学友', 6);</span>
            <span>// 我们如何知道这6行数据如何合并。规则: 简单对象进行拼接，School中简单对象是id,和name。</span>
            <span>// 所以这里构建的缓存key就是 id + name。相同就不新建返回值,而是对返回值二次赋值</span>
            <span>String</span> cacheKey <span>=</span> <span>getCacheKey</span><span>(</span>resultMap<span>,</span> resultSet<span>,</span> configuration<span>)</span><span>;</span>
            <span>Object</span> parentObject <span>=</span> one2ManyAsMap<span>.</span><span>get</span><span>(</span>cacheKey<span>)</span><span>;</span>
            <span>// 3.2 开始填充数据</span>
            parentObject <span>=</span> <span>getRowValue</span><span>(</span>resultMap<span>,</span> firstResultSet<span>,</span> configuration<span>,</span> parentObject<span>)</span><span>;</span>
            one2ManyAsMap<span>.</span><span>put</span><span>(</span>cacheKey<span>,</span> parentObject<span>)</span><span>;</span>
        <span>}</span>
        <span>for</span> <span>(</span><span>Object</span> value <span>:</span> one2ManyAsMap<span>.</span><span>values</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>value<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>

    <span>private</span> <span>PreparedStatement</span> <span>execute</span><span>(</span><span>String</span> sql<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>String</span> dbUrl <span>=</span> <span>"jdbc:mysql://127.0.0.1:3306/test"</span><span>;</span>
        <span>String</span> user <span>=</span> <span>"root"</span><span>;</span>
        <span>String</span> pass <span>=</span> <span>"123456"</span><span>;</span>
        <span>// 1. 获取数据库连接</span>
        <span>Connection</span> connection <span>=</span> <span>DriverManager</span><span>.</span><span>getConnection</span><span>(</span>dbUrl<span>,</span> user<span>,</span> pass<span>)</span><span>;</span>
        <span>return</span> connection<span>.</span><span>prepareStatement</span><span>(</span>sql<span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>ResultSetWrapper</span> <span>getFirstResultSet</span><span>(</span><span>Statement</span> stmt<span>,</span> <span>Configuration</span> configuration<span>)</span> <span>throws</span> <span>SQLException</span> <span>{</span>
        <span>ResultSet</span> rs <span>=</span> stmt<span>.</span><span>getResultSet</span><span>(</span><span>)</span><span>;</span>
        <span>while</span> <span>(</span>rs <span>==</span> <span>null</span><span>)</span> <span>{</span>
            <span>if</span> <span>(</span>stmt<span>.</span><span>getMoreResults</span><span>(</span><span>)</span><span>)</span> <span>{</span>
                rs <span>=</span> stmt<span>.</span><span>getResultSet</span><span>(</span><span>)</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>
                <span>if</span> <span>(</span>stmt<span>.</span><span>getUpdateCount</span><span>(</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span>
                    <span>break</span><span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> rs <span>!=</span> <span>null</span> <span>?</span> <span>new</span> <span>ResultSetWrapper</span><span>(</span>rs<span>,</span> configuration<span>)</span> <span>:</span> <span>null</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>static</span> <span>String</span> <span>getCacheKey</span><span>(</span><span>ResultMap</span> resultMap<span>,</span> <span>ResultSet</span> resultSet<span>,</span> <span>Configuration</span> configuration<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>StringBuffer</span> sb <span>=</span> <span>new</span> <span>StringBuffer</span><span>(</span><span>)</span><span>;</span>
        sb<span>.</span><span>append</span><span>(</span>resultMap<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>List</span><span><span>&lt;</span><span>ResultMapping</span><span>></span></span> propertyResultMappings <span>=</span> resultMap<span>.</span><span>getPropertyResultMappings</span><span>(</span><span>)</span><span>;</span>
        <span>for</span> <span>(</span><span>ResultMapping</span> propertyResultMapping <span>:</span> propertyResultMappings<span>)</span> <span>{</span>
            <span>if</span> <span>(</span>propertyResultMapping<span>.</span><span>isSimple</span><span>(</span><span>)</span><span>)</span> <span>{</span>
                <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> javaType <span>=</span> propertyResultMapping<span>.</span><span>getJavaType</span><span>(</span><span>)</span><span>;</span>
                <span>TypeHandler</span><span><span>&lt;</span><span>?</span><span>></span></span> typeHandler <span>=</span> configuration<span>.</span><span>getTypeHandlerRegistry</span><span>(</span><span>)</span><span>.</span><span>getTypeHandler</span><span>(</span>javaType<span>)</span><span>;</span>
                sb<span>.</span><span>append</span><span>(</span>propertyResultMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>)</span><span>;</span>
                <span>Object</span> propertyValue <span>=</span> typeHandler<span>.</span><span>getResult</span><span>(</span>resultSet<span>,</span> propertyResultMapping<span>.</span><span>getColumn</span><span>(</span><span>)</span><span>)</span><span>;</span>
                sb<span>.</span><span>append</span><span>(</span>propertyValue<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> sb<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>static</span> <span>Object</span> <span>getRowValue</span><span>(</span><span>ResultMap</span> resultMap<span>,</span> <span>ResultSetWrapper</span> firstResultSet<span>,</span> <span>Configuration</span> configuration<span>,</span> <span>Object</span> rowValue<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>// 获取返回值的实体类</span>
        <span>Object</span> returnValue <span>=</span> <span>null</span><span>;</span>
        <span>// 如果不等于空说明是处理合并,那么不构建新对象,只在合并的对象上重新赋值。</span>
        <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>nonNull</span><span>(</span>rowValue<span>)</span><span>)</span> <span>{</span>
            returnValue <span>=</span> rowValue<span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>// 等于空说明是第一次进入,直接构建返回值示例。</span>
            returnValue <span>=</span> configuration<span>.</span><span>getObjectFactory</span><span>(</span><span>)</span><span>.</span><span>create</span><span>(</span>resultMap<span>.</span><span>getType</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>
        <span>// 下面对实例方法进行赋值，利用工具类MetaObject包装提供统一的赋属性方法</span>
        <span>MetaObject</span> metaObject <span>=</span> configuration<span>.</span><span>newMetaObject</span><span>(</span>returnValue<span>)</span><span>;</span>
        <span>// 判断是否是嵌套对象</span>
        <span>boolean</span> nestedFlag <span>=</span> resultMap<span>.</span><span>hasNestedResultMaps</span><span>(</span><span>)</span><span>;</span>
        <span>ResultSet</span> resultSet <span>=</span> firstResultSet<span>.</span><span>getResultSet</span><span>(</span><span>)</span><span>;</span>
        <span>// 判断是否简单对象</span>
        <span>if</span> <span>(</span>nestedFlag<span>)</span> <span>{</span>
            <span>// 非简单对象,说明需要判断属性各自需要的映射对象</span>
            <span>List</span><span><span>&lt;</span><span>ResultMapping</span><span>></span></span> propertyResultMappings <span>=</span> resultMap<span>.</span><span>getPropertyResultMappings</span><span>(</span><span>)</span><span>;</span>
            <span>for</span> <span>(</span><span>ResultMapping</span> propertyResultMapping <span>:</span> propertyResultMappings<span>)</span> <span>{</span>
                <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> javaType <span>=</span> propertyResultMapping<span>.</span><span>getJavaType</span><span>(</span><span>)</span><span>;</span>
                <span>String</span> nestedResultMapId <span>=</span> propertyResultMapping<span>.</span><span>getNestedResultMapId</span><span>(</span><span>)</span><span>;</span>
                <span>Object</span> propertyValue<span>;</span>
                <span>// 是空说明,当前属性是基本属性</span>
                <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>isNull</span><span>(</span>nestedResultMapId<span>)</span><span>)</span> <span>{</span>
                    <span>// 获取当前属性的Java类型,从配置中获取该类型,读取ResultSet要使用的方法。eg:StringTypeHandler 使用ResultSet#getString</span>
                    <span>TypeHandler</span><span><span>&lt;</span><span>?</span><span>></span></span> typeHandler <span>=</span> configuration<span>.</span><span>getTypeHandlerRegistry</span><span>(</span><span>)</span><span>.</span><span>getTypeHandler</span><span>(</span>javaType<span>)</span><span>;</span>
                    propertyValue <span>=</span> typeHandler<span>.</span><span>getResult</span><span>(</span>resultSet<span>,</span> propertyResultMapping<span>.</span><span>getColumn</span><span>(</span><span>)</span><span>)</span><span>;</span>
                <span>}</span> <span>else</span> <span>{</span>
                    <span>// 不等于空说明是嵌套对象,从配置中读取嵌套对象的映射信息</span>
                    <span>ResultMap</span> nestedResultMap <span>=</span> configuration<span>.</span><span>getResultMap</span><span>(</span>nestedResultMapId<span>)</span><span>;</span>
                    <span>// 嵌套对象的java类型。eg: School(students),这里的Java类型就是Student</span>
                    <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> nestedJavaType <span>=</span> nestedResultMap<span>.</span><span>getType</span><span>(</span><span>)</span><span>;</span>
                    <span>// 若果是list方式,外面的javaType=list，里面是真实java对象</span>
                    <span>if</span> <span>(</span><span>!</span>javaType<span>.</span><span>equals</span><span>(</span>nestedJavaType<span>)</span> <span>&amp;&amp;</span> <span>Collection</span><span>.</span><span>class</span><span>.</span><span>isAssignableFrom</span><span>(</span>javaType<span>)</span><span>)</span> <span>{</span>
                        propertyValue <span>=</span> <span>getRowValue</span><span>(</span>nestedResultMap<span>,</span> firstResultSet<span>,</span> configuration<span>,</span> <span>null</span><span>)</span><span>;</span>
                        <span>MetaObject</span> parentMetaObject <span>=</span> configuration<span>.</span><span>newMetaObject</span><span>(</span>returnValue<span>)</span><span>;</span>
                        <span>// 获取父对象School 获取students的List</span>
                        <span>Object</span> collect <span>=</span> parentMetaObject<span>.</span><span>getValue</span><span>(</span>propertyResultMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>)</span><span>;</span>
                        <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>isNull</span><span>(</span>collect<span>)</span><span>)</span> <span>{</span>
                            <span>// 如果是null，则将list实例化</span>
                            collect <span>=</span> configuration<span>.</span><span>getObjectFactory</span><span>(</span><span>)</span><span>.</span><span>create</span><span>(</span>javaType<span>)</span><span>;</span>
                            parentMetaObject<span>.</span><span>setValue</span><span>(</span>propertyResultMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>,</span> collect<span>)</span><span>;</span>
                        <span>}</span>
                        <span>// 给list中添加信息</span>
                        <span>MetaObject</span> metaCollectObject <span>=</span> configuration<span>.</span><span>newMetaObject</span><span>(</span>collect<span>)</span><span>;</span>
                        metaCollectObject<span>.</span><span>add</span><span>(</span>propertyValue<span>)</span><span>;</span>
                        propertyValue <span>=</span> collect<span>;</span>
                    <span>}</span> <span>else</span> <span>{</span>
                        <span>// 简单对象</span>
                        propertyValue <span>=</span> <span>getRowValue</span><span>(</span>nestedResultMap<span>,</span> firstResultSet<span>,</span> configuration<span>,</span> <span>null</span><span>)</span><span>;</span>
                    <span>}</span>
                <span>}</span>
                metaObject<span>.</span><span>setValue</span><span>(</span>propertyResultMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>,</span> propertyValue<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>List</span><span><span>&lt;</span><span>ResultMapping</span><span>></span></span> propertyResultMappings <span>=</span> resultMap<span>.</span><span>getPropertyResultMappings</span><span>(</span><span>)</span><span>;</span>
            <span>for</span> <span>(</span><span>ResultMapping</span> propertyResultMapping <span>:</span> propertyResultMappings<span>)</span> <span>{</span>
                <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> javaType <span>=</span> propertyResultMapping<span>.</span><span>getJavaType</span><span>(</span><span>)</span><span>;</span>
                <span>TypeHandler</span><span><span>&lt;</span><span>?</span><span>></span></span> typeHandler <span>=</span> configuration<span>.</span><span>getTypeHandlerRegistry</span><span>(</span><span>)</span><span>.</span><span>getTypeHandler</span><span>(</span>javaType<span>)</span><span>;</span>
                <span>Object</span> propertyValue <span>=</span> typeHandler<span>.</span><span>getResult</span><span>(</span>resultSet<span>,</span> propertyResultMapping<span>.</span><span>getColumn</span><span>(</span><span>)</span><span>)</span><span>;</span>
                metaObject<span>.</span><span>setValue</span><span>(</span>propertyResultMapping<span>.</span><span>getProperty</span><span>(</span><span>)</span><span>,</span> propertyValue<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> returnValue<span>;</span>
    <span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br><span>153</span><br><span>154</span><br><span>155</span><br><span>156</span><br></div></div><p>好了到这里对于场景1中，返回list中的数据就处理好了。</p>
<div><pre><code>  <span>private</span> <span><span>&lt;</span><span>E</span><span>></span></span> <span>Object</span> <span>executeForMany</span><span>(</span><span>SqlSession</span> sqlSession<span>,</span> <span>Object</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
    <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> result<span>;</span>
    <span>Object</span> param <span>=</span> method<span>.</span><span>convertArgsToSqlCommandParam</span><span>(</span>args<span>)</span><span>;</span>
    <span>if</span> <span>(</span>method<span>.</span><span>hasRowBounds</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>RowBounds</span> rowBounds <span>=</span> method<span>.</span><span>extractRowBounds</span><span>(</span>args<span>)</span><span>;</span>
      result <span>=</span> sqlSession<span>.</span><span>selectList</span><span>(</span>command<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> param<span>,</span> rowBounds<span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      result <span>=</span> sqlSession<span>.</span><span>selectList</span><span>(</span>command<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> param<span>)</span><span>;</span>
    <span>}</span>
    <span>// issue #510 Collections &amp; arrays support</span>
    <span>if</span> <span>(</span><span>!</span>method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>.</span><span>isAssignableFrom</span><span>(</span>result<span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>.</span><span>isArray</span><span>(</span><span>)</span><span>)</span> <span>{</span>
        <span>return</span> <span>convertToArray</span><span>(</span>result<span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>return</span> <span>convertToDeclaredCollection</span><span>(</span>sqlSession<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>,</span> result<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span>
    <span>return</span> result<span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h3 id="场景二"> 场景二:</h3>
<p>如果是单个对象,在基于场景一的返回值上加一个判断,如果结果只要1个就只取第一个。
如果是多个，则报错。</p>
<div><pre><code>  <span>public</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>selectOne</span><span>(</span><span>String</span> statement<span>,</span> <span>Object</span> parameter<span>)</span> <span>{</span>
    <span>// Popular vote was to return null on 0 results and throw exception on too many.</span>
    <span>List</span><span><span>&lt;</span><span>T</span><span>></span></span> list <span>=</span> <span>this</span><span>.</span><span>selectList</span><span>(</span>statement<span>,</span> parameter<span>)</span><span>;</span>
    <span>if</span> <span>(</span>list<span>.</span><span>size</span><span>(</span><span>)</span> <span>==</span> <span>1</span><span>)</span> <span>{</span>
      <span>return</span> list<span>.</span><span>get</span><span>(</span><span>0</span><span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span>list<span>.</span><span>size</span><span>(</span><span>)</span> <span>></span> <span>1</span><span>)</span> <span>{</span>
      <span>throw</span> <span>new</span> <span>TooManyResultsException</span><span>(</span><span>"Expected one result (or null) to be returned by selectOne(), but found: "</span> <span>+</span> list<span>.</span><span>size</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>return</span> <span>null</span><span>;</span>
    <span>}</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="场景三"> 场景三:</h3>
<p>更新语句直接 Statement#getUpdateCount 获取更新数量</p>
<div><pre><code>  <span>public</span> <span>int</span> <span>update</span><span>(</span><span>Statement</span> statement<span>)</span> <span>throws</span> <span>SQLException</span> <span>{</span>
    <span>PreparedStatement</span> ps <span>=</span> <span>(</span><span>PreparedStatement</span><span>)</span> statement<span>;</span>
    ps<span>.</span><span>execute</span><span>(</span><span>)</span><span>;</span>
    <span>int</span> rows <span>=</span> ps<span>.</span><span>getUpdateCount</span><span>(</span><span>)</span><span>;</span>
    <span>Object</span> parameterObject <span>=</span> boundSql<span>.</span><span>getParameterObject</span><span>(</span><span>)</span><span>;</span>
    <span>KeyGenerator</span> keyGenerator <span>=</span> mappedStatement<span>.</span><span>getKeyGenerator</span><span>(</span><span>)</span><span>;</span>
    keyGenerator<span>.</span><span>processAfter</span><span>(</span>executor<span>,</span> mappedStatement<span>,</span> ps<span>,</span> parameterObject<span>)</span><span>;</span>
    <span>return</span> rows<span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="场景四"> 场景四:</h3>
<p>排除查询,其他语句返回都是int类型的更新成数量。那么假如方法是boolean类型，或者Long和Void呢</p>
<div><pre><code><span>public</span> <span>class</span> <span>MapperMethod</span> <span>{</span>
  <span>private</span> <span>Object</span> <span>rowCountResult</span><span>(</span><span>int</span> rowCount<span>)</span> <span>{</span>
    <span>final</span> <span>Object</span> result<span>;</span>
    <span>if</span> <span>(</span>method<span>.</span><span>returnsVoid</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      result <span>=</span> <span>null</span><span>;</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>Integer</span><span>.</span><span>class</span><span>.</span><span>equals</span><span>(</span>method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>)</span> <span>||</span> <span>Integer</span><span>.</span>TYPE<span>.</span><span>equals</span><span>(</span>method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
      result <span>=</span> rowCount<span>;</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>Long</span><span>.</span><span>class</span><span>.</span><span>equals</span><span>(</span>method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>)</span> <span>||</span> <span>Long</span><span>.</span>TYPE<span>.</span><span>equals</span><span>(</span>method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
      result <span>=</span> <span>(</span><span>long</span><span>)</span> rowCount<span>;</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>Boolean</span><span>.</span><span>class</span><span>.</span><span>equals</span><span>(</span>method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>)</span> <span>||</span> <span>Boolean</span><span>.</span>TYPE<span>.</span><span>equals</span><span>(</span>method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
      result <span>=</span> rowCount <span>></span> <span>0</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>throw</span> <span>new</span> <span>BindingException</span><span>(</span><span>"Mapper method '"</span> <span>+</span> command<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>"' has an unsupported return type: "</span> <span>+</span> method<span>.</span><span>getReturnType</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> result<span>;</span>
  <span>}</span>
<span>}</span>  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-30T15:42:58.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Mybatis</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/"/>
    <updated>2022-03-28T15:13:45.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://mybatis.org/images/mybatis-logo.png" alt="" loading="lazy"></p>
<h1 id="什么是-mybatis-官方文档"> 什么是 MyBatis？<a href="https://mybatis.net.cn/" target="_blank" rel="noopener noreferrer">官方文档</a></h1>
<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<h1 id="重构mybatis博客"> 重构Mybatis博客</h1>
<p>最早使用Mybatis是在2016年,那时候学习只会用,根本不知道什么原理,不懂的原理的地方只能死记。搭建一个小的demo放到github,工作需要的时候就直接复制黏贴,虽然也能满足工作需要但是总感觉到不带劲。在找到工作后大概2017年时候就对Mybatis的源码进行了阅读，其实相对于Dubbo,Spring,之类的源码Mybatis的源码还是非常简单的,现在也经常推荐给刚开始学习看源码的同学。
早在2019年小编就开始写Mybatis的博客了,那时候博客主要还是自己学习为主,现在回头看看,感觉有些粗糙。这里准备回炉重造一波。将原博客进行优化。对Mybaits的核心功能，核心处理类重新重构下博客。</p>
<p><a href="https://github.com/lxchinesszz/mybatis-opensource-example" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/源码阅读-mybatis--opensource--example-green" alt="" loading="lazy"></a></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-28T15:13:45.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第07篇:Mybatis缓存装饰器</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/Mybatis%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/Mybatis%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/"/>
    <updated>2022-04-12T17:26:01.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1648571408000.png" alt="" loading="lazy"></p>
<div><p>提示</p>
<p>MyBatis 对缓存的设计是非常巧妙的。花样很多,但却不是真的花样。因为<code>Mybatis</code>只是对 <code>Map</code>数据结构的封装, 但是却实现了很多挺好用的能力。
如果单单从设计模式上的角度来,其实就是典型的装饰器模式, 装饰器模式其实并不难,所以我们不讲设计模式, 本篇文章我们来看看<code>Mybatils</code> 缓存设计巧妙的点。</p>
</div>
<p><a href="https://mybatis.net.cn/sqlmap-xml.html#cache" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<p>下面通过简单的代码review来分析下这11个缓存类设计的巧妙点。（因为是对博客重构,历史图片就没有补充,图上只有10个,请讲究下）</p>
<hr>
<h2 id="一、模式分析"> 一、模式分析</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1648571612000.png" alt="" loading="lazy">
从目录就很清晰看出,核心就是<code>impl</code> 包下面只有一个,其他都是装饰器模式，在
<code>decorators</code> 包下</p>
<div><p>提示</p>
<p>其实上面就是<code>Mybatis</code> 关于 <code>Cache</code> 的核心实现,其实看到这里还没有很多知识点. 那么我们从中能学到什么呢? 如果真要找一条学习的点,那么就是:</p>
<p>设计要面向接口设计，而不是具体实现。 这样当我们要重写 <code>Cache</code> ，比如说我们不想底层用 <code>HashMap</code> 来实现了,其实我们只要实现一下 <code>Cache</code> 接口，然后替换掉<code>PerpetualCache</code>就可以了。对于使用者其实并不感知。</p>
</div>
<h2 id="_1-1-cache"> 1.1 Cache</h2>
<p>接口设计没有什么好讲的，提供获取和添加方法，跟Map接口一样。 本篇我们要一起Review的类都会实现该接口的。</p>
<p>(这句话简直就是废话,大佬勿喷,就是简单提醒。意思就是其实代码不难)</p>
<div><pre><code><span>public</span> <span>interface</span> <span>Cache</span> <span>{</span>

  <span>String</span> <span>getId</span><span>(</span><span>)</span><span>;</span>
  
  <span>void</span> <span>putObject</span><span>(</span><span>Object</span> key<span>,</span> <span>Object</span> value<span>)</span><span>;</span>
  
  <span>Object</span> <span>getObject</span><span>(</span><span>Object</span> key<span>)</span><span>;</span>

  <span>Object</span> <span>removeObject</span><span>(</span><span>Object</span> key<span>)</span><span>;</span>

  <span>void</span> <span>clear</span><span>(</span><span>)</span><span>;</span>

  <span>int</span> <span>getSize</span><span>(</span><span>)</span><span>;</span>
  
  <span>ReadWriteLock</span> <span>getReadWriteLock</span><span>(</span><span>)</span><span>;</span>

<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="_1-2-perpetualcache"> 1.2 PerpetualCache</h2>
<p>这个类就是 <code>Mybatis</code> 缓存最底层的设计, 看一下就知道其实是对 <code>Map</code> 的封装。
其实我们只要知道他是简单的 <code>HashMap</code> 的封装就可以了。因为代码实战是太简单了,没啥分析的。</p>
<div><pre><code><span>public</span> <span>class</span> <span>PerpetualCache</span> <span>implements</span> <span>Cache</span> <span>{</span>
  <span>// 唯一标识</span>
  <span>private</span> <span>final</span> <span>String</span> id<span>;</span>
  <span>// 就是一个HashMap结构</span>
  <span>private</span> <span>Map</span><span><span>&lt;</span><span>Object</span><span>,</span> <span>Object</span><span>></span></span> cache <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>Object</span><span>,</span> <span>Object</span><span>></span></span><span>(</span><span>)</span><span>;</span>

  <span>public</span> <span>PerpetualCache</span><span>(</span><span>String</span> id<span>)</span> <span>{</span>
    <span>this</span><span>.</span>id <span>=</span> id<span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>String</span> <span>getId</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> id<span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>int</span> <span>getSize</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> cache<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>void</span> <span>putObject</span><span>(</span><span>Object</span> key<span>,</span> <span>Object</span> value<span>)</span> <span>{</span>
    cache<span>.</span><span>put</span><span>(</span>key<span>,</span> value<span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>Object</span> <span>getObject</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    <span>return</span> cache<span>.</span><span>get</span><span>(</span>key<span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>Object</span> <span>removeObject</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    <span>return</span> cache<span>.</span><span>remove</span><span>(</span>key<span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>void</span> <span>clear</span><span>(</span><span>)</span> <span>{</span>
    cache<span>.</span><span>clear</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>
  <span>// 基本没啥用,外层谁要用,谁重写</span>
  <span>@Override</span>
  <span>public</span> <span>ReadWriteLock</span> <span>getReadWriteLock</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>null</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>boolean</span> <span>equals</span><span>(</span><span>Object</span> o<span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>getId</span><span>(</span><span>)</span> <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>throw</span> <span>new</span> <span>CacheException</span><span>(</span><span>"Cache instances require an ID."</span><span>)</span><span>;</span>
    <span>}</span>
    <span>if</span> <span>(</span><span>this</span> <span>==</span> o<span>)</span> <span>{</span>
      <span>return</span> <span>true</span><span>;</span>
    <span>}</span>
    <span>if</span> <span>(</span><span>!</span><span>(</span>o <span>instanceof</span> <span>Cache</span><span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>false</span><span>;</span>
    <span>}</span>

    <span>Cache</span> otherCache <span>=</span> <span>(</span><span>Cache</span><span>)</span> o<span>;</span>
    <span>return</span> <span>getId</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>otherCache<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>int</span> <span>hashCode</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>getId</span><span>(</span><span>)</span> <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>throw</span> <span>new</span> <span>CacheException</span><span>(</span><span>"Cache instances require an ID."</span><span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> <span>getId</span><span>(</span><span>)</span><span>.</span><span>hashCode</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br></div></div><h2 id="二、开始重头戏"> 二、开始重头戏</h2>
<p>从这里我们主要一起看下,代码设计的巧妙之处,一个一个研究下,以下这10个类。看 <code>Mybatis</code> 是如何巧妙设计的。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1648571791000.png" alt="" loading="lazy"></p>
<h2 id="_2-1-blockingcache"> 2.1 BlockingCache</h2>
<p>BlockingCache是一个简单和低效的<code>Cache</code>的装饰器,我们主要看几个重要方法。</p>
<div><pre><code><span>public</span> <span>class</span> <span>BlockingCache</span> <span>implements</span> <span>Cache</span> <span>{</span>

  <span>private</span> <span>long</span> timeout<span>;</span>
  <span>//实现Cache接口的缓存对象</span>
  <span>private</span> <span>final</span> <span>Cache</span> delegate<span>;</span>
  <span>//对每个key生成一个锁对象</span>
  <span>private</span> <span>final</span> <span>ConcurrentHashMap</span><span><span>&lt;</span><span>Object</span><span>,</span> <span>ReentrantLock</span><span>></span></span> locks<span>;</span>

  <span>public</span> <span>BlockingCache</span><span>(</span><span>Cache</span> delegate<span>)</span> <span>{</span>
    <span>this</span><span>.</span>delegate <span>=</span> delegate<span>;</span>
    <span>this</span><span>.</span>locks <span>=</span> <span>new</span> <span>ConcurrentHashMap</span><span><span>&lt;</span><span>Object</span><span>,</span> <span>ReentrantLock</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>String</span> <span>getId</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> delegate<span>.</span><span>getId</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>int</span> <span>getSize</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> delegate<span>.</span><span>getSize</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>void</span> <span>putObject</span><span>(</span><span>Object</span> key<span>,</span> <span>Object</span> value<span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
      delegate<span>.</span><span>putObject</span><span>(</span>key<span>,</span> value<span>)</span><span>;</span>
    <span>}</span> <span>finally</span> <span>{</span>
      <span>//释放锁。 为什么不加锁? 所以get和put是组合使用的，当get加锁,如果没有就查询数据库然后put释放锁，然后其他线程就可以直接用缓存数据了。</span>
      <span>releaseLock</span><span>(</span>key<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>Object</span> <span>getObject</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    <span>//1. 当要获取一个key,首先对key进行加锁操作,如果没有锁就加一个锁,有锁就直接锁</span>
    <span>acquireLock</span><span>(</span>key<span>)</span><span>;</span>
    <span>Object</span> value <span>=</span> delegate<span>.</span><span>getObject</span><span>(</span>key<span>)</span><span>;</span>
    <span>if</span> <span>(</span>value <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>//2. 如果缓存命中,就直接解锁</span>
      <span>releaseLock</span><span>(</span>key<span>)</span><span>;</span>
    <span>}</span>
    <span>//3. 当value=null, 就是说没有命中缓存,那么这个key就会被锁住,其他线程进来都要等待</span>
    <span>return</span> value<span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>Object</span> <span>removeObject</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    <span>// 移除key的时候,顺便清楚缓存key的锁对象</span>
    <span>releaseLock</span><span>(</span>key<span>)</span><span>;</span>
    <span>return</span> <span>null</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>void</span> <span>clear</span><span>(</span><span>)</span> <span>{</span>
    delegate<span>.</span><span>clear</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>ReadWriteLock</span> <span>getReadWriteLock</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>null</span><span>;</span>
  <span>}</span>
  
  <span>private</span> <span>ReentrantLock</span> <span>getLockForKey</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    <span>ReentrantLock</span> lock <span>=</span> <span>new</span> <span>ReentrantLock</span><span>(</span><span>)</span><span>;</span>
    <span>ReentrantLock</span> previous <span>=</span> locks<span>.</span><span>putIfAbsent</span><span>(</span>key<span>,</span> lock<span>)</span><span>;</span>
    <span>//如果key对应的锁存在就返回,没有就创建一个新的</span>
    <span>return</span> previous <span>==</span> <span>null</span> <span>?</span> lock <span>:</span> previous<span>;</span>
  <span>}</span>
  
  <span>private</span> <span>void</span> <span>acquireLock</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    <span>Lock</span> lock <span>=</span> <span>getLockForKey</span><span>(</span>key<span>)</span><span>;</span>
    <span>//1. 如果设置超时时间,就可以等待timeout时间(如果超时了报错)</span>
    <span>if</span> <span>(</span>timeout <span>></span> <span>0</span><span>)</span> <span>{</span>
      <span>try</span> <span>{</span>
        <span>boolean</span> acquired <span>=</span> lock<span>.</span><span>tryLock</span><span>(</span>timeout<span>,</span> <span>TimeUnit</span><span>.</span>MILLISECONDS<span>)</span><span>;</span>
        <span>if</span> <span>(</span><span>!</span>acquired<span>)</span> <span>{</span>
          <span>throw</span> <span>new</span> <span>CacheException</span><span>(</span><span>"Couldn't get a lock in "</span> <span>+</span> timeout <span>+</span> <span>" for the key "</span> <span>+</span>  key <span>+</span> <span>" at the cache "</span> <span>+</span> delegate<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>;</span>  
        <span>}</span>
      <span>}</span> <span>catch</span> <span>(</span><span>InterruptedException</span> e<span>)</span> <span>{</span>
        <span>throw</span> <span>new</span> <span>CacheException</span><span>(</span><span>"Got interrupted while trying to acquire lock for key "</span> <span>+</span> key<span>,</span> e<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>//2. 如果没有设置,直接就加锁(如果这个锁已经被人用了,那么就一直阻塞这里。等待上一个释放锁)</span>
      lock<span>.</span><span>lock</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
  
  <span>private</span> <span>void</span> <span>releaseLock</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    <span>ReentrantLock</span> lock <span>=</span> locks<span>.</span><span>get</span><span>(</span>key<span>)</span><span>;</span>
    <span>if</span> <span>(</span>lock<span>.</span><span>isHeldByCurrentThread</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      lock<span>.</span><span>unlock</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>

  <span>public</span> <span>long</span> <span>getTimeout</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> timeout<span>;</span>
  <span>}</span>

  <span>public</span> <span>void</span> <span>setTimeout</span><span>(</span><span>long</span> timeout<span>)</span> <span>{</span>
    <span>this</span><span>.</span>timeout <span>=</span> timeout<span>;</span>
  <span>}</span>  
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br></div></div><p><strong>建议</strong>看代码注释</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>acquireLock</td>
<td>加锁操作</td>
</tr>
<tr>
<td>getObject</td>
<td>进来加锁,如果缓存存在就释放锁,不存在就不释放锁。</td>
</tr>
<tr>
<td>putObject</td>
<td>添加元素并释放锁</td>
</tr>
<tr>
<td>removeObject</td>
<td>移除key的时候,顺便清楚缓存key的锁对象</td>
</tr>
<tr>
<td>getLockForKey</td>
<td>如果key对应的锁存在就返回,没有就创建一个新的</td>
</tr>
</tbody>
</table>
<p><strong>思考</strong></p>
<ol>
<li>这个因为每次key请求都会加lock真的会很慢吗? 我们举两种场景。</li>
</ol>
<p>注意这个加lock并不是对get方法加lock,而是对每个要get的key来加lock。</p>
<p><strong>场景一:</strong> 试想一种场景,当有10个线程同时从数据库查询一个key为123的数据时候，当第一个线程来首先从cache中读取时候，这个时候其他九个线程是会阻塞的，因为这个key已经被加lock了。当第一个线程get这个key完成时候，其他线程才能继续走。这种场景来说是不好的，</p>
<p><strong>场景二:</strong> 但是当第一个线程来发现cache里面没有数据这个时候其他线程会阻塞，而第一个线程会从db中查询，然后在put到cache里面。这样其他9个线程就不需要在去查询db了,就减少了9次db查询。</p>
<h2 id="_2-2-fifocache"> 2.2 FifoCache</h2>
<p><strong>FIFO( First Input First Output),简单说就是指先进先出</strong></p>
<p>如何实现先进先出呢? 其实非常简单,当put时候,先判断是否需要执行淘汰策略,如果要执行淘汰,就 移除先进来的。 直接通过 <code>Deque</code> API 来实现先进先出。</p>
<div><pre><code>  <span>private</span> <span>final</span> <span>Cache</span> delegate<span>;</span>
  <span>private</span> <span>final</span> <span>Deque</span><span><span>&lt;</span><span>Object</span><span>></span></span> keyList<span>;</span>
  <span>private</span> <span>int</span> size<span>;</span>

  <span>public</span> <span>FifoCache</span><span>(</span><span>Cache</span> delegate<span>)</span> <span>{</span>
    <span>this</span><span>.</span>delegate <span>=</span> delegate<span>;</span>
    <span>this</span><span>.</span>keyList <span>=</span> <span>new</span> <span>LinkedList</span><span><span>&lt;</span><span>Object</span><span>></span></span><span>(</span><span>)</span><span>;</span>
    <span>this</span><span>.</span>size <span>=</span> <span>1024</span><span>;</span>
  <span>}</span>

<span>@Override</span>
  <span>public</span> <span>void</span> <span>putObject</span><span>(</span><span>Object</span> key<span>,</span> <span>Object</span> value<span>)</span> <span>{</span>
      <span>//1. put时候就判断是否需要淘汰</span>
    <span>cycleKeyList</span><span>(</span>key<span>)</span><span>;</span>
    delegate<span>.</span><span>putObject</span><span>(</span>key<span>,</span> value<span>)</span><span>;</span>
  <span>}</span>
  <span>private</span> <span>void</span> <span>cycleKeyList</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    keyList<span>.</span><span>addLast</span><span>(</span>key<span>)</span><span>;</span>
    <span>//1. size默认如果大于1024就开始淘汰</span>
    <span>if</span> <span>(</span>keyList<span>.</span><span>size</span><span>(</span><span>)</span> <span>></span> size<span>)</span> <span>{</span>
      <span>//2. 利用Deque队列移除第一个。</span>
      <span>Object</span> oldestKey <span>=</span> keyList<span>.</span><span>removeFirst</span><span>(</span><span>)</span><span>;</span>
      delegate<span>.</span><span>removeObject</span><span>(</span>oldestKey<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h2 id="_2-3-loggingcache"> 2.3 LoggingCache</h2>
<p>从名字上看就是跟日志有关， <code>LoggingCache</code> 会在 <code>debug</code>级别下把缓存命中率给统计出来,然后通过日志系统打印出来。</p>
<div><pre><code><span>public</span> <span>Object</span> <span>getObject</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    requests<span>++</span><span>;</span>
    <span>final</span> <span>Object</span> value <span>=</span> delegate<span>.</span><span>getObject</span><span>(</span>key<span>)</span><span>;</span>
    <span>if</span> <span>(</span>value <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      hits<span>++</span><span>;</span>
    <span>}</span>
    <span>//1. 打印缓存命中率</span>
    <span>if</span> <span>(</span>log<span>.</span><span>isDebugEnabled</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      log<span>.</span><span>debug</span><span>(</span><span>"Cache Hit Ratio ["</span> <span>+</span> <span>getId</span><span>(</span><span>)</span> <span>+</span> <span>"]: "</span> <span>+</span> <span>getHitRatio</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> value<span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>除此之外没有什么其他功能。我们主要看下他是如何统计缓存命中率的。其实很简单。</p>
<div><pre><code><span>public</span> <span>class</span> <span>LoggingCache</span> <span>implements</span> <span>Cache</span> <span>{</span>

  <span>private</span> <span>final</span> <span>Log</span> log<span>;</span>
  <span>private</span> <span>final</span> <span>Cache</span> delegate<span>;</span>
  <span>//1. 总请求次数</span>
  <span>protected</span> <span>int</span> requests <span>=</span> <span>0</span><span>;</span>
  <span>//2. 命中次数</span>
  <span>protected</span> <span>int</span> hits <span>=</span> <span>0</span><span>;</span>
 
  <span>.</span><span>.</span><span>.</span>
<span>}</span>  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>在get请求时候无论是否命中,都自增总请求次数( <code>request</code> ), 当get命中时候自增命中次数( <code>hits</code> )</p>
<div><pre><code><span>public</span> <span>Object</span> <span>getObject</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    <span>//1. 无论是否命中,都自增总请求次数( `request` )</span>
    requests<span>++</span><span>;</span>
    <span>final</span> <span>Object</span> value <span>=</span> delegate<span>.</span><span>getObject</span><span>(</span>key<span>)</span><span>;</span>
    <span>if</span> <span>(</span>value <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>//2. get命中时候自增命中次数( `hits` )</span>
      hits<span>++</span><span>;</span>
    <span>}</span>
    <span>if</span> <span>(</span>log<span>.</span><span>isDebugEnabled</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      log<span>.</span><span>debug</span><span>(</span><span>"Cache Hit Ratio ["</span> <span>+</span> <span>getId</span><span>(</span><span>)</span> <span>+</span> <span>"]: "</span> <span>+</span> <span>getHitRatio</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> value<span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>然后我们看命中率怎么算 <code>getHitRatio()</code></p>
<p><code>命中率 = 命中次数 / 总请求次数</code></p>
<div><pre><code> <span>private</span> <span>double</span> <span>getHitRatio</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>(</span><span>double</span><span>)</span> hits <span>/</span> <span>(</span><span>double</span><span>)</span> requests<span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_2-4-lrucache"> 2.4 LruCache</h2>
<p>LRU是Least Recently Used的缩写，即最近最少使用。</p>
<p>首先我们看如何实现 <code>LRU</code> 策略。
它其实就是利用 <code>LinkedHashMap</code>来实现 <code>LRU</code> 策略, <code>JDK</code> 提供的 <code>LinkedHashMap</code>天然就支持 <code>LRU</code> 策略。
<code>LinkedHashMap</code> 有一个特点如果开启LRU策略后,每次获取到数据后,都会把数据放到最后一个节点，这样第一个节点肯定是最近最少用的元素。</p>
<div><pre><code><span>public</span> <span>V</span> <span>get</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
        <span>Node</span><span><span>&lt;</span><span>K</span><span>,</span><span>V</span><span>></span></span> e<span>;</span>
        <span>if</span> <span>(</span><span>(</span>e <span>=</span> <span>getNode</span><span>(</span><span>hash</span><span>(</span>key<span>)</span><span>,</span> key<span>)</span><span>)</span> <span>==</span> <span>null</span><span>)</span>
            <span>return</span> <span>null</span><span>;</span>
        <span>//1. 判断是否开始LRU策略</span>
        <span>if</span> <span>(</span>accessOrder<span>)</span>
            <span>//2. 开启就往后面放</span>
            <span>afterNodeAccess</span><span>(</span>e<span>)</span><span>;</span>
        <span>return</span> e<span>.</span>value<span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><img src="https://img-blog.csdnimg.cn/2019122316004441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">
构造中先声明LRU淘汰策略,当size()大于构造中声明的1024就可以在每次
putObject时候将要淘汰的移除掉。这点非常的巧妙,不知道你学习到了没 ?</p>
<p><img src="https://img-blog.csdnimg.cn/20191223160143543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="_2-5-scheduledcache"> 2.5 ScheduledCache</h2>
<p>定时删除,设计巧妙,可以借鉴。</p>
<div><pre><code><span>public</span> <span>class</span> <span>ScheduledCache</span> <span>implements</span> <span>Cache</span> <span>{</span>

  <span>private</span> <span>final</span> <span>Cache</span> delegate<span>;</span>
  <span>protected</span> <span>long</span> clearInterval<span>;</span>
  <span>protected</span> <span>long</span> lastClear<span>;</span>

  <span>public</span> <span>ScheduledCache</span><span>(</span><span>Cache</span> delegate<span>)</span> <span>{</span>
    <span>this</span><span>.</span>delegate <span>=</span> delegate<span>;</span>
    <span>//1. 指定多久清理一次缓存</span>
    <span>this</span><span>.</span>clearInterval <span>=</span> <span>60</span> <span>*</span> <span>60</span> <span>*</span> <span>1000</span><span>;</span> <span>// 1 hour</span>
    <span>//2. 设置初始值</span>
    <span>this</span><span>.</span>lastClear <span>=</span> <span>System</span><span>.</span><span>currentTimeMillis</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>public</span> <span>void</span> <span>setClearInterval</span><span>(</span><span>long</span> clearInterval<span>)</span> <span>{</span>
    <span>this</span><span>.</span>clearInterval <span>=</span> clearInterval<span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>String</span> <span>getId</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> delegate<span>.</span><span>getId</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>int</span> <span>getSize</span><span>(</span><span>)</span> <span>{</span>
    <span>clearWhenStale</span><span>(</span><span>)</span><span>;</span>
    <span>return</span> delegate<span>.</span><span>getSize</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>void</span> <span>putObject</span><span>(</span><span>Object</span> key<span>,</span> <span>Object</span> object<span>)</span> <span>{</span>
    <span>clearWhenStale</span><span>(</span><span>)</span><span>;</span>
    delegate<span>.</span><span>putObject</span><span>(</span>key<span>,</span> object<span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>Object</span> <span>getObject</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    <span>return</span> <span>clearWhenStale</span><span>(</span><span>)</span> <span>?</span> <span>null</span> <span>:</span> delegate<span>.</span><span>getObject</span><span>(</span>key<span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>Object</span> <span>removeObject</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    <span>clearWhenStale</span><span>(</span><span>)</span><span>;</span>
    <span>return</span> delegate<span>.</span><span>removeObject</span><span>(</span>key<span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>void</span> <span>clear</span><span>(</span><span>)</span> <span>{</span>
    <span>//1. 记录最近删除一次时间戳</span>
    lastClear <span>=</span> <span>System</span><span>.</span><span>currentTimeMillis</span><span>(</span><span>)</span><span>;</span>
    <span>//2. 清理掉缓存信息</span>
    delegate<span>.</span><span>clear</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>ReadWriteLock</span> <span>getReadWriteLock</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>null</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>int</span> <span>hashCode</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> delegate<span>.</span><span>hashCode</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>boolean</span> <span>equals</span><span>(</span><span>Object</span> obj<span>)</span> <span>{</span>
    <span>return</span> delegate<span>.</span><span>equals</span><span>(</span>obj<span>)</span><span>;</span>
  <span>}</span>

  <span>private</span> <span>boolean</span> <span>clearWhenStale</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>System</span><span>.</span><span>currentTimeMillis</span><span>(</span><span>)</span> <span>-</span> lastClear <span>></span> clearInterval<span>)</span> <span>{</span>
      <span>clear</span><span>(</span><span>)</span><span>;</span>
      <span>return</span> <span>true</span><span>;</span>
    <span>}</span>
    <span>return</span> <span>false</span><span>;</span>
  <span>}</span>

<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br></div></div><p><strong>核心代码</strong></p>
<ol>
<li>构造中指定多久清理一次缓存(1小时)</li>
<li>设置初始值</li>
<li><code>clearWhenStale()</code> 核心方法</li>
<li>然后在每个方法中调用一次这段代码,判断是否需要清理。</li>
</ol>
<div><pre><code><span>private</span> <span>boolean</span> <span>clearWhenStale</span><span>(</span><span>)</span> <span>{</span>
    <span>//1. 当前时间 - 最后清理时间,如果大于定时删除时间,说明要执行清理了。</span>
    <span>if</span> <span>(</span><span>System</span><span>.</span><span>currentTimeMillis</span><span>(</span><span>)</span> <span>-</span> lastClear <span>></span> clearInterval<span>)</span> <span>{</span>
      <span>clear</span><span>(</span><span>)</span><span>;</span>
      <span>return</span> <span>true</span><span>;</span>
    <span>}</span>
    <span>return</span> <span>false</span><span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_2-6-serializedcache"> 2.6 SerializedCache</h2>
<p>从名字上看就是支持序列化的缓存,那么我们就要问了，为啥要支持序列化?</p>
<p><strong>为啥要支持序列化?</strong></p>
<p>因为如果多个用户同时共享一个数据对象时，同时都引用这一个数据对象。如果有用户修改了这个数据对象，那么其他用户拿到的就是已经修改过的对象，这样就是出现了线程不安全。</p>
<p><strong>如何解决这种问题</strong></p>
<ol>
<li>加锁当一个线程在操作时候,其他线程不允许操作</li>
<li>新生成一个对象,这样多个线程获取到的数据就不是一个对象了。</li>
</ol>
<p><strong>只看一下核心代码</strong></p>
<ol>
<li><code>putObject</code> 将对象序列化成<code>byte[]</code></li>
<li><code>getObject</code> 将<code>byte[]</code>反序列化成对象</li>
</ol>
<div><pre><code><span>public</span> <span>void</span> <span>putObject</span><span>(</span><span>Object</span> key<span>,</span> <span>Object</span> object<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>object <span>==</span> <span>null</span> <span>||</span> object <span>instanceof</span> <span>Serializable</span><span>)</span> <span>{</span>
      <span>//1. 将对象序列化成byte[]</span>
      delegate<span>.</span><span>putObject</span><span>(</span>key<span>,</span> <span>serialize</span><span>(</span><span>(</span><span>Serializable</span><span>)</span> object<span>)</span><span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>throw</span> <span>new</span> <span>CacheException</span><span>(</span><span>"SharedCache failed to make a copy of a non-serializable object: "</span> <span>+</span> object<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>private</span> <span>byte</span><span>[</span><span>]</span> <span>serialize</span><span>(</span><span>Serializable</span> value<span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
      <span>ByteArrayOutputStream</span> bos <span>=</span> <span>new</span> <span>ByteArrayOutputStream</span><span>(</span><span>)</span><span>;</span>
      <span>ObjectOutputStream</span> oos <span>=</span> <span>new</span> <span>ObjectOutputStream</span><span>(</span>bos<span>)</span><span>;</span>
      oos<span>.</span><span>writeObject</span><span>(</span>value<span>)</span><span>;</span>
      oos<span>.</span><span>flush</span><span>(</span><span>)</span><span>;</span>
      oos<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
      <span>return</span> bos<span>.</span><span>toByteArray</span><span>(</span><span>)</span><span>;</span>
    <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
      <span>throw</span> <span>new</span> <span>CacheException</span><span>(</span><span>"Error serializing object.  Cause: "</span> <span>+</span> e<span>,</span> e<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>

 <span>public</span> <span>Object</span> <span>getObject</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    <span>Object</span> object <span>=</span> delegate<span>.</span><span>getObject</span><span>(</span>key<span>)</span><span>;</span>
    <span>//1. 获取时候将byte[]反序列化成对象</span>
    <span>return</span> object <span>==</span> <span>null</span> <span>?</span> <span>null</span> <span>:</span> <span>deserialize</span><span>(</span><span>(</span><span>byte</span><span>[</span><span>]</span><span>)</span> object<span>)</span><span>;</span>
  <span>}</span>
  <span>private</span> <span>Serializable</span> <span>deserialize</span><span>(</span><span>byte</span><span>[</span><span>]</span> value<span>)</span> <span>{</span>
    <span>Serializable</span> result<span>;</span>
    <span>try</span> <span>{</span>
      <span>ByteArrayInputStream</span> bis <span>=</span> <span>new</span> <span>ByteArrayInputStream</span><span>(</span>value<span>)</span><span>;</span>
      <span>ObjectInputStream</span> ois <span>=</span> <span>new</span> <span>CustomObjectInputStream</span><span>(</span>bis<span>)</span><span>;</span>
      result <span>=</span> <span>(</span><span>Serializable</span><span>)</span> ois<span>.</span><span>readObject</span><span>(</span><span>)</span><span>;</span>
      ois<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
    <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
      <span>throw</span> <span>new</span> <span>CacheException</span><span>(</span><span>"Error deserializing object.  Cause: "</span> <span>+</span> e<span>,</span> e<span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> result<span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><p>这种就类似于深拷贝,因为简单的浅拷贝会出现线程安全问题,而这种办法,因为字节在被反序列化时，会在创建一个新的对象，这个新的对象的数据和原来对象的数据一模一样。所以说跟深拷贝一样。</p>
<p><a href="https://blog.springlearn.cn/posts/43446/" target="_blank" rel="noopener noreferrer">Java开发之深浅拷贝</a></p>
<h2 id="_2-7-softcache"> 2.7 SoftCache</h2>
<p>从名字上看,Soft其实就是软引用。软引用就是如果内存够,GC就不会清理内存,只有当内存不够用了会出现OOM时候,才开始执行GC清理。</p>
<p>如果要看明白这个源码首先要先了解一点垃圾回收,垃圾回收的前提是还有没有别的地方在引用这个对象了。如果没有别的地方在引用就可以回收了。
本类中为了阻止被回收所以声明了一个变量<code>hardLinksToAvoidGarbageCollection</code>，
也指定了一个将要被回收的垃圾队列<code>queueOfGarbageCollectedEntries</code> 。</p>
<p>这个类的主要内容是当缓存value已经被垃圾回收了，就自动把key也清理。</p>
<p><code>Mybatis</code> 在实际中并没有使用这个类。</p>
<div><pre><code><span>public</span> <span>class</span> <span>SoftCache</span> <span>implements</span> <span>Cache</span> <span>{</span>
  <span>private</span> <span>final</span> <span>Deque</span><span><span>&lt;</span><span>Object</span><span>></span></span> hardLinksToAvoidGarbageCollection<span>;</span>
  <span>private</span> <span>final</span> <span>ReferenceQueue</span><span><span>&lt;</span><span>Object</span><span>></span></span> queueOfGarbageCollectedEntries<span>;</span>
  <span>private</span> <span>final</span> <span>Cache</span> delegate<span>;</span>
  <span>private</span> <span>int</span> numberOfHardLinks<span>;</span>

  <span>public</span> <span>SoftCache</span><span>(</span><span>Cache</span> delegate<span>)</span> <span>{</span>
    <span>this</span><span>.</span>delegate <span>=</span> delegate<span>;</span>
    <span>this</span><span>.</span>numberOfHardLinks <span>=</span> <span>256</span><span>;</span>
    <span>this</span><span>.</span>hardLinksToAvoidGarbageCollection <span>=</span> <span>new</span> <span>LinkedList</span><span><span>&lt;</span><span>Object</span><span>></span></span><span>(</span><span>)</span><span>;</span>
    <span>this</span><span>.</span>queueOfGarbageCollectedEntries <span>=</span> <span>new</span> <span>ReferenceQueue</span><span><span>&lt;</span><span>Object</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p><strong>先看下变量声明</strong></p>
<p><code>hard Links To Avoid Garbage Collection</code>
硬连接,避免垃圾收集
<code>queue Of Garbage Collected Entries</code>
垃圾要收集的队列
<code>number Of Hard Links</code>
硬连接数量</p>
<div><pre><code><span>@Override</span>
  <span>public</span> <span>void</span> <span>putObject</span><span>(</span><span>Object</span> key<span>,</span> <span>Object</span> value<span>)</span> <span>{</span>
    <span>//1. 清除已经被垃圾回收的key</span>
    <span>removeGarbageCollectedItems</span><span>(</span><span>)</span><span>;</span>
    <span>//2. 注意看SoftEntry(),声明一个SoftEnty对象,指定垃圾回收后要进入的队列</span>
    <span>//3. 当SoftEntry中数据要被清理,会添加到类中声明的垃圾要收集的队列中</span>
    delegate<span>.</span><span>putObject</span><span>(</span>key<span>,</span> <span>new</span> <span>SoftEntry</span><span>(</span>key<span>,</span> value<span>,</span> queueOfGarbageCollectedEntries<span>)</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>Object</span> <span>getObject</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    <span>Object</span> result <span>=</span> <span>null</span><span>;</span>
    <span>@SuppressWarnings</span><span>(</span><span>"unchecked"</span><span>)</span> <span>// assumed delegate cache is totally managed by this cache</span>
    <span>SoftReference</span><span><span>&lt;</span><span>Object</span><span>></span></span> softReference <span>=</span> <span>(</span><span>SoftReference</span><span><span>&lt;</span><span>Object</span><span>></span></span><span>)</span> delegate<span>.</span><span>getObject</span><span>(</span>key<span>)</span><span>;</span>
    <span>if</span> <span>(</span>softReference <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      result <span>=</span> softReference<span>.</span><span>get</span><span>(</span><span>)</span><span>;</span>
      <span>if</span> <span>(</span>result <span>==</span> <span>null</span><span>)</span> <span>{</span>
        <span>//1. 如果数据已经没有了,就清理这个key</span>
        delegate<span>.</span><span>removeObject</span><span>(</span>key<span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>// See #586 (and #335) modifications need more than a read lock </span>
        <span>synchronized</span> <span>(</span>hardLinksToAvoidGarbageCollection<span>)</span> <span>{</span>
          <span>//2. 如果key存在,读取时候加一个锁操作,并将缓存值添加到硬连接集合中,避免垃圾回收</span>
          hardLinksToAvoidGarbageCollection<span>.</span><span>addFirst</span><span>(</span>result<span>)</span><span>;</span>
          <span>//3. 构造中指定硬链接最大256,所以如果已经有256个key的时候回开始删除最先添加的key</span>
          <span>if</span> <span>(</span>hardLinksToAvoidGarbageCollection<span>.</span><span>size</span><span>(</span><span>)</span> <span>></span> numberOfHardLinks<span>)</span> <span>{</span>
            hardLinksToAvoidGarbageCollection<span>.</span><span>removeLast</span><span>(</span><span>)</span><span>;</span>
          <span>}</span>
        <span>}</span>
      <span>}</span>
    <span>}</span>
    <span>return</span> result<span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>void</span> <span>clear</span><span>(</span><span>)</span> <span>{</span>
    <span>//执行三清</span>
    <span>synchronized</span> <span>(</span>hardLinksToAvoidGarbageCollection<span>)</span> <span>{</span>
      <span>//1.清除硬链接队列</span>
      hardLinksToAvoidGarbageCollection<span>.</span><span>clear</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
    <span>//2. 清除垃圾队列</span>
    <span>removeGarbageCollectedItems</span><span>(</span><span>)</span><span>;</span>
    <span>//3. 清除缓存</span>
    delegate<span>.</span><span>clear</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>private</span> <span>void</span> <span>removeGarbageCollectedItems</span><span>(</span><span>)</span> <span>{</span>
    <span>SoftEntry</span> sv<span>;</span>
    <span>//清除value已经gc准备回收了,就就将key也清理掉</span>
    <span>while</span> <span>(</span><span>(</span>sv <span>=</span> <span>(</span><span>SoftEntry</span><span>)</span> queueOfGarbageCollectedEntries<span>.</span><span>poll</span><span>(</span><span>)</span><span>)</span> <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      delegate<span>.</span><span>removeObject</span><span>(</span>sv<span>.</span>key<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br></div></div><h2 id="_2-8-synchronizedcache"> 2.8 SynchronizedCache</h2>
<p>从名字看就是同步的缓存,从代码看即所有的方法都被<code>synchronized</code>修饰。</p>
<p><img src="https://img-blog.csdnimg.cn/20191223175457202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="_2-9-transactionalcache"> 2.9 TransactionalCache</h2>
<p>从名字上看就应该能隐隐感觉到跟事务有关,但是这个事务呢又不是数据库的那个事务。只是类似而已是, 即通过 <code>java</code> 代码来实现了一个暂存区域,如果事务成功就添加缓存，事务失败就回滚掉或者说就把暂存区的信息删除,不进入真正的缓存里面。 这个类是比较重要的一个类,因为所谓的二级缓存就是指这个类。既然说了🎧缓存就顺便提一下一级缓存。但是说一级缓存就设计到 <code>Mybatis</code>架构里面一个 <code>Executor</code> 执行器
<img src="https://img-blog.csdnimg.cn/20191223193000589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<p>所有的查询都先从一级缓存中查询
<img src="https://img-blog.csdnimg.cn/20191223193115847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img-blog.csdnimg.cn/20191223193308898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<p>看到这里不由己提一个面试题,面试官会问你知道<code>Mybatis</code> 的一级缓存吗?
一般都会说<code>Mybatis</code> 的一级缓存就是 <code>SqlSession</code> 自带的缓存,这么说也对就是太笼统了，因为 <code>SqlSession</code>其实就是生成 <code>Executor</code> 而一级缓存就是里面query方法中的 <code>localCache</code>。这个时候我们就要看下了<code>localCache</code> 究竟是什么?
看一下构造,突然豁然开朗。原来本篇文章讲的基本就是一级缓存的实现呀。
<img src="https://img-blog.csdnimg.cn/20191223193711876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<p>说到这里感觉有点跑题了，我们不是要看 <code>TransactionalCache</code> 的实现吗?</p>
<p><code>clearOnCommit</code> 为false就是这个事务已经完成了,可以从缓存中读取数据了。</p>
<p>当<code>clearOnCommit</code>为 <code>true</code> ,这个事务正在进行中呢?  来的查询都给你返回 <code>null</code> , 等到 <code>commit</code> 提交时候在查询就可以从缓存中取数据了。</p>
<div><pre><code><span>public</span> <span>class</span> <span>TransactionalCache</span> <span>implements</span> <span>Cache</span> <span>{</span>

  <span>private</span> <span>static</span> <span>final</span> <span>Log</span> log <span>=</span> <span>LogFactory</span><span>.</span><span>getLog</span><span>(</span><span>TransactionalCache</span><span>.</span><span>class</span><span>)</span><span>;</span>
    <span>// 真正的缓存</span>
  <span>private</span> <span>final</span> <span>Cache</span> delegate<span>;</span>
  <span>// 是否清理已经提交的实物</span>
  <span>private</span> <span>boolean</span> clearOnCommit<span>;</span>
  <span>// 可以理解为暂存区</span>
  <span>private</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>Object</span><span>,</span> <span>Object</span><span>></span></span> entriesToAddOnCommit<span>;</span>
  <span>// 缓存中没有的key</span>
  <span>private</span> <span>final</span> <span>Set</span><span><span>&lt;</span><span>Object</span><span>></span></span> entriesMissedInCache<span>;</span>

  <span>public</span> <span>TransactionalCache</span><span>(</span><span>Cache</span> delegate<span>)</span> <span>{</span>
    <span>this</span><span>.</span>delegate <span>=</span> delegate<span>;</span>
    <span>this</span><span>.</span>clearOnCommit <span>=</span> <span>false</span><span>;</span>
    <span>this</span><span>.</span>entriesToAddOnCommit <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>Object</span><span>,</span> <span>Object</span><span>></span></span><span>(</span><span>)</span><span>;</span>
    <span>this</span><span>.</span>entriesMissedInCache <span>=</span> <span>new</span> <span>HashSet</span><span><span>&lt;</span><span>Object</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>String</span> <span>getId</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> delegate<span>.</span><span>getId</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>int</span> <span>getSize</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> delegate<span>.</span><span>getSize</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>Object</span> <span>getObject</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    <span>// 先从缓存中拿数据</span>
    <span>Object</span> object <span>=</span> delegate<span>.</span><span>getObject</span><span>(</span>key<span>)</span><span>;</span>
    <span>if</span> <span>(</span>object <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>// 如果没有添加到set集合中</span>
      entriesMissedInCache<span>.</span><span>add</span><span>(</span>key<span>)</span><span>;</span>
    <span>}</span>
    <span>// 返回数据库的数据。</span>
    <span>if</span> <span>(</span>clearOnCommit<span>)</span> <span>{</span>
      <span>return</span> <span>null</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>return</span> object<span>;</span>
    <span>}</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>ReadWriteLock</span> <span>getReadWriteLock</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>null</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>void</span> <span>putObject</span><span>(</span><span>Object</span> key<span>,</span> <span>Object</span> object<span>)</span> <span>{</span>
    entriesToAddOnCommit<span>.</span><span>put</span><span>(</span>key<span>,</span> object<span>)</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>Object</span> <span>removeObject</span><span>(</span><span>Object</span> key<span>)</span> <span>{</span>
    <span>return</span> <span>null</span><span>;</span>
  <span>}</span>

  <span>@Override</span>
  <span>public</span> <span>void</span> <span>clear</span><span>(</span><span>)</span> <span>{</span>
    clearOnCommit <span>=</span> <span>true</span><span>;</span>
    entriesToAddOnCommit<span>.</span><span>clear</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>public</span> <span>void</span> <span>commit</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>clearOnCommit<span>)</span> <span>{</span>
      delegate<span>.</span><span>clear</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
    <span>flushPendingEntries</span><span>(</span><span>)</span><span>;</span>
    <span>reset</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>public</span> <span>void</span> <span>rollback</span><span>(</span><span>)</span> <span>{</span>
    <span>unlockMissedEntries</span><span>(</span><span>)</span><span>;</span>
    <span>reset</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>private</span> <span>void</span> <span>reset</span><span>(</span><span>)</span> <span>{</span>
    <span>//1. 是否清除提交</span>
    clearOnCommit <span>=</span> <span>false</span><span>;</span>
    <span>//2. 暂存区清理,代表这个事务从头开始做了，之前的清理掉</span>
    entriesToAddOnCommit<span>.</span><span>clear</span><span>(</span><span>)</span><span>;</span>
    <span>//3. 同上</span>
    entriesMissedInCache<span>.</span><span>clear</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>
    
  <span>/** 
   * 将暂存区的数据提交到缓存中
   **/</span>
  <span>private</span> <span>void</span> <span>flushPendingEntries</span><span>(</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>Map<span>.</span>Entry</span><span><span>&lt;</span><span>Object</span><span>,</span> <span>Object</span><span>></span></span> entry <span>:</span> entriesToAddOnCommit<span>.</span><span>entrySet</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      delegate<span>.</span><span>putObject</span><span>(</span>entry<span>.</span><span>getKey</span><span>(</span><span>)</span><span>,</span> entry<span>.</span><span>getValue</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
    <span>//如果缓存中不包含这个key,就将key对应的value设置为默认值null</span>
    <span>for</span> <span>(</span><span>Object</span> entry <span>:</span> entriesMissedInCache<span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>!</span>entriesToAddOnCommit<span>.</span><span>containsKey</span><span>(</span>entry<span>)</span><span>)</span> <span>{</span>
        delegate<span>.</span><span>putObject</span><span>(</span>entry<span>,</span> <span>null</span><span>)</span><span>;</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>

  <span>// 移除缺失的key,就是这个缓存中没有的key都移除掉</span>
  <span>private</span> <span>void</span> <span>unlockMissedEntries</span><span>(</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>Object</span> entry <span>:</span> entriesMissedInCache<span>)</span> <span>{</span>
      <span>try</span> <span>{</span>
        delegate<span>.</span><span>removeObject</span><span>(</span>entry<span>)</span><span>;</span>
      <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
        log<span>.</span><span>warn</span><span>(</span><span>"Unexpected exception while notifiying a rollback to the cache adapter."</span>
            <span>+</span> <span>"Consider upgrading your cache adapter to the latest version.  Cause: "</span> <span>+</span> e<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>

<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br></div></div><h2 id="_2-10-weakcache"> 2.10 WeakCache</h2>
<p>从名字上看跟 <code>SoftCache</code> 有点关系,Soft引用是当内存不够用时候才清理, 而<code>Weak</code> 弱引用则相反, 只要有GC就会回收。 所以他们的类型特性并不是自己实现的，而是依赖于 <code>Reference&lt;T&gt;</code> 类的特性，所以代码就不看了基本和 <code>SoftCache</code> 实现一摸一样。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-30T15:42:58.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第08篇:Mybatis的插件设计分析</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/%E6%8F%92%E4%BB%B6%E5%88%86%E6%9E%90/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/%E6%8F%92%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    <updated>2022-04-04T17:49:44.000Z</updated>
    <content type="html"><![CDATA[<PageBanner/>
<p>参考文档: <a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<h2 id="一、-插件设计介绍"> 一、 插件设计介绍</h2>
<p>Mybatis 中的插件都是通过代理方式来实现的,通过拦截执行器中指定的方法来达到改变核心执行代码的方式。举一个列子,查询方法核心都是通过 Executor来进行sql执行的。那么我们就可以通过拦截下面的方法来改变核心代码。基本原理就是这样,下面我们在来看 Mybatis 是如何处理插件。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>Executor</span> <span>{</span>

  <span>ResultHandler</span> NO_RESULT_HANDLER <span>=</span> <span>null</span><span>;</span>

  <span>int</span> <span>update</span><span>(</span><span>MappedStatement</span> ms<span>,</span> <span>Object</span> parameter<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>

  <span><span>&lt;</span><span>E</span><span>></span></span> <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>query</span><span>(</span><span>MappedStatement</span> ms<span>,</span> <span>Object</span> parameter<span>,</span> <span>RowBounds</span> rowBounds<span>,</span> <span>ResultHandler</span> resultHandler<span>,</span> <span>CacheKey</span> cacheKey<span>,</span> <span>BoundSql</span> boundSql<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>

  <span><span>&lt;</span><span>E</span><span>></span></span> <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>query</span><span>(</span><span>MappedStatement</span> ms<span>,</span> <span>Object</span> parameter<span>,</span> <span>RowBounds</span> rowBounds<span>,</span> <span>ResultHandler</span> resultHandler<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>

  <span><span>&lt;</span><span>E</span><span>></span></span> <span>Cursor</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>queryCursor</span><span>(</span><span>MappedStatement</span> ms<span>,</span> <span>Object</span> parameter<span>,</span> <span>RowBounds</span> rowBounds<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>
  <span>.</span><span>.</span><span>.</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p><img src="https://img-blog.csdnimg.cn/20191224102308710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Interceptor</code></td>
<td>接口</td>
<td>插件都需要实现的接口,封装代理执行方法及参数信息</td>
</tr>
<tr>
<td><code>InterceptorChain</code></td>
<td>类</td>
<td>拦截链</td>
</tr>
<tr>
<td><code>InvocationHandler</code></td>
<td>接口</td>
<td>JDK代理的接口,凡是JDK中的代理都要实现该接口</td>
</tr>
<tr>
<td><code>@Intercepts</code></td>
<td>注解</td>
<td>用于声明要代理和 <code>@Signature</code> 配合使用</td>
</tr>
<tr>
<td><code>@Signature</code></td>
<td>注解</td>
<td>用于声明要代理拦截的方法</td>
</tr>
<tr>
<td><code>Plugin</code></td>
<td>类</td>
<td>代理的具体生成类</td>
</tr>
</tbody>
</table>
<h2 id="_1-1-interceptor"> 1.1 Interceptor</h2>
<p>插件都需要实现的接口,封装代理执行方法及参数信息</p>
<div><pre><code><span>public</span> <span>interface</span> <span>Interceptor</span> <span>{</span>
    <span>// 执行方法体的封装,所有的拦截方法逻辑都在这里面写。</span>
  <span>Object</span> <span>intercept</span><span>(</span><span>Invocation</span> invocation<span>)</span> <span>throws</span> <span>Throwable</span><span>;</span>
    <span>// 如果要代理,就用Plugin.wrap(...),如果不代理就原样返回</span>
  <span>Object</span> <span>plugin</span><span>(</span><span>Object</span> target<span>)</span><span>;</span>
    <span>// 可以添加配置,主要是xml配置时候可以从xml中读取配置信息到拦截器里面自己解析</span>
  <span>void</span> <span>setProperties</span><span>(</span><span>Properties</span> properties<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_1-2-interceptorchain"> 1.2 InterceptorChain</h2>
<p>拦截链,为什么需要拦截链,假如我们要对A进行代理, 具体的代理类有B和C。 我们要同时将B和C的逻辑都放到代理类里面，那我们会首先将A和B生成代理类,然后在前面生成代理的基础上将C和前面生成的代理类在生成一个代理对象。这个类就是要做这件事 <code>pluginAll</code></p>
<div><pre><code><span>public</span> <span>class</span> <span>InterceptorChain</span> <span>{</span>

  <span>private</span> <span>final</span> <span>List</span><span><span>&lt;</span><span>Interceptor</span><span>></span></span> interceptors <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>Interceptor</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  
  <span>// 这里target就是A,而List中的Interceptor就相当于B和C,通过循环方式生成统一代理类</span>
  <span>public</span> <span>Object</span> <span>pluginAll</span><span>(</span><span>Object</span> target<span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>Interceptor</span> interceptor <span>:</span> interceptors<span>)</span> <span>{</span>
      <span>//1. 是否需要代理,需要代理生成代理类放回,不需要原样返回。通过for循环的方式将所有对应的插件整合成一个代理对象</span>
      target <span>=</span> interceptor<span>.</span><span>plugin</span><span>(</span>target<span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> target<span>;</span>
  <span>}</span>
  <span>.</span><span>.</span><span>.</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id="_1-3-invocationhandler"> 1.3 InvocationHandler</h2>
<p>JDK代理的接口,凡是JDK中的代理都要实现该接口。这个比较基础，如果这个不清楚,那么代理就看不懂了。所以就不说了。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>InvocationHandler</span> <span>{</span>
      <span>public</span> <span>Object</span> <span>invoke</span><span>(</span><span>Object</span> proxy<span>,</span> <span>Method</span> method<span>,</span> <span>Object</span><span>[</span><span>]</span> args<span>)</span>
        <span>throws</span> <span>Throwable</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_1-4-intercepts-和-signature"> 1.4 <code>@Intercepts</code> 和 <code>@Signature</code></h2>
<p>这两个注解是配合使用的,用于指定要代理的类和方法。前面①说了,插件的核心逻辑是拦截执行器的方法,那么这里我们看下如何声明要拦截的类和方法。我们看一下分页插件如何声明拦截。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td>就是要拦截的类(Executor/ParameterHandler/ResultSetHandler/StatementHandler)</td>
</tr>
<tr>
<td>method</td>
<td>要拦截的方法</td>
</tr>
<tr>
<td>args</td>
<td>要拦截的方法的参数(因为有相同的方法,所以要指定拦截的方法和方法参数)</td>
</tr>
</tbody>
</table>
<div><pre><code><span>@Intercepts</span><span>(</span><span>@Signature</span><span>(</span>type <span>=</span> <span>Executor</span><span>.</span><span>class</span><span>,</span> method <span>=</span> <span>"query"</span><span>,</span> args <span>=</span> <span>{</span> <span>MappedStatement</span><span>.</span><span>class</span><span>,</span> <span>Object</span><span>.</span><span>class</span><span>,</span>
        <span>RowBounds</span><span>.</span><span>class</span><span>,</span> <span>ResultHandler</span><span>.</span><span>class</span> <span>}</span><span>)</span><span>)</span>
<span>public</span> <span>class</span> <span>MybatisPagerPlugin</span> <span>implements</span> <span>Interceptor</span> <span>{</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><code>args</code> 要拦截的方法的入参(因为有相同的方法,所以要指定拦截的方法和方法参数)，比如 <code>Executor</code> 中就有2个 <code>query</code> 方法。所以要通过args来确定要拦截哪一个。</p>
<p><img src="https://img-blog.csdnimg.cn/20191224111008677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="_1-5-plugin"> 1.5 Plugin</h2>
<p>代理的具体生成类,解析 <code>@Intercepts</code> 和 <code>@Signature</code>  注解生成代理。</p>
<p>我们看几个重要的方法。</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>处理逻辑</th>
</tr>
</thead>
<tbody>
<tr>
<td>getSignatureMap</td>
<td>解析@Intercepts和@Signature,找到要拦截的方法</td>
</tr>
<tr>
<td>getAllInterfaces</td>
<td>找到代理类的接口,jdk代理必须要有接口</td>
</tr>
<tr>
<td>invoke</td>
<td>是否需要拦截判断</td>
</tr>
</tbody>
</table>
<div><pre><code><span>public</span> <span>class</span> <span>Plugin</span> <span>implements</span> <span>InvocationHandler</span> <span>{</span>
  
  <span>//解析@Intercepts和@Signature找到要拦截的方法</span>
  <span>private</span> <span>static</span> <span>Map</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>,</span> <span>Set</span><span>&lt;</span><span>Method</span><span>></span><span>></span></span> <span>getSignatureMap</span><span>(</span><span>Interceptor</span> interceptor<span>)</span> <span>{</span>
    <span>Intercepts</span> interceptsAnnotation <span>=</span> interceptor<span>.</span><span>getClass</span><span>(</span><span>)</span><span>.</span><span>getAnnotation</span><span>(</span><span>Intercepts</span><span>.</span><span>class</span><span>)</span><span>;</span>
    <span>// issue #251</span>
    <span>if</span> <span>(</span>interceptsAnnotation <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>throw</span> <span>new</span> <span>PluginException</span><span>(</span><span>"No @Intercepts annotation was found in interceptor "</span> <span>+</span> interceptor<span>.</span><span>getClass</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>      
    <span>}</span>
    <span>Signature</span><span>[</span><span>]</span> sigs <span>=</span> interceptsAnnotation<span>.</span><span>value</span><span>(</span><span>)</span><span>;</span>
    <span>Map</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>,</span> <span>Set</span><span>&lt;</span><span>Method</span><span>></span><span>></span></span> signatureMap <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>,</span> <span>Set</span><span>&lt;</span><span>Method</span><span>></span><span>></span></span><span>(</span><span>)</span><span>;</span>
    <span>for</span> <span>(</span><span>Signature</span> sig <span>:</span> sigs<span>)</span> <span>{</span>
      <span>Set</span><span><span>&lt;</span><span>Method</span><span>></span></span> methods <span>=</span> signatureMap<span>.</span><span>get</span><span>(</span>sig<span>.</span><span>type</span><span>(</span><span>)</span><span>)</span><span>;</span>
      <span>if</span> <span>(</span>methods <span>==</span> <span>null</span><span>)</span> <span>{</span>
        methods <span>=</span> <span>new</span> <span>HashSet</span><span><span>&lt;</span><span>Method</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        signatureMap<span>.</span><span>put</span><span>(</span>sig<span>.</span><span>type</span><span>(</span><span>)</span><span>,</span> methods<span>)</span><span>;</span>
      <span>}</span>
      <span>try</span> <span>{</span>
        <span>//通过方法名和方法参数查找方法</span>
        <span>Method</span> method <span>=</span> sig<span>.</span><span>type</span><span>(</span><span>)</span><span>.</span><span>getMethod</span><span>(</span>sig<span>.</span><span>method</span><span>(</span><span>)</span><span>,</span> sig<span>.</span><span>args</span><span>(</span><span>)</span><span>)</span><span>;</span>
        methods<span>.</span><span>add</span><span>(</span>method<span>)</span><span>;</span>
      <span>}</span> <span>catch</span> <span>(</span><span>NoSuchMethodException</span> e<span>)</span> <span>{</span>
        <span>throw</span> <span>new</span> <span>PluginException</span><span>(</span><span>"Could not find method on "</span> <span>+</span> sig<span>.</span><span>type</span><span>(</span><span>)</span> <span>+</span> <span>" named "</span> <span>+</span> sig<span>.</span><span>method</span><span>(</span><span>)</span> <span>+</span> <span>". Cause: "</span> <span>+</span> e<span>,</span> e<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span>
    <span>return</span> signatureMap<span>;</span>
  <span>}</span>
  
  <span>//因为是jdk代理所以必须要有接口,如果没有接口,就不会生成代理</span>
  <span>private</span> <span>static</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span><span>[</span><span>]</span> <span>getAllInterfaces</span><span>(</span><span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> type<span>,</span> <span>Map</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>,</span> <span>Set</span><span>&lt;</span><span>Method</span><span>></span><span>></span></span> signatureMap<span>)</span> <span>{</span>
    <span>Set</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>></span></span> interfaces <span>=</span> <span>new</span> <span>HashSet</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>></span></span><span>(</span><span>)</span><span>;</span>
    <span>while</span> <span>(</span>type <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>for</span> <span>(</span><span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> c <span>:</span> type<span>.</span><span>getInterfaces</span><span>(</span><span>)</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>signatureMap<span>.</span><span>containsKey</span><span>(</span>c<span>)</span><span>)</span> <span>{</span>
          interfaces<span>.</span><span>add</span><span>(</span>c<span>)</span><span>;</span>
        <span>}</span>
      <span>}</span>
      type <span>=</span> type<span>.</span><span>getSuperclass</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> interfaces<span>.</span><span>toArray</span><span>(</span><span>new</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span><span>[</span>interfaces<span>.</span><span>size</span><span>(</span><span>)</span><span>]</span><span>)</span><span>;</span>
  <span>}</span>
  
  <span>@Override</span>
  <span>public</span> <span>Object</span> <span>invoke</span><span>(</span><span>Object</span> proxy<span>,</span> <span>Method</span> method<span>,</span> <span>Object</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>Throwable</span> <span>{</span>
    <span>try</span> <span>{</span>
      <span>//执行时候看当前执行的方法是否需要被拦截,如果需要就调用拦截器中的方法</span>
      <span>Set</span><span><span>&lt;</span><span>Method</span><span>></span></span> methods <span>=</span> signatureMap<span>.</span><span>get</span><span>(</span>method<span>.</span><span>getDeclaringClass</span><span>(</span><span>)</span><span>)</span><span>;</span>
      <span>if</span> <span>(</span>methods <span>!=</span> <span>null</span> <span>&amp;&amp;</span> methods<span>.</span><span>contains</span><span>(</span>method<span>)</span><span>)</span> <span>{</span>
        <span>return</span> interceptor<span>.</span><span>intercept</span><span>(</span><span>new</span> <span>Invocation</span><span>(</span>target<span>,</span> method<span>,</span> args<span>)</span><span>)</span><span>;</span>
      <span>}</span>
      <span>return</span> method<span>.</span><span>invoke</span><span>(</span>target<span>,</span> args<span>)</span><span>;</span>
    <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
      <span>throw</span> <span>ExceptionUtil</span><span>.</span><span>unwrapThrowable</span><span>(</span>e<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br></div></div><h2 id="二、问题总结"> 二、问题总结</h2>
<h2 id="_2-1-插件能拦截那些类"> 2.1 插件能拦截那些类?</h2>
<p>前面已经说过了，这里在总结下。这部分的源码在 <code>Configuration</code>。可以看到很简单只有一行。<code>InterceptorChain#pluginAll</code></p>
<div><pre><code>  <span>public</span> <span>ParameterHandler</span> <span>newParameterHandler</span><span>(</span><span>MappedStatement</span> mappedStatement<span>,</span> <span>Object</span> parameterObject<span>,</span> <span>BoundSql</span> boundSql<span>)</span> <span>{</span>
    <span>ParameterHandler</span> parameterHandler <span>=</span> mappedStatement<span>.</span><span>getLang</span><span>(</span><span>)</span><span>.</span><span>createParameterHandler</span><span>(</span>mappedStatement<span>,</span> parameterObject<span>,</span> boundSql<span>)</span><span>;</span>
    parameterHandler <span>=</span> <span>(</span><span>ParameterHandler</span><span>)</span> interceptorChain<span>.</span><span>pluginAll</span><span>(</span>parameterHandler<span>)</span><span>;</span>
    <span>return</span> parameterHandler<span>;</span>
  <span>}</span>

  <span>public</span> <span>ResultSetHandler</span> <span>newResultSetHandler</span><span>(</span><span>Executor</span> executor<span>,</span> <span>MappedStatement</span> mappedStatement<span>,</span> <span>RowBounds</span> rowBounds<span>,</span> <span>ParameterHandler</span> parameterHandler<span>,</span>
      <span>ResultHandler</span> resultHandler<span>,</span> <span>BoundSql</span> boundSql<span>)</span> <span>{</span>
    <span>ResultSetHandler</span> resultSetHandler <span>=</span> <span>new</span> <span>DefaultResultSetHandler</span><span>(</span>executor<span>,</span> mappedStatement<span>,</span> parameterHandler<span>,</span> resultHandler<span>,</span> boundSql<span>,</span> rowBounds<span>)</span><span>;</span>
    resultSetHandler <span>=</span> <span>(</span><span>ResultSetHandler</span><span>)</span> interceptorChain<span>.</span><span>pluginAll</span><span>(</span>resultSetHandler<span>)</span><span>;</span>
    <span>return</span> resultSetHandler<span>;</span>
  <span>}</span>

  <span>public</span> <span>StatementHandler</span> <span>newStatementHandler</span><span>(</span><span>Executor</span> executor<span>,</span> <span>MappedStatement</span> mappedStatement<span>,</span> <span>Object</span> parameterObject<span>,</span> <span>RowBounds</span> rowBounds<span>,</span> <span>ResultHandler</span> resultHandler<span>,</span> <span>BoundSql</span> boundSql<span>)</span> <span>{</span>
    <span>StatementHandler</span> statementHandler <span>=</span> <span>new</span> <span>RoutingStatementHandler</span><span>(</span>executor<span>,</span> mappedStatement<span>,</span> parameterObject<span>,</span> rowBounds<span>,</span> resultHandler<span>,</span> boundSql<span>)</span><span>;</span>
    statementHandler <span>=</span> <span>(</span><span>StatementHandler</span><span>)</span> interceptorChain<span>.</span><span>pluginAll</span><span>(</span>statementHandler<span>)</span><span>;</span>
    <span>return</span> statementHandler<span>;</span>
  <span>}</span>
  
  <span>public</span> <span>Executor</span> <span>newExecutor</span><span>(</span><span>Transaction</span> transaction<span>,</span> <span>ExecutorType</span> executorType<span>)</span> <span>{</span>
    executorType <span>=</span> executorType <span>==</span> <span>null</span> <span>?</span> defaultExecutorType <span>:</span> executorType<span>;</span>
    executorType <span>=</span> executorType <span>==</span> <span>null</span> <span>?</span> <span>ExecutorType</span><span>.</span>SIMPLE <span>:</span> executorType<span>;</span>
    <span>Executor</span> executor<span>;</span>
    <span>if</span> <span>(</span><span>ExecutorType</span><span>.</span>BATCH <span>==</span> executorType<span>)</span> <span>{</span>
      executor <span>=</span> <span>new</span> <span>BatchExecutor</span><span>(</span><span>this</span><span>,</span> transaction<span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>ExecutorType</span><span>.</span>REUSE <span>==</span> executorType<span>)</span> <span>{</span>
      executor <span>=</span> <span>new</span> <span>ReuseExecutor</span><span>(</span><span>this</span><span>,</span> transaction<span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      executor <span>=</span> <span>new</span> <span>SimpleExecutor</span><span>(</span><span>this</span><span>,</span> transaction<span>)</span><span>;</span>
    <span>}</span>
    <span>if</span> <span>(</span>cacheEnabled<span>)</span> <span>{</span>
      executor <span>=</span> <span>new</span> <span>CachingExecutor</span><span>(</span>executor<span>)</span><span>;</span>
    <span>}</span>
    executor <span>=</span> <span>(</span><span>Executor</span><span>)</span> interceptorChain<span>.</span><span>pluginAll</span><span>(</span>executor<span>)</span><span>;</span>
    <span>return</span> executor<span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><h3 id="_2-1-1-parameterhandler"> 2.1.1 ParameterHandler</h3>
<p>ParameterHandler的核心方法是setParameters()方法，该方法主要负责调用PreparedStatement的set*()方法为SQL语句绑定实参:
这里能做到的扩展不多。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>ParameterHandler</span> <span>{</span>
  <span>// 对方法的入参进行处理,注意只有在 statementType="CALLABLE" 生效</span>
  <span>Object</span> <span>getParameterObject</span><span>(</span><span>)</span><span>;</span>
  <span>// 预处理参数处理</span>
  <span>void</span> <span>setParameters</span><span>(</span><span>PreparedStatement</span> ps<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>我们来实现一下,我们插入user信息,通过插件的方式修改入参。</p>
<div><pre><code>    <span>/**
     * 注意getParameterObject只会在 statementType="CALLABLE"生效
     * insert into T_USER (token_id, uid, name)
     * values (#{tokenId,jdbcType=CHAR}, #{uid,jdbcType=INTEGER}, #{name,jdbcType=CHAR})
     */</span>
    <span>@Intercepts</span><span>(</span><span>@Signature</span><span>(</span>type <span>=</span> <span>ParameterHandler</span><span>.</span><span>class</span><span>,</span> method <span>=</span> <span>"setParameters"</span><span>,</span> args <span>=</span> <span>{</span><span>PreparedStatement</span><span>.</span><span>class</span><span>}</span><span>)</span><span>)</span>
    <span>public</span> <span>static</span> <span>class</span> <span>ParameterInterceptor</span> <span>implements</span> <span>Interceptor</span> <span>{</span>
        <span>@Override</span>
        <span>public</span> <span>Object</span> <span>intercept</span><span>(</span><span>Invocation</span> invocation<span>)</span> <span>throws</span> <span>Throwable</span> <span>{</span>
            <span>Object</span> proceed <span>=</span> invocation<span>.</span><span>proceed</span><span>(</span><span>)</span><span>;</span>
            <span>PreparedStatement</span> preparedStatement <span>=</span> <span>(</span><span>PreparedStatement</span><span>)</span> invocation<span>.</span><span>getArgs</span><span>(</span><span>)</span><span>[</span><span>0</span><span>]</span><span>;</span>
            <span>// 插入时候修改第三个参数,也就是name = 孙悟空</span>
            <span>int</span> parameterCount <span>=</span> preparedStatement<span>.</span><span>getParameterMetaData</span><span>(</span><span>)</span><span>.</span><span>getParameterCount</span><span>(</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>parameterCount <span>!=</span> <span>0</span><span>)</span> <span>{</span>
                preparedStatement<span>.</span><span>setString</span><span>(</span><span>3</span><span>,</span> <span>"孙悟空"</span><span>)</span><span>;</span>
            <span>}</span>
            <span>return</span> proceed<span>;</span>
        <span>}</span>
    <span>}</span>

    <span>@Test</span>
    <span>public</span> <span>void</span> <span>parameterHandler</span><span>(</span><span>)</span> <span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
        configuration<span>.</span><span>addInterceptor</span><span>(</span><span>new</span> <span>ParameterInterceptor</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 参数: autoCommit,从名字上看就是是否自动提交事务</span>
        <span>SqlSession</span> sqlSession <span>=</span> sqlSessionFactory<span>.</span><span>openSession</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>// 获取Mapper</span>
        <span>TUserMapper</span> mapper <span>=</span> configuration<span>.</span><span>getMapperRegistry</span><span>(</span><span>)</span><span>.</span><span>getMapper</span><span>(</span><span>TUserMapper</span><span>.</span><span>class</span><span>,</span> sqlSession<span>)</span><span>;</span>
        <span>TUser</span> tUser <span>=</span> <span>new</span> <span>TUser</span><span>(</span><span>)</span><span>;</span>
        tUser<span>.</span><span>setName</span><span>(</span><span>"唐三藏"</span><span>)</span><span>;</span>
        tUser<span>.</span><span>setTokenId</span><span>(</span><span>"testTokenId1"</span><span>)</span><span>;</span>
        mapper<span>.</span><span>insert</span><span>(</span>tUser<span>)</span><span>;</span>
        <span>// 这里虽然设置的名字是唐三藏，但是插件中修改为了孙悟空</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>mapper<span>.</span><span>selectAll</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 数据插入后，执行查询，然后回滚数据</span>
        sqlSession<span>.</span><span>rollback</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><h3 id="_2-1-2-resultsethandler"> 2.1.2 ResultSetHandler</h3>
<p>从名字就可以看出来是对结果集进行处理。这里我们通过插件的方式, 在查询语句中增加一条数据库原本不存在的数据。</p>
<div><pre><code>    <span>/**
     * 通过对list集合的数据进行修改,增加一条数据库不存在的数据
     */</span>
    <span>@Intercepts</span><span>(</span><span>@Signature</span><span>(</span>type <span>=</span> <span>ResultSetHandler</span><span>.</span><span>class</span><span>,</span> method <span>=</span> <span>"handleResultSets"</span><span>,</span> args <span>=</span> <span>{</span><span>Statement</span><span>.</span><span>class</span><span>}</span><span>)</span><span>)</span>
    <span>public</span> <span>static</span> <span>class</span> <span>ResultSetHandlerInterceptor</span> <span>implements</span> <span>Interceptor</span> <span>{</span>
        <span>@Override</span>
        <span>public</span> <span>Object</span> <span>intercept</span><span>(</span><span>Invocation</span> invocation<span>)</span> <span>throws</span> <span>Throwable</span> <span>{</span>
            <span>Object</span> proceed <span>=</span> invocation<span>.</span><span>proceed</span><span>(</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>proceed <span>instanceof</span> <span>List</span><span>)</span> <span>{</span>
                <span>ArrayList</span><span><span>&lt;</span><span>TUser</span><span>></span></span> newResult <span>=</span> <span>(</span><span>ArrayList</span><span><span>&lt;</span><span>TUser</span><span>></span></span><span>)</span> proceed<span>;</span>
                <span>TUser</span> tUser <span>=</span> <span>new</span> <span>TUser</span><span>(</span><span>)</span><span>;</span>
                tUser<span>.</span><span>setName</span><span>(</span><span>"如来佛祖"</span><span>)</span><span>;</span>
                newResult<span>.</span><span>add</span><span>(</span>tUser<span>)</span><span>;</span>
                proceed <span>=</span> newResult<span>;</span>
            <span>}</span>
            <span>return</span> proceed<span>;</span>
        <span>}</span>
    <span>}</span>

    <span>@Test</span>
    <span>public</span> <span>void</span> <span>resultSetHandlerTest</span><span>(</span><span>)</span> <span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
        configuration<span>.</span><span>addInterceptor</span><span>(</span><span>new</span> <span>ResultSetHandlerInterceptor</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 参数: autoCommit,从名字上看就是是否自动提交事务</span>
        <span>SqlSession</span> sqlSession <span>=</span> sqlSessionFactory<span>.</span><span>openSession</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>// 获取Mapper</span>
        <span>TUserMapper</span> mapper <span>=</span> configuration<span>.</span><span>getMapperRegistry</span><span>(</span><span>)</span><span>.</span><span>getMapper</span><span>(</span><span>TUserMapper</span><span>.</span><span>class</span><span>,</span> sqlSession<span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>mapper<span>.</span><span>selectAll</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 数据插入后，执行查询，然后回滚数据</span>
        sqlSession<span>.</span><span>rollback</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><h3 id="_2-1-3-statementhandler"> 2.1.3 StatementHandler</h3>
<div><pre><code>    <span>/**
     * 我们本来是一条查询语句，我们打印下sql信息
     */</span>
    <span>@Intercepts</span><span>(</span><span>@Signature</span><span>(</span>type <span>=</span> <span>StatementHandler</span><span>.</span><span>class</span><span>,</span> method <span>=</span> <span>"query"</span><span>,</span> args <span>=</span> <span>{</span><span>Statement</span><span>.</span><span>class</span><span>,</span> <span>ResultHandler</span><span>.</span><span>class</span><span>}</span><span>)</span><span>)</span>
    <span>public</span> <span>static</span> <span>class</span> <span>StatementHandlerInterceptor</span> <span>implements</span> <span>Interceptor</span> <span>{</span>

        <span>@Override</span>
        <span>public</span> <span>Object</span> <span>intercept</span><span>(</span><span>Invocation</span> invocation<span>)</span> <span>throws</span> <span>Throwable</span> <span>{</span>
            <span>Object</span> proceed <span>=</span> invocation<span>.</span><span>proceed</span><span>(</span><span>)</span><span>;</span>
            <span>Object</span><span>[</span><span>]</span> args <span>=</span> invocation<span>.</span><span>getArgs</span><span>(</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>args<span>[</span><span>0</span><span>]</span> <span>instanceof</span> <span>ClientPreparedStatement</span><span>)</span> <span>{</span>
                <span>ClientPreparedStatement</span> statement <span>=</span> <span>(</span><span>ClientPreparedStatement</span><span>)</span> args<span>[</span><span>0</span><span>]</span><span>;</span>
                <span>if</span> <span>(</span>statement<span>.</span><span>getQuery</span><span>(</span><span>)</span> <span>instanceof</span> <span>ClientPreparedQuery</span><span>)</span> <span>{</span>
                    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>(</span><span>(</span><span>ClientPreparedQuery</span><span>)</span> statement<span>.</span><span>getQuery</span><span>(</span><span>)</span><span>)</span><span>.</span><span>getOriginalSql</span><span>(</span><span>)</span><span>)</span><span>;</span>
                <span>}</span>
            <span>}</span>
            <span>return</span> proceed<span>;</span>
        <span>}</span>
    <span>}</span>

    <span>@Test</span>
    <span>public</span> <span>void</span> <span>resultSetHandlerTest</span><span>(</span><span>)</span> <span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
        configuration<span>.</span><span>addInterceptor</span><span>(</span><span>new</span> <span>StatementHandlerInterceptor</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 参数: autoCommit,从名字上看就是是否自动提交事务</span>
        <span>SqlSession</span> sqlSession <span>=</span> sqlSessionFactory<span>.</span><span>openSession</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>// 获取Mapper</span>
        <span>TUserMapper</span> mapper <span>=</span> configuration<span>.</span><span>getMapperRegistry</span><span>(</span><span>)</span><span>.</span><span>getMapper</span><span>(</span><span>TUserMapper</span><span>.</span><span>class</span><span>,</span> sqlSession<span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>mapper<span>.</span><span>selectAll</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 数据插入后，执行查询，然后回滚数据</span>
        sqlSession<span>.</span><span>rollback</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><h3 id="_2-1-4-executor"> 2.1.4 Executor</h3>
<p>Executor 是个好东西，从他能获取基本你能想到的所有信息。你可以在这里做sql动态变更、也可以做sql语句分析，同时也可以获取某个Mapper的签名信息。总之功能非常强大。一般的插件都是
在这里做文章。如下面例子就是动态的修改了sql。</p>
<div><pre><code>    <span>/**
     * 动态修改sql信息。
     * 这里因为我们知道要使用查询语句,所以不做sql分析。如果要学习sql分析请看其他文章
     */</span>
    <span>@Intercepts</span><span>(</span><span>@Signature</span><span>(</span>type <span>=</span> <span>Executor</span><span>.</span><span>class</span><span>,</span> method <span>=</span> <span>"query"</span><span>,</span>
            args <span>=</span> <span>{</span><span>MappedStatement</span><span>.</span><span>class</span><span>,</span> <span>Object</span><span>.</span><span>class</span><span>,</span> <span>RowBounds</span><span>.</span><span>class</span><span>,</span> <span>ResultHandler</span><span>.</span><span>class</span><span>}</span><span>)</span><span>)</span>
    <span>public</span> <span>static</span> <span>class</span> <span>ExecutorInterceptor</span> <span>implements</span> <span>Interceptor</span> <span>{</span>
        <span>@Override</span>
        <span>public</span> <span>Object</span> <span>intercept</span><span>(</span><span>Invocation</span> invocation<span>)</span> <span>throws</span> <span>Throwable</span> <span>{</span>
            <span>Object</span><span>[</span><span>]</span> args <span>=</span> invocation<span>.</span><span>getArgs</span><span>(</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>args<span>[</span><span>0</span><span>]</span> <span>instanceof</span> <span>MappedStatement</span><span>)</span> <span>{</span>
                <span>MappedStatement</span> arg <span>=</span> <span>(</span><span>MappedStatement</span><span>)</span> args<span>[</span><span>0</span><span>]</span><span>;</span>
                <span>Configuration</span> configuration <span>=</span> arg<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
                <span>StaticSqlSource</span> staticSqlSource <span>=</span> <span>new</span> <span>StaticSqlSource</span><span>(</span>configuration<span>,</span> <span>"select name from T_USER"</span><span>)</span><span>;</span>
                <span>Field</span> sqlSourceField <span>=</span> arg<span>.</span><span>getClass</span><span>(</span><span>)</span><span>.</span><span>getDeclaredField</span><span>(</span><span>"sqlSource"</span><span>)</span><span>;</span>
                sqlSourceField<span>.</span><span>setAccessible</span><span>(</span><span>true</span><span>)</span><span>;</span>
                sqlSourceField<span>.</span><span>set</span><span>(</span>arg<span>,</span> staticSqlSource<span>)</span><span>;</span>
            <span>}</span>
            <span>return</span> invocation<span>.</span><span>proceed</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>

    <span>@Test</span>
    <span>public</span> <span>void</span> <span>executor</span><span>(</span><span>)</span> <span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
        configuration<span>.</span><span>addInterceptor</span><span>(</span><span>new</span> <span>ExecutorInterceptor</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 参数: autoCommit,从名字上看就是是否自动提交事务</span>
        <span>SqlSession</span> sqlSession <span>=</span> sqlSessionFactory<span>.</span><span>openSession</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>// 获取Mapper</span>
        <span>TUserMapper</span> mapper <span>=</span> configuration<span>.</span><span>getMapperRegistry</span><span>(</span><span>)</span><span>.</span><span>getMapper</span><span>(</span><span>TUserMapper</span><span>.</span><span>class</span><span>,</span> sqlSession<span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>mapper<span>.</span><span>selectAll</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 数据插入后，执行查询，然后回滚数据</span>
        sqlSession<span>.</span><span>rollback</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><h2 id="_2-2-如何定义一个拦截器"> 2.2 如何定义一个拦截器?</h2>
<table>
<thead>
<tr>
<th>属性</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td>就是要拦截的类(Executor/ParameterHandler/ResultSetHandler/StatementHandler)</td>
</tr>
<tr>
<td>method</td>
<td>要拦截的方法</td>
</tr>
<tr>
<td>args</td>
<td>要拦截的方法的参数(因为有相同的方法,所以要指定拦截的方法和方法参数)</td>
</tr>
</tbody>
</table>
<div><pre><code>    <span>@Intercepts</span><span>(</span><span>@Signature</span><span>(</span>type <span>=</span> <span>Executor</span><span>.</span><span>class</span><span>,</span> method <span>=</span> <span>"query"</span><span>,</span>
            args <span>=</span> <span>{</span><span>MappedStatement</span><span>.</span><span>class</span><span>,</span> <span>Object</span><span>.</span><span>class</span><span>,</span> <span>RowBounds</span><span>.</span><span>class</span><span>,</span> <span>ResultHandler</span><span>.</span><span>class</span><span>}</span><span>)</span><span>)</span>
    <span>public</span> <span>static</span> <span>class</span> <span>ExecutorInterceptor</span> <span>implements</span> <span>Interceptor</span> <span>{</span>
        <span>@Override</span>
        <span>public</span> <span>Object</span> <span>intercept</span><span>(</span><span>Invocation</span> invocation<span>)</span> <span>throws</span> <span>Throwable</span> <span>{</span>
            <span>Object</span><span>[</span><span>]</span> args <span>=</span> invocation<span>.</span><span>getArgs</span><span>(</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>args<span>[</span><span>0</span><span>]</span> <span>instanceof</span> <span>MappedStatement</span><span>)</span> <span>{</span>
                <span>MappedStatement</span> arg <span>=</span> <span>(</span><span>MappedStatement</span><span>)</span> args<span>[</span><span>0</span><span>]</span><span>;</span>
                <span>Configuration</span> configuration <span>=</span> arg<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
                <span>StaticSqlSource</span> staticSqlSource <span>=</span> <span>new</span> <span>StaticSqlSource</span><span>(</span>configuration<span>,</span> <span>"select name from T_USER"</span><span>)</span><span>;</span>
                <span>Field</span> sqlSourceField <span>=</span> arg<span>.</span><span>getClass</span><span>(</span><span>)</span><span>.</span><span>getDeclaredField</span><span>(</span><span>"sqlSource"</span><span>)</span><span>;</span>
                sqlSourceField<span>.</span><span>setAccessible</span><span>(</span><span>true</span><span>)</span><span>;</span>
                sqlSourceField<span>.</span><span>set</span><span>(</span>arg<span>,</span> staticSqlSource<span>)</span><span>;</span>
            <span>}</span>
            <span>return</span> invocation<span>.</span><span>proceed</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="_2-3-插件的设计缺陷"> 2.3 插件的设计缺陷</h2>
<p><code>InterceptorChain</code> 的设计非常简单，里面就是一个list集合。但是在进行代理的时候，并没有顺序。假设我们要对sql进行代理。</p>
<i>Not supported content</i>
<ol>
<li>第一个插件，我们在sql后加上 <code>where id &gt; 1</code></li>
<li>第二个插件，我们在sql后机上 <code>limit 10</code></li>
</ol>
<p>按照我们设想的最终sql会变成 <code>select * from users where id &gt; 1 limit 10</code></p>
<p>但是我们知道mybatis是没有顺序的, 那么很可能会出现最终的sql变成 <code>select * from user limit 10 where id &gt; 1</code>，此时就会报错。</p>
<p>所以我们要注意这里。</p>
<div><pre><code>  <span>public</span> <span>void</span> <span>addInterceptor</span><span>(</span><span>Interceptor</span> interceptor<span>)</span> <span>{</span>
    interceptorChain<span>.</span><span>addInterceptor</span><span>(</span>interceptor<span>)</span><span>;</span>
  <span>}</span>
  <span>public</span> <span>StatementHandler</span> <span>newStatementHandler</span><span>(</span><span>Executor</span> executor<span>,</span> <span>MappedStatement</span> mappedStatement<span>,</span> <span>Object</span> parameterObject<span>,</span> <span>RowBounds</span> rowBounds<span>,</span> <span>ResultHandler</span> resultHandler<span>,</span> <span>BoundSql</span> boundSql<span>)</span> <span>{</span>
    <span>StatementHandler</span> statementHandler <span>=</span> <span>new</span> <span>RoutingStatementHandler</span><span>(</span>executor<span>,</span> mappedStatement<span>,</span> parameterObject<span>,</span> rowBounds<span>,</span> resultHandler<span>,</span> boundSql<span>)</span><span>;</span>
    statementHandler <span>=</span> <span>(</span><span>StatementHandler</span><span>)</span> interceptorChain<span>.</span><span>pluginAll</span><span>(</span>statementHandler<span>)</span><span>;</span>
    <span>return</span> statementHandler<span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="三、可以借鉴的知识点"> 三、可以借鉴的知识点</h2>
<h2 id="_3-1-插件的设计模式"> 3.1 插件的设计模式</h2>
<p>拦截链 + 插件设计</p>
<div><pre><code><span>public</span> <span>class</span> <span>Test</span> <span>{</span>
    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
        <span>InterceptorChain</span> chain <span>=</span> <span>new</span> <span>InterceptorChain</span><span>(</span><span>)</span><span>;</span>
        <span>PrintInterceptor</span> printInterceptor <span>=</span> <span>new</span> <span>PrintInterceptor</span><span>(</span><span>)</span><span>;</span>
        <span>Properties</span> properties <span>=</span> <span>new</span> <span>Properties</span><span>(</span><span>)</span><span>;</span>
        properties<span>.</span><span>setProperty</span><span>(</span><span>"name"</span><span>,</span><span>"https://blog.springlearn.cn"</span><span>)</span><span>;</span>
        printInterceptor<span>.</span><span>setProperties</span><span>(</span>properties<span>)</span><span>;</span>
        chain<span>.</span><span>addInterceptor</span><span>(</span>printInterceptor<span>)</span><span>;</span>
        <span>Animal</span> person <span>=</span> <span>(</span><span>Animal</span><span>)</span> chain<span>.</span><span>pluginAll</span><span>(</span><span>new</span> <span>Person</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>String</span> nihao <span>=</span> person<span>.</span><span>say</span><span>(</span><span>"nihao"</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>nihao<span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>interface</span> <span>Animal</span><span>{</span>
        <span>String</span> <span>say</span><span>(</span><span>String</span> message<span>)</span><span>;</span>
        <span>String</span> <span>say</span><span>(</span><span>String</span> name<span>,</span> <span>String</span> message<span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>class</span> <span>Person</span> <span>implements</span> <span>Animal</span> <span>{</span>
        <span>public</span> <span>String</span> <span>say</span><span>(</span><span>String</span> message<span>)</span> <span>{</span>
            <span>return</span> message<span>;</span>
        <span>}</span>

        <span>public</span> <span>String</span> <span>say</span><span>(</span><span>String</span> name<span>,</span> <span>String</span> message<span>)</span> <span>{</span>
            <span>return</span> name <span>+</span> <span>" say: "</span> <span>+</span> message<span>;</span>
        <span>}</span>
    <span>}</span>

    <span>@Intercepts</span><span>(</span><span>@Signature</span><span>(</span>type <span>=</span> <span>Animal</span><span>.</span><span>class</span><span>,</span> method <span>=</span> <span>"say"</span><span>,</span> args <span>=</span> <span>{</span><span>String</span><span>.</span><span>class</span><span>}</span><span>)</span><span>)</span>
    <span>public</span> <span>static</span> <span>class</span> <span>PrintInterceptor</span> <span>implements</span> <span>Interceptor</span> <span>{</span>
        <span>private</span> <span>String</span> name<span>;</span>

        <span>@Override</span>
        <span>public</span> <span>Object</span> <span>intercept</span><span>(</span><span>Invocation</span> invocation<span>)</span> <span>throws</span> <span>Throwable</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>name <span>+</span> <span>": before print ..."</span><span>)</span><span>;</span>
            <span>Object</span> proceed <span>=</span> invocation<span>.</span><span>proceed</span><span>(</span><span>)</span><span>;</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>name <span>+</span> <span>": after print ..."</span><span>)</span><span>;</span>
            <span>return</span> proceed<span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-28T15:13:45.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第03篇:Mybatis核心类详细介绍</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/%E6%A0%B8%E5%BF%83%E7%B1%BB%E4%BB%8B%E7%BB%8D/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/%E6%A0%B8%E5%BF%83%E7%B1%BB%E4%BB%8B%E7%BB%8D/"/>
    <updated>2022-04-26T15:44:59.000Z</updated>
    <content type="html"><![CDATA[<div><p>核心类介绍</p>
<p>前面我们知道Mybatis的解析原理,知道了在 <code>Configuration</code> 、<code>MapperBuilderAssistant</code> 出现了很多核心的类。
正是由这些类来实现了,Mybatis的核心功能。所以要想完全搞懂 Mybatis,这些类就必须要进行深入的研究，废话不多少，直接就开始吧。</p>
</div>
<p>其实这里面的每个类要都能单独拆出来一篇进行详细说明，但是这里我们只取其精华，知道他的作用，及如何使用。和能借鉴的地方就可以了。</p>
<h2 id="一、configuration"> 一、Configuration</h2>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">TypeAliasRegistry</td>
<td style="text-align:left">key是一个别名,value是一个class对象</td>
</tr>
<tr>
<td style="text-align:left">Properties variables</td>
<td style="text-align:left">配置文件中占位符的变量配置</td>
</tr>
<tr>
<td style="text-align:left">InterceptorChain interceptorChain</td>
<td style="text-align:left">拦截链,用于拦截方法,实现插件</td>
</tr>
<tr>
<td style="text-align:left">ObjectFactory objectFactory</td>
<td style="text-align:left">对象实例化统一的工厂方法</td>
</tr>
<tr>
<td style="text-align:left">ObjectWrapperFactory objectWrapperFactory</td>
<td style="text-align:left">扩展使用，允许用户自定义包装对象ObjectWrapper</td>
</tr>
<tr>
<td style="text-align:left">ReflectorFactory reflectorFactory</td>
<td style="text-align:left">反射工厂,用于生成一个反射信息对象</td>
</tr>
<tr>
<td style="text-align:left">Environment environment</td>
<td style="text-align:left">环境信息包含(事务管理器和数据源)</td>
</tr>
<tr>
<td style="text-align:left">TypeHandlerRegistry typeHandlerRegistry</td>
<td style="text-align:left">数据库返回数据类型转换成Java对象的处理器，或是Java数据类型转换jdbc数据类型的处理器</td>
</tr>
<tr>
<td style="text-align:left">MapperRegistry mapperRegistry</td>
<td style="text-align:left">Mapper生成的处理类,包含代理的逻辑</td>
</tr>
</tbody>
</table>
<h2 id="_1-1-typealiasregistry"> 1.1 TypeAliasRegistry</h2>
<blockquote>
<p>key是别名,value是对应的Class&lt;?&gt;</p>
</blockquote>
<p>这个在什么时候用的呢? 前面我们通过解析xml，发现很多的dtd约束，文件的值类型都是 CDATA 即 字符串。 但是这些字符串最终是要解析成指定的字节码的。
怎么知道字符串对应的是哪个java类呢? 那么这个功能就交给 <code>TypeAliasRegistry</code>。允许你将一个java类注册一个别名。这样你就可以在配置文件中用别名
来替换java类了。</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>TypeAliasRegistry</span><span>(</span><span>)</span> <span>{</span>
        <span>TypeAliasRegistry</span> typeAliasRegistry <span>=</span> <span>new</span> <span>TypeAliasRegistry</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>typeAliasRegistry<span>.</span><span>resolveAlias</span><span>(</span><span>"byte"</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_1-2-properties"> 1.2 Properties</h2>
<p>这个java类就不用介绍了，在<code>Configuration</code> 就是存储的配置信息，允许你在mybatis中任意地方使用${}进行访问数据。</p>
<p>比如你可以这样用? 配置一个全局的limit限制数量</p>
<div><pre><code><span>datasource.driver-class-name</span><span>=</span><span>com.mysql.cj.jdbc.Driver</span>
<span>datasource.url</span><span>=</span><span>jdbc:mysql://127.0.0.1:3306/test</span>
<span>datasource.username</span><span>=</span><span>root</span>
<span>datasource.password</span><span>=</span><span>123456</span>
<span>datasource.globalLimit</span><span>=</span><span>1000</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>public</span> <span>interface</span> <span>TUserMapper</span> <span>{</span>
    <span>@Select</span><span>(</span><span>"select * from t_user where uid = ${id} limit ${datasource.globalLimit} "</span><span>)</span>
    <span>List</span><span><span>&lt;</span><span>TUser</span><span>></span></span> <span>selectById</span><span>(</span><span>Long</span> id<span>)</span><span>;</span>
<span>}</span>    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_1-3-interceptorchain"> 1.3 InterceptorChain</h2>
<p>内容较多,开单独的篇幅进行介绍; <a href="./插件分析/">第07篇:Mybatis的插件设计分析</a></p>
<p>从名字就可以看到是一个拦截链; 主要是实现插件的功能。核心思路是, 通过拦截类的方法来实现插件。</p>
<p>MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p>
<ul>
<li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li>
<li>ParameterHandler (getParameterObject, setParameters)</li>
<li>ResultSetHandler (handleResultSets, handleOutputParameters)</li>
<li>StatementHandler (prepare, parameterize, batch, update, query)</li>
</ul>
<div><pre><code><span>public</span> <span>class</span> <span>InterceptorChain</span> <span>{</span>

  <span>private</span> <span>final</span> <span>List</span><span><span>&lt;</span><span>Interceptor</span><span>></span></span> interceptors <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>

  <span>public</span> <span>Object</span> <span>pluginAll</span><span>(</span><span>Object</span> target<span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>Interceptor</span> interceptor <span>:</span> interceptors<span>)</span> <span>{</span>
      target <span>=</span> interceptor<span>.</span><span>plugin</span><span>(</span>target<span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> target<span>;</span>
  <span>}</span>

  <span>public</span> <span>void</span> <span>addInterceptor</span><span>(</span><span>Interceptor</span> interceptor<span>)</span> <span>{</span>
    interceptors<span>.</span><span>add</span><span>(</span>interceptor<span>)</span><span>;</span>
  <span>}</span>

  <span>public</span> <span>List</span><span><span>&lt;</span><span>Interceptor</span><span>></span></span> <span>getInterceptors</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>Collections</span><span>.</span><span>unmodifiableList</span><span>(</span>interceptors<span>)</span><span>;</span>
  <span>}</span>

<span>}</span>

<span>public</span> <span>interface</span> <span>Interceptor</span> <span>{</span>

  <span>Object</span> <span>intercept</span><span>(</span><span>Invocation</span> invocation<span>)</span> <span>throws</span> <span>Throwable</span><span>;</span>

  <span>default</span> <span>Object</span> <span>plugin</span><span>(</span><span>Object</span> target<span>)</span> <span>{</span>
    <span>return</span> <span>Plugin</span><span>.</span><span>wrap</span><span>(</span>target<span>,</span> <span>this</span><span>)</span><span>;</span>
  <span>}</span>

  <span>default</span> <span>void</span> <span>setProperties</span><span>(</span><span>Properties</span> properties<span>)</span> <span>{</span>
    <span>// NOP</span>
  <span>}</span>

<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><h2 id="_1-4-objectfactory-对象工厂"> 1.4 ObjectFactory 对象工厂</h2>
<p>在Mybatis中或者说是orm框架中, 使用到反射的地方较多。那么就一定会遇到实例化的问题。具体如何实例化。就是使用对象工厂。
之所以提供个工厂, 小编个人认为还是为了扩展使用。但是实际中一般不会扩展这个类。因为该有的功能默认的就已经具备了。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>ObjectFactory</span> <span>{</span>
  
  <span>// 配置信息</span>
  <span>default</span> <span>void</span> <span>setProperties</span><span>(</span><span>Properties</span> properties<span>)</span> <span>{</span><span>}</span>
  <span>// 根据空构造来实例化</span>
  <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>create</span><span>(</span><span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> type<span>)</span><span>;</span>
  <span>// 根据构造参数来实例化</span>
  <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>create</span><span>(</span><span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> type<span>,</span> <span>List</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>></span></span> constructorArgTypes<span>,</span> <span>List</span><span><span>&lt;</span><span>Object</span><span>></span></span> constructorArgs<span>)</span><span>;</span>
  <span>// 判断是否是Collection子类</span>
  <span><span>&lt;</span><span>T</span><span>></span></span> <span>boolean</span> <span>isCollection</span><span>(</span><span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> type<span>)</span><span>;</span>

<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_1-5-objectwrapperfactory-对象包装工厂"> 1.5 ObjectWrapperFactory 对象包装工厂</h2>
<p>他的作用主要是提供外面的扩展，允许用户自己去创建包装对象。实际框架中不会用到这个对象。我们只要知道他的作用是什么行。
我们重点说一下 ObjectWrapper 。</p>
<p>ObjectWrapper的主要作用是，提供统一的属性操作方法。主要在MetaObject被使用,如下。</p>
<div><pre><code><span>public</span> <span>class</span> <span>MetaObject</span> <span>{</span>

  <span>private</span> <span>final</span> <span>Object</span> originalObject<span>;</span>
  <span>private</span> <span>final</span> <span>ObjectWrapper</span> objectWrapper<span>;</span>
  <span>private</span> <span>final</span> <span>ObjectFactory</span> objectFactory<span>;</span>
  <span>private</span> <span>final</span> <span>ObjectWrapperFactory</span> objectWrapperFactory<span>;</span>
  <span>private</span> <span>final</span> <span>ReflectorFactory</span> reflectorFactory<span>;</span>

  <span>private</span> <span>MetaObject</span><span>(</span><span>Object</span> object<span>,</span> <span>ObjectFactory</span> objectFactory<span>,</span> <span>ObjectWrapperFactory</span> objectWrapperFactory<span>,</span> <span>ReflectorFactory</span> reflectorFactory<span>)</span> <span>{</span>
    <span>this</span><span>.</span>originalObject <span>=</span> object<span>;</span>
    <span>this</span><span>.</span>objectFactory <span>=</span> objectFactory<span>;</span>
    <span>this</span><span>.</span>objectWrapperFactory <span>=</span> objectWrapperFactory<span>;</span>
    <span>this</span><span>.</span>reflectorFactory <span>=</span> reflectorFactory<span>;</span>

    <span>if</span> <span>(</span>object <span>instanceof</span> <span>ObjectWrapper</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>objectWrapper <span>=</span> <span>(</span><span>ObjectWrapper</span><span>)</span> object<span>;</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span>objectWrapperFactory<span>.</span><span>hasWrapperFor</span><span>(</span>object<span>)</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>objectWrapper <span>=</span> objectWrapperFactory<span>.</span><span>getWrapperFor</span><span>(</span><span>this</span><span>,</span> object<span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span>object <span>instanceof</span> <span>Map</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>objectWrapper <span>=</span> <span>new</span> <span>MapWrapper</span><span>(</span><span>this</span><span>,</span> <span>(</span><span>Map</span><span>)</span> object<span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span>object <span>instanceof</span> <span>Collection</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>objectWrapper <span>=</span> <span>new</span> <span>CollectionWrapper</span><span>(</span><span>this</span><span>,</span> <span>(</span><span>Collection</span><span>)</span> object<span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>this</span><span>.</span>objectWrapper <span>=</span> <span>new</span> <span>BeanWrapper</span><span>(</span><span>this</span><span>,</span> object<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>我们看到普通的对象,被包装成 ObjectWrapper后就可以使用通用的API来获取和修改对象数值型,以及可以获取属性值的类型信息,如下面的例子。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1648542576000.png" alt="" loading="lazy"></p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>objectWrapper</span><span>(</span><span>)</span><span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
        <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span><span>String</span><span>></span></span> map <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        map<span>.</span><span>put</span><span>(</span><span>"name"</span><span>,</span><span>"孙悟空"</span><span>)</span><span>;</span>
        <span>MetaObject</span> metaObject <span>=</span> <span>MetaObject</span><span>.</span><span>forObject</span><span>(</span>map<span>,</span> configuration<span>.</span><span>getObjectFactory</span><span>(</span><span>)</span><span>,</span> configuration<span>.</span><span>getObjectWrapperFactory</span><span>(</span><span>)</span><span>,</span> configuration<span>.</span><span>getReflectorFactory</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>metaObject<span>.</span><span>getValue</span><span>(</span><span>"name"</span><span>)</span><span>)</span><span>;</span>
        <span>// 复制</span>
        metaObject<span>.</span><span>setValue</span><span>(</span><span>"age"</span><span>,</span><span>18</span><span>)</span><span>;</span>
        <span>// {name=孙悟空, age=18}</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>map<span>)</span><span>;</span>

        <span>TUser</span> tUser <span>=</span> <span>new</span> <span>TUser</span><span>(</span><span>)</span><span>;</span>
        tUser<span>.</span><span>setName</span><span>(</span><span>"唐三藏"</span><span>)</span><span>;</span>
        <span>MetaObject</span> tUserMetaObject <span>=</span> <span>MetaObject</span><span>.</span><span>forObject</span><span>(</span>tUser<span>,</span> configuration<span>.</span><span>getObjectFactory</span><span>(</span><span>)</span><span>,</span> configuration<span>.</span><span>getObjectWrapperFactory</span><span>(</span><span>)</span><span>,</span> configuration<span>.</span><span>getReflectorFactory</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 唐三藏</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>tUserMetaObject<span>.</span><span>getValue</span><span>(</span><span>"name"</span><span>)</span><span>)</span><span>;</span>

        <span>List</span><span><span>&lt;</span><span>TUser</span><span>></span></span> users <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        users<span>.</span><span>add</span><span>(</span>tUser<span>)</span><span>;</span>
        <span>MetaObject</span> tUserMetaObjects <span>=</span> <span>MetaObject</span><span>.</span><span>forObject</span><span>(</span>users<span>,</span> configuration<span>.</span><span>getObjectFactory</span><span>(</span><span>)</span><span>,</span> configuration<span>.</span><span>getObjectWrapperFactory</span><span>(</span><span>)</span><span>,</span> configuration<span>.</span><span>getReflectorFactory</span><span>(</span><span>)</span><span>)</span><span>;</span>
        tUserMetaObjects<span>.</span><span>add</span><span>(</span><span>new</span> <span>TUser</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// [TUser(tokenId=null, uid=null, name=唐三藏), TUser(tokenId=null, uid=null, name=null)]</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>tUserMetaObjects<span>.</span><span>getOriginalObject</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><h2 id="_1-6-reflectorfactory-反射工厂"> 1.6 ReflectorFactory 反射工厂</h2>
<p>从名字看就是反射的工厂，主要是为了生成 Reflector 对象。Reflector 对反射的信息进行了缓存。用的时候直接从缓存中获取。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>ReflectorFactory</span> <span>{</span>

  <span>boolean</span> <span>isClassCacheEnabled</span><span>(</span><span>)</span><span>;</span>

  <span>void</span> <span>setClassCacheEnabled</span><span>(</span><span>boolean</span> classCacheEnabled<span>)</span><span>;</span>

  <span>Reflector</span> <span>findForClass</span><span>(</span><span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> type<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_1-7-environment-环境"> 1.7 Environment 环境</h2>
<p>这里面的环境属性,是比较重要。因为他直接决定了你要跟那个数据库交互。以及事务如何处理。</p>
<div><pre><code><span>public</span> <span>final</span> <span>class</span> <span>Environment</span> <span>{</span>
  <span>private</span> <span>final</span> <span>String</span> id<span>;</span>
  <span>private</span> <span>final</span> <span>TransactionFactory</span> transactionFactory<span>;</span>
  <span>private</span> <span>final</span> <span>DataSource</span> dataSource<span>;</span>
<span>}</span>  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>private</span> <span>SqlSession</span> <span>openSessionFromDataSource</span><span>(</span><span>ExecutorType</span> execType<span>,</span> <span>TransactionIsolationLevel</span> level<span>,</span> <span>boolean</span> autoCommit<span>)</span> <span>{</span>
    <span>Transaction</span> tx <span>=</span> <span>null</span><span>;</span>
    <span>try</span> <span>{</span>
      <span>final</span> <span>Environment</span> environment <span>=</span> configuration<span>.</span><span>getEnvironment</span><span>(</span><span>)</span><span>;</span>
      <span>final</span> <span>TransactionFactory</span> transactionFactory <span>=</span> <span>getTransactionFactoryFromEnvironment</span><span>(</span>environment<span>)</span><span>;</span>
      tx <span>=</span> transactionFactory<span>.</span><span>newTransaction</span><span>(</span>environment<span>.</span><span>getDataSource</span><span>(</span><span>)</span><span>,</span> level<span>,</span> autoCommit<span>)</span><span>;</span>
      <span>final</span> <span>Executor</span> executor <span>=</span> configuration<span>.</span><span>newExecutor</span><span>(</span>tx<span>,</span> execType<span>)</span><span>;</span>
      <span>return</span> <span>new</span> <span>DefaultSqlSession</span><span>(</span>configuration<span>,</span> executor<span>,</span> autoCommit<span>)</span><span>;</span>
    <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
      <span>closeTransaction</span><span>(</span>tx<span>)</span><span>;</span> <span>// may have fetched a connection so lets call close()</span>
      <span>throw</span> <span>ExceptionFactory</span><span>.</span><span>wrapException</span><span>(</span><span>"Error opening session.  Cause: "</span> <span>+</span> e<span>,</span> e<span>)</span><span>;</span>
    <span>}</span> <span>finally</span> <span>{</span>
      <span>ErrorContext</span><span>.</span><span>instance</span><span>(</span><span>)</span><span>.</span><span>reset</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="_1-8-typehandlerregistry"> 1.8 TypeHandlerRegistry</h2>
<p>TypeHandler + Registry, 从名字来看又是一个类型注册器用于反射使用。看来mybatis中用于反射的工具类是在太多了。那么TypeHandler究竟有什么用呢?
TypeHandler 是对Statement和ResultSet负责。
ResultSet 是从数据库获取的数据的载体，Statement 是准备向数据库提交数据的载体。TypeHandler 的作用就是
根据数据类型, 处理跟数据的输入和输出信息。看下面接口。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>TypeHandler</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>{</span>

  <span>void</span> <span>setParameter</span><span>(</span><span>PreparedStatement</span> ps<span>,</span> <span>int</span> i<span>,</span> <span>T</span> parameter<span>,</span> <span>JdbcType</span> jdbcType<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>

  <span>/**
   * Gets the result.
   *
   * @param rs
   *          the rs
   * @param columnName
   *          Colunm name, when configuration &lt;code>useColumnLabel&lt;/code> is &lt;code>false&lt;/code>
   * @return the result
   * @throws SQLException
   *           the SQL exception
   */</span>
  <span>T</span> <span>getResult</span><span>(</span><span>ResultSet</span> rs<span>,</span> <span>String</span> columnName<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>

  <span>T</span> <span>getResult</span><span>(</span><span>ResultSet</span> rs<span>,</span> <span>int</span> columnIndex<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>

  <span>T</span> <span>getResult</span><span>(</span><span>CallableStatement</span> cs<span>,</span> <span>int</span> columnIndex<span>)</span> <span>throws</span> <span>SQLException</span><span>;</span>

<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>这里举一个例子，比如name这个字段在数据库是varchar类型,但是java对象中name是一个Name对象。那么如何处理呢?
我们自定义一个处理器。</p>
<div><pre><code><span>public</span> <span>class</span> <span>NameTypeHandler</span> <span>implements</span> <span>TypeHandler</span><span><span>&lt;</span><span>Name</span><span>></span></span> <span>{</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>setParameter</span><span>(</span><span>PreparedStatement</span> ps<span>,</span> <span>int</span> i<span>,</span> <span>Name</span> parameter<span>,</span> <span>JdbcType</span> jdbcType<span>)</span> <span>throws</span> <span>SQLException</span> <span>{</span>
        ps<span>.</span><span>setString</span><span>(</span>i<span>,</span> parameter<span>.</span><span>getFirstName</span><span>(</span><span>)</span> <span>+</span> <span>"-"</span> <span>+</span> parameter<span>.</span><span>getSurname</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Override</span>
    <span>public</span> <span>Name</span> <span>getResult</span><span>(</span><span>ResultSet</span> rs<span>,</span> <span>String</span> columnName<span>)</span> <span>throws</span> <span>SQLException</span> <span>{</span>
        <span>String</span> name <span>=</span> rs<span>.</span><span>getString</span><span>(</span>columnName<span>)</span><span>;</span>
        <span>String</span><span>[</span><span>]</span> split <span>=</span> name<span>.</span><span>split</span><span>(</span><span>"-"</span><span>)</span><span>;</span>
        <span>return</span> <span>new</span> <span>Name</span><span>(</span>split<span>[</span><span>0</span><span>]</span><span>,</span> split<span>[</span><span>1</span><span>]</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>然后在配置文件中声明注册器,用于将java对象转换成jdbc数据库字段类型。同时也将数据库查询到的jdbc类型转换成java对象。</p>
<div><pre><code>    <span><span><span>&lt;</span>configuration</span><span>></span></span>
        <span><span><span>&lt;</span>typeHandlers</span><span>></span></span>
            <span><span><span>&lt;</span>typeHandler</span> <span>handler</span><span><span>=</span><span>"</span>orm.example.dal.type.NameTypeHandler<span>"</span></span> <span>javaType</span><span><span>=</span><span>"</span>orm.example.dal.model.Name<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>typeHandler</span><span>></span></span>
        <span><span><span>&lt;/</span>typeHandlers</span><span>></span></span>
    <span><span><span>&lt;/</span>configuration</span><span>></span></span>    
    <span><span><span>&lt;</span>mapper</span><span>></span></span>
         <span><span><span>&lt;</span>insert</span> <span>id</span><span><span>=</span><span>"</span>insert<span>"</span></span> <span>parameterType</span><span><span>=</span><span>"</span>orm.example.dal.model.T2User<span>"</span></span><span>></span></span>
            <span>&lt;!--
              WARNING - @mbggenerated
              This element is automatically generated by MyBatis Generator, do not modify.
              This element was generated on Sun Mar 27 23:01:23 CST 2022.
            --></span>
            insert into T_USER (token_id, uid, name)
            values (#{tokenId,jdbcType=CHAR}, #{uid,jdbcType=INTEGER}, #{name,javaType=orm.example.dal.model.Name })
        <span><span><span>&lt;/</span>insert</span><span>></span></span>
    <span><span><span>&lt;/</span>mapper</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>我们执行下面代码,可以看到我们将数据类型转换成了jdbc存到了数据库，同时执行查询时候又将jdbc类型转换成了java对象。这就是它的作用。</p>
<div><div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br></div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
        configuration<span>.</span><span>getTypeHandlerRegistry</span><span>(</span><span>)</span><span>.</span><span>register</span><span>(</span><span>new</span> <span>NameTypeHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 参数: autoCommit,从名字上看就是是否自动提交事务</span>
        <span>SqlSession</span> sqlSession <span>=</span> sqlSessionFactory<span>.</span><span>openSession</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>// 获取Mapper</span>
        <span>T2UserMapper</span> mapper <span>=</span> configuration<span>.</span><span>getMapperRegistry</span><span>(</span><span>)</span><span>.</span><span>getMapper</span><span>(</span><span>T2UserMapper</span><span>.</span><span>class</span><span>,</span> sqlSession<span>)</span><span>;</span>
        <span>T2User</span> tUser <span>=</span> <span>new</span> <span>T2User</span><span>(</span><span>)</span><span>;</span>
        <span>Name</span> name <span>=</span> <span>new</span> <span>Name</span><span>(</span><span>"孙"</span><span>,</span><span>"悟空"</span><span>)</span><span>;</span>
        tUser<span>.</span><span>setName</span><span>(</span>name<span>)</span><span>;</span>
        tUser<span>.</span><span>setTokenId</span><span>(</span><span>"西天取经"</span><span>)</span><span>;</span>
        mapper<span>.</span><span>insert</span><span>(</span>tUser<span>)</span><span>;</span>
        <span>// 获取插入的数据: T2User(tokenId=西天取经, uid=32, name=Name(surname=悟空, firstName=孙))</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>mapper<span>.</span><span>selectByPrimaryKey</span><span>(</span><span>"西天取经"</span><span>)</span><span>)</span><span>;</span>
        <span>// 数据插入后，执行查询，然后回滚数据</span>
        sqlSession<span>.</span><span>rollback</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id="_1-9-mapperregistry"> 1.9 MapperRegistry</h2>
<p>看到Registry又知道了，这货又是一个类似Map的工具类。肯定是跟Mapper有关系。下面代码关键在于13和17行。
Mybatis中获取Mapper对象都是从 MapperRegistry中获取的。</p>
<ul>
<li>line(13) <code>new MapperProxyFactory&lt;&gt;(type)</code> 接口生成代理对象</li>
<li>line(17) <code>MapperAnnotationBuilder</code> 用于解析Mybatis支持的注解,并添加到 <code>Configuration</code></li>
</ul>
<p>这两个类比较重要我们开单独的篇幅进行说明。</p>
<div><div><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span>public</span> <span>class</span> <span>MapperRegistry</span> <span>{</span>

  <span>private</span> <span>final</span> <span>Configuration</span> config<span>;</span>
  <span>private</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>,</span> <span>MapperProxyFactory</span><span>&lt;</span><span>?</span><span>></span><span>></span></span> knownMappers <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  
  <span>public</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>void</span> <span>addMapper</span><span>(</span><span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> type<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>type<span>.</span><span>isInterface</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>hasMapper</span><span>(</span>type<span>)</span><span>)</span> <span>{</span>
        <span>throw</span> <span>new</span> <span>BindingException</span><span>(</span><span>"Type "</span> <span>+</span> type <span>+</span> <span>" is already known to the MapperRegistry."</span><span>)</span><span>;</span>
      <span>}</span>
      <span>boolean</span> loadCompleted <span>=</span> <span>false</span><span>;</span>
      <span>try</span> <span>{</span>
        knownMappers<span>.</span><span>put</span><span>(</span>type<span>,</span> <span>new</span> <span>MapperProxyFactory</span><span><span>&lt;</span><span>></span></span><span>(</span>type<span>)</span><span>)</span><span>;</span>
        <span>// It's important that the type is added before the parser is run</span>
        <span>// otherwise the binding may automatically be attempted by the</span>
        <span>// mapper parser. If the type is already known, it won't try.</span>
        <span>MapperAnnotationBuilder</span> parser <span>=</span> <span>new</span> <span>MapperAnnotationBuilder</span><span>(</span>config<span>,</span> type<span>)</span><span>;</span>
        parser<span>.</span><span>parse</span><span>(</span><span>)</span><span>;</span>
        loadCompleted <span>=</span> <span>true</span><span>;</span>
      <span>}</span> <span>finally</span> <span>{</span>
        <span>if</span> <span>(</span><span>!</span>loadCompleted<span>)</span> <span>{</span>
          knownMappers<span>.</span><span>remove</span><span>(</span>type<span>)</span><span>;</span>
        <span>}</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id="_1-10-sqlsession"> 1.10 SqlSession</h2>
<p>SqlSession相当于一千个桥梁,负责将方法参数,发送给数据库,并且将数据库返回值组装成方法的返回值。</p>
<p>在SqlSession中有几个比较重要的类，如下图。他们负责不同的逻辑。
分别处理入参(ParameterHandler)，处理出参(ResultSetHandler)，生成Jdbc(StatementHandler)，处理缓存相关(Executor)。
是一个非常重要的一个类。后面我们的学习中会经常看到。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1649170321000.png" alt="" loading="lazy"></p>
<div><pre><code><span>public</span> <span>interface</span> <span>SqlSession</span> <span>extends</span> <span>Closeable</span> <span>{</span>

  <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>selectOne</span><span>(</span><span>String</span> statement<span>)</span><span>;</span>

  <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>selectOne</span><span>(</span><span>String</span> statement<span>,</span> <span>Object</span> parameter<span>)</span><span>;</span>

  <span>int</span> <span>insert</span><span>(</span><span>String</span> statement<span>)</span><span>;</span>

  <span>int</span> <span>insert</span><span>(</span><span>String</span> statement<span>,</span> <span>Object</span> parameter<span>)</span><span>;</span>

  <span>int</span> <span>update</span><span>(</span><span>String</span> statement<span>)</span><span>;</span>

  <span>int</span> <span>update</span><span>(</span><span>String</span> statement<span>,</span> <span>Object</span> parameter<span>)</span><span>;</span>

  <span>int</span> <span>delete</span><span>(</span><span>String</span> statement<span>)</span><span>;</span>

  <span>int</span> <span>delete</span><span>(</span><span>String</span> statement<span>,</span> <span>Object</span> parameter<span>)</span><span>;</span>

  <span>void</span> <span>commit</span><span>(</span><span>)</span><span>;</span>

  <span>void</span> <span>commit</span><span>(</span><span>boolean</span> force<span>)</span><span>;</span>

  <span>void</span> <span>rollback</span><span>(</span><span>)</span><span>;</span>

  <span>void</span> <span>rollback</span><span>(</span><span>boolean</span> force<span>)</span><span>;</span>

  <span>List</span><span><span>&lt;</span><span>BatchResult</span><span>></span></span> <span>flushStatements</span><span>(</span><span>)</span><span>;</span>

  <span>@Override</span>
  <span>void</span> <span>close</span><span>(</span><span>)</span><span>;</span>

  <span>void</span> <span>clearCache</span><span>(</span><span>)</span><span>;</span>

  <span>Configuration</span> <span>getConfiguration</span><span>(</span><span>)</span><span>;</span>

  <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>getMapper</span><span>(</span><span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> type<span>)</span><span>;</span>

  <span>Connection</span> <span>getConnection</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><p>我们看增删改查的方法入参无非2个。1个是statement,1个是入参。
其中statement主要是为了获取 MappedStatement。如下</p>
<div><pre><code><span>private</span> <span><span>&lt;</span><span>E</span><span>></span></span> <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>selectList</span><span>(</span><span>String</span> statement<span>,</span> <span>Object</span> parameter<span>,</span> <span>RowBounds</span> rowBounds<span>,</span> <span>ResultHandler</span> handler<span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
      <span>MappedStatement</span> ms <span>=</span> configuration<span>.</span><span>getMappedStatement</span><span>(</span>statement<span>)</span><span>;</span>
      <span>return</span> executor<span>.</span><span>query</span><span>(</span>ms<span>,</span> <span>wrapCollection</span><span>(</span>parameter<span>)</span><span>,</span> rowBounds<span>,</span> handler<span>)</span><span>;</span>
    <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
      <span>throw</span> <span>ExceptionFactory</span><span>.</span><span>wrapException</span><span>(</span><span>"Error querying database.  Cause: "</span> <span>+</span> e<span>,</span> e<span>)</span><span>;</span>
    <span>}</span> <span>finally</span> <span>{</span>
      <span>ErrorContext</span><span>.</span><span>instance</span><span>(</span><span>)</span><span>.</span><span>reset</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>另外一个入参是为了组装sql信息。MappedStatement#getBoundSql 获取sql信息。</p>
<div><pre><code>  <span>@Override</span>
  <span>public</span> <span><span>&lt;</span><span>E</span><span>></span></span> <span>List</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>query</span><span>(</span><span>MappedStatement</span> ms<span>,</span> <span>Object</span> parameter<span>,</span> <span>RowBounds</span> rowBounds<span>,</span> <span>ResultHandler</span> resultHandler<span>)</span> <span>throws</span> <span>SQLException</span> <span>{</span>
    <span>BoundSql</span> boundSql <span>=</span> ms<span>.</span><span>getBoundSql</span><span>(</span>parameter<span>)</span><span>;</span>
    <span>CacheKey</span> key <span>=</span> <span>createCacheKey</span><span>(</span>ms<span>,</span> parameter<span>,</span> rowBounds<span>,</span> boundSql<span>)</span><span>;</span>
    <span>return</span> <span>query</span><span>(</span>ms<span>,</span> parameter<span>,</span> rowBounds<span>,</span> resultHandler<span>,</span> key<span>,</span> boundSql<span>)</span><span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="二、mapperbuilderassistant"> 二、MapperBuilderAssistant</h2>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">MapperBuilderAssistant</td>
<td style="text-align:left">Mapper构建辅助工具类(缓存配置)</td>
</tr>
<tr>
<td style="text-align:left">CacheRefResolver</td>
<td style="text-align:left">决定如何使用缓存</td>
</tr>
<tr>
<td style="text-align:left">ParameterMapping</td>
<td style="text-align:left">参数映射类</td>
</tr>
<tr>
<td style="text-align:left">ResultMapResolver</td>
<td style="text-align:left">返回值映射</td>
</tr>
<tr>
<td style="text-align:left">Map&lt;String, XNode&gt; sqlFragments</td>
<td style="text-align:left">sql片段</td>
</tr>
<tr>
<td style="text-align:left">MappedStatement</td>
<td style="text-align:left">Mapper方法的所有信息(出参，入参)</td>
</tr>
</tbody>
</table>
<h2 id="_2-1-mapperbuilderassistant"> 2.1 MapperBuilderAssistant</h2>
<p>Mapper构建工具类,下面小编列举了几个方法。可以看出来基本都是用于处理sql结果集向java对象转换使用，和对Mapper方法签名分析生成sql的工具。
下面我们一个一个来看看。</p>
<div><pre><code><span>public</span> <span>class</span> <span>MapperBuilderAssistant</span> <span>extends</span> <span>BaseBuilder</span> <span>{</span>
    <span>// 确定使用那个缓存</span>
    <span>public</span> <span>Cache</span> <span>useCacheRef</span><span>(</span><span>String</span> namespace<span>)</span><span>;</span>
    <span>// 生成2级缓存对象</span>
    <span>public</span> <span>Cache</span> <span>useNewCache</span><span>(</span><span>.</span><span>.</span><span>.</span><span>)</span><span>;</span>
    <span>// 每个参数的信息</span>
    <span>public</span> <span>ParameterMapping</span> <span>buildParameterMapping</span><span>(</span><span>)</span><span>;</span>
    <span>// 生成结构集</span>
    <span>public</span> <span>ResultMap</span> <span>addResultMap</span><span>(</span><span>)</span><span>;</span>
    <span>// 鉴别器</span>
    <span>public</span> <span>Discriminator</span> <span>buildDiscriminator</span><span>(</span><span>)</span><span>;</span>
    <span>// 生成Mapper签名</span>
    <span>public</span> <span>MappedStatement</span> <span>addMappedStatement</span><span>(</span><span>)</span><span>;</span>
    <span>// 获取方言处理器</span>
    <span>public</span> <span>LanguageDriver</span> <span>getLanguageDriver</span><span>(</span><span>Class</span><span><span>&lt;</span><span>?</span> <span>extends</span> <span>LanguageDriver</span><span>></span></span> langClass<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id="_2-1-1-cache"> 2.1.1 Cache</h3>
<p>Mybatis 缓存的接口定义,用于缓存查询sql的结果。Mybatis中一级缓存和二级缓存是一个面试经常会考的问题。这个类我们也单独开一篇私聊。</p>
<h3 id="_2-1-2-parametermapping-resultmapping"> 2.1.2 ParameterMapping &amp; ResultMapping</h3>
<p>从名字中能看到就是对Mapper中方法的入参和出参的映射关系类。</p>
<div><pre><code><span>public</span> <span>class</span> <span>ParameterMapping</span> <span>{</span>
  <span>private</span> <span>Configuration</span> configuration<span>;</span>
  <span>private</span> <span>String</span> property<span>;</span>
  <span>private</span> <span>ParameterMode</span> mode<span>;</span>
  <span>private</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> javaType <span>=</span> <span>Object</span><span>.</span><span>class</span><span>;</span>
  <span>private</span> <span>JdbcType</span> jdbcType<span>;</span>
  <span>private</span> <span>Integer</span> numericScale<span>;</span>
  <span>private</span> <span>TypeHandler</span><span><span>&lt;</span><span>?</span><span>></span></span> typeHandler<span>;</span>
  <span>private</span> <span>String</span> resultMapId<span>;</span>
  <span>private</span> <span>String</span> jdbcTypeName<span>;</span>
  <span>private</span> <span>String</span> expression<span>;</span>
<span>}</span>  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>如图所示,会对方法的每个参数,生成一个 ParameterMapping对象。存储了java类型和db的类型的映射关系。
<img src="https://img.springlearn.cn/blog/learn_1648656572000.png" alt="" loading="lazy"></p>
<h3 id="_2-1-3-resultmap"> 2.1.3 ResultMap</h3>
<p>从名字看就是对jdbc结果集向Mapper返回值的映射关系，用于将jdbc数据重新映射成Java对象。</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>resultSet</span><span>(</span><span>)</span><span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
        <span>SqlSession</span> sqlSession <span>=</span> sqlSessionFactory<span>.</span><span>openSession</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>TUserMapper</span> mapper <span>=</span> configuration<span>.</span><span>getMapper</span><span>(</span><span>TUserMapper</span><span>.</span><span>class</span><span>,</span>sqlSession<span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>mapper<span>.</span><span>selectAll</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>MappedStatement</span> mappedStatement <span>=</span> configuration<span>.</span><span>getMappedStatement</span><span>(</span><span>"orm.example.dal.mapper.TUserMapper.selectAll"</span><span>)</span><span>;</span>
        <span>List</span><span><span>&lt;</span><span>ResultMap</span><span>></span></span> resultMaps <span>=</span> mappedStatement<span>.</span><span>getResultMaps</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>resultMaps<span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p><img src="https://img.springlearn.cn/blog/learn_1648657325000.png" alt="" loading="lazy"></p>
<h3 id="_2-1-4-languagedriver"> 2.1.4 LanguageDriver</h3>
<p>主要用于生成 SqlSource，动态sql(XMLLanguageDriver)或者静态sql(RawLanguageDriver)</p>
<div><pre><code>
<span>public</span> <span>interface</span> <span>LanguageDriver</span> <span>{</span>
 
  <span>ParameterHandler</span> <span>createParameterHandler</span><span>(</span><span>MappedStatement</span> mappedStatement<span>,</span> <span>Object</span> parameterObject<span>,</span> <span>BoundSql</span> boundSql<span>)</span><span>;</span>

  <span>SqlSource</span> <span>createSqlSource</span><span>(</span><span>Configuration</span> configuration<span>,</span> <span>XNode</span> script<span>,</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> parameterType<span>)</span><span>;</span>
 
  <span>SqlSource</span> <span>createSqlSource</span><span>(</span><span>Configuration</span> configuration<span>,</span> <span>String</span> script<span>,</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> parameterType<span>)</span><span>;</span>

<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>动态sql可以处理下面这些标签</p>
<div><pre><code> <span>private</span> <span>void</span> <span>initNodeHandlerMap</span><span>(</span><span>)</span> <span>{</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"trim"</span><span>,</span> <span>new</span> <span>TrimHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"where"</span><span>,</span> <span>new</span> <span>WhereHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"set"</span><span>,</span> <span>new</span> <span>SetHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"foreach"</span><span>,</span> <span>new</span> <span>ForEachHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"if"</span><span>,</span> <span>new</span> <span>IfHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"choose"</span><span>,</span> <span>new</span> <span>ChooseHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"when"</span><span>,</span> <span>new</span> <span>IfHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"otherwise"</span><span>,</span> <span>new</span> <span>OtherwiseHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
    nodeHandlerMap<span>.</span><span>put</span><span>(</span><span>"bind"</span><span>,</span> <span>new</span> <span>BindHandler</span><span>(</span><span>)</span><span>)</span><span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="_2-2-cacherefresolver"> 2.2 CacheRefResolver</h2>
<p>确定每个Mapper配置的缓存</p>
<div><pre><code><span>public</span> <span>class</span> <span>CacheRefResolver</span> <span>{</span>
  <span>private</span> <span>final</span> <span>MapperBuilderAssistant</span> assistant<span>;</span>
  <span>private</span> <span>final</span> <span>String</span> cacheRefNamespace<span>;</span>

  <span>public</span> <span>CacheRefResolver</span><span>(</span><span>MapperBuilderAssistant</span> assistant<span>,</span> <span>String</span> cacheRefNamespace<span>)</span> <span>{</span>
    <span>this</span><span>.</span>assistant <span>=</span> assistant<span>;</span>
    <span>this</span><span>.</span>cacheRefNamespace <span>=</span> cacheRefNamespace<span>;</span>
  <span>}</span>

  <span>public</span> <span>Cache</span> <span>resolveCacheRef</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> assistant<span>.</span><span>useCacheRef</span><span>(</span>cacheRefNamespace<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_2-3-mappedstatement"> 2.3 MappedStatement</h2>
<p>可以说关于Mapper所有的信息都在这个类里面,包括sql信息、入参及返回值类型、sql类型（SqlCommandType）、是否使用缓存、
是否刷新缓存、StatementType类型。</p>
<div><pre><code><span>public</span> <span>final</span> <span>class</span> <span>MappedStatement</span> <span>{</span>
  <span>// mapper/TUserMapper.xml</span>
  <span>private</span> <span>String</span> resource<span>;</span>
  <span>// 全局配置</span>
  <span>private</span> <span>Configuration</span> configuration<span>;</span>
  <span>// orm.example.dal.mapper.TUserMapper.insert</span>
  <span>private</span> <span>String</span> id<span>;</span>
  <span>// </span>
  <span>private</span> <span>Integer</span> fetchSize<span>;</span>
  <span>// 超时时间</span>
  <span>private</span> <span>Integer</span> timeout<span>;</span>
  <span>// StatementType.PREPARED</span>
  <span>private</span> <span>StatementType</span> statementType<span>;</span>
  <span>// ResultSetType.DEFAULT(-1),</span>
  <span>private</span> <span>ResultSetType</span> resultSetType<span>;</span>
  <span>// RawSqlSource</span>
  <span>private</span> <span>SqlSource</span> sqlSource<span>;</span>
  <span>private</span> <span>Cache</span> cache<span>;</span>
  <span>private</span> <span>ParameterMap</span> parameterMap<span>;</span>
  <span>private</span> <span>List</span><span><span>&lt;</span><span>ResultMap</span><span>></span></span> resultMaps<span>;</span>
  <span>private</span> <span>boolean</span> flushCacheRequired<span>;</span>
  <span>private</span> <span>boolean</span> useCache<span>;</span>
  <span>private</span> <span>boolean</span> resultOrdered<span>;</span>
  <span>// SqlCommandType（ UNKNOWN, INSERT, UPDATE, DELETE, SELECT, FLUSH）</span>
  <span>private</span> <span>SqlCommandType</span> sqlCommandType<span>;</span>
  <span>// 生成id</span>
  <span>private</span> <span>KeyGenerator</span> keyGenerator<span>;</span>
  <span>private</span> <span>String</span><span>[</span><span>]</span> keyProperties<span>;</span>
  <span>private</span> <span>String</span><span>[</span><span>]</span> keyColumns<span>;</span>
  <span>private</span> <span>boolean</span> hasNestedResultMaps<span>;</span>
  <span>private</span> <span>String</span> databaseId<span>;</span>
  <span>private</span> <span>Log</span> statementLog<span>;</span>
  <span>private</span> <span>LanguageDriver</span> lang<span>;</span>
  <span>private</span> <span>String</span><span>[</span><span>]</span> resultSets<span>;</span>
<span>}</span>  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><p>生成主要有2种方法。</p>
<ol>
<li>xml的方式 XMLStatementBuilder</li>
<li>通过注解的方式 MapperAnnotationBuilder</li>
</ol>
<div><pre><code><span>public</span> <span>class</span> <span>XMLMapperBuilder</span> <span>extends</span> <span>BaseBuilder</span> 
    <span>public</span> <span>void</span> <span>parse</span><span>(</span><span>)</span> <span>{</span>
        <span>// 如果有资源文件先解析xml,并保存到Configuration#addMappedStatement</span>
        <span>if</span> <span>(</span><span>!</span>configuration<span>.</span><span>isResourceLoaded</span><span>(</span>resource<span>)</span><span>)</span> <span>{</span>
          <span>// XMLStatementBuilder进行解析</span>
          <span>configurationElement</span><span>(</span>parser<span>.</span><span>evalNode</span><span>(</span><span>"/mapper"</span><span>)</span><span>)</span><span>;</span>
          configuration<span>.</span><span>addLoadedResource</span><span>(</span>resource<span>)</span><span>;</span>
          <span>// 同时使用MapperAnnotationBuilder类解析</span>
          <span>bindMapperForNamespace</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    
        <span>parsePendingResultMaps</span><span>(</span><span>)</span><span>;</span>
        <span>parsePendingCacheRefs</span><span>(</span><span>)</span><span>;</span>
        <span>parsePendingStatements</span><span>(</span><span>)</span><span>;</span>
      <span>}</span>
<span>}</span>  

<span>public</span> <span>class</span> <span>MapperAnnotationBuilder</span><span>{</span>
      <span>// 只有包含了下面注解的方法才会被解析</span>
      <span>private</span> <span>static</span> <span>final</span> <span>Set</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span> <span>extends</span> <span>Annotation</span><span>></span><span>></span></span> statementAnnotationTypes <span>=</span> <span>Stream</span>
      <span>.</span><span>of</span><span>(</span><span>Select</span><span>.</span><span>class</span><span>,</span> <span>Update</span><span>.</span><span>class</span><span>,</span> <span>Insert</span><span>.</span><span>class</span><span>,</span> <span>Delete</span><span>.</span><span>class</span><span>,</span> <span>SelectProvider</span><span>.</span><span>class</span><span>,</span> <span>UpdateProvider</span><span>.</span><span>class</span><span>,</span>
          <span>InsertProvider</span><span>.</span><span>class</span><span>,</span> <span>DeleteProvider</span><span>.</span><span>class</span><span>)</span>
      <span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toSet</span><span>(</span><span>)</span><span>)</span><span>;</span>
      
     <span>public</span>  <span>void</span> <span>parseStatement</span><span>(</span><span>Method</span> method<span>)</span> <span>{</span>
        <span>final</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> parameterTypeClass <span>=</span> <span>getParameterType</span><span>(</span>method<span>)</span><span>;</span>
        <span>final</span> <span>LanguageDriver</span> languageDriver <span>=</span> <span>getLanguageDriver</span><span>(</span>method<span>)</span><span>;</span>
        <span>// 判断是否包含了上面的注解</span>
        <span>getAnnotationWrapper</span><span>(</span>method<span>,</span> <span>true</span><span>,</span> statementAnnotationTypes<span>)</span>
        <span>.</span><span>ifPresent</span><span>(</span>statementAnnotation <span>-></span> <span>{</span><span>}</span><span>)</span>
     <span>}</span>   
<span>}</span>    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>Mapper配置文件在解析的时候首先,回去解析xml,然后解析注解。如果两种方式都存在那么就会提示错误。</p>
<div><p>警告</p>
<p>Caused by: java.lang.IllegalArgumentException: Mapped Statements collection already contains value for orm.example.dal.mapper.TUserMapper.selectAll. please check mapper/TUserMapper.xml and orm/example/dal/mapper/TUserMapper.java (best guess)
at org.apache.ibatis.session.Configuration<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>St</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>c</span><span style="margin-right:0.10903em;">tM</span><span>a</span><span>p</span><span>.</span><span>p</span><span>u</span><span>t</span><span>(</span><span style="margin-right:0.07153em;">C</span><span>o</span><span>n</span><span style="margin-right:0.10764em;">f</span><span>i</span><span>gu</span><span style="margin-right:0.02778em;">r</span><span>a</span><span>t</span><span>i</span><span>o</span><span>n</span><span>.</span><span>ja</span><span style="margin-right:0.03588em;">v</span><span>a</span><span style="margin-right:0.2778em;"></span><span>:</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1014</span><span>)</span><span>a</span><span>t</span><span style="margin-right:0.02778em;">or</span><span style="margin-right:0.03588em;">g</span><span>.</span><span>a</span><span>p</span><span>a</span><span>c</span><span>h</span><span>e</span><span>.</span><span>iba</span><span>t</span><span>i</span><span>s</span><span>.</span><span>sess</span><span>i</span><span>o</span><span>n</span><span>.</span><span style="margin-right:0.07153em;">C</span><span>o</span><span>n</span><span style="margin-right:0.10764em;">f</span><span>i</span><span>gu</span><span style="margin-right:0.02778em;">r</span><span>a</span><span>t</span><span>i</span><span>o</span><span>n</span></span></span></span>StrictMap.put(Configuration.java:970)</p>
</div>
<p>原因就在 StrictMap。</p>
<div><pre><code><span>public</span> <span>V</span> <span>put</span><span>(</span><span>String</span> key<span>,</span> <span>V</span> value<span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>containsKey</span><span>(</span>key<span>)</span><span>)</span> <span>{</span>
        <span>throw</span> <span>new</span> <span>IllegalArgumentException</span><span>(</span>name <span>+</span> <span>" already contains value for "</span> <span>+</span> key
            <span>+</span> <span>(</span>conflictMessageProducer <span>==</span> <span>null</span> <span>?</span> <span>""</span> <span>:</span> conflictMessageProducer<span>.</span><span>apply</span><span>(</span><span>super</span><span>.</span><span>get</span><span>(</span>key<span>)</span><span>,</span> value<span>)</span><span>)</span><span>)</span><span>;</span>
      <span>}</span>
      <span>if</span> <span>(</span>key<span>.</span><span>contains</span><span>(</span><span>"."</span><span>)</span><span>)</span> <span>{</span>
        <span>final</span> <span>String</span> shortKey <span>=</span> <span>getShortName</span><span>(</span>key<span>)</span><span>;</span>
        <span>if</span> <span>(</span><span>super</span><span>.</span><span>get</span><span>(</span>shortKey<span>)</span> <span>==</span> <span>null</span><span>)</span> <span>{</span>
          <span>super</span><span>.</span><span>put</span><span>(</span>shortKey<span>,</span> value<span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
          <span>super</span><span>.</span><span>put</span><span>(</span>shortKey<span>,</span> <span>(</span><span>V</span><span>)</span> <span>new</span> <span>Ambiguity</span><span>(</span>shortKey<span>)</span><span>)</span><span>;</span>
        <span>}</span>
      <span>}</span>
      <span>return</span> <span>super</span><span>.</span><span>put</span><span>(</span>key<span>,</span> value<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="三、可以借鉴的知识点"> 三、可以借鉴的知识点</h2>
<h2 id="_3-1-包装器模式"> 3.1 包装器模式</h2>
<p>ObjectWrapper</p>
<p>ObjectWrapper的主要作用是，提供统一的属性操作方法。主要在MetaObject被使用,如下。</p>
<div><pre><code>     <span>@Test</span>
    <span>public</span> <span>void</span> <span>objectWrapper</span><span>(</span><span>)</span> <span>{</span>
        <span>TUser</span> mock <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>TUser</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>MetaObject</span> metaObject <span>=</span> <span>MetaObject</span><span>.</span><span>forObject</span><span>(</span>mock<span>,</span> <span>new</span> <span>DefaultObjectFactory</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>DefaultObjectWrapperFactory</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>DefaultReflectorFactory</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>boolean</span> name <span>=</span> metaObject<span>.</span><span>hasGetter</span><span>(</span><span>"name"</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>name<span>)</span> <span>{</span>
            <span>// iuslA4Xp</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>metaObject<span>.</span><span>getValue</span><span>(</span><span>"name"</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>

        <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span><span>Object</span><span>></span></span> map <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        map<span>.</span><span>put</span><span>(</span><span>"age"</span><span>,</span><span>18</span><span>)</span><span>;</span>
        <span>MetaObject</span> metaMap <span>=</span> <span>MetaObject</span><span>.</span><span>forObject</span><span>(</span>map<span>,</span> <span>new</span> <span>DefaultObjectFactory</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>DefaultObjectWrapperFactory</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>DefaultReflectorFactory</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>boolean</span> age <span>=</span> metaMap<span>.</span><span>hasGetter</span><span>(</span><span>"age"</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>age<span>)</span> <span>{</span>
            <span>// 18 </span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>metaMap<span>.</span><span>getValue</span><span>(</span><span>"age"</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="_3-2-metaclass"> 3.2 MetaClass</h2>
<p>反射工具类</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>metaClass</span><span>(</span><span>)</span><span>throws</span> <span>Exception</span><span>{</span>
        <span>MetaClass</span> metaClass <span>=</span> <span>MetaClass</span><span>.</span><span>forClass</span><span>(</span><span>TUser</span><span>.</span><span>class</span><span>,</span> <span>new</span> <span>DefaultReflectorFactory</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>TUser</span> blankUser <span>=</span> <span>new</span> <span>TUser</span><span>(</span><span>)</span><span>;</span>
        metaClass<span>.</span><span>getSetInvoker</span><span>(</span><span>"name"</span><span>)</span><span>.</span><span>invoke</span><span>(</span>blankUser<span>,</span><span>new</span> <span>Object</span><span>[</span><span>]</span><span>{</span><span>"孙悟空"</span><span>}</span><span>)</span><span>;</span>
        <span>// 孙悟空</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>blankUser<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-28T15:13:45.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第02篇:Mybatis配置文件解析</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <updated>2022-04-26T15:44:59.000Z</updated>
    <content type="html"><![CDATA[<PageBanner/>
<h2 id="一、配置文件分析"> 一、配置文件分析</h2>
<div><p>文件分析</p>
<p>在上一篇的代码中,我们看到了一个非常重要文件,这里我们先来人肉分析看,然后看下代码是如何解析的,毕竟代码也是人写的。
思路决定出路,我们如果有思路,然后在看源码会更加的具有分析的能动性。</p>
</div>
<i>Not supported content</i>
<div><div><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>mapper</span><span>(</span><span>)</span> <span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
        <span>// 参数: autoCommit,从名字上看就是是否自动提交事务</span>
        <span>SqlSession</span> sqlSession <span>=</span> sqlSessionFactory<span>.</span><span>openSession</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>// 获取Mapper</span>
        <span>TUserMapper</span> mapper <span>=</span> configuration<span>.</span><span>getMapperRegistry</span><span>(</span><span>)</span><span>.</span><span>getMapper</span><span>(</span><span>TUserMapper</span><span>.</span><span>class</span><span>,</span> sqlSession<span>)</span><span>;</span>
        <span>TUser</span> tUser <span>=</span> <span>new</span> <span>TUser</span><span>(</span><span>)</span><span>;</span>
        tUser<span>.</span><span>setName</span><span>(</span><span>"testUser1"</span><span>)</span><span>;</span>
        tUser<span>.</span><span>setTokenId</span><span>(</span><span>"testTokenId1"</span><span>)</span><span>;</span>
        mapper<span>.</span><span>insert</span><span>(</span>tUser<span>)</span><span>;</span>
        <span>// 获取插入的数据</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>mapper<span>.</span><span>selectAll</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 数据插入后，执行查询，然后回滚数据</span>
        sqlSession<span>.</span><span>rollback</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h3 id="_1-1-mybatisconfig-xml"> 1.1 mybatisConfig.xml</h3>
<div><p>注意看高亮行</p>
<ol>
<li>line(4) dtd文件是xml的约束文件,用于约束 <code>xml</code> 标签中属性</li>
<li>line(8) properties标签,指定了配置信息文件是 <code>application.properties</code></li>
<li>line(11-13) mybatis的配置信息</li>
<li>line(15-27) mybatis支持多环境配置</li>
<li>line(30-32) 映射文件</li>
</ol>
</div>
<p>基于上面的行，我们来讲解。</p>
<div><div><br><br><br><div>&nbsp;</div><br><br><br><div>&nbsp;</div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br></div><pre><code><span>&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span><span>&lt;!</span><span>DOCTYPE</span> <span>configuration</span>
        <span>PUBLIC</span> <span>"-//mybatis.org//DTD Config 3.0//EN"</span>
        <span>"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span>></span></span>
<span><span><span>&lt;</span>configuration</span><span>></span></span>

    <span>&lt;!-- 指定properties配置文件， 我这里面配置的是数据库相关 --></span>
    <span><span><span>&lt;</span>properties</span> <span>resource</span><span><span>=</span><span>"</span>application.properties<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>properties</span><span>></span></span>

    <span>&lt;!-- 指定Mybatis使用log4j --></span>
    <span><span><span>&lt;</span>settings</span><span>></span></span>
        <span><span><span>&lt;</span>setting</span> <span>name</span><span><span>=</span><span>"</span>logImpl<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>LOG4J<span>"</span></span><span>/></span></span>
    <span><span><span>&lt;/</span>settings</span><span>></span></span>

    <span><span><span>&lt;</span>environments</span> <span>default</span><span><span>=</span><span>"</span>development<span>"</span></span><span>></span></span>
        <span><span><span>&lt;</span>environment</span> <span>id</span><span><span>=</span><span>"</span>development<span>"</span></span><span>></span></span>
            <span><span><span>&lt;</span>transactionManager</span> <span>type</span><span><span>=</span><span>"</span>JDBC<span>"</span></span><span>/></span></span>
            <span><span><span>&lt;</span>dataSource</span> <span>type</span><span><span>=</span><span>"</span>POOLED<span>"</span></span><span>></span></span>
                <span>&lt;!-- 上面指定了数据库配置文件， 配置文件里面也是对应的这四个属性 --></span>
                <span><span><span>&lt;</span>property</span> <span>name</span><span><span>=</span><span>"</span>driver<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>${datasource.driver-class-name}<span>"</span></span><span>/></span></span>
                <span><span><span>&lt;</span>property</span> <span>name</span><span><span>=</span><span>"</span>url<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>${datasource.url}<span>"</span></span><span>/></span></span>
                <span><span><span>&lt;</span>property</span> <span>name</span><span><span>=</span><span>"</span>username<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>${datasource.username}<span>"</span></span><span>/></span></span>
                <span><span><span>&lt;</span>property</span> <span>name</span><span><span>=</span><span>"</span>password<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>${datasource.password}<span>"</span></span><span>/></span></span>

            <span><span><span>&lt;/</span>dataSource</span><span>></span></span>
        <span><span><span>&lt;/</span>environment</span><span>></span></span>
    <span><span><span>&lt;/</span>environments</span><span>></span></span>

    <span>&lt;!-- 映射文件，mybatis精髓， 后面才会细讲 --></span>
    <span><span><span>&lt;</span>mappers</span><span>></span></span>
        <span><span><span>&lt;</span>mapper</span> <span>resource</span><span><span>=</span><span>"</span>mapper/TUserMapper.xml<span>"</span></span><span>/></span></span>
    <span><span><span>&lt;/</span>mappers</span><span>></span></span>

<span><span><span>&lt;/</span>configuration</span><span>></span></span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><h2 id="二、知识点讲解"> 二、知识点讲解</h2>
<h2 id="_2-1-xml约束文件dtd"> 2.1 xml约束文件dtd</h2>
<p>为什么要学习dtd约束文件呢? 当你学会dtd约束文件后,你就知道这个标签有那些属性，知道标签及子标签信息。
当有一天你要写开源框架的时候,你也可以来定义你自己的配置文件规则。这部分知识了解就行。不需要死记硬背。
因为记住也基本没啥用,只要做到看到了认识，需要用了知道去哪里抄代码学习就够了。</p>
<h3 id="_2-1-1-元素-属性-属性值"> 2.1.1 元素 &amp; 属性 &amp; 属性值</h3>
<p><a href="https://www.w3school.com.cn/dtd/index.asp" target="_blank" rel="noopener noreferrer">dtd文件</a></p>
<table>
<thead>
<tr>
<th style="text-align:left">域</th>
<th style="text-align:left">示例</th>
<th style="text-align:left">语法</th>
<th style="text-align:left">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">元素</td>
<td style="text-align:left">声明根元素标签</td>
<td style="text-align:left"><code>&lt;!ELEMENT 元素名称 (元素内容)&gt;</code></td>
<td style="text-align:left"><code>&lt;!ELEMENT students(student)&gt;</code>,元素students有一个student</td>
</tr>
<tr>
<td style="text-align:left">元素</td>
<td style="text-align:left">空元素</td>
<td style="text-align:left"><code>&lt;!ELEMENT 元素名称 EMPTY&gt;</code></td>
<td style="text-align:left"><code>&lt;br /&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">元素</td>
<td style="text-align:left">元素只出现一次</td>
<td style="text-align:left"><code>&lt;!ELEMENT 元素名称 (子元素名称)&gt;</code></td>
<td style="text-align:left"><code>&lt;!ELEMENT students(student)&gt;</code>,元素students至少有一个student</td>
</tr>
<tr>
<td style="text-align:left">元素</td>
<td style="text-align:left">元素最少出现一次</td>
<td style="text-align:left"><code>&lt;!ELEMENT 元素名称 (子元素名称+)&gt;</code></td>
<td style="text-align:left"><code>&lt;!ELEMENT students(student+)&gt;</code>,元素students最少有一个student</td>
</tr>
<tr>
<td style="text-align:left">元素</td>
<td style="text-align:left">声明出现零次或多次的元素</td>
<td style="text-align:left"><code>&lt;!ELEMENT 元素名称 (子元素名称*)&gt;</code></td>
<td style="text-align:left"><code>&lt;!ELEMENT students(student*)&gt;</code>,元素students可以有多个student,也可以一个没有</td>
</tr>
<tr>
<td style="text-align:left">元素</td>
<td style="text-align:left">声明“非.../既...”类型的内容</td>
<td style="text-align:left"><code>&lt;!ELEMENT note (to,from,header,(message|body))&gt;</code></td>
<td style="text-align:left"><code>&lt;!ELEMENT student(name,age,(boy|girl))&gt;</code>,元素student有一个name和age标签,有一个boy或者girl标签</td>
</tr>
<tr>
<td style="text-align:left">元素</td>
<td style="text-align:left">声明混合型的内容</td>
<td style="text-align:left"><code>&lt;!ELEMENT note (#PCDATA|to|from|header|message)*&gt;</code></td>
<td style="text-align:left"><code>&lt;!ELEMENT note (#PCDATA|to|from|header|message)*&gt;</code>&quot;note&quot; 元素可包含出现零次或多次的 PCDATA、&quot;to&quot;、&quot;from&quot;、&quot;header&quot; 或者 &quot;message&quot;</td>
</tr>
<tr>
<td style="text-align:left">属性</td>
<td style="text-align:left">属性声明</td>
<td style="text-align:left"><code>&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;</code></td>
<td style="text-align:left"><code>&lt;!ATTLIST payment type CDATA &quot;check&quot;&gt;</code>,payment有一个属性type,类型为字符类型,默认值check</td>
</tr>
</tbody>
</table>
<p><code>&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;</code></p>
<p><strong>值类型</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">CDATA</td>
<td style="text-align:left">值为字符数据 (character data)</td>
</tr>
<tr>
<td style="text-align:left">(en1</td>
<td style="text-align:left">en2</td>
</tr>
<tr>
<td style="text-align:left">ID</td>
<td style="text-align:left">值为唯一的 id</td>
</tr>
<tr>
<td style="text-align:left">IDREF</td>
<td style="text-align:left">值为另外一个元素的 id</td>
</tr>
<tr>
<td style="text-align:left">IDREFS</td>
<td style="text-align:left">值为其他 id 的列表</td>
</tr>
<tr>
<td style="text-align:left">NMTOKEN</td>
<td style="text-align:left">值为合法的 XML 名称</td>
</tr>
<tr>
<td style="text-align:left">NMTOKENS</td>
<td style="text-align:left">值是一个实体</td>
</tr>
<tr>
<td style="text-align:left">ENTITIES</td>
<td style="text-align:left">值是一个实体列表</td>
</tr>
<tr>
<td style="text-align:left">NOTATION</td>
<td style="text-align:left">此值是符号的名称</td>
</tr>
<tr>
<td style="text-align:left">xml:</td>
<td style="text-align:left">值是一个预定义的 XML 值</td>
</tr>
</tbody>
</table>
<p><strong>默认值参数可使用下列值</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">值</td>
<td style="text-align:left">属性的默认值</td>
</tr>
<tr>
<td style="text-align:left">#REQUIRED</td>
<td style="text-align:left">属性值是必需的</td>
</tr>
<tr>
<td style="text-align:left">#IMPLIED</td>
<td style="text-align:left">属性不是必需的</td>
</tr>
<tr>
<td style="text-align:left">#FIXED value</td>
<td style="text-align:left">属性值是固定的</td>
</tr>
</tbody>
</table>
<h2 id="_2-2-configuration标签分析"> 2.2 configuration标签分析</h2>
<p>前面我们知道了dtd约束文件,我们就可以看下,configuration标签一共有那些子标签及属性信息了。</p>
<p><a href="http://mybatis.org/dtd/mybatis-3-config.dtd" target="_blank" rel="noopener noreferrer">mybatis-3-config.dtd</a></p>
<p>通过分析dtd文件,我们知道有那些子标签及属性信息。内容比较长。但是不是很重要。这里只要知道就行。</p>
<p>后面我们看如何使用代码来解析这些标签。</p>
<p><img src="/blog/img/Mybatis配置标签.svg" alt="" loading="lazy"></p>
<h2 id="_2-3-mybatis配置解析核心逻辑"> 2.3 Mybatis配置解析核心逻辑</h2>
<div><p>思路决定出路</p>
<ul>
<li>line(6) <code>sqlSessionFactory.getConfiguration()</code></li>
</ul>
<p>由此来看所有的解析都是在SqlSessionFactoryBuilder进行完成的.
具体的解析xml代码我们不研究，这里我们只要搞清楚它的调用关系,及实现的代码在哪里即可。如果这里
看懂，其实都会得到一个结论。就是mybaits的源码是比较简单的,因为他的配置是比较集中的，无论是xml方式或者是注解方式。
最终所有的配置信息都在 <code>Configuration</code> 类中。</p>
</div>
<div><div><br><br><br><br><br><div>&nbsp;</div><br><br><br><br></div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>configuration</span><span>(</span><span>)</span> <span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息,由此来看所有的解析都是在SqlSessionFactoryBuilder进行完成的.</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="_2-3-1-new-sqlsessionfactorybuilder-build"> 2.3.1 new SqlSessionFactoryBuilder().build</h3>
<p>这里可以看到就是核心类就是使用 <code>XMLConfigBuilder</code> 进行解析。下面我们就主要分析 <code>XMLConfigBuilder</code></p>
<div><pre><code><span>public</span> <span>SqlSessionFactory</span> <span>build</span><span>(</span><span>InputStream</span> inputStream<span>,</span> <span>String</span> environment<span>,</span> <span>Properties</span> properties<span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
      <span>XMLConfigBuilder</span> parser <span>=</span> <span>new</span> <span>XMLConfigBuilder</span><span>(</span>inputStream<span>,</span> environment<span>,</span> properties<span>)</span><span>;</span>
      <span>return</span> <span>build</span><span>(</span>parser<span>.</span><span>parse</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
      <span>throw</span> <span>ExceptionFactory</span><span>.</span><span>wrapException</span><span>(</span><span>"Error building SqlSession."</span><span>,</span> e<span>)</span><span>;</span>
    <span>}</span> <span>finally</span> <span>{</span>
      <span>ErrorContext</span><span>.</span><span>instance</span><span>(</span><span>)</span><span>.</span><span>reset</span><span>(</span><span>)</span><span>;</span>
      <span>try</span> <span>{</span>
        inputStream<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
      <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>
        <span>// Intentionally ignore. Prefer previous error.</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h3 id="_2-3-2-核心配置类解析-xmlconfigbuilder"> 2.3.2 核心配置类解析(XMLConfigBuilder)</h3>
<div><p>重点关注</p>
<ol>
<li>line(8), 我们看到核心解析类是 <code>XPathParser parser = new XPathParser()</code></li>
<li>line(17), 标签的解析都在 <code>parseConfiguration</code></li>
<li>line(17), 思考下为什么先解析 <code>propertiesElement(root.evalNode(&quot;properties&quot;))</code></li>
</ol>
</div>
<div><div><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span>public</span> <span>class</span> <span>XMLConfigBuilder</span> <span>extends</span> <span>BaseBuilder</span> <span>{</span>

  <span>private</span> <span>boolean</span> parsed<span>;</span>
  <span>private</span> <span>final</span> <span>XPathParser</span> parser<span>;</span>
  <span>private</span> <span>String</span> environment<span>;</span>
  <span>private</span> <span>final</span> <span>ReflectorFactory</span> localReflectorFactory <span>=</span> <span>new</span> <span>DefaultReflectorFactory</span><span>(</span><span>)</span><span>;</span>
  
  <span>public</span> <span>Configuration</span> <span>parse</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>parsed<span>)</span> <span>{</span>
      <span>throw</span> <span>new</span> <span>BuilderException</span><span>(</span><span>"Each XMLConfigBuilder can only be used once."</span><span>)</span><span>;</span>
    <span>}</span>
    parsed <span>=</span> <span>true</span><span>;</span>
    <span>parseConfiguration</span><span>(</span>parser<span>.</span><span>evalNode</span><span>(</span><span>"/configuration"</span><span>)</span><span>)</span><span>;</span>
    <span>return</span> configuration<span>;</span>
  <span>}</span>
  
  <span>private</span> <span>void</span> <span>parseConfiguration</span><span>(</span><span>XNode</span> root<span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
      <span>// issue #117 read properties first</span>
      <span>propertiesElement</span><span>(</span>root<span>.</span><span>evalNode</span><span>(</span><span>"properties"</span><span>)</span><span>)</span><span>;</span>
      <span>Properties</span> settings <span>=</span> <span>settingsAsProperties</span><span>(</span>root<span>.</span><span>evalNode</span><span>(</span><span>"settings"</span><span>)</span><span>)</span><span>;</span>
      <span>loadCustomVfs</span><span>(</span>settings<span>)</span><span>;</span>
      <span>loadCustomLogImpl</span><span>(</span>settings<span>)</span><span>;</span>
      <span>typeAliasesElement</span><span>(</span>root<span>.</span><span>evalNode</span><span>(</span><span>"typeAliases"</span><span>)</span><span>)</span><span>;</span>
      <span>pluginElement</span><span>(</span>root<span>.</span><span>evalNode</span><span>(</span><span>"plugins"</span><span>)</span><span>)</span><span>;</span>
      <span>objectFactoryElement</span><span>(</span>root<span>.</span><span>evalNode</span><span>(</span><span>"objectFactory"</span><span>)</span><span>)</span><span>;</span>
      <span>objectWrapperFactoryElement</span><span>(</span>root<span>.</span><span>evalNode</span><span>(</span><span>"objectWrapperFactory"</span><span>)</span><span>)</span><span>;</span>
      <span>reflectorFactoryElement</span><span>(</span>root<span>.</span><span>evalNode</span><span>(</span><span>"reflectorFactory"</span><span>)</span><span>)</span><span>;</span>
      <span>settingsElement</span><span>(</span>settings<span>)</span><span>;</span>
      <span>// read it after objectFactory and objectWrapperFactory issue #631</span>
      <span>environmentsElement</span><span>(</span>root<span>.</span><span>evalNode</span><span>(</span><span>"environments"</span><span>)</span><span>)</span><span>;</span>
      <span>databaseIdProviderElement</span><span>(</span>root<span>.</span><span>evalNode</span><span>(</span><span>"databaseIdProvider"</span><span>)</span><span>)</span><span>;</span>
      <span>typeHandlerElement</span><span>(</span>root<span>.</span><span>evalNode</span><span>(</span><span>"typeHandlers"</span><span>)</span><span>)</span><span>;</span>
      <span>mapperElement</span><span>(</span>root<span>.</span><span>evalNode</span><span>(</span><span>"mappers"</span><span>)</span><span>)</span><span>;</span>
    <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
      <span>throw</span> <span>new</span> <span>BuilderException</span><span>(</span><span>"Error parsing SQL Mapper Configuration. Cause: "</span> <span>+</span> e<span>,</span> e<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>  
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><p>看到上面代码是不是就恍然大悟了，原来配置文件的标签都是在这里解析呀。这里的主要思路就是将xml解析成Java对象然后放到
Configuration中。具体任何实现呢? 感兴趣可以自己研究下。</p>
<h3 id="_2-3-3-configuration属性介绍"> 2.3.3 Configuration属性介绍</h3>
<p>那么这些数据最终哪里会使用呢，我们专门留一片文章, 详细分析。这里先看看Configuration内部都有那些关键的配置类把。</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">TypeAliasRegistry</td>
<td style="text-align:left">key是一个别名,value是一个class对象</td>
</tr>
<tr>
<td style="text-align:left">Properties variables</td>
<td style="text-align:left">配置文件中占位符的变量配置</td>
</tr>
<tr>
<td style="text-align:left">InterceptorChain interceptorChain</td>
<td style="text-align:left">拦截链,用于拦截方法,实现插件</td>
</tr>
<tr>
<td style="text-align:left">ObjectFactory objectFactory</td>
<td style="text-align:left">对象实例化统一的工厂方法,我们不用都反射来实例化了</td>
</tr>
<tr>
<td style="text-align:left">ObjectWrapperFactory objectWrapperFactory</td>
<td style="text-align:left">包装对象后为其提供统一的属性操作方法。我们不用通过反射来修改对象属性值了</td>
</tr>
<tr>
<td style="text-align:left">ReflectorFactory reflectorFactory</td>
<td style="text-align:left">反射工厂,用于生成一个反射信息对象,具有缓存的作用</td>
</tr>
<tr>
<td style="text-align:left">Environment environment</td>
<td style="text-align:left">环境信息包含(事务管理器和数据源)</td>
</tr>
<tr>
<td style="text-align:left">TypeHandlerRegistry typeHandlerRegistry</td>
<td style="text-align:left">主要处理jdbc的返回数据，转换成Java对象</td>
</tr>
<tr>
<td style="text-align:left">MapperRegistry mapperRegistry</td>
<td style="text-align:left">Mapper生成的处理类,包含代理的逻辑</td>
</tr>
</tbody>
</table>
<h3 id="_2-3-4-mapper-xml-解析"> 2.3.4 Mapper.xml 解析</h3>
<p><strong>XMLMapperBuilder</strong></p>
<p>解析Mapper对应的xml配置文件,这里面包含了sql的信息。</p>
<p>mapper的dtd约束文件更多,可以参考: https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#</p>
<div><pre><code>    <span>&lt;!-- 映射文件，mybatis精髓， 后面才会细讲 --></span>
    <span><span><span>&lt;</span>mappers</span><span>></span></span>
        <span><span><span>&lt;</span>mapper</span> <span>resource</span><span><span>=</span><span>"</span>mapper/TUserMapper.xml<span>"</span></span><span>/></span></span>
    <span><span><span>&lt;/</span>mappers</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><img src="/blog/img/Mapper.svg" alt="" loading="lazy"></p>
<p>这里就要介绍一个重要的类的，<code>MapperBuilderAssistant</code> Mapper构建辅助工具类。</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">MapperBuilderAssistant</td>
<td style="text-align:left">Mapper构建辅助工具类(缓存配置)</td>
</tr>
<tr>
<td style="text-align:left">CacheRefResolver</td>
<td style="text-align:left">决定如何使用缓存</td>
</tr>
<tr>
<td style="text-align:left">ParameterMapping</td>
<td style="text-align:left">当sql中使用到了#{}占位符时候,负责填充sql参数</td>
</tr>
<tr>
<td style="text-align:left">ResultMapResolver</td>
<td style="text-align:left">返回值映射</td>
</tr>
<tr>
<td style="text-align:left">Map&lt;String, XNode&gt; sqlFragments</td>
<td style="text-align:left">sql片段</td>
</tr>
<tr>
<td style="text-align:left">MappedStatement</td>
<td style="text-align:left">Mapper方法的所有信息(出参，入参，及sql信息等)</td>
</tr>
</tbody>
</table>
<h2 id="_2-4-mybatis可以借鉴的知识点"> 2.4 Mybatis可以借鉴的知识点</h2>
<h3 id="_2-4-1-占位符解析逻辑"> 2.4.1 占位符解析逻辑</h3>
<p>在第一篇的时候我们说过，从配置文件解析中我们能学会,如果解析占位符。并将占位符填充真实数据。这里我们就具体说下是如何解析。
还记得前面让思考下为什么先解析 <code>propertiesElement(root.evalNode(&quot;properties&quot;))</code>。</p>
<p>答案就是为了先读取变量信息，方便后面给依赖的信息，给填充值。</p>
<p>我们直接说答案: 具体谁来做了这个事情，从职责划分上来看，这个其实还是属于xml文件解析。所以是 <code>XPathParser parser</code>
XPathParser中填充上变量信息，这样XPathParser在解析的时候会自动将 <code>${}</code> 填充上真实的数据。</p>
<div><pre><code>    <span>// 执行后,会解析properties标签,并且将属性赋值给XPathParser</span>
    <span>propertiesElement</span><span>(</span>root<span>.</span><span>evalNode</span><span>(</span><span>"properties"</span><span>)</span><span>)</span><span>;</span>
    parser<span>.</span><span>setVariables</span><span>(</span>defaults<span>)</span><span>;</span>
    configuration<span>.</span><span>setVariables</span><span>(</span>defaults<span>)</span><span>;</span>

    <span>// XPathParser 生成节点时候,属性信息会提前处理。</span>
    <span>public</span> <span>XNode</span><span>(</span><span>XPathParser</span> xpathParser<span>,</span> <span>Node</span> node<span>,</span> <span>Properties</span> variables<span>)</span> <span>{</span>
       <span>this</span><span>.</span>xpathParser <span>=</span> xpathParser<span>;</span>
       <span>this</span><span>.</span>node <span>=</span> node<span>;</span>
       <span>this</span><span>.</span>name <span>=</span> node<span>.</span><span>getNodeName</span><span>(</span><span>)</span><span>;</span>
       <span>this</span><span>.</span>variables <span>=</span> variables<span>;</span>
       <span>this</span><span>.</span>attributes <span>=</span> <span>parseAttributes</span><span>(</span>node<span>)</span><span>;</span>
       <span>this</span><span>.</span>body <span>=</span> <span>parseBody</span><span>(</span>node<span>)</span><span>;</span>
     <span>}</span>
     <span>// 发现是占位符，就从变量中读取。</span>
     <span>// ${datasource.driver-class-name} 替换成变量值里面的数据。</span>
     <span>public</span> <span>static</span> <span>String</span> <span>parse</span><span>(</span><span>String</span> string<span>,</span> <span>Properties</span> variables<span>)</span> <span>{</span>
       <span>VariableTokenHandler</span> handler <span>=</span> <span>new</span> <span>VariableTokenHandler</span><span>(</span>variables<span>)</span><span>;</span>
       <span>GenericTokenParser</span> parser <span>=</span> <span>new</span> <span>GenericTokenParser</span><span>(</span><span>"${"</span><span>,</span> <span>"}"</span><span>,</span> handler<span>)</span><span>;</span>
       <span>return</span> parser<span>.</span><span>parse</span><span>(</span>string<span>)</span><span>;</span>
     <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h3 id="_2-4-2-mybatis-resources-工具"> 2.4.2 Mybatis Resources 工具</h3>
<p>可以从配置文件中或者网络中解析配置，生成 <code>Resources</code> 对象</p>
<div><pre><code>      <span>String</span> resource <span>=</span> context<span>.</span><span>getStringAttribute</span><span>(</span><span>"resource"</span><span>)</span><span>;</span>
      <span>if</span> <span>(</span>resource <span>!=</span> <span>null</span><span>)</span> <span>{</span>
        defaults<span>.</span><span>putAll</span><span>(</span><span>Resources</span><span>.</span><span>getResourceAsProperties</span><span>(</span>resource<span>)</span><span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>url <span>!=</span> <span>null</span><span>)</span> <span>{</span>
        defaults<span>.</span><span>putAll</span><span>(</span><span>Resources</span><span>.</span><span>getUrlAsProperties</span><span>(</span>url<span>)</span><span>)</span><span>;</span>
      <span>}</span>
      parser<span>.</span><span>setVariables</span><span>(</span>defaults<span>)</span><span>;</span>
      configuration<span>.</span><span>setVariables</span><span>(</span>defaults<span>)</span><span>;</span>
      
      <span>// 从资源中获取流</span>
      <span>InputStream</span> inputStream <span>=</span> <span>Resources</span><span>.</span><span>getResourceAsStream</span><span>(</span>resource<span>)</span>
      <span>// 从url中获取流</span>
      <span>InputStream</span> inputStream <span>=</span> <span>Resources</span><span>.</span><span>getUrlAsStream</span><span>(</span>url<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id="_2-4-3-mybatis-propertyparser-占位符解析"> 2.4.3 Mybatis PropertyParser 占位符解析</h3>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>propertyParser</span><span>(</span><span>)</span> <span>{</span>
        <span>Properties</span> variables <span>=</span> <span>new</span> <span>Properties</span><span>(</span><span>)</span><span>;</span>
        variables<span>.</span><span>put</span><span>(</span><span>"datasource.driver-class-name"</span><span>,</span> <span>"com.mysql.cj.jdbc.Driver"</span><span>)</span><span>;</span>
        <span>// 变量中有就从变量中获取 参数信息: com.mysql.cj.jdbc.Driver</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>PropertyParser</span><span>.</span><span>parse</span><span>(</span><span>"参数信息: ${datasource.driver-class-name}"</span><span>,</span> variables<span>)</span><span>)</span><span>;</span>
        <span>// 变量中没有就直接返回key datasource.url</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>PropertyParser</span><span>.</span><span>parse</span><span>(</span><span>"datasource.url"</span><span>,</span> variables<span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="_2-4-4-反射工厂-reflectorfactory"> 2.4.4 反射工厂 ReflectorFactory</h3>
<p>在Mybatis中使用到的反射地方蛮多的，那么都知道反射是相对比较耗时间，那么我们来看Mybatis是如何利用反射工厂来提高反射的性能的?</p>
<p>缓存，对要使用的Class类，做反射并保存起来, 生成的对象是 <code>Reflector</code>。</p>
<p><code>ReflectorFactory reflectorFactory = new DefaultReflectorFactory();</code></p>
<div><pre><code><span>public</span> <span>interface</span> <span>ReflectorFactory</span> <span>{</span>

  <span>boolean</span> <span>isClassCacheEnabled</span><span>(</span><span>)</span><span>;</span>

  <span>void</span> <span>setClassCacheEnabled</span><span>(</span><span>boolean</span> classCacheEnabled<span>)</span><span>;</span>

  <span>Reflector</span> <span>findForClass</span><span>(</span><span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> type<span>)</span><span>;</span>
<span>}</span>

<span>public</span> <span>class</span> <span>Reflector</span> <span>{</span>

  <span>private</span> <span>final</span> <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> type<span>;</span>
  <span>private</span> <span>final</span> <span>String</span><span>[</span><span>]</span> readablePropertyNames<span>;</span>
  <span>private</span> <span>final</span> <span>String</span><span>[</span><span>]</span> writablePropertyNames<span>;</span>
  <span>private</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Invoker</span><span>></span></span> setMethods <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  <span>private</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Invoker</span><span>></span></span> getMethods <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  <span>private</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Class</span><span>&lt;</span><span>?</span><span>></span><span>></span></span> setTypes <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  <span>private</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Class</span><span>&lt;</span><span>?</span><span>></span><span>></span></span> getTypes <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
  <span>private</span> <span>Constructor</span><span><span>&lt;</span><span>?</span><span>></span></span> defaultConstructor<span>;</span>

  <span>private</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> caseInsensitivePropertyMap <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p><img src="https://img.springlearn.cn/blog/learn_1648446512000.png" alt="" loading="lazy"></p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>reflector</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>ReflectorFactory</span> reflectorFactory <span>=</span> <span>new</span> <span>DefaultReflectorFactory</span><span>(</span><span>)</span><span>;</span>
        <span>Reflector</span> forClass <span>=</span> reflectorFactory<span>.</span><span>findForClass</span><span>(</span><span>TUser</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>TUser</span> user <span>=</span> <span>(</span><span>TUser</span><span>)</span> forClass<span>.</span><span>getDefaultConstructor</span><span>(</span><span>)</span><span>.</span><span>newInstance</span><span>(</span><span>)</span><span>;</span>
        forClass<span>.</span><span>getSetInvoker</span><span>(</span><span>"uid"</span><span>)</span><span>.</span><span>invoke</span><span>(</span>user<span>,</span> <span>new</span> <span>Object</span><span>[</span><span>]</span><span>{</span><span>1</span><span>}</span><span>)</span><span>;</span>
        forClass<span>.</span><span>getSetInvoker</span><span>(</span><span>"name"</span><span>)</span><span>.</span><span>invoke</span><span>(</span>user<span>,</span> <span>new</span> <span>Object</span><span>[</span><span>]</span><span>{</span><span>"孙悟空"</span><span>}</span><span>)</span><span>;</span>
        forClass<span>.</span><span>getSetInvoker</span><span>(</span><span>"tokenId"</span><span>)</span><span>.</span><span>invoke</span><span>(</span>user<span>,</span> <span>new</span> <span>Object</span><span>[</span><span>]</span><span>{</span><span>"tokenId"</span><span>}</span><span>)</span><span>;</span>
        <span>// 1</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>forClass<span>.</span><span>getGetInvoker</span><span>(</span><span>"uid"</span><span>)</span><span>.</span><span>invoke</span><span>(</span>user<span>,</span> <span>new</span> <span>Object</span><span>[</span><span>]</span><span>{</span><span>}</span><span>)</span><span>)</span><span>;</span>
        <span>// 孙悟空</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>forClass<span>.</span><span>getGetInvoker</span><span>(</span><span>"name"</span><span>)</span><span>.</span><span>invoke</span><span>(</span>user<span>,</span> <span>new</span> <span>Object</span><span>[</span><span>]</span><span>{</span><span>}</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id="_2-4-5-异常上下文设计-errorcontext"> 2.4.5 异常上下文设计 ErrorContext</h3>
<ol>
<li>在代码执行的过程中,将关键信息通过 <code>ErrorContext.instance().message()</code> 保存进去。利用到了线程隔离的知识。</li>
<li><code>ErrorContext.instance()</code> 是利用 <code>ThreadLocal</code> 进行线程隔离。</li>
<li>异常打印后,进行 <code>reset</code> 重置。</li>
</ol>
<div><pre><code> <span>public</span> <span>int</span> <span>update</span><span>(</span><span>String</span> statement<span>,</span> <span>Object</span> parameter<span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
      dirty <span>=</span> <span>true</span><span>;</span>
      <span>MappedStatement</span> ms <span>=</span> configuration<span>.</span><span>getMappedStatement</span><span>(</span>statement<span>)</span><span>;</span>
      <span>return</span> executor<span>.</span><span>update</span><span>(</span>ms<span>,</span> <span>wrapCollection</span><span>(</span>parameter<span>)</span><span>)</span><span>;</span>
    <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
      <span>throw</span> <span>wrapException</span><span>(</span><span>"Error updating database.  Cause: "</span> <span>+</span> e<span>,</span> e<span>)</span><span>;</span>
    <span>}</span> <span>finally</span> <span>{</span>
      <span>// 完成之后异常上下文进行重置</span>
      <span>ErrorContext</span><span>.</span><span>instance</span><span>(</span><span>)</span><span>.</span><span>reset</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
  
  <span>// 将异常上线文中报错的错误都打印出来。</span>
  <span>public</span> <span>static</span> <span>RuntimeException</span> <span>wrapException</span><span>(</span><span>String</span> message<span>,</span> <span>Exception</span> e<span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>PersistenceException</span><span>(</span><span>ErrorContext</span><span>.</span><span>instance</span><span>(</span><span>)</span><span>.</span><span>message</span><span>(</span>message<span>)</span><span>.</span><span>cause</span><span>(</span>e<span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>,</span> e<span>)</span><span>;</span>
  <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-28T15:13:45.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Get新技能,Java实现文件监控</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/other/java-watch-file/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/other/java-watch-file/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><strong>作者: 八阿哥的剑</strong></p>
<p><em>博客: https://springlearn.cn</em></p>
<div><p>一日一句毒鸡汤</p>
<p>问世间钱为何物，只叫人生死相许。！😄</p>
</div>
<h2 id="java原生版本监控"> Java原生版本监控</h2>
<div><pre><code><span>public</span> <span>class</span> <span>JavaWatchAPI</span> <span>{</span>

    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>//第一步：取得WatchService</span>
        <span>WatchService</span> watchService <span>=</span> <span>FileSystems</span><span>.</span><span>getDefault</span><span>(</span><span>)</span><span>.</span><span>newWatchService</span><span>(</span><span>)</span><span>;</span>
        <span>//第二步：确定要监控的路径</span>
        <span>Path</span> path <span>=</span> <span>Paths</span><span>.</span><span>get</span><span>(</span><span>"/Users/liuxin/Github/nobug-learn-project/nobug-learn-01/src/main/java"</span><span>)</span><span>;</span>

        <span>//第三步：为本路径绑定WatchService，并确定监控的事件</span>
        path<span>.</span><span>register</span><span>(</span>
                watchService<span>,</span>
                <span>// StandardWatchEventKinds.ENTRY_CREATE—当有新文件时触发。可能是创建了一个新文件</span>
                <span>StandardWatchEventKinds</span><span>.</span>ENTRY_CREATE<span>,</span>
                <span>// StandardWatchEventKinds.ENTRY_DELETE—当文件被删除、移动或重命名时触发</span>
                <span>StandardWatchEventKinds</span><span>.</span>ENTRY_DELETE<span>,</span>
                <span>// StandardWatchEventKinds.ENTRY_MODIFY—当文件被修改时触发。</span>
                <span>StandardWatchEventKinds</span><span>.</span>ENTRY_MODIFY<span>)</span><span>;</span>
        <span>// StandardWatchEventKinds.OVERFLOW—触发表示丢失或丢弃的事件。</span>
        <span>WatchKey</span> key <span>=</span> <span>null</span><span>;</span>
        <span>while</span> <span>(</span><span>(</span>key <span>=</span> watchService<span>.</span><span>take</span><span>(</span><span>)</span><span>)</span> <span>!=</span> <span>null</span><span>)</span> <span>{</span>
            <span>for</span> <span>(</span><span>WatchEvent</span><span><span>&lt;</span><span>?</span><span>></span></span> event <span>:</span> key<span>.</span><span>pollEvents</span><span>(</span><span>)</span><span>)</span> <span>{</span>
                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"事件"</span> <span>+</span> event<span>.</span><span>kind</span><span>(</span><span>)</span> <span>+</span> <span>"发生了，文件是："</span> <span>+</span> event<span>.</span><span>context</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>}</span>
            key<span>.</span><span>reset</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h2 id="common-io-工具包监控"> Common IO 工具包监控</h2>
<div><pre><code><span>package</span> <span>cn<span>.</span>github<span>.</span>chinesszz</span><span>;</span>

<span>import</span> <span>org<span>.</span>apache<span>.</span>commons<span>.</span>io<span>.</span>filefilter<span>.</span></span><span>FileFilterUtils</span><span>;</span>
<span>import</span> <span>org<span>.</span>apache<span>.</span>commons<span>.</span>io<span>.</span>monitor<span>.</span></span><span>FileAlterationListener</span><span>;</span>
<span>import</span> <span>org<span>.</span>apache<span>.</span>commons<span>.</span>io<span>.</span>monitor<span>.</span></span><span>FileAlterationMonitor</span><span>;</span>
<span>import</span> <span>org<span>.</span>apache<span>.</span>commons<span>.</span>io<span>.</span>monitor<span>.</span></span><span>FileAlterationObserver</span><span>;</span>
<span>import</span> <span>org<span>.</span>junit<span>.</span></span><span>Test</span><span>;</span>

<span>import</span> <span>java<span>.</span>io<span>.</span></span><span>File</span><span>;</span>
<span>import</span> <span>java<span>.</span>util<span>.</span>concurrent<span>.</span></span><span>TimeUnit</span><span>;</span>

<span>/**
 * @author liuxin
 * 2021/11/9 8:55 下午
 */</span>
<span>public</span> <span>class</span> <span>CommonIOAPI</span> <span>{</span>

    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>File</span> directory <span>=</span> <span>new</span> <span>File</span><span>(</span><span>"/Users/liuxin/Github/nobug-learn-project/nobug-learn-01/src/main/java"</span><span>)</span><span>;</span>
        <span>// 轮询间隔 5 秒</span>
        <span>long</span> interval <span>=</span> <span>TimeUnit</span><span>.</span>SECONDS<span>.</span><span>toMillis</span><span>(</span><span>5</span><span>)</span><span>;</span>
        <span>// 创建一个文件观察器用于处理文件的格式</span>
        <span>FileAlterationObserver</span> observer <span>=</span> <span>new</span> <span>FileAlterationObserver</span><span>(</span>directory<span>,</span> <span>FileFilterUtils</span><span>.</span><span>and</span><span>(</span>
                <span>FileFilterUtils</span><span>.</span><span>fileFileFilter</span><span>(</span><span>)</span><span>,</span> <span>FileFilterUtils</span><span>.</span><span>suffixFileFilter</span><span>(</span><span>".txt"</span><span>)</span><span>,</span>
                <span>FileFilterUtils</span><span>.</span><span>prefixFileFilter</span><span>(</span><span>"lx"</span><span>)</span><span>)</span><span>)</span><span>;</span>
        <span>// 设置文件变化监听器</span>
        observer<span>.</span><span>addListener</span><span>(</span><span>new</span> <span>MyFileListener</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>FileAlterationMonitor</span> monitor <span>=</span> <span>new</span> <span>FileAlterationMonitor</span><span>(</span>interval<span>,</span> observer<span>)</span><span>;</span>
        monitor<span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>1</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Test</span>
    <span>public</span> <span>void</span> <span>watchDir</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>File</span> directory <span>=</span> <span>new</span> <span>File</span><span>(</span><span>"/Users/liuxin/Github/nobug-learn-project/nobug-learn-01/src/main/java"</span><span>)</span><span>;</span>
        <span>FileAlterationObserver</span> fileAlterationObserver <span>=</span> <span>new</span> <span>FileAlterationObserver</span><span>(</span>directory<span>,</span> <span>FileFilterUtils</span><span>.</span><span>and</span><span>(</span>
                <span>FileFilterUtils</span><span>.</span><span>directoryFileFilter</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
        <span>long</span> interval <span>=</span> <span>TimeUnit</span><span>.</span>SECONDS<span>.</span><span>toMillis</span><span>(</span><span>5</span><span>)</span><span>;</span>
        <span>// 设置文件变化监听器</span>
        fileAlterationObserver<span>.</span><span>addListener</span><span>(</span><span>new</span> <span>MyFileListener</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>FileAlterationMonitor</span> monitor <span>=</span> <span>new</span> <span>FileAlterationMonitor</span><span>(</span>interval<span>,</span> fileAlterationObserver<span>)</span><span>;</span>
        monitor<span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
        <span>while</span> <span>(</span><span>true</span><span>)</span><span>;</span>
    <span>}</span>

    <span>static</span> <span>final</span> <span>class</span> <span>MyFileListener</span> <span>implements</span> <span>FileAlterationListener</span> <span>{</span>
        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onStart</span><span>(</span><span>FileAlterationObserver</span> fileAlterationObserver<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"monitor start scan files.."</span><span>)</span><span>;</span>
        <span>}</span>


        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onDirectoryCreate</span><span>(</span><span>File</span> file<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>" director created."</span><span>)</span><span>;</span>
        <span>}</span>


        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onDirectoryChange</span><span>(</span><span>File</span> file<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>" director changed."</span><span>)</span><span>;</span>
        <span>}</span>


        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onDirectoryDelete</span><span>(</span><span>File</span> file<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>" director deleted."</span><span>)</span><span>;</span>
        <span>}</span>


        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onFileCreate</span><span>(</span><span>File</span> file<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>" created."</span><span>)</span><span>;</span>
        <span>}</span>


        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onFileChange</span><span>(</span><span>File</span> file<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>" changed."</span><span>)</span><span>;</span>
        <span>}</span>


        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onFileDelete</span><span>(</span><span>File</span> file<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>" deleted."</span><span>)</span><span>;</span>
        <span>}</span>


        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onStop</span><span>(</span><span>FileAlterationObserver</span> fileAlterationObserver<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"monitor stop scanning.."</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>


</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">第01篇:Mybatis学习之环境搭建</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/mybatis/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <updated>2022-04-26T15:44:59.000Z</updated>
    <content type="html"><![CDATA[<PageBanner/>
<h2 id="一、环境搭建"> 一、环境搭建</h2>
<h3 id="_1-1-数据库脚本"> 1.1 数据库脚本</h3>
<div><pre><code><span>SET</span> NAMES utf8<span>;</span>
<span>SET</span> FOREIGN_KEY_CHECKS <span>=</span> <span>0</span><span>;</span>

<span>-- ----------------------------</span>
<span>--  Table structure for `T_USER`</span>
<span>-- ----------------------------</span>
<span>DROP</span> <span>TABLE</span> <span>IF</span> <span>EXISTS</span> <span><span>`</span>T_USER<span>`</span></span><span>;</span>
<span>CREATE</span> <span>TABLE</span> <span><span>`</span>T_USER<span>`</span></span> <span>(</span>
  <span><span>`</span>uid<span>`</span></span> <span>int</span><span>(</span><span>11</span><span>)</span> <span>NOT</span> <span>NULL</span> <span>AUTO_INCREMENT</span> <span>COMMENT</span> <span>'用户id'</span><span>,</span>
  <span><span>`</span>name<span>`</span></span> <span>char</span><span>(</span><span>32</span><span>)</span> <span>DEFAULT</span> <span>NULL</span><span>,</span>
  <span><span>`</span>token_id<span>`</span></span> <span>char</span><span>(</span><span>64</span><span>)</span> <span>NOT</span> <span>NULL</span><span>,</span>
  <span>PRIMARY</span> <span>KEY</span> <span>(</span><span><span>`</span>uid<span>`</span></span><span>,</span><span><span>`</span>token_id<span>`</span></span><span>)</span>
<span>)</span> <span>ENGINE</span><span>=</span><span>InnoDB</span> <span>DEFAULT</span> <span>CHARSET</span><span>=</span>utf8<span>;</span>

<span>SET</span> FOREIGN_KEY_CHECKS <span>=</span> <span>1</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h3 id="_1-2-pom依赖"> 1.2 POM依赖</h3>
<div><pre><code><span><span><span>&lt;</span>plugin</span><span>></span></span>
    <span><span><span>&lt;</span>groupId</span><span>></span></span>org.mybatis.generator<span><span><span>&lt;/</span>groupId</span><span>></span></span>
    <span><span><span>&lt;</span>artifactId</span><span>></span></span>mybatis-generator-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
    <span><span><span>&lt;</span>version</span><span>></span></span>1.3.2<span><span><span>&lt;/</span>version</span><span>></span></span>
    <span><span><span>&lt;</span>configuration</span><span>></span></span>
        <span><span><span>&lt;</span>configurationFile</span><span>></span></span>${basedir}/src/main/resources/generator/generatorConfig.xml<span><span><span>&lt;/</span>configurationFile</span><span>></span></span>
        <span><span><span>&lt;</span>overwrite</span><span>></span></span>true<span><span><span>&lt;/</span>overwrite</span><span>></span></span>
        <span><span><span>&lt;</span>verbose</span><span>></span></span>true<span><span><span>&lt;/</span>verbose</span><span>></span></span>
    <span><span><span>&lt;/</span>configuration</span><span>></span></span>
<span><span><span>&lt;/</span>plugin</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="_1-3-执行脚本生成代码"> 1.3 执行脚本生成代码</h3>
<p>mysql数据库记得要安装好,如果clone代码下来学习,记得要改成自己的数据库。
当上面的步骤都完成后,并输入自己的mysql地址和用户信息后。就可以执行下面脚本了。</p>
<p><code>mvn mybatis-generator:generate</code></p>
<p>执行后就会生成我们本节要说的所有内容代码了。</p>
<div><pre><code>➜ tree
.
├── LICENSE
├── README.md
├── pom.xml
└── src
    ├── main
    │   ├── java
    │   │   └── orm
    │   │       └── example
    │   │           └── dal
    │   │               ├── mapper
    │   │               │   └── TUserMapper.java
    │   │               └── model
    │   │                   └── TUser.java
    │   └── resources
    │       ├── generator
    │       │   └── generatorConfig.xml
    │       └── mapper
    │           └── TUserMapper.xml
    └── test
        └── java

13 directories, 7 files


</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><h2 id="二、原生jdbc知识复习"> 二、原生jdbc知识复习</h2>
<h2 id="_2-1-jdbc是什么"> 2.1 JDBC是什么？</h2>
<p>JDBC代表Java数据库连接(Java Database Connectivity)，它是用于Java编程语言和数据库之间的数据库无关连接的标准Java API，换句话说：JDBC是用于在Java语言编程中与数据库连接的API。</p>
<ol>
<li>连接到数据库</li>
<li>创建SQL或MySQL语句</li>
<li>在数据库中执行SQL或MySQL查询</li>
<li>查看和修改结果记录</li>
</ol>
<h3 id="_2-1-1-代码示例"> 2.1.1 代码示例</h3>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>jdbc</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>String</span> dbUrl <span>=</span> <span>"jdbc:mysql://127.0.0.1:3306/test"</span><span>;</span>
        <span>String</span> user <span>=</span> <span>"root"</span><span>;</span>
        <span>String</span> pass <span>=</span> <span>"123456"</span><span>;</span>
        <span>Connection</span> connection <span>=</span> <span>DriverManager</span><span>.</span><span>getConnection</span><span>(</span>dbUrl<span>,</span> user<span>,</span> pass<span>)</span><span>;</span>
        <span>Statement</span> statement <span>=</span> connection<span>.</span><span>createStatement</span><span>(</span><span>)</span><span>;</span>
        <span>ResultSet</span> resultSet <span>=</span> statement<span>.</span><span>executeQuery</span><span>(</span><span>"select * from T_User"</span><span>)</span><span>;</span>
        <span>while</span> <span>(</span>resultSet<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            <span>String</span> name <span>=</span> resultSet<span>.</span><span>getString</span><span>(</span><span>"name"</span><span>)</span><span>;</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>name<span>)</span><span>;</span>
        <span>}</span>
        statement<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
        resultSet<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
        connection<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="_2-2-jdbc知识点"> 2.2 jdbc知识点</h2>
<h3 id="_2-2-1-jdbc驱动"> 2.2.1 jdbc驱动</h3>
<p>通过前面的例子,我们看到我们都是调用 java.sql的包下面的类创建的与数据库交互的工具。那么我们试想一下。
java怎么知道我们用的数据库是什么呢? 如果不知道他怎么知道如何进行交互呢?</p>
<p>其实就是 java.sql定义了一系列的接口定义, 由具体的第三方数据库来实现这些定义。从而进行底层的交互。
这里因为我们使用的是mysql数据库，所以 Connection的具体实现就是mysql的数据驱动类 ConnectionImpl。</p>
<p>DriverManager 怎么知道我们要用mysql的实现呢? 这里面用到的数据就是java原生的spi能力。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1648648826000.png" alt="" loading="lazy"></p>
<div><pre><code> <span>private</span> <span>static</span> <span>void</span> <span>loadInitialDrivers</span><span>(</span><span>)</span> <span>{</span>
    <span>ServiceLoader</span><span><span>&lt;</span><span>Driver</span><span>></span></span> loadedDrivers <span>=</span> <span>ServiceLoader</span><span>.</span><span>load</span><span>(</span><span>Driver</span><span>.</span><span>class</span><span>)</span><span>;</span>
    <span>Iterator</span><span><span>&lt;</span><span>Driver</span><span>></span></span> driversIterator <span>=</span> loadedDrivers<span>.</span><span>iterator</span><span>(</span><span>)</span><span>;</span>
 <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>当获得了与数据库的连接后，就可以与数据库进行交互了。 JDBC Statement，CallableStatement和PreparedStatement接口定义了可用于发送SQL或PL/SQL命令，并从数据库接收数据的方法和属性。
它们还定义了有助于在Java和SQL数据类型的数据类型差异转换的方法。</p>
<table>
<thead>
<tr>
<th style="text-align:left">接口</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">特点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Statement</td>
<td style="text-align:left">用于对数据库进行通用访问，在运行时使用静态SQL语句时很有用。 Statement接口不能接受参数。</td>
<td style="text-align:left">Statement每次的执行都需要编译SQL</td>
</tr>
<tr>
<td style="text-align:left">PreparedStatement</td>
<td style="text-align:left">当计划要多次使用SQL语句时使用。PreparedStatement接口在运行时接受输入参数。</td>
<td style="text-align:left">PreparedStatement会预编译，会被缓冲，在缓存区中可以发现预编译的命令，虽然会被再次解析，但不会被再次编译，能够有效提高系统性能</td>
</tr>
<tr>
<td style="text-align:left">CallableStatement</td>
<td style="text-align:left">当想要访问数据库存储过程时使用。CallableStatement接口也可以接受运行时输入参数。</td>
<td style="text-align:left">CallableStatement支持存储过程</td>
</tr>
</tbody>
</table>
<h3 id="_2-2-2-statement"> 2.2.2 Statement</h3>
<p>Statement对象后，可以使用它来执行一个SQL语句，它有三个执行方法可以执行</p>
<ul>
<li>boolean execute (String SQL) ： 如果可以检索到ResultSet对象，则返回一个布尔值true; 否则返回false。使用此方法执行SQLDDL语句或需要使用真正的动态SQL，可使用于执行创建数据库，创建表的SQL语句等等。</li>
<li>int executeUpdate (String SQL): 返回受SQL语句执行影响的行数。使用此方法执行预期会影响多行的SQL语句，例如:INSERT，UPDATE或DELETE语句。</li>
<li>ResultSet executeQuery(String SQL)：返回一个ResultSet对象。 当您希望获得结果集时，请使用此方法，就像使用SELECT语句一样。</li>
</ul>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>statement</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>String</span> dbUrl <span>=</span> <span>"jdbc:mysql://127.0.0.1:3306/test"</span><span>;</span>
        <span>String</span> user <span>=</span> <span>"root"</span><span>;</span>
        <span>String</span> pass <span>=</span> <span>"123456"</span><span>;</span>
        <span>Connection</span> connection <span>=</span> <span>DriverManager</span><span>.</span><span>getConnection</span><span>(</span>dbUrl<span>,</span> user<span>,</span> pass<span>)</span><span>;</span>
        connection<span>.</span><span>setAutoCommit</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>Statement</span> statement <span>=</span> connection<span>.</span><span>createStatement</span><span>(</span><span>)</span><span>;</span>
        <span>// true</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>statement<span>.</span><span>execute</span><span>(</span><span>"insert into t_user (name,token_id) values ('孙武空','007')"</span><span>)</span><span>)</span><span>;</span>
        <span>ResultSet</span> resultSet <span>=</span> statement<span>.</span><span>executeQuery</span><span>(</span><span>"select * from t_user"</span><span>)</span><span>;</span>
        <span>while</span> <span>(</span>resultSet<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            <span>String</span> name <span>=</span> resultSet<span>.</span><span>getString</span><span>(</span><span>"name"</span><span>)</span><span>;</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>name<span>)</span><span>;</span>
        <span>}</span>
        connection<span>.</span><span>rollback</span><span>(</span><span>)</span><span>;</span>
        statement<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
        connection<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h3 id="_2-2-3-preparedstatement"> 2.2.3 PreparedStatement</h3>
<p>PreparedStatement接口扩展了Statement接口，它添加了比Statement对象更好一些优点的功能。
此语句可以动态地提供/接受参数。</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>prepareStatement</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>String</span> dbUrl <span>=</span> <span>"jdbc:mysql://127.0.0.1:3306/test"</span><span>;</span>
        <span>String</span> user <span>=</span> <span>"root"</span><span>;</span>
        <span>String</span> pass <span>=</span> <span>"123456"</span><span>;</span>
        <span>Connection</span> connection <span>=</span> <span>DriverManager</span><span>.</span><span>getConnection</span><span>(</span>dbUrl<span>,</span> user<span>,</span> pass<span>)</span><span>;</span>
        connection<span>.</span><span>setAutoCommit</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>PreparedStatement</span> preparedStatement <span>=</span> connection<span>.</span><span>prepareStatement</span><span>(</span><span>"insert into t_user (name,token_id) values (?,?)"</span><span>)</span><span>;</span>
        preparedStatement<span>.</span><span>setString</span><span>(</span><span>1</span><span>,</span> <span>"唐三藏"</span><span>)</span><span>;</span>
        preparedStatement<span>.</span><span>setString</span><span>(</span><span>2</span><span>,</span> <span>"tok"</span><span>)</span><span>;</span>
        preparedStatement<span>.</span><span>execute</span><span>(</span><span>)</span><span>;</span>

        <span>ResultSet</span> resultSet <span>=</span> preparedStatement<span>.</span><span>executeQuery</span><span>(</span><span>"select * from t_user"</span><span>)</span><span>;</span>
        <span>while</span> <span>(</span>resultSet<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            <span>String</span> name <span>=</span> resultSet<span>.</span><span>getString</span><span>(</span><span>"name"</span><span>)</span><span>;</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>name<span>)</span><span>;</span>
        <span>}</span>
        connection<span>.</span><span>rollback</span><span>(</span><span>)</span><span>;</span>
        preparedStatement<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
        connection<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h3 id="_2-2-4-callablestatement"> 2.2.4 CallableStatement</h3>
<p>类似Connection对象创建Statement和PreparedStatement对象一样，它还可以使用同样的方式创建CallableStatement对象，该对象将用于执行对数据库存储过程的调用。</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>callableStatement</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>String</span> dbUrl <span>=</span> <span>"jdbc:mysql://127.0.0.1:3306/test"</span><span>;</span>
        <span>String</span> user <span>=</span> <span>"root"</span><span>;</span>
        <span>String</span> pass <span>=</span> <span>"123456"</span><span>;</span>
        <span>Connection</span> connection <span>=</span> <span>DriverManager</span><span>.</span><span>getConnection</span><span>(</span>dbUrl<span>,</span> user<span>,</span> pass<span>)</span><span>;</span>
        <span>// 1. 创建一个存储过程</span>
        <span>String</span> call <span>=</span>
                <span>"CREATE PROCEDURE delete_matches(IN del_name varchar(64))\n"</span> <span>+</span>
                        <span>"begin\n"</span> <span>+</span>
                        <span>"    delete from t_user where name = del_name;\n"</span> <span>+</span>
                        <span>"end;"</span><span>;</span>
        <span>Statement</span> statement <span>=</span> connection<span>.</span><span>createStatement</span><span>(</span><span>)</span><span>;</span>
        statement<span>.</span><span>execute</span><span>(</span><span>"DROP PROCEDURE IF EXISTS delete_matches;"</span><span>)</span><span>;</span>
        statement<span>.</span><span>execute</span><span>(</span>call<span>)</span><span>;</span>

        <span>// 执行存储过程</span>
        <span>CallableStatement</span> callableStatement <span>=</span> connection<span>.</span><span>prepareCall</span><span>(</span><span>"call delete_matches(?)"</span><span>)</span><span>;</span>
        callableStatement<span>.</span><span>setString</span><span>(</span><span>1</span><span>,</span> <span>"孙武空"</span><span>)</span><span>;</span>
        callableStatement<span>.</span><span>execute</span><span>(</span><span>)</span><span>;</span>

        <span>// 查询结果检查存储过程是否成功</span>
        <span>ResultSet</span> resultSet <span>=</span> statement<span>.</span><span>executeQuery</span><span>(</span><span>"select * from t_user"</span><span>)</span><span>;</span>
        <span>while</span> <span>(</span>resultSet<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            <span>String</span> name <span>=</span> resultSet<span>.</span><span>getString</span><span>(</span><span>"name"</span><span>)</span><span>;</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>name<span>)</span><span>;</span>
        <span>}</span>
        statement<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
        callableStatement<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
        connection<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><div><p>提示</p>
<p>jdbc主要提供跟数据库的交互,其主要的类就是上面演示的。通过上面的复习。我们要清楚下面几个类的作用。
后面我们在学习mybatis时候,我们看mybatis是如何对下面类的封装,从而实现orm映射的。</p>
</div>
<table>
<thead>
<tr>
<th style="text-align:left">关键类</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Connection</td>
<td style="text-align:left">数据库连接</td>
</tr>
<tr>
<td style="text-align:left">Statement</td>
<td style="text-align:left">静态sql执行</td>
</tr>
<tr>
<td style="text-align:left">PreparedStatement</td>
<td style="text-align:left">预处理sql</td>
</tr>
<tr>
<td style="text-align:left">CallableStatement</td>
<td style="text-align:left">存储过程执行</td>
</tr>
<tr>
<td style="text-align:left">ResultSet</td>
<td style="text-align:left">返回结果集</td>
</tr>
</tbody>
</table>
<h2 id="三、抛转引玉"> 三、抛转引玉</h2>
<p>前面我们首先搭建了mybaits的开发环境,然后又对jdbc的知识进行了复习。下面我们就开始学习mybait的源码,看mybatis是如何对
jdbc一步一步进行封装从而实现了orm的映射吧。
首先我们先看下下面演示代码。</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>mapper</span><span>(</span><span>)</span> <span>{</span>
        <span>// 读取配置信息(为什么路径前不用加/,因为是相对路径。maven编译后的资源文件和class文件都是在一个包下,所以不用加/就是当前包目录)</span>
        <span>InputStream</span> mapperInputStream <span>=</span> <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>getContextClassLoader</span><span>(</span><span>)</span><span>.</span><span>getResourceAsStream</span><span>(</span><span>"mybatisConfig.xml"</span><span>)</span><span>;</span>
        <span>// 生成SqlSession工厂,SqlSession从名字上看就是,跟数据库交互的会话信息,负责将sql提交到数据库进行执行</span>
        <span>SqlSessionFactory</span> sqlSessionFactory <span>=</span> <span>new</span> <span>SqlSessionFactoryBuilder</span><span>(</span><span>)</span><span>.</span><span>build</span><span>(</span>mapperInputStream<span>,</span> <span>"development"</span><span>)</span><span>;</span>
        <span>// 获取Mybatis配置信息</span>
        <span>Configuration</span> configuration <span>=</span> sqlSessionFactory<span>.</span><span>getConfiguration</span><span>(</span><span>)</span><span>;</span>
        <span>// 参数: autoCommit,从名字上看就是是否自动提交事务</span>
        <span>SqlSession</span> sqlSession <span>=</span> sqlSessionFactory<span>.</span><span>openSession</span><span>(</span><span>false</span><span>)</span><span>;</span>
        <span>// 获取Mapper</span>
        <span>TUserMapper</span> mapper <span>=</span> configuration<span>.</span><span>getMapperRegistry</span><span>(</span><span>)</span><span>.</span><span>getMapper</span><span>(</span><span>TUserMapper</span><span>.</span><span>class</span><span>,</span> sqlSession<span>)</span><span>;</span>
        <span>TUser</span> tUser <span>=</span> <span>new</span> <span>TUser</span><span>(</span><span>)</span><span>;</span>
        tUser<span>.</span><span>setName</span><span>(</span><span>"testUser1"</span><span>)</span><span>;</span>
        tUser<span>.</span><span>setTokenId</span><span>(</span><span>"testTokenId1"</span><span>)</span><span>;</span>
        mapper<span>.</span><span>insert</span><span>(</span>tUser<span>)</span><span>;</span>
        <span>// 获取插入的数据</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>mapper<span>.</span><span>selectAll</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 数据插入后，执行查询，然后回滚数据</span>
        sqlSession<span>.</span><span>rollback</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>jdbc的原生操作基本已经看不到了。我们已经使用Mybatis实现了与数据库的交互。可以看到并没有看到sql信息。
因为sql信息都维护在TUserMapper.xml里面,Mybatis帮我们把TUserMapper.xml和TUserMapper建立了关系。
最终将原本要通过jdbc实现的操作通过代理的方式，并最终通过TUserMapper这个接口进行交互了。</p>
<p>请问到这里勾起你的好奇心了没有呢? 想不想知道为什么能这样吗? 想不想知道mybaits究竟做了什么,以及是怎么做的呢?
本系列文章会带你一探究竟。在开始之前我们先指定一下学习目标吧。</p>
<h2 id="_3-1-学习目标制定"> 3.1 学习目标制定</h2>
<ul>
<li>配置文件是如何解析成 <code>Configuration</code> ?</li>
<li><code>sql</code> 和数据库是如何交互的 <code>SqlSession</code> ?</li>
<li><code>mapper.xml</code> 和 <code>Mapper</code> 是如何绑定的<code>MapperRegistry</code> ?</li>
<li><code>Mybatis</code> 是如何做动态代理的 ?</li>
<li>Mybatis中如何利用插件实现扩展的?</li>
<li>Jdbc的Statement在Mybatis是如何封装的?</li>
<li>以及Mybatis中很多好用的工具类.</li>
</ul>
<h2 id="_3-2-学习后我们能得到什么"> 3.2 学习后我们能得到什么</h2>
<ul>
<li>从配置文件解析中我们能学会,如果解析占位符。并将占位符填充真实数据。</li>
<li>通过对 <code>SqlSession</code> 的学习,我们会了解到Mybatis的缓存设计,批处理任务,事务等操作。</li>
<li>通过对 <code>MapperRegistry</code> 的学习, 我们会了解到如何实现 <code>orm(对象关系映射)</code> 框架。</li>
<li>我们会收货很多设计的思路，而思路决定出路。</li>
</ul>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-28T15:13:45.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">如何学会复盘</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/other/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%BC%9A%E5%A4%8D%E7%9B%98/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/other/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%BC%9A%E5%A4%8D%E7%9B%98/"/>
    <updated>2022-01-04T17:14:21.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/skP5pXvjsepvoOTMRmGEFw" target="_blank" rel="noopener noreferrer">不懂复盘，再努力都是低水平重复</a></p>
<h2 id="一、复盘三角"> 一、复盘三角</h2>
<p>“复盘三角”，也就是记录、反思、提炼这三个动作。</p>
<h3 id="_1-1-记录"> 1.1 记录</h3>
<p>一天过完以后，把你当天或者过往一天的主要发生记录下来，遇到了什么人，谈了什么话，做了什么事，情绪怎么样……</p>
<p>刚开始的时候，最好老老实实把一整天能记录的都记录下来，作为一种刻意练习，作为一种基本功的修炼。</p>
<p>有很多人会怀疑，说记录会不会是在浪费时间，其背后的意思，实际上是想有一个取巧的办法，能不花时间也有反思的成果，我目前的看法是，别想多了，还是老老实实、扎硬寨打呆仗。</p>
<p>为什么要如实记录？因为我们的大脑不一定靠谱，大脑自己会编造事实，事后就变成了“我以为”，实际上不是真相。记忆有时候是会骗人的。</p>
<p>当我们有一些我们无法接受的情况发生时，如果我们很痛苦的话，大脑就倾向于抹掉那一部分或者掩盖、改写一部分，好让自己变得舒服一点。</p>
<h3 id="_1-2-反思"> 1.2 反思</h3>
<p>就某个点、某件事慢慢进行剖析，比如为什么有这种情绪？为什么不愉快，发生了什么？为什么发生？我的判断是什么？我为什么会有这种判断？这种判断是一时的还是一种固有的模式？怎么做，才能避免？</p>
<h3 id="_1-3-提炼"> 1.3 提炼</h3>
<p>复盘到最后，提炼形成行动指南，用以指导自己的行动。</p>
<p>提炼很简单，就是形成一句话，复盘到最后，你要找到一句话，用这句话作为你的行动指南，作为你的方法论，作为你的原则和价值观，然后再去践行出来。</p>
<p>提炼也不简单，这句话要求有触发效应，能够在一个场景当中有效的指引自己，当你一想到这句话，就会让自己的行为有所改变。</p>
<p>我们的行为处事要有一套指引体系，要有一套指南。我们要用这些东西去逐渐规范、干预、调整自己的行为，用这些东西去重塑一个不同的自己。</p>
<p>这些指南、指引，实际上就是一些所谓的原则。史蒂芬·柯维的7个习惯就是7个原则，稻盛和夫的六项精进也是6个原则。</p>
<p>但这些原则是史蒂芬·柯维、稻盛和夫的，不是你的，虽然你很认同，但是它不一定能指导你的实践，你需要转化成自己的，拥有自己的原则。</p>
<p>就像达利欧在《原则》当中所指出的，“最重要的事情是总结出你自己的原则，最好将其写下来，尤其是在你与其他人共事的情况下。”</p>
<p>提炼这个步骤就是直接指向原则，这一步就是为了生产我们工作和生活的原则的。提炼的标准最好是：自己的语言，够具体，一句话，记得住，用得上。</p>
<h2 id="二、好的复盘长什么样"> 二、好的复盘长什么样？</h2>
<h3 id="_2-1-好的复盘首先都是-过电影"> 2.1 好的复盘首先都是“过电影”</h3>
<p>所谓“过电影”，就是对过去发生的事情一幕幕进行回顾。一天结束以后，先把一天的主要经历过一遍，今天到底发生了什么，今天到底过得怎么样，需要做到心里有数，掌握一定的素材，搞清事实状况，然后才能梳理出个所以然。</p>
<h3 id="_2-2-复自己的盘"> 2.2 复自己的盘</h3>
<p>复盘需要指向自己，如果复盘来复盘去，找到的都是别人的问题，看到的都是别人的毛病，那就不叫复盘，那叫批评大会、抱怨大会、吐槽大会。</p>
<p>所以还差一个东西，就是自我批评。有一个词叫反求诸己，这才是真正意义上的复盘。</p>
<h3 id="_2-3-复盘给自己看"> 2.3 复盘给自己看</h3>
<p>当你写复盘的时候，不要想着写给别人看，本着这样的心态去写，自己面对自己。</p>
<h3 id="_2-4-复盘自己的痛苦"> 2.4 复盘自己的痛苦</h3>
<p>《原则》的作者达利欧有一个公式：痛苦+反思=进步。没有经历足够的痛苦，没有痛彻心扉，反思通常也会停留于表面，不会那么深刻。
所以，当你经历痛苦的时候，最好把痛苦记录下来。当然，这种时候还不是反思的最佳时刻，因为你很难保持头脑清醒。最好是在痛苦之后，进行回顾和反思。</p>
<h3 id="_2-5-好的复盘会指向并加速行动"> 2.5 好的复盘会指向并加速行动</h3>
<p>我们判断一个复盘好不好，不是看你的复盘的文字写得好不好，而是看复盘之后，你有没有采取相应的行动，有没有取得相应的成果。复盘不是目的，而是达成目的的一种手段。</p>
<h3 id="_2-6-好的复盘需要不断质疑"> 2.6 好的复盘需要不断质疑</h3>
<p>复盘也需要更多的质疑。质疑什么？质疑自己的基本假设，自己的判断标准。</p>
<p>这一点是最难的，首先，你要能看到自己行为处事背后的原则和标准，其次，你要能够对这些原则和标准进行自我质疑。这不是一日之功，这才是复盘中最难突破的地方。</p>
<h2 id="三、复盘的三个标准"> 三、复盘的三个标准</h2>
<h3 id="_3-1-能反观"> 3.1 能反观</h3>
<p>很多人在参加一项培训之后会要求自己进行复盘，但他们更多所做的动作其实叫复习，把学到的东西再过一遍，看看老师讲了什么、做了什么练习或者最触动自己的是什么。</p>
<p>他们更多所做的是记忆或者说强化记忆的行为，从复盘的角度来看，只是完成了反观的一部分工作——反回头去看。</p>
<p>不过，这还不彻底，还要去看看所学的内容如何和自己的工作相结合，如何去落地和应用，从而让自己的工作效率和成果有所改变。还要对照学习的内容，看自己有哪些优势和不足，找出差距，然后才能有机会弥补差距。</p>
<p>这就是“能反观”。</p>
<h3 id="_3-2-会反思"> 3.2 会反思</h3>
<p>“能反观”之外，还要做到“会反思”。根据史蒂芬·柯维的“观为得”模型，想法决定行为，行为决定结果。也就是所谓的“观”决定“为”，“为”决定“得”。</p>
<p>反思就是从结果倒推，去看看我们当初到底都做了什么，有哪些行为，然后再去看我们所有行为背后的想法，为什么要这样去做，为什么有这些行为，原因是什么，背后的信念假设、思维模式是什么。</p>
<div><pre><code>比如家里来了客人，作为家长，你希望自己的女儿将玩具和客人的孩子分享，但是你的孩子的表现令你非常失望，她把玩具据为己有，一点也不愿意分享。你刚开始还好言相劝，慢慢变成了言语威胁，最后竟演变成了打骂，家里立刻变得乌烟瘴气。



从结果倒推，家里气氛不好，发生了什么呢？原来是你打了孩子。你为什么要打孩子呢？因为她不愿意分享，你觉得非常没有礼貌。



再去倒推“观”的层面，你会发现孩子不配合，让自己在客人面前失了面子。要把玩具跟别人分享，这是你的需求，不是孩子的需求。



再倒推，你可能会发现自己很虚伪，孩子却很真实；你可能会发现，孩子只有先学会拥有，才能学会分享；你可能会发现，自己之前对待孩子的方式有问题，你让孩子养成了吃独食的习惯，没有学会分享；你可能会发现，自己一直也是这样，跟人交往不愿多付出，只是一味索取，所以孩子也不知道什么叫付出和分享，等等等等。



最后你一定会在自己身上发现很多问题，这个过程，就是反思，我们用的是“得-为-观”倒推的方法。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id="_3-3-有反省"> 3.3 有反省</h3>
<p>一般的复盘，最多到这里就截止了，实际上，更高层面的复盘，还要有反省。</p>
<p>有了反省，自己反观、反思出来的问题，才能得到真正的解决，你的固有模式才有可能被调整，你的“木马程序”才有可能被清除。</p>
<p>反省是从事上，回到心上，去看自己的起心动念，去除恶念、保持善念。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-01-04T17:14:21.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">程序猿到底有没有必要买一台阿里云服务器</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/other/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%88%B0%E5%BA%95%E6%9C%89%E6%B2%A1%E6%9C%89%E5%BF%85%E8%A6%81%E4%B9%B0%E4%B8%80%E5%8F%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/other/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%88%B0%E5%BA%95%E6%9C%89%E6%B2%A1%E6%9C%89%E5%BF%85%E8%A6%81%E4%B9%B0%E4%B8%80%E5%8F%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2019122518192512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>做为一名程序猿多多少少每天都在跟服务器打交道,尤其是后端的小伙伴,那么你是否也有这样的想法呢 ?</strong></p>
<h3 id="一、个人服务器究竟能做什么"> 一、个人服务器究竟能做什么?</h3>
<h4 id="_1-搭建个人博客"> 1. 搭建个人博客</h4>
<p>软件开发这个行业,知识技术日新月异,作为一名合格专注的程序猿每天都会浏览各种各样的技术网站,在这里我们排出一些大的技术博客网站,我们也经常会看到很多个人的技术博主。一般拥有个人博客网站的都是在某一个领域有很深认识的大牛,会经常把自己的学到的知识积累下来,分享给大家。那么如果要搭建自己的个人博客就必须要有一台个人服务器啦。 但是排出一种情况就是有些个人博主会把自己的博客部署在 <code>gitlab</code> 或者<code>github</code>、<code>coding</code> 的静态Pages上,然后通过域名<code>CNAME</code> 的方式访问, 像小编我自己之前也是用后面这种情况,可以免费部署自己的个人博客。但是唯一缺点就是访问太慢了。</p>
<p><strong>下面就是小编我自己的个人网站,主要做Java后端的知识分享(非营利性哦)</strong>
<a href="https://blog.springlearn.cn/" target="_blank" rel="noopener noreferrer"><img src="https://img-blog.csdnimg.cn/20191225183752474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></a></p>
<h4 id="_2-搭建个人知识库"> 2. 搭建个人知识库</h4>
<p>做为技术人,我们每天都要处理各种各样的数据,有公司数据、有个人数据、或者碎片的知识点、API信息、备忘录信息等。相信每个开发者都会有这个需求吧，一般我们可以使用 <code>有道云笔记</code> 、 <code>印象笔记</code>。 小编使用的是前者，但是突然有一段时间不能用了,原因当然不是有道云挂了, 而是很多公司为了信息安全禁止员工登陆这种网站,
比如云盘类网站, 当然就包括上面的。这个时候当我们访问上面的网站时候就会被公司后台记录，或者是直接就访问不到。这个时候我们就要考虑搭建一个人知识库了。小编现在用的是 <code>showdoc</code>。 非常简单。</p>
<p>登陆服务器安装 <code>docker</code> 运行下面命令即可</p>
<div><pre><code><span>docker</span> pull xd2idwf5.mirror.aliyuncs.com/star7th/showdoc<span>;</span>
<span>docker</span> tag xd2idwf5.mirror.aliyuncs.com/star7th/showdoc:latest star7th/showdoc:latest<span>;</span>
<span>mkdir</span> showdoc_data<span>;</span>
<span>mkdir</span> showdoc_data/html<span>;</span>
<span>chmod</span>  -R <span>777</span> showdoc_data<span>;</span>
<span>docker</span> run -d --name showdoc -p <span>6666</span>:80 -v /root/showdoc_data/html:/var/www/html/      star7th/showdoc
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><strong>下面是小编的个人知识库</strong></p>
<p><a href="http://doc.springlearn.cn" target="_blank" rel="noopener noreferrer"><img src="https://img-blog.csdnimg.cn/20191225184550675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></a></p>
<h4 id="_3-搭建个人网盘"> 3. 搭建个人网盘</h4>
<p>网盘的用处只有一个就是存储文件,市面上的产品之前有很多但是近两年很多都倒闭了,不过现在还有 <code>百度网盘</code>依然坚挺。但是(太...慢了)。 那么我们就自己来搭建一个吧。小编使用的网盘是 <code>Seafile</code></p>
<p>Seafile是一个开源、专业、可靠的云存储平台；解决文件集中存储、共享和跨平台访问等问题，除了一般网盘所提供的云存储以及共享功能外，Seafile还提供消息通信。 具体安装也不难。
<img src="https://img-blog.csdnimg.cn/20191225185205331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="_4-部署个人应用"> 4. 部署个人应用</h4>
<p>这个需求应该是购买服务器的最终目的，就是部署自己的服务, 小编就是部署的自己的博客应用。 使用nginx作为方向代理。不得不说使用自己服务器就是比免费的速度快。</p>
<p>http://blog.springlearn.cn/ 响应在5毫秒内
http://www.hanframework.com/ 免费的响应在400毫秒内</p>
<p>虽然都不到1秒,但是具体使用时候用户体验差距还是很大的。可以自己体验下。
<img src="https://img-blog.csdnimg.cn/20191225185514458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="二、购买了服务器你还需要哪些知识储备"> 二、购买了服务器你还需要哪些知识储备</h3>
<h4 id="_1-服务器ssh登录"> 1. 服务器ssh登录</h4>
<p>当我们购买了服务器我们有两种登陆方式</p>
<ol>
<li>用户名和密码登陆</li>
<li>秘钥登陆
这两种登陆都离不开 <code>ssh</code> 命令</li>
</ol>
<p><strong>第一种</strong>
<code>ssh root@127.32.32.122</code> 然后输入用户密码</p>
<p><strong>第二种</strong>
<code>ssh aliyun</code>  直接就访问</p>
<p>对于如何配置小编就不说了,百度搜索就很多答案,如果不想搜索或者有问题，可以给小编私信。小编给你解决。</p>
<h4 id="_2-服务器器安全组配置"> 2. 服务器器安全组配置</h4>
<p>安全组这个概念,如果没有购买过服务器的应该不是很清楚,其实就是防火墙的意思。当我们购买了阿里/百度/腾讯/华为/七牛之类的服务器，在后台都有一个安全组管理的。一个入站,一个出站端端口配置。 这个要注意,如果不配置的话，你是访问不到你的端口的
<img src="https://img-blog.csdnimg.cn/20191225190257549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="_3-域名配置"> 3. 域名配置</h4>
<p>我们可以选择一个自己心仪的域名, 一般域名很便宜一年<code>三十</code> 左右。但是别钻牛角尖, 天价的域名也很多。</p>
<p>域名配置主要是域名转发之类的。</p>
<ol>
<li>第一种情况: 如果要将域名配置到一台服务器上使用，那么这种情况域名必须要备案，备案一般服务商会帮我们备案，我们只要提供认证信息,一般一周内可以下来。</li>
<li>第二种情况: 如果我们没有服务器我们也可以购买一个域名,我们在配置域名转发的时候,可以不指定服务器,而是转发到一个CNAEM别名上也可以使用。</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20191225191224799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="_4-部署应用"> 4. 部署应用</h4>
<p>不会做饭的老司机不是好的厨师,同样只会写代码,不会部署的程序猿不是合格的程序猿。😸。</p>
<p>部署应用我们可以使用 <code>docker</code> + <code>nginx或apache</code> 。 具体 <code>nginx</code> 和 <code>docker</code> 的使用网上很多就不细说了，如果你要购买服务器这些都是你要储备的知识点。</p>
<h3 id="三、购买服务器要注意什么"> 三、购买服务器要注意什么</h3>
<h4 id="_1-价格"> 1. 价格</h4>
<p>作为软件开发者,能免费的东西绝对不花钱, 上面的各种场景,其实我们都可以使用免费的来替代。 除了部署应用。那么我们就研究下价格。 一般运营商的套路都是年底大甩卖。所以年中和年头不是购买服务器的时间, 一般都在 <code>双十一</code> 、<code>双十二</code>期间会大降价。
关于价格对比的我们就以<code>2核4G</code>的服务器作为对比, 因为这个配置就能满足我们的需求。 那么我们就看看运营商的价格，因为是双十二期间,所以阿里云最近在搞活动,所以阿里云目前我看是最低的，新用户3年只要799。【如果不是新用户可以用其他人账号买,小编就是用自己家人账号买的】</p>
<ol>
<li>七牛云2核4g三年 ￥1767.61</li>
<li>腾讯云2核4g三年 ￥3897</li>
<li>华为云2核4g三年 ￥6,440.70</li>
<li>阿里云2核4g三年 ￥1807.2(常规价) ￥799(活动价格)</li>
</ol>
<p><a href="https://www.aliyun.com/minisite/goods?userCode=oab21mxz" target="_blank" rel="noopener noreferrer">活动优惠券领取</a>
<img src="https://img-blog.csdnimg.cn/20191225192246879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">
<img src="https://img-blog.csdnimg.cn/20191225192305678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">
<img src="https://img-blog.csdnimg.cn/20191225192332835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">
<img src="https://img-blog.csdnimg.cn/2019122519235837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="_2-售后-本人真实体验不是喷子-不是职业黑"> 2. 售后(本人真实体验不是喷子,不是职业黑)</h4>
<p>服务器一般什么情况下会有售后呢?
当出现服务器 <code>cpu</code> 飙高, 流量异常被恶意攻击的时候,就考验售后了。我们就看服务商的工单回复速度。因为小编就用过阿里云和七牛云所以就对比下两家的工单体验吧。</p>
<ol>
<li>阿里云无论回复速度还是质量都满意。</li>
<li>七牛云回复慢就算了，一个问题给我转几个人,每次让我重新再问一遍(没地方吐槽,就在这里吧)</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20191225192754639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img-blog.csdnimg.cn/20191225192935155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lc3NhZ2VfbHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>时间到,下班了... 喜欢小编的可以关注一下,持续为你分享干货知识</strong></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">重剑无锋大巧不工</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/other/%E9%87%8D%E5%89%91%E6%97%A0%E9%94%8B%E5%A4%A7%E5%B7%A7%E4%B8%8D%E5%B7%A5/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/other/%E9%87%8D%E5%89%91%E6%97%A0%E9%94%8B%E5%A4%A7%E5%B7%A7%E4%B8%8D%E5%B7%A5/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">八阿哥的剑</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/other/bug/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/other/bug/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><strong>作者: 八阿哥的剑</strong></p>
<p><em>博客: https://springlearn.cn</em></p>
<div><p>一日一句毒鸡汤</p>
<p>问世间钱为何物，只叫人生死相许。！😄</p>
</div>
<h2 id="java原生版本监控"> Java原生版本监控</h2>
<div><pre><code><span>public</span> <span>class</span> <span>JavaWatchAPI</span> <span>{</span>

    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>//第一步：取得WatchService</span>
        <span>WatchService</span> watchService <span>=</span> <span>FileSystems</span><span>.</span><span>getDefault</span><span>(</span><span>)</span><span>.</span><span>newWatchService</span><span>(</span><span>)</span><span>;</span>
        <span>//第二步：确定要监控的路径</span>
        <span>Path</span> path <span>=</span> <span>Paths</span><span>.</span><span>get</span><span>(</span><span>"/Users/liuxin/Github/nobug-learn-project/nobug-learn-01/src/main/java"</span><span>)</span><span>;</span>

        <span>//第三步：为本路径绑定WatchService，并确定监控的事件</span>
        path<span>.</span><span>register</span><span>(</span>
                watchService<span>,</span>
                <span>// StandardWatchEventKinds.ENTRY_CREATE—当有新文件时触发。可能是创建了一个新文件</span>
                <span>StandardWatchEventKinds</span><span>.</span>ENTRY_CREATE<span>,</span>
                <span>// StandardWatchEventKinds.ENTRY_DELETE—当文件被删除、移动或重命名时触发</span>
                <span>StandardWatchEventKinds</span><span>.</span>ENTRY_DELETE<span>,</span>
                <span>// StandardWatchEventKinds.ENTRY_MODIFY—当文件被修改时触发。</span>
                <span>StandardWatchEventKinds</span><span>.</span>ENTRY_MODIFY<span>)</span><span>;</span>
        <span>// StandardWatchEventKinds.OVERFLOW—触发表示丢失或丢弃的事件。</span>
        <span>WatchKey</span> key <span>=</span> <span>null</span><span>;</span>
        <span>while</span> <span>(</span><span>(</span>key <span>=</span> watchService<span>.</span><span>take</span><span>(</span><span>)</span><span>)</span> <span>!=</span> <span>null</span><span>)</span> <span>{</span>
            <span>for</span> <span>(</span><span>WatchEvent</span><span><span>&lt;</span><span>?</span><span>></span></span> event <span>:</span> key<span>.</span><span>pollEvents</span><span>(</span><span>)</span><span>)</span> <span>{</span>
                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"事件"</span> <span>+</span> event<span>.</span><span>kind</span><span>(</span><span>)</span> <span>+</span> <span>"发生了，文件是："</span> <span>+</span> event<span>.</span><span>context</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>}</span>
            key<span>.</span><span>reset</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h2 id="common-io-工具包监控"> Common IO 工具包监控</h2>
<div><pre><code><span>package</span> <span>cn<span>.</span>github<span>.</span>chinesszz</span><span>;</span>

<span>import</span> <span>org<span>.</span>apache<span>.</span>commons<span>.</span>io<span>.</span>filefilter<span>.</span></span><span>FileFilterUtils</span><span>;</span>
<span>import</span> <span>org<span>.</span>apache<span>.</span>commons<span>.</span>io<span>.</span>monitor<span>.</span></span><span>FileAlterationListener</span><span>;</span>
<span>import</span> <span>org<span>.</span>apache<span>.</span>commons<span>.</span>io<span>.</span>monitor<span>.</span></span><span>FileAlterationMonitor</span><span>;</span>
<span>import</span> <span>org<span>.</span>apache<span>.</span>commons<span>.</span>io<span>.</span>monitor<span>.</span></span><span>FileAlterationObserver</span><span>;</span>
<span>import</span> <span>org<span>.</span>junit<span>.</span></span><span>Test</span><span>;</span>

<span>import</span> <span>java<span>.</span>io<span>.</span></span><span>File</span><span>;</span>
<span>import</span> <span>java<span>.</span>util<span>.</span>concurrent<span>.</span></span><span>TimeUnit</span><span>;</span>

<span>/**
 * @author liuxin
 * 2021/11/9 8:55 下午
 */</span>
<span>public</span> <span>class</span> <span>CommonIOAPI</span> <span>{</span>

    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>File</span> directory <span>=</span> <span>new</span> <span>File</span><span>(</span><span>"/Users/liuxin/Github/nobug-learn-project/nobug-learn-01/src/main/java"</span><span>)</span><span>;</span>
        <span>// 轮询间隔 5 秒</span>
        <span>long</span> interval <span>=</span> <span>TimeUnit</span><span>.</span>SECONDS<span>.</span><span>toMillis</span><span>(</span><span>5</span><span>)</span><span>;</span>
        <span>// 创建一个文件观察器用于处理文件的格式</span>
        <span>FileAlterationObserver</span> observer <span>=</span> <span>new</span> <span>FileAlterationObserver</span><span>(</span>directory<span>,</span> <span>FileFilterUtils</span><span>.</span><span>and</span><span>(</span>
                <span>FileFilterUtils</span><span>.</span><span>fileFileFilter</span><span>(</span><span>)</span><span>,</span> <span>FileFilterUtils</span><span>.</span><span>suffixFileFilter</span><span>(</span><span>".txt"</span><span>)</span><span>,</span>
                <span>FileFilterUtils</span><span>.</span><span>prefixFileFilter</span><span>(</span><span>"lx"</span><span>)</span><span>)</span><span>)</span><span>;</span>
        <span>// 设置文件变化监听器</span>
        observer<span>.</span><span>addListener</span><span>(</span><span>new</span> <span>MyFileListener</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>FileAlterationMonitor</span> monitor <span>=</span> <span>new</span> <span>FileAlterationMonitor</span><span>(</span>interval<span>,</span> observer<span>)</span><span>;</span>
        monitor<span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>1</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Test</span>
    <span>public</span> <span>void</span> <span>watchDir</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>File</span> directory <span>=</span> <span>new</span> <span>File</span><span>(</span><span>"/Users/liuxin/Github/nobug-learn-project/nobug-learn-01/src/main/java"</span><span>)</span><span>;</span>
        <span>FileAlterationObserver</span> fileAlterationObserver <span>=</span> <span>new</span> <span>FileAlterationObserver</span><span>(</span>directory<span>,</span> <span>FileFilterUtils</span><span>.</span><span>and</span><span>(</span>
                <span>FileFilterUtils</span><span>.</span><span>directoryFileFilter</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
        <span>long</span> interval <span>=</span> <span>TimeUnit</span><span>.</span>SECONDS<span>.</span><span>toMillis</span><span>(</span><span>5</span><span>)</span><span>;</span>
        <span>// 设置文件变化监听器</span>
        fileAlterationObserver<span>.</span><span>addListener</span><span>(</span><span>new</span> <span>MyFileListener</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>FileAlterationMonitor</span> monitor <span>=</span> <span>new</span> <span>FileAlterationMonitor</span><span>(</span>interval<span>,</span> fileAlterationObserver<span>)</span><span>;</span>
        monitor<span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
        <span>while</span> <span>(</span><span>true</span><span>)</span><span>;</span>
    <span>}</span>

    <span>static</span> <span>final</span> <span>class</span> <span>MyFileListener</span> <span>implements</span> <span>FileAlterationListener</span> <span>{</span>
        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onStart</span><span>(</span><span>FileAlterationObserver</span> fileAlterationObserver<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"monitor start scan files.."</span><span>)</span><span>;</span>
        <span>}</span>


        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onDirectoryCreate</span><span>(</span><span>File</span> file<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>" director created."</span><span>)</span><span>;</span>
        <span>}</span>


        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onDirectoryChange</span><span>(</span><span>File</span> file<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>" director changed."</span><span>)</span><span>;</span>
        <span>}</span>


        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onDirectoryDelete</span><span>(</span><span>File</span> file<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>" director deleted."</span><span>)</span><span>;</span>
        <span>}</span>


        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onFileCreate</span><span>(</span><span>File</span> file<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>" created."</span><span>)</span><span>;</span>
        <span>}</span>


        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onFileChange</span><span>(</span><span>File</span> file<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>" changed."</span><span>)</span><span>;</span>
        <span>}</span>


        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onFileDelete</span><span>(</span><span>File</span> file<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>" deleted."</span><span>)</span><span>;</span>
        <span>}</span>


        <span>@Override</span>
        <span>public</span> <span>void</span> <span>onStop</span><span>(</span><span>FileAlterationObserver</span> fileAlterationObserver<span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"monitor stop scanning.."</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>


</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">一致性hash问题</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/other/%E4%B8%80%E8%87%B4%E6%80%A7hash%E9%97%AE%E9%A2%98/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/other/%E4%B8%80%E8%87%B4%E6%80%A7hash%E9%97%AE%E9%A2%98/"/>
    <updated>2022-05-22T07:02:41.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_aecfc8e243edb199c726728413b1522c.gif" alt="" loading="lazy"></p>
<h2 id="一、介绍"> 一、介绍</h2>
<p>一致性哈希主要解决的问题,是互联网中的热点问题,及当cache环境改变,能动态感知,避免继续向已经坏掉的空间,插入新值.</p>
<h2 id="二、不一致会有什么问题"> 二、不一致会有什么问题?</h2>
<h2 id="_2-1-缓存的例子"> 2.1 缓存的例子</h2>
<p>有 N 个 cache 服务器（后面简称 cache ），那么如何将一个对象 object 映射到 N 个 cache 上呢，你很可能会采用类似下面的通用方法计算 object 的 hash</p>
<p>求余算法: hash(Object) % N</p>
<p>有多个cache: cache[0] cache[1] cache[2] cache[3], 然后要</p>
<ul>
<li>
<p>put 4%4 insert 到cache[0]=A</p>
</li>
<li>
<p>put 1%4 insert 到cache[1]=B</p>
</li>
<li>
<p>put 2%4 insert 到cache[2]=C</p>
</li>
<li>
<p>put 3%4 insert 到cache[3]=D</p>
</li>
</ul>
<p>假如cache[0] A节点突然挂了,此时获取cache[0]会有问题,put 5%3(本来4个节点-1一个节点) insert cache[2] ,之前是插入C,但是之后cache[2]=D,此时,一台错误会对全局产生影响.(因为cache的位置都发生了变化),这样就不能维护hash算法的单调性,可能之前已经插入了,但是后面就要覆盖.</p>
<p><del>cache[0]=A</del></p>
<ul>
<li>cache[0]=B</li>
<li>cache[1]=C</li>
<li>cache[2]=D</li>
</ul>
<h2 id="_2-3-数据迁移例子"> 2.3 数据迁移例子</h2>
<p>假如有10条数据，3个节点，如果按照取模的方式。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1652926998000.png" alt="" loading="lazy"></p>
<p>总结: 数据在增加了一个节点后，3,4,5,6,7,8,9都需要做搬迁，成本太高了</p>
<p>那么采用一致性hash后怎么样呢?</p>
<h3 id="_2-3-1-一致性hash如何处理"> 2.3.1 一致性hash如何处理?</h3>
<p>对 a b c 分别做哈希映射</p>
<p><img src="https://img.springlearn.cn/blog/learn_1652927183000.png" alt="" loading="lazy"></p>
<p>当大于228都存203节点,于是就维护了一个圆形,即所有数据都能找到其节点了</p>
<p><img src="https://img.springlearn.cn/blog/learn_1652927207000.png" alt="" loading="lazy"></p>
<p>当新加入节点d,可以算出d的hash</p>
<p><mark>node d: 216</mark></p>
<p><img src="https://img.springlearn.cn/blog/learn_1652927238000.png" alt="" loading="lazy"></p>
<p>对数据进行迁移(其实只影响209~216之间的数,即达到了我们的目的)</p>
<h2 id="三、总结"> 三、总结</h2>
<p><code>一致性hash的算法，就是不去确定唯一的下标，而是将节点先形成一个hash环,每次获取当前hash最近的节点。这样就算挂了一个节点，影响也是最小的</code>。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Alfred添加工作流</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/project/alfred/create-alfred/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/project/alfred/create-alfred/"/>
    <updated>2022-05-08T04:06:59.000Z</updated>
    <content type="html"><![CDATA[<h2 id="_1-创建一个新的workflow"> 1. 创建一个新的Workflow</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1651661121000.png" alt="" loading="lazy"></p>
<h2 id="_2-使用编辑器打开文件夹创建项目"> 2. 使用编辑器打开文件夹创建项目</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1651661168000.png" alt="" loading="lazy"></p>
<h2 id="_3-安装alfred-workflow工作"> 3. 安装Alfred-workflow工作</h2>
<div><pre><code>npm install &quot;alfred-workflow-nodejs&quot;
</code></pre>
<div><span>1</span><br></div></div><h2 id="_4-使用bash启动脚本"> 4. 使用bash启动脚本</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1651661238000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-08T04:06:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Mac 效率工具必备神器Alfred插件开发</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/project/alfred/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/project/alfred/"/>
    <updated>2022-05-08T04:06:59.000Z</updated>
    <content type="html"><![CDATA[<div><p>如果你还不了解 [Alfred](https://www.alfredapp.com/)</p>
<p>本文默认你已经知道 Alfred的情况下,进行插件的开发。我们可以编写
自动化工作流，在工作中帮助我们提高工作效率。</p>
</div>
<p><img src="https://img.springlearn.cn/blog/learn_1651658394000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-08T04:06:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">基于命令行的Java脚手架</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/project/jmvn/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/project/jmvn/"/>
    <updated>2022-04-26T15:44:59.000Z</updated>
    <content type="html"><![CDATA[<div><p>jmvn</p>
<p>现阶段SpringBoot + Maven多模块是构建Java后台项目的标准格式，但是Maven多模块和成熟的Java项目结构搭建起来也是比较费力的。
对于一个老鸟来说可能需要5分钟,但是对于一个小白或者是非专业认识,可能需要更长的时间。
这里提供一个命令行交互式的构建工具，希望能解决这种简单重复的工作。
jmvn就是为了解决这问题诞生的, 一个快速构建Maven多模块应用的构建工具 <a href="https://github.com/lxchinesszz/mvn-cli" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/-jmvn-green?style=for-the-badge&amp;logo=appveyor" alt="" loading="lazy"></a>
它不仅能提供快速构建项目的能力，同时也能快速的安装数据模型生成Java对象,同时也可能快速导出数据库表结构信息，生成表结构文档。</p>
</div>
<h2 id="背景-目标"> 背景 &amp; 目标</h2>
<p>目标打造一个简单好用的 Java 服务脚手架工具，让任何没有开发经验的同学都能快速构建一个可以运行的项目</p>
<p>工具围绕几个方面进行开发, 力求在以下方面提高开发的工作效率, 同时同过脚手架的方式从一开始就统一下项目结构和模型。</p>
<ul>
<li>深度定制 (定制公司标准的项目结构)</li>
<li>快速构建标准的Maven多模块服务</li>
<li>支持数据库模型快速安装 (一次配置终生使用, 多快好省)</li>
<li>数据库模型文档一键导出 (每次表结构变更, 快速导出最新表文档)</li>
</ul>
<h2 id="一、介绍-introduce"> 一、介绍 | Introduce</h2>
<p>快速构建支持SpringBoot的Maven多模块应用,启动及快速打包部署</p>
<ul>
<li>支持Maven多模块构建、</li>
<li>数据库模型安装、</li>
<li>数据库模型导出),</li>
<li>统一项目规范,</li>
<li>提高工作效率,</li>
<li>可进行深度定制。</li>
</ul>
<h2 id="二、快速安装-fast-installation"> 二、快速安装 | Fast installation</h2>
<h2 id="_2-1-node环境安装"> 2.1 Node环境安装</h2>
<CodeGroup>
<CodeGroupItem title="Window">
<div><pre><code>https://nodejs.org/dist/v14.15.5/node-v14.15.5-x64.msi
</code></pre>
<div><span>1</span><br></div></div></CodeGroupItem>
<CodeGroupItem title="Mac" active>
<div><pre><code>https://nodejs.org/dist/v15.9.0/node-v15.9.0.pkg
</code></pre>
<div><span>1</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="_2-2-安装"> 2.2 安装</h2>
<div><pre><code>➜ npm i jmvn -g
</code></pre>
<div><span>1</span><br></div></div><h2 id="三、功能介绍"> 三、功能介绍</h2>
<h2 id="_3-1-快速构建-to-quickly-build"> 3.1 快速构建 | To quickly build</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1650116393000.png" alt="" loading="lazy"></p>
<h3 id="_3-1-1-命令行构建项目-command-line-build"> 3.1.1 命令行构建项目 | Command line build</h3>
<div><pre><code>ℹ Build:shop/shop-web/src/main/java/com/github/shop/web/
ℹ Build:shop/shop-web/src/main/resources/
ℹ Build:shop/shop-web/src/main/java/com/github/shop/web/
ℹ MavenHooks webPath:shop/shop-web/src/main/java/com/github/shop/web/
✔ Build: Add SpringBoot Config:shop/shop-web/src/main/resources/application.yml
ℹ Build:shop/shop-service/src/main/java/com/github/shop/service/
ℹ Build:shop/shop-service/src/main/resources/
ℹ Build:shop/shop-service/src/main/java/com/github/shop/service/
ℹ MavenHooks servicePath:shop/shop-service/src/main/java/com/github/shop/service/
ℹ Build:shop/shop-domain/src/main/java/com/github/shop/domain/
ℹ Build:shop/shop-domain/src/main/resources/
ℹ Build:shop/shop-domain/src/main/java/com/github/shop/domain/
ℹ MavenHooks domainPath:shop/shop-domain/src/main/java/com/github/shop/domain/
ℹ Build:shop/shop-dal/src/main/java/com/github/shop/dal/
ℹ Build:shop/shop-dal/src/main/resources/
ℹ Build:shop/shop-dal/src/main/java/com/github/shop/dal/
ℹ MavenHooks dalPath:shop/shop-dal/src/main/java/com/github/shop/dal/
ℹ Build:shop/shop-integration/src/main/java/com/github/shop/integration/
ℹ Build:shop/shop-integration/src/main/resources/
ℹ Build:shop/shop-integration/src/main/java/com/github/shop/integration/
ℹ MavenHooks integrationPath:shop/shop-integration/src/main/java/com/github/shop/integration/
ℹ Build:shop/shop-config/src/main/java/com/github/shop/config/
ℹ Build:shop/shop-config/src/main/resources/
ℹ Build:shop/shop-config/src/main/java/com/github/shop/config/
ℹ MavenHooks configPath:shop/shop-config/src/main/java/com/github/shop/config/
ℹ Build:shop/shop-common/src/main/java/com/github/shop/common/
ℹ Build:shop/shop-common/src/main/resources/
ℹ Build:shop/shop-common/src/main/java/com/github/shop/common/
ℹ MavenHooks commonPath:shop/shop-common/src/main/java/com/github/shop/common/
✔ GitIgnore before
   __  ____   ___  __    _______   ____
  /  |/  / | / / |/ /___/ ___/ /  /  _/
 / /|_/ /| |/ /    /___/ /__/ /___/ /
/_/  /_/ |___/_/|_/    \___/____/___/  Application shop Build Success

✔ 🚀 JMVN CLI v1.0.6
┌────────┬────────┬──────────┬────────────────┬──────────────────────────────────────┬────────┐
│ 项目名 │ 作者   │ 项目版本 │ SpringBoot版本 │ 描述                                 │ 端口号 │
├────────┼────────┼──────────┼────────────────┼──────────────────────────────────────┼────────┤
│ shop   │ 周杰伦 │ 1.0.0    │ 0.5.1-RELEASE  │ 一个基于SpringBoot的商城项目后台服务 │ 10086  │
└────────┴────────┴──────────┴────────────────┴──────────────────────────────────────┴────────┘
✔ GitIgnore invoke
✔ GitIgnore after
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><h2 id="_3-2-安装数据库库模型-install-the-database-library-model"> 3.2 安装数据库库模型 | Install the database library model</h2>
<h3 id="_3-2-1-配置安装信息-configure-installation-information"> 3.2.1 配置安装信息 | Configure installation information#</h3>
<ul>
<li>配置项目开发数据库地址</li>
<li>配置模型命名规则及安装目录</li>
</ul>
<div><pre><code><span>{</span>
  <span>"dbConfig"</span><span>:</span> <span>{</span>
    <span>"host"</span><span>:</span> <span>"10.*.*.121"</span><span>,</span>
    <span>"user"</span><span>:</span> <span>"o*test"</span><span>,</span>
    <span>"password"</span><span>:</span> <span>"9G****RZ"</span><span>,</span>
    <span>"database"</span><span>:</span> <span>"***"</span>
  <span>}</span><span>,</span>
  <span>"models"</span><span>:</span> <span>[</span>
    <span>{</span>
      <span>"suffix"</span><span>:</span> <span>"DO"</span><span>,</span>
      <span>"tableName"</span><span>:</span> <span>[</span>
        <span>"w_order"</span><span>,</span>
        <span>"w_push_order"</span>
      <span>]</span><span>,</span>
      <span>"path"</span><span>:</span> <span>"scm-dao/src/main/java/com/idanchuang/scm/dao/entity/Do"</span>
    <span>}</span>
  <span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id="_3-2-2-执行命令-execute-the-command"> 3.2.2 执行命令 | Execute the command</h3>
<p><img src="https://img.springlearn.cn/blog/learn_1650116518000.png" alt="" loading="lazy"></p>
<div><pre><code>➜ jmvn
JMVN CLI v1.0.6
Usage: jmvn [options] [command]

快速构建支持SpringBoot的Maven多模块应用

Options:
  -V, --version        output the version number
  -h, --help           display help for command

Commands:
  init                 创建一个新的Maven多模块项目
  install|i [options]  安装数据模型
  export [options]     导出数据模型 (支持命令行模式 &amp; 交互模式)
  help [command]       display help for command
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="_3-3-导出数据模型文档-export-data-model-documents"> 3.3 导出数据模型文档 | Export data model documents</h2>
<p>为了方便我们写技术文档, 支持直接导出成 markdown 格式文档。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1650116581000.png" alt="" loading="lazy"></p>
<h2 id="四、发布记录-release-record"> 四、发布记录 | Release record</h2>
<p><strong>1.0.1</strong></p>
<p>构建服务
支持注册命令</p>
<p><strong>1.0.2</strong></p>
<p>代码精简及优化
版本检测及升级</p>
<p><strong>1.0.3</strong></p>
<p>fix端口号映射问题</p>
<p><strong>1.0.4</strong></p>
<p>优化版本检测,在网络差场景的用户体验</p>
<h2 id="五、定制-custom"> 五、定制 | Custom</h2>
<p>为了达到深度定制的能力, 你所看到的一切都是可配置的。在模块每一层创建的同时也提供了钩子方法。允许你在钩子节点去做定制开发 。
<strong><a href="https://github.com/lxchinesszz/mvn-cli/blob/master/action/MavenHooks.js" target="_blank" rel="noopener noreferrer">MavenHooks.js</a></strong></p>
<p>欢迎感兴趣的小伙伴一起参与开发, 🚀 <code>call me！</code></p>
<p>微信: <code>lxchinesszz</code>
邮箱: <code>lxchinesszz@163.com</code></p>
<h2 id="六、扩展知识-expand-the-knowledge"> 六、扩展知识 | Expand the knowledge</h2>
<p><a href="/learn/design/Java代码规范全部奉上/">代码命名规范参考建议</a></p>
<p>项目结构设计支持配置, 在配置前请确定你的编程方法论和价值观。以下文档仅供参考。也是当前工具所保持的价值观。</p>
<h2 id="_6-1-分层命名-hierarchical-naming"> 6.1 分层命名 | Hierarchical naming</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1650116968000.png" alt="" loading="lazy">
明确业务分层架构，定义领取模型, 编程不迷茫</p>
<p><img src="https://img.springlearn.cn/blog/learn_1650116958000.png" alt="" loading="lazy"></p>
<h2 id="_6-2-数据模型规范-data-model-specification"> 6.2 数据模型规范 | Data model specification</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1650117078000.png" alt="" loading="lazy">
迪米特法则: 不要和陌生人说话,数据模型之间保持最少的了解 迪米特法则: 不要和陌生人说话,数据模型之间保持最少的了</p>
<p><img src="https://img.springlearn.cn/blog/learn_1650117093000.png" alt="" loading="lazy"></p>
<h2 id="七、插件开发-plug-in-development"> 七、插件开发 | Plug-in development</h2>
<p>脚手架工具会将在每个 Maven Module 创建过程中去发出不同对应的事件, 插件开发者可以不同的事件类型来开发插件。</p>
<h2 id="_7-1-事件类型-the-event-type"> 7.1 事件类型 | The event type</h2>
<table>
<thead>
<tr>
<th>事件类型</th>
<th>事件说明</th>
<th>环境信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>BUILD_BEFORE</td>
<td>构建前触发</td>
<td>-</td>
</tr>
<tr>
<td>BUILD_WEB</td>
<td>构建web层触发</td>
<td>{ projectConfig: Object, currentPath: '' }</td>
</tr>
<tr>
<td>BUILD_SERVICE</td>
<td>构建service层触发</td>
<td>{ projectConfig: Object, currentPath: '' }</td>
</tr>
<tr>
<td>BUILD_DOMAIN</td>
<td>构建domain层触发</td>
<td>{ projectConfig: Object, currentPath: '' }</td>
</tr>
<tr>
<td>BUILD_DAL</td>
<td>构建dal层触发</td>
<td>{ projectConfig: Object, currentPath: '' }</td>
</tr>
<tr>
<td>BUILD_INTEGRATION</td>
<td>构建integration层触发</td>
<td>{ projectConfig: Object, currentPath: '' }</td>
</tr>
<tr>
<td>BUILD_CONFIG</td>
<td>构建config层触发</td>
<td>{ projectConfig: Object, currentPath: '' }</td>
</tr>
<tr>
<td>BUILD_COMMON</td>
<td>构建common通用层触发</td>
<td>{ projectConfig: Object, currentPath: '' }</td>
</tr>
<tr>
<td>BUILD_COMPLETE</td>
<td>构建完成触发</td>
<td>{ &quot;namespace&quot;:Array[7], &quot;config&quot;:Object, &quot;dbConfig&quot;:Object, &quot;models&quot;:Array[1], &quot;projectConfig&quot;:Object }</td>
</tr>
<tr>
<td>BUILD_JAVA_RESOURCE</td>
<td>构建java资源文件时候触发</td>
<td>{ projectConfig: Object, currentPath: '' }</td>
</tr>
<tr>
<td>BUILD_JAVA_WEB_RESOURCE</td>
<td>构建java, Web资源文件时候触发</td>
<td>{ projectConfig: Object, currentPath: '' }</td>
</tr>
</tbody>
</table>
<h2 id="_7-2-插件生命周期函数-life-cycle-function"> 7.2 插件生命周期函数 | Life cycle function</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1650117675000.png" alt="" loading="lazy"></p>
<h2 id="_7-3-插件开发示例-the-sample"> 7.3 插件开发示例 | The sample</h2>
<h3 id="_7-3-1-创建目录-create-a-directory"> 7.3.1 创建目录 | Create a directory</h3>
<p><code>plugins</code> 目录下创建插件子目录</p>
<h3 id="_7-3-2-实现插件生命周期函数-write-a-function"> 7.3.2 实现插件生命周期函数 | Write a function</h3>
<p>插件支持before、invoke、error、after。插件的核心逻辑在invoke，可以直接实现该方法即可。</p>
<p>所有的声明周期函数都有且只有一个入参，但是不同事件入参信息是不一样的，可以参考 7.1 事件类型, 参数说明。</p>
<div><pre><code><span>// 方式1: 仅仅实现核心逻辑,不关注生命周期函数</span>
<span>new</span> <span>Plugin</span><span>(</span><span>'GitIgnore'</span><span>,</span> <span>'GitIgnore创建'</span><span>,</span> PluginEventType<span>.</span><span>BUILD_COMPLETE</span><span>,</span> <span>new</span> <span>GitAction</span><span>(</span><span>)</span><span>.</span>createGitIgnoreFile<span>)</span><span>;</span>

<span>// 方式2: 通过方法重写方式实现,生命周期方法</span>
<span>let</span> plugin2 <span>=</span> <span>new</span> <span>Plugin</span><span>(</span><span>'GitIgnore'</span><span>,</span> <span>'GitIgnore创建'</span><span>,</span> PluginEventType<span>.</span><span>BUILD_COMPLETE</span><span>)</span><span>;</span>

plugin2<span>.</span><span>before</span> <span>=</span> <span>function</span><span>(</span><span>envConfig</span><span>)</span><span>{</span>
	console<span>.</span><span>log</span><span>(</span><span>'插件before'</span><span>)</span>
<span>}</span>

plugin2<span>.</span><span>after</span>  <span>=</span> <span>function</span><span>(</span><span>envConfig</span><span>)</span><span>{</span>
	console<span>.</span><span>log</span><span>(</span><span>'插件before'</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id="_7-3-3-注册开发好的插件-to-register-the-plugin"> 7.3.3 注册开发好的插件 | To register the plugin</h3>
<p><code>plugins.Install.js</code>  进行注册</p>
<div><pre><code><span>/**
 * 定义插件
 *
 * before->invoke->success->after
 * error异常捕捉执行
 * @param name 插件名称
 * @param desc 插件说明
 * @param type 插件类型
 * @param action 插件核心逻辑
 * @constructor
 */</span>
<span>function</span> <span>Plugin</span><span>(</span><span>name<span>,</span> desc<span>,</span> type<span>,</span> action</span><span>)</span> <span>{</span><span>}</span>

<span>// 注册一个git忽略文件插件,接受maven构建完成事件</span>
Plugins<span>.</span><span>register</span><span>(</span><span>new</span> <span>Plugin</span><span>(</span><span>'GitIgnore'</span><span>,</span> <span>'GitIgnore创建'</span><span>,</span> PluginEventType<span>.</span><span>BUILD_COMPLETE</span><span>,</span> <span>new</span> <span>GitAction</span><span>(</span><span>)</span><span>.</span>createGitIgnoreFile<span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h3 id="_7-3-4-完整的参数入参-parameters-for-details"> 7.3.4 完整的参数入参 | Parameters for details</h3>
<ul>
<li>项目名称 <code>tests</code> 为例</li>
</ul>
<div><pre><code><span>{</span>
    <span>"namespace"</span><span>:</span><span>[</span>
        <span>{</span>
            <span>"type"</span><span>:</span><span>"web"</span><span>,</span>
            <span>"path"</span><span>:</span><span>"tests/tests-web/src/main/java/com/idanchuang/tests/web/"</span><span>,</span>
            <span>"packagePath"</span><span>:</span><span>"com/idanchuang/tests/web"</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>"type"</span><span>:</span><span>"service"</span><span>,</span>
            <span>"path"</span><span>:</span><span>"tests/tests-service/src/main/java/com/idanchuang/tests/service/"</span><span>,</span>
            <span>"packagePath"</span><span>:</span><span>"com/idanchuang/tests/service"</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>"type"</span><span>:</span><span>"domain"</span><span>,</span>
            <span>"path"</span><span>:</span><span>"tests/tests-domain/src/main/java/com/idanchuang/tests/domain/"</span><span>,</span>
            <span>"packagePath"</span><span>:</span><span>"com/idanchuang/tests/domain"</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>"type"</span><span>:</span><span>"dal"</span><span>,</span>
            <span>"path"</span><span>:</span><span>"tests/tests-dal/src/main/java/com/idanchuang/tests/dal/"</span><span>,</span>
            <span>"packagePath"</span><span>:</span><span>"com/idanchuang/tests/dal"</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>"type"</span><span>:</span><span>"integration"</span><span>,</span>
            <span>"path"</span><span>:</span><span>"tests/tests-integration/src/main/java/com/idanchuang/tests/integration/"</span><span>,</span>
            <span>"packagePath"</span><span>:</span><span>"com/idanchuang/tests/integration"</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>"type"</span><span>:</span><span>"config"</span><span>,</span>
            <span>"path"</span><span>:</span><span>"tests/tests-config/src/main/java/com/idanchuang/tests/config/"</span><span>,</span>
            <span>"packagePath"</span><span>:</span><span>"com/idanchuang/tests/config"</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>"type"</span><span>:</span><span>"common"</span><span>,</span>
            <span>"path"</span><span>:</span><span>"tests/tests-common/src/main/java/com/idanchuang/tests/common/"</span><span>,</span>
            <span>"packagePath"</span><span>:</span><span>"com/idanchuang/tests/common"</span>
        <span>}</span>
    <span>]</span><span>,</span>
    <span>"config"</span><span>:</span><span>{</span>
        <span>"_projectName"</span><span>:</span><span>"tests"</span><span>,</span>
        <span>"_web"</span><span>:</span><span>"web"</span><span>,</span>
        <span>"_biz"</span><span>:</span><span>"service"</span><span>,</span>
        <span>"_domain"</span><span>:</span><span>"domain"</span><span>,</span>
        <span>"_dal"</span><span>:</span><span>"dal"</span><span>,</span>
        <span>"_integration"</span><span>:</span><span>"integration"</span><span>,</span>
        <span>"_config"</span><span>:</span><span>"config"</span><span>,</span>
        <span>"_common"</span><span>:</span><span>"common"</span><span>,</span>
        <span>"_groupId"</span><span>:</span><span>"com.idanchuang"</span><span>,</span>
        <span>"_projectVersion"</span><span>:</span><span>"1.0.0"</span><span>,</span>
        <span>"_projectDescription"</span><span>:</span><span>"description"</span><span>,</span>
        <span>"_springBootVersion"</span><span>:</span><span>"0.5.1-RELEASE"</span>
    <span>}</span><span>,</span>
    <span>"projectConfig"</span><span>:</span><span>{</span>
        <span>"projectName"</span><span>:</span><span>"tests"</span><span>,</span>
        <span>"web"</span><span>:</span><span>"web"</span><span>,</span>
        <span>"biz"</span><span>:</span><span>"service"</span><span>,</span>
        <span>"domain"</span><span>:</span><span>"domain"</span><span>,</span>
        <span>"dal"</span><span>:</span><span>"dal"</span><span>,</span>
        <span>"integration"</span><span>:</span><span>"integration"</span><span>,</span>
        <span>"config"</span><span>:</span><span>"config"</span><span>,</span>
        <span>"common"</span><span>:</span><span>"common"</span><span>,</span>
        <span>"groupId"</span><span>:</span><span>"com.idanchuang"</span><span>,</span>
        <span>"projectVersion"</span><span>:</span><span>"1.0.0"</span><span>,</span>
        <span>"mavenSurefireJavaVersion"</span><span>:</span><span>"1.8"</span><span>,</span>
        <span>"projectDescription"</span><span>:</span><span>"description"</span><span>,</span>
        <span>"springBootVersion"</span><span>:</span><span>"0.5.1-RELEASE"</span><span>,</span>
        <span>"port"</span><span>:</span><span>"8081"</span><span>,</span>
        <span>"projectAuthor"</span><span>:</span><span>"mvn-cli"</span><span>,</span>
        <span>"modelFlag"</span><span>:</span><span>true</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br></div></div><h2 id="_7-4-插件测试-plug-in-test"> 7.4 插件测试 | Plug-in Test</h2>
<p>配置完成即可进行 <code>debug</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1650117812000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-04-26T15:44:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Alfred-workflow-js</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/project/alfred/alfred-worflow-js/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/project/alfred/alfred-worflow-js/"/>
    <updated>2022-05-08T04:06:59.000Z</updated>
    <content type="html"><![CDATA[<h2 id="_1-基本运行"> 1. 基本运行</h2>
<div><pre><code><span>var</span> AlfredNode <span>=</span> <span>require</span><span>(</span><span>'alfred-workflow-nodejs'</span><span>)</span><span>;</span>
<span>var</span> actionHandler <span>=</span> AlfredNode<span>.</span>actionHandler<span>;</span>
<span>var</span> workflow <span>=</span> AlfredNode<span>.</span>workflow<span>;</span>
<span>var</span> Item <span>=</span> AlfredNode<span>.</span>Item<span>;</span>
 
<span>(</span><span>function</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    actionHandler<span>.</span><span>onAction</span><span>(</span><span>"action1"</span><span>,</span> <span>function</span><span>(</span><span>query</span><span>)</span> <span>{</span>
        <span>// your code to handle action 1 here</span>
    <span>}</span><span>)</span><span>;</span>
    actionHandler<span>.</span><span>onAction</span><span>(</span><span>"action2"</span><span>,</span> <span>function</span><span>(</span><span>query</span><span>)</span> <span>{</span>
        <span>// your code to handle action 2 here</span>
    <span>}</span><span>)</span><span>;</span>
    
    actionHandler<span>.</span><span>onMenuItemSelected</span><span>(</span><span>"action2"</span><span>,</span> <span>function</span><span>(</span><span>query<span>,</span> selectedTitle<span>,</span> selectedData</span><span>)</span> <span>{</span>
        <span>// your code to handle manu item selected of action 2 here</span>
    <span>}</span><span>)</span><span>;</span>
 
    AlfredNode<span>.</span><span>run</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>(</span><span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id="_2-日志打印"> 2. 日志打印</h2>
<div><pre><code>console.warn(&quot;action1, 参数:&quot; + query)
</code></pre>
<div><span>1</span><br></div></div><h2 id="_3-菜单"> 3. 菜单</h2>
<p>使用脚本当使用tab键,会进行跳转的操作。</p>
<div><pre><code>
    <span>//输入tab键会把上一个选中的参数翻到这里</span>
    actionHandler<span>.</span><span>onMenuItemSelected</span><span>(</span><span>"action1"</span><span>,</span> <span>function</span> <span>(</span><span>query<span>,</span> title<span>,</span> data</span><span>)</span> <span>{</span>
        console<span>.</span><span>warn</span><span>(</span><span>"data:"</span> <span>+</span> data<span>)</span>
        console<span>.</span><span>warn</span><span>(</span><span>"title:"</span> <span>+</span> title<span>)</span>
        console<span>.</span><span>warn</span><span>(</span><span>"query:"</span> <span>+</span> query<span>)</span>

        <span>var</span> item1 <span>=</span> <span>new</span> <span>Item</span><span>(</span><span>{</span>
            <span>title</span><span>:</span> <span>"Item 1 of "</span> <span>+</span> title<span>,</span>
            <span>arg</span><span>:</span> <span>"item 1 of "</span> <span>+</span> title <span>+</span> <span>" which has alias "</span><span>,</span>
            <span>subtitle</span><span>:</span> <span>"data"</span><span>,</span> <span>// we can get data of selected item</span>
            <span>valid</span><span>:</span> <span>true</span>
        <span>}</span><span>)</span><span>;</span>

        <span>var</span> item2 <span>=</span> <span>new</span> <span>Item</span><span>(</span><span>{</span>
            <span>title</span><span>:</span> <span>"Item 2 of "</span> <span>+</span> title<span>,</span>
            <span>arg</span><span>:</span> <span>"item 2 of "</span> <span>+</span> title <span>+</span> <span>" which has alias "</span><span>,</span>
            <span>subtitle</span><span>:</span> data<span>,</span>
            <span>valid</span><span>:</span> <span>true</span>
        <span>}</span><span>)</span><span>;</span>

        workflow<span>.</span><span>addItem</span><span>(</span>item1<span>)</span><span>;</span>
        workflow<span>.</span><span>addItem</span><span>(</span>item2<span>)</span><span>;</span>


        <span>var</span> item3 <span>=</span> <span>new</span> <span>Item</span><span>(</span><span>{</span>
            <span>title</span><span>:</span> <span>"Item 3 of "</span> <span>+</span> storage<span>.</span><span>get</span><span>(</span><span>"key1"</span><span>)</span><span>,</span>
            <span>arg</span><span>:</span> <span>"item 3 of "</span> <span>+</span> title <span>+</span> <span>" which has alias "</span><span>,</span>
            <span>subtitle</span><span>:</span> data<span>,</span>
            <span>valid</span><span>:</span> <span>true</span>
        <span>}</span><span>)</span><span>;</span>
        workflow<span>.</span><span>addItem</span><span>(</span>item3<span>)</span><span>;</span>

        <span>var</span> item4 <span>=</span> <span>new</span> <span>Item</span><span>(</span><span>{</span>
            <span>title</span><span>:</span> <span>"Item 4 of "</span> <span>+</span> storage<span>.</span><span>get</span><span>(</span><span>"key2"</span><span>)</span><span>.</span>name<span>,</span>
            <span>arg</span><span>:</span> <span>"item 4 of "</span> <span>+</span> title <span>+</span> <span>" which has alias "</span><span>,</span>
            <span>subtitle</span><span>:</span> data<span>,</span>
            <span>valid</span><span>:</span> <span>true</span>
        <span>}</span><span>)</span><span>;</span>
        workflow<span>.</span><span>addItem</span><span>(</span>item4<span>)</span><span>;</span>

        workflow<span>.</span><span>feedback</span><span>(</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><h2 id="_4-使用本地缓存进行curd"> 4. 使用本地缓存进行CURD</h2>
<div><pre><code>
<span>var</span> AlfredNode <span>=</span> <span>require</span><span>(</span><span>'alfred-workflow-nodejs'</span><span>)</span><span>;</span>
<span>var</span> actionHandler <span>=</span> AlfredNode<span>.</span>actionHandler<span>;</span>
<span>var</span> workflow <span>=</span> AlfredNode<span>.</span>workflow<span>;</span>
<span>var</span> Item <span>=</span> AlfredNode<span>.</span>Item<span>;</span>
workflow<span>.</span><span>setName</span><span>(</span><span>"example-alfred-workflow-using-nodejs"</span><span>)</span><span>;</span>
<span>//类似本地的缓存</span>
<span>var</span> storage <span>=</span> AlfredNode<span>.</span>storage<span>;</span>



<span>var</span> storage <span>=</span> AlfredNode<span>.</span>storage<span>;</span>
storge<span>.</span><span>set</span><span>(</span><span>"key"</span><span>,</span> <span>"value"</span><span>)</span><span>;</span>
storage<span>.</span><span>set</span><span>(</span><span>"key"</span><span>,</span> <span>{</span><span>name</span><span>:</span> <span>"node"</span><span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
storage<span>.</span><span>get</span><span>(</span><span>"key"</span><span>)</span><span>;</span>
storage<span>.</span><span>remove</span><span>(</span><span>"key"</span><span>)</span><span>;</span>
storage<span>.</span><span>clear</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="_5-获取alfred-workflow中的配置"> 5. 获取Alfred-workflow中的配置</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1605443439000.png" alt="" loading="lazy"></p>
<div><pre><code>
 <span>//获取系统外部配置</span>
 console<span>.</span><span>warn</span><span>(</span><span>"系统环境变量:"</span> <span>+</span> utils<span>.</span>envVars<span>.</span><span>get</span><span>(</span><span>"outSetting"</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_6-异常图标"> 6. 异常图标</h2>
<p>可以是图片地址，也可以是系统icns地址</p>
<p>(ACCOUNT, BURN, CLOCK, COLOR, EJECT, ERROR, FAVORITE, GROUP, HELP, HOME, INFO, NETWORK, NOTE, SETTINGS, SWIRL, SWITCH, SYNC, TRASH, USER, WARNING, WEB)</p>
<div><pre><code>
icon: AlfredNode.ICONS.INFO

icon: AlfredNode.ICONS.ERROR
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_7-传递给下一个的变量"> 7. 传递给下一个的变量</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1605444141000.png" alt="" loading="lazy"></p>
<p><img src="https://img.springlearn.cn/blog/learn_1605444173000.png" alt="" loading="lazy"></p>
<div><pre><code>AlfredNode.utils.generateVars({arg: &#39;xyz&#39;, variables: {key: value}};

</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_8-获取mac的钥匙串"> 8. 获取mac的钥匙串</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1605444750000.png" alt="" loading="lazy"></p>
<div><pre><code> var settings = AlfredNode.settings;
        // 将账户密码添加到钥匙串
        settings.setPassword(&quot;alfred-liuxin&quot;, &quot;password&quot;);
        // 获取mac的钥匙串中的,密码
        settings.getPassword(&quot;alfred-liuxin&quot;, function(error, password){
            console.warn(&quot;获取密码:&quot; + password);
        });
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_9-自动黏贴app中"> 9. 自动黏贴APP中</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1605446383000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-08T04:06:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">工具介绍</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/project/jmvn/introduction/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/project/jmvn/introduction/"/>
    <updated>2022-04-26T15:44:59.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_600dd8ab8ca8e139c8bc37f5fc1b5801.gif" alt="" loading="lazy"></p>
<p>目标打造一个简单好用的 Java 服务脚手架工具，让任何没有开发经验的同学都能快速构建一个可以运行的项目</p>
<p>工具围绕几个方面进行开发, 力求在以下方面提高开发的工作效率, 同时通过脚手架的方式从一开始就统一下项目结构和模型。</p>
<ul>
<li>深度定制 (定制公司标准的项目结构)</li>
<li>快速构建标准的Maven多模块服务</li>
<li>支持数据库模型快速安装 (一次配置终生使用, 多快好省)</li>
<li>数据库模型文档一键导出 (每次表结构变更, 快速导出最新表文档)</li>
</ul>
<h2 id="介绍"> 介绍</h2>
<p>快速构建支持SpringBoot的Maven多模块应用,启动及快速打包部署</p>
<ul>
<li>支持Maven多模块构建、</li>
<li>数据库模型安装、</li>
<li>数据库模型导出),</li>
<li>统一项目规范,</li>
<li>提高工作效率,</li>
<li>可进行深度定制。</li>
</ul>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-04-26T15:44:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">数据模型导出</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/project/jmvn/jmvn-export/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/project/jmvn/jmvn-export/"/>
    <updated>2022-04-26T15:44:59.000Z</updated>
    <content type="html"><![CDATA[<div><p>jmvn export 数据模型导出</p>
<p><code>jmvn</code> 另一个好用的功能就是数据导出，这个功能的主要用处是，在写技术方案时候将数据模型输出到文档中。支持markdown语法。</p>
</div>
<h2 id="自动读取配置进行导出"> 自动读取配置进行导出</h2>
<p>如果你已经在配置文件中了dbConfig相关信息，则会自动读取配置信息。你只需要输入要导出的表名即可。</p>
<div><pre><code><span>{</span>
  <span>"namespace"</span><span>:</span> <span>[</span>
  <span>]</span><span>,</span>
  <span>"config"</span><span>:</span> <span>{</span><span>}</span><span>,</span>
  <span>"dbConfig"</span><span>:</span> <span>{</span>
    <span>"host"</span><span>:</span> <span>"10.80.20.8"</span><span>,</span>
    <span>"user"</span><span>:</span> <span>"abm_dev"</span><span>,</span>
    <span>"password"</span><span>:</span> <span>"pOj*4Z%^izKy0o23o8aH"</span><span>,</span>
    <span>"database"</span><span>:</span> <span>"pms_dev"</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="根据命令提示完成导出"> 根据命令提示完成导出</h2>
<p>如果你没有在配置文件中添加dbConfig相关信息，请根据命令提示来进行完成导出。</p>
<p><img src="https://img.springlearn.cn/learn_53218775085b88f319e37ca3811c5cd7.gif" alt="" loading="lazy"></p>
<h2 id="纯命令方式导出"> 纯命令方式导出</h2>
<p>如果你在配置文件中已经添加了dbConfig相关信息，但是又不想使用这个进行导出。则可以在命令后添加 <code>-c</code> 以强制使用输入参数来进行导出。</p>
<div><pre><code>jmvn export -c -m -h 10.80.20.8 -u abm_dev -p &#39;pOj*4Z%^izKy0o23o8aH&#39; -t replenish_order -db pms_dev
</code></pre>
<div><span>1</span><br></div></div><h3 id="查看导出帮助文档"> 查看导出帮助文档</h3>
<div><pre><code>➜ jmvn help export                                                                                   
JMVN CLI v1.0.6
Usage: jmvn export [options]

导出数据模型 (支持命令行模式 &amp; 交互模式)

Options:
  -c, --commanded [String]  命令行模式运行
  -m, --markdown [String]   导出markdown格式
  -h, --host [String]       数据库[host]
  -u, --user [String]       数据库登陆用户
  -p, --password [String]   登陆密码(明文请注意安全)
  -t, --tables [String]     要导出的表模型(支持,分隔)
  -db, --database [String]  指定要导出的库
  --help                    display help for command

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-04-26T15:44:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">快速安装</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/project/jmvn/introduction-install/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/project/jmvn/introduction-install/"/>
    <updated>2022-04-26T15:44:59.000Z</updated>
    <content type="html"><![CDATA[<Djt/>
<h2 id="node环境安装"> Node环境安装</h2>
<CodeGroup>
<CodeGroupItem title="Window">
<div><pre><code>https://nodejs.org/dist/v14.15.5/node-v14.15.5-x64.msi
</code></pre>
<div><span>1</span><br></div></div></CodeGroupItem>
<CodeGroupItem title="Mac" active>
<div><pre><code>https://nodejs.org/dist/v15.9.0/node-v15.9.0.pkg
</code></pre>
<div><span>1</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="命令安装"> 命令安装</h2>
<div><pre><code>npm i jmvn -g
</code></pre>
<div><span>1</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-04-26T15:44:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Home</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/"/>
    <updated>2022-05-22T16:24:55.000Z</updated>
    <content type="html"><![CDATA[<Djt/>
<h2 id=""> <i>Not supported content</i> <i>Not supported content</i>  <i>Not supported content</i> <i>Not supported content</i>  <i>Not supported content</i></h2>
<p><img src="https://img.springlearn.cn/blog/learn_1648909278000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">插件开发</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/project/jmvn/jmvn-plugin/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/project/jmvn/jmvn-plugin/"/>
    <updated>2022-04-26T15:44:59.000Z</updated>
    <content type="html"><![CDATA[<div><p>jmvn instll 数据安装</p>
<p><code>jmvn</code> 一个好用的功能就是支持数据安装，这个功能是我比较喜欢的。因为在项目
中开发过程中，经常会出现,表结构进行变更，可能是增加些表注释，增加个字段。这个时候就要同步来
修改数据模型。是比较繁琐的。当你尝试过 <code>jmvn install</code> 功能后，这个问题就能彻底解决了。
只需要运行 <code>jmvn install</code> 命令，数据模型就会同步更改。</p>
</div>
<h2 id="配置如下"> 配置如下</h2>
<p>在你的项目 <code>.jmvn.json</code> 中添加如下。<code>jmvn</code> 会读取 <code>dbConfig</code> 中数据库的配置。
写入到 <code>models</code> 中指定的目录 <code>path</code>。</p>
<div><pre><code><span>{</span>
  <span>"namespace"</span><span>:</span> <span>[</span>
  <span>]</span><span>,</span>
  <span>"config"</span><span>:</span> <span>{</span><span>}</span><span>,</span>
  <span>"dbConfig"</span><span>:</span> <span>{</span>
    <span>"host"</span><span>:</span> <span>"10.*.*.8"</span><span>,</span>
    <span>"user"</span><span>:</span> <span>"root"</span><span>,</span>
    <span>"password"</span><span>:</span> <span>"123456"</span><span>,</span>
    <span>"database"</span><span>:</span> <span>"test"</span>
  <span>}</span><span>,</span>
  <span>"models"</span><span>:</span> <span>[</span>
    <span>{</span>
      <span>"suffix"</span><span>:</span> <span>"DO"</span><span>,</span>
      <span>"tableName"</span><span>:</span> <span>[</span>
        <span>"user"</span><span>,</span>
        <span>"user_detail"</span>
      <span>]</span><span>,</span>
      <span>"path"</span><span>:</span> <span>"example-dal/src/main/java/com/example/dal/entity"</span>
    <span>}</span>
  <span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>你可以在models中使用suffix添加Java文件的后缀名。
eg: user表，最终写成java文件为 UserDO</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-04-26T15:44:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">创建项目</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/project/jmvn/jmvn-init/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/project/jmvn/jmvn-init/"/>
    <updated>2022-04-26T15:44:59.000Z</updated>
    <content type="html"><![CDATA[<div><p>jmvn init</p>
<p>快到你无法想象，丝滑的感觉</p>
</div>
<h2 id="使用命令快速创建项目"> 使用命令快速创建项目</h2>
<p>你可以方便的使用工具创建基于SpringBoot的Maven多模块应用，如下示例。</p>
<p><img src="https://img.springlearn.cn/learn_600dd8ab8ca8e139c8bc37f5fc1b5801.gif" alt="" loading="lazy"></p>
<p>项目创建后会自动生成一个配置文件。默认项目的结构如下。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1650473598000.png" alt="" loading="lazy"></p>
<div><pre><code><span>{</span>
  <span>"namespace"</span><span>:</span><span>[</span>
    <span>{</span>
      <span>"type"</span><span>:</span><span>"web"</span><span>,</span>
      <span>"path"</span><span>:</span><span>"example/example-web/src/main/java/com/github/example/web/"</span><span>,</span>
      <span>"packagePath"</span><span>:</span><span>"com/github/example/web"</span>
    <span>}</span><span>,</span>
    <span>{</span>
      <span>"type"</span><span>:</span><span>"service"</span><span>,</span>
      <span>"path"</span><span>:</span><span>"example/example-service/src/main/java/com/github/example/service/"</span><span>,</span>
      <span>"packagePath"</span><span>:</span><span>"com/github/example/service"</span>
    <span>}</span><span>,</span>
    <span>{</span>
      <span>"type"</span><span>:</span><span>"domain"</span><span>,</span>
      <span>"path"</span><span>:</span><span>"example/example-domain/src/main/java/com/github/example/domain/"</span><span>,</span>
      <span>"packagePath"</span><span>:</span><span>"com/github/example/domain"</span>
    <span>}</span><span>,</span>
    <span>{</span>
      <span>"type"</span><span>:</span><span>"dal"</span><span>,</span>
      <span>"path"</span><span>:</span><span>"example/example-dal/src/main/java/com/github/example/dal/"</span><span>,</span>
      <span>"packagePath"</span><span>:</span><span>"com/github/example/dal"</span>
    <span>}</span><span>,</span>
    <span>{</span>
      <span>"type"</span><span>:</span><span>"integration"</span><span>,</span>
      <span>"path"</span><span>:</span><span>"example/example-integration/src/main/java/com/github/example/integration/"</span><span>,</span>
      <span>"packagePath"</span><span>:</span><span>"com/github/example/integration"</span>
    <span>}</span><span>,</span>
    <span>{</span>
      <span>"type"</span><span>:</span><span>"config"</span><span>,</span>
      <span>"path"</span><span>:</span><span>"example/example-config/src/main/java/com/github/example/config/"</span><span>,</span>
      <span>"packagePath"</span><span>:</span><span>"com/github/example/config"</span>
    <span>}</span><span>,</span>
    <span>{</span>
      <span>"type"</span><span>:</span><span>"common"</span><span>,</span>
      <span>"path"</span><span>:</span><span>"example/example-common/src/main/java/com/github/example/common/"</span><span>,</span>
      <span>"packagePath"</span><span>:</span><span>"com/github/example/common"</span>
    <span>}</span>
  <span>]</span><span>,</span>
  <span>"config"</span><span>:</span><span>{</span>

  <span>}</span><span>,</span>
  <span>"dbConfig"</span><span>:</span><span>{</span>
    <span>"host"</span><span>:</span><span>""</span><span>,</span>
    <span>"user"</span><span>:</span><span>""</span><span>,</span>
    <span>"password"</span><span>:</span><span>""</span><span>,</span>
    <span>"database"</span><span>:</span><span>""</span>
  <span>}</span><span>,</span>
  <span>"models"</span><span>:</span><span>[</span>
    <span>{</span>
      <span>"suffix"</span><span>:</span><span>"DO"</span><span>,</span>
      <span>"tableName"</span><span>:</span><span>[</span>

      <span>]</span><span>,</span>
      <span>"path"</span><span>:</span><span>""</span>
    <span>}</span>
  <span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br></div></div><h2 id="手动添加配置文件"> 手动添加配置文件</h2>
<p>当你项目已经创建完成，但是想要使用的情况下, 你是可以通过配置的方式来支持的。</p>
<p>首先在项目的根目录创建文件 <code>.jmvn.json</code></p>
<div><pre><code><span>{</span>
  <span>"namespace"</span><span>:</span> <span>[</span>
  <span>]</span><span>,</span>
  <span>"config"</span><span>:</span> <span>{</span><span>}</span><span>,</span>
  <span>"dbConfig"</span><span>:</span> <span>{</span>
    <span>"host"</span><span>:</span> <span>"10.*.*.8"</span><span>,</span>
    <span>"user"</span><span>:</span> <span>"root"</span><span>,</span>
    <span>"password"</span><span>:</span> <span>"123456"</span><span>,</span>
    <span>"database"</span><span>:</span> <span>"test"</span>
  <span>}</span><span>,</span>
  <span>"models"</span><span>:</span> <span>[</span>
    <span>{</span>
      <span>"suffix"</span><span>:</span> <span>"DO"</span><span>,</span>
      <span>"tableName"</span><span>:</span> <span>[</span>
        <span>"user"</span><span>,</span>
        <span>"user_detail"</span>
      <span>]</span><span>,</span>
      <span>"path"</span><span>:</span> <span>"example-dal/src/main/java/com/example/dal/entity"</span>
    <span>}</span>
  <span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-04-26T15:44:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">数据模型安装</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/project/jmvn/jmvn-install/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/project/jmvn/jmvn-install/"/>
    <updated>2022-04-26T15:44:59.000Z</updated>
    <content type="html"><![CDATA[<div><p>jmvn instll 数据安装</p>
<p><code>jmvn</code> 一个好用的功能就是支持数据安装，这个功能是我比较喜欢的。因为在项目
中开发过程中，经常会出现,表结构进行变更，可能是增加些表注释，增加个字段。这个时候就要同步来
修改数据模型。是比较繁琐的。当你尝试过 <code>jmvn install</code> 功能后，这个问题就能彻底解决了。
只需要运行 <code>jmvn install</code> 命令，数据模型就会同步更改。</p>
</div>
<h2 id="配置如下"> 配置如下</h2>
<p>在你的项目 <code>.jmvn.json</code> 中添加如下。<code>jmvn</code> 会读取 <code>dbConfig</code> 中数据库的配置。
写入到 <code>models</code> 中指定的目录 <code>path</code>。</p>
<div><pre><code><span>{</span>
  <span>"namespace"</span><span>:</span> <span>[</span>
  <span>]</span><span>,</span>
  <span>"config"</span><span>:</span> <span>{</span><span>}</span><span>,</span>
  <span>"dbConfig"</span><span>:</span> <span>{</span>
    <span>"host"</span><span>:</span> <span>"10.*.*.8"</span><span>,</span>
    <span>"user"</span><span>:</span> <span>"root"</span><span>,</span>
    <span>"password"</span><span>:</span> <span>"123456"</span><span>,</span>
    <span>"database"</span><span>:</span> <span>"test"</span>
  <span>}</span><span>,</span>
  <span>"models"</span><span>:</span> <span>[</span>
    <span>{</span>
      <span>"suffix"</span><span>:</span> <span>"DO"</span><span>,</span>
      <span>"tableName"</span><span>:</span> <span>[</span>
        <span>"user"</span><span>,</span>
        <span>"user_detail"</span>
      <span>]</span><span>,</span>
      <span>"path"</span><span>:</span> <span>"example-dal/src/main/java/com/example/dal/entity"</span>
    <span>}</span>
  <span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>你可以在models中使用suffix添加Java文件的后缀名。
eg: user表，最终写成java文件为 UserDO</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-04-26T15:44:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">幻灯片页</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/slides/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/slides/"/>
    <updated>2021-12-21T05:46:37.000Z</updated>
    <content type="html"><![CDATA[
<i>Not supported content</i>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">匆匆那年</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/school/students/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/school/students/"/>
    <updated>2021-12-21T05:46:37.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>介绍下自己的学习情况</li>
<li>大学生的迷茫不是问题，问题要如何正确面对</li>
<li>大学生要知道学习</li>
</ol>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Spring</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/spring/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/spring/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<div><p>为什么是春天？</p>
<p>Spring 让每个人都可以更快、更轻松、更安全地编写 Java。Spring 对速度、简单性和生产力的关注使其成为世界上最受欢迎的Java 框架。</p>
</div>
<p><img src="https://img.springlearn.cn/blog/learn_1647175180000.png" alt="" loading="lazy"></p>
<ul>
<li>Spring</li>
<li>SpringBoot</li>
<li>SpringCloud</li>
</ul>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Spring EL表达式使用指南</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/spring/EL/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/spring/EL/"/>
    <updated>2022-04-12T17:26:01.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1610710891000.png" alt="" loading="lazy"></p>
<Djt/>
<blockquote>
<p>好久没有发现这么好的文章了,今天逛头条发现了一篇好文章,在这里转载一下
大家可以学习一下,文章原文地址见参考。希望支持原作者,在头条点一个关注。</p>
</blockquote>
<h2 id="一、概述"> 一、概述</h2>
<p>Spring表达式语言全称为“Spring Expression Language”，缩写为“SpEL”。是一个支持查询，并在运行时操纵一个对象图功能、是一门强大的表达式语言。SpEL是单独模块，只依赖于core模块，可以被独立使用、运行。</p>
<p><strong>参考文章</strong></p>
<p><a href="https://docs.spring.io/spring-integration/docs/5.3.0.RELEASE/reference/html/spel.html#spel" target="_blank" rel="noopener noreferrer">SpringEpel</a></p>
<p><a href="https://www.toutiao.com/i6911604368844292620/" target="_blank" rel="noopener noreferrer">玩转SpEL</a></p>
<h2 id="二、作用"> 二、作用</h2>
<h3 id="_2-1-基本表达式"> 2.1 基本表达式</h3>
<p>字面量表达式、关系，逻辑与算数运算表达式、字符串连接及截取表达式、三目运算、正则表达式、括号优先级表达式；</p>
<h3 id="_2-2-类相关表达式"> 2.2 类相关表达式</h3>
<p>类类型表达式、类实例化、instanceof表达式、变量定义及引用、赋值表达式、自定义函数、对象属性存取及安全导航表达式、对象方法调用、Bean引用；</p>
<h3 id="_2-3-集合相关表达式"> 2.3 集合相关表达式</h3>
<p>内联List、内联数组、集合，字典访问、列表，字典，数组修改、集合投影、集合选择；不支持多维内联数组初始化；不支持内联字典定义；</p>
<h3 id="_2-4-其他表达式"> 2.4 其他表达式</h3>
<p>模板表达式。</p>
<h2 id="三、主要类"> 三、主要类</h2>
<h3 id="_3-1-expressionparser"> 3.1 ExpressionParser</h3>
<p>表达式解析器接口，包含了(Expression) parseExpression(String), (Expression) parseExpression(String, ParserContext)两个接口方法</p>
<h3 id="_3-2-parsercontext"> 3.2 ParserContext</h3>
<p>解析器上下文接口，主要是对解析器Token的抽象类，包含3个方法：getExpressionPrefix,getExpressionSuffix和isTemplate，就是表示表达式从什么符号开始什么符号结束，是否是作为模板（包含字面量和表达式）解析。</p>
<h3 id="_3-3-expression"> 3.3 Expression</h3>
<p>表达式的抽象，是经过解析后的字符串表达式的形式表示。通过expressionInstance.getValue方法，可以获取表示式的值。也可以通过调用getValue(EvaluationContext)，从评估（evaluation)上下文中获取表达式对于当前上下文的值</p>
<h3 id="_3-4-evaluationcontext"> 3.4 EvaluationContext</h3>
<p>估值上下文接口，只有一个setter方法：<code>setVariable(String, Object)</code>，通过调用该方法，可以为evaluation提供上下文变量</p>
<h2 id="四、案例运用"> 四、案例运用</h2>
<h3 id="_4-1-基础的hello"> 4.1 基础的Hello</h3>
<div><pre><code>@Test
public void baseTest() {
// 字符串表达式
    String exp = &quot;Hello , #{ #username }&quot;;
    // 表达式解析器
    ExpressionParser parser = new SpelExpressionParser();
    // 表达式上下文
    EvaluationContext context = new StandardEvaluationContext();
    context.setVariable(&quot;username&quot;, &quot;纹银三百两&quot;);
    // 解析
    Expression expression = parser.parseExpression(exp, new TemplateParserContext());
    System.out.println(expression.getValue(context, String.class));
  }

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>基础结果：</p>
<div><pre><code>Hello , 纹银三百两
</code></pre>
<div><span>1</span><br></div></div><h3 id="_4-2-关系运算符"> 4.2 关系运算符</h3>
<div><pre><code>//true
boolean trueValue1 = parser.parseExpression(&quot;2 == 2&quot;).getValue(Boolean.class);
//false
boolean falseValue1 = parser.parseExpression(&quot;2 &lt; -5.0&quot;).getValue(Boolean.class);
//true
boolean trueValue2 = parser.parseExpression(&quot;&#39;black&#39; &lt; &#39;block&#39;&quot;).getValue(Boolean.class);
//false，字符xyz是否为int类型
boolean falseValue2 = parser.parseExpression(&quot;&#39;xyz&#39; instanceof T(int)&quot;).getValue(Boolean.class);
//true，正则是否匹配
boolean trueValue3 =parser.parseExpression(&quot;&#39;5.00&#39; matches &#39;^-?\\d+(\\.\\d{2})?$&#39;&quot;).getValue(Boolean.class);
//false
boolean falseValue3=parser.parseExpression(&quot;&#39;5.0067&#39; matches &#39;^-?\\d+(\\.\\d{2})?$&#39;&quot;).getValue(Boolean.class);
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id="_4-3-逻辑运算符"> 4.3 逻辑运算符</h3>
<div><pre><code>// -- AND 与运算 --
//false 
boolean falseValue4 = parser.parseExpression(&quot;true and false&quot;).getValue(Boolean.class);
 // -- OR 或运算--
//true
boolean trueValue5 = parser.parseExpression(&quot;true or false&quot;).getValue(Boolean.class);
//false
boolean falseValue5 = parser.parseExpression(&quot;!true&quot;).getValue(Boolean.class);
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="_4-4-算术运算符"> 4.4 算术运算符</h3>
<div><pre><code>// Addition
int two = parser.parseExpression(&quot;1 + 1&quot;).getValue(Integer.class); // 2
String testString =
parser.parseExpression(&quot;&#39;test&#39; + &#39; &#39; + &#39;string&#39;&quot;).getValue(String.class); // &#39;test string&#39;
// Subtraction
int four = parser.parseExpression(&quot;1 - -3&quot;).getValue(Integer.class); // 4
double d = parser.parseExpression(&quot;1000.00 - 1e4&quot;).getValue(Double.class); // -9000
// Multiplication
int six = parser.parseExpression(&quot;-2 * -3&quot;).getValue(Integer.class); // 6
double twentyFour = parser.parseExpression(&quot;2.0 * 3e0 * 4&quot;).getValue(Double.class); // 24.0
// Division
int minusTwo = parser.parseExpression(&quot;6 / -3&quot;).getValue(Integer.class); // -2
double one = parser.parseExpression(&quot;8.0 / 4e0 / 2&quot;).getValue(Double.class); // 1.0
// Modulus
int three = parser.parseExpression(&quot;7 % 4&quot;).getValue(Integer.class); // 3
int one = parser.parseExpression(&quot;8 / 5 % 2&quot;).getValue(Integer.class); // 1
// Operator precedence
int minusTwentyOne = parser.parseExpression(&quot;1+2-3*8&quot;).getValue(Integer.class); // -21
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h2 id="五、组合使用"> 五、组合使用</h2>
<div><pre><code>@Test
  public void expressionTest() {
    String exp = &quot;1 between {1, 2} and 1&gt;2&quot;;
    ExpressionParser parser = new SpelExpressionParser();
    Expression expression = parser.parseExpression(exp);
    //false
    System.out.println(expression.getValue(boolean.class));
  }
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="六、操作类"> 六、操作类</h2>
<h3 id="_6-1-类类型"> 6.1 类类型</h3>
<div><pre><code>@Test
public void classTypeTest() {
    ExpressionParser parser = new SpelExpressionParser();
    //java.lang包类访问
    Class&lt;String&gt; result1 = parser.parseExpression(&quot;T(String)&quot;).getValue(Class.class);
    //class java.lang.String
    System.out.println(result1);

    //其他包类访问
    String expression2 = &quot;T(spel.SpElTest)&quot;;
    Class&lt;SpElTest&gt; value = parser.parseExpression(expression2).getValue(Class.class);
    //true
    System.out.println(value == SpElTest.class);

    //类静态字段访问
    int result3 = parser.parseExpression(&quot;T(Integer).MAX_VALUE&quot;).getValue(int.class);
    //true
    System.out.println(result3 == Integer.MAX_VALUE);

    //类静态方法调用
    int result4 = parser.parseExpression(&quot;T(Integer).parseInt(&#39;1&#39;)&quot;).getValue(int.class);
    //1
    System.out.println(result4);
  }
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h3 id="_6-2-自定义函数"> 6.2 自定义函数</h3>
<div><pre><code>/**
   * 两数之和
   */
public static Integer add(Integer x, Integer y) {
    return x + y;
  }

@Test
public void functionTest() throws NoSuchMethodException {
    // 表达式
    String exp = &quot;#{ #add(4,5)}&quot;;
    // 表达式上下文
    StandardEvaluationContext context = new StandardEvaluationContext();
    Method add = SpElTest.class.getDeclaredMethod(&quot;add&quot;, Integer.class, Integer.class);
    context.registerFunction(&quot;add&quot;, add);
    // 表达式解析器
    ExpressionParser parser = new SpelExpressionParser();
    // 解析
    Expression expression = parser.parseExpression(exp, new TemplateParserContext());
    // 9
    System.out.println(expression.getValue(context, Integer.class));
  }
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h3 id="_6-3-类属性"> 6.3 类属性</h3>
<div><pre><code> @Test
  public void assignTest() {
    String exp = &quot;username: #{#user.username},age: #{#user.age}&quot;;
    StandardEvaluationContext context = new StandardEvaluationContext();
    Person person = new Person()
        .setUsername(&quot;纹银三百两&quot;)
        .setAge(23);
    context.setVariable(&quot;user&quot;, person);
    ExpressionParser parser = new SpelExpressionParser();
    Expression expression = parser.parseExpression(exp, new TemplateParserContext());
    //username: 纹银三百两,age: 23
    System.out.println(expression.getValue(context, String.class));
  }
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="七、模板表达式"> 七、模板表达式</h2>
<p>指定模板 <code>%{ }</code></p>
<div><pre><code>@Test
public void templateTest() {
    SpelExpressionParser parser = new SpelExpressionParser();
    ParserContext context = new TemplateParserContext(&quot;%{&quot;, &quot;}&quot;);
    Expression expression = parser.parseExpression(&quot;你好:%{#name},正在学习:%{#lesson}，加油、奋斗！！！&quot;, context);
    EvaluationContext evaluationContext = new StandardEvaluationContext();
    evaluationContext.setVariable(&quot;name&quot;, &quot;纹银三百两&quot;);
    evaluationContext.setVariable(&quot;lesson&quot;, &quot;spring高手系列。&quot;);
    String value = expression.getValue(evaluationContext, String.class);
    //你好:纹银三百两,正在学习:spring高手系列。加油、奋斗！！！
    System.out.println(value);
  }
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="八、规则引擎"> 八、规则引擎</h2>
<h3 id="_8-1-背景"> 8.1 背景</h3>
<p>假设人员注册信息(姓名、年龄、性别），自定义其中规则，如下：</p>
<p>李家好汉（李姓，男，且满18岁）
豆蔻少女（13-15岁，女性）</p>
<h3 id="_8-2-实现"> 8.2 实现</h3>
<div><pre><code>@Test
  public void ruleTest() {
    Person person1 = new Person().setUsername(&quot;小龙女&quot;).setAge(14).setSex(1);
    checkRule(FastJsonUtil.parseMap(JSON.toJSONString(person1)));
    Person person2 = new Person().setUsername(&quot;张三&quot;).setAge(18).setSex(0);
    checkRule(FastJsonUtil.parseMap(JSON.toJSONString(person2)));
    Person person3 = new Person().setUsername(&quot;李四&quot;).setAge(20).setSex(0);
    checkRule(FastJsonUtil.parseMap(JSON.toJSONString(person3)));

  }

  /**
   * 规则check
   *
   * @param exp 参数map
   */
  private static void checkRule(Map&lt;String, Object&gt; exp) {
    ExpressionParser parser = new SpelExpressionParser();
    //规则容器
    Map&lt;String, String&gt; ruleMap = Maps.newHashMap();
    String rule1 = &quot;( #username.contains({&#39;李&#39;}) and  #age &gt; 18 and #sex == 0 )&quot;;
    ruleMap.put(&quot;李家好汉&quot;, rule1);
    String rule2 = &quot;( #age between {13,15} and #sex == 1 )&quot;;
    ruleMap.put(&quot;豆蔻少女&quot;, rule2);
    EvaluationContext spElContext = getSpElContext(exp);
    ruleMap.keySet().forEach(key -&gt; {
      String ruleV = ruleMap.get(key);
      Boolean isPass = parser.parseExpression(ruleV).getValue(spElContext, Boolean.class);
      if (Objects.nonNull(isPass) &amp;&amp; isPass) {
        System.out.println(&quot;username:【&quot; + exp.get(&quot;username&quot;) + &quot;】,命中规则:【&quot; + key+&quot;】&quot;);
      }

    });
  }

  /**
   * 解析表达式需要的上下文，透传请求参数
   *
   * @param param 参数
   * @return 返回结果
   */
  private static EvaluationContext getSpElContext(Map&lt;String, Object&gt; param) {
    StandardEvaluationContext evaluationContext = new StandardEvaluationContext();
    for (Entry&lt;String, Object&gt; entry : param.entrySet()) {
      if (entry.getValue() != null) {
        evaluationContext.setVariable(entry.getKey(), entry.getValue());
      }
    }
    return evaluationContext;
  }
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br></div></div><p><strong>结果：</strong></p>
<div><pre><code>username:【小龙女】,命中规则:【豆蔻少女】
username:【李四】,命中规则:【李家好汉】
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="九、总结"> 九、总结</h2>
<p>Spring EL表达式，作为JAVA的内置语言，十分强大。主要可以用来做表达式解析，或者规则链路，且可以操作函数方法；从而达到一种动态的链路规则解析效果。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-04-12T17:26:01.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">AOP 使用指南</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/spring/AOP/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/spring/AOP/"/>
    <updated>2022-04-05T16:29:39.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1593954110000.png" alt="" loading="lazy"></p>
<PageBanner/>
<h2 id=""> <a href="https://github.com/lxchinesszz/spring-learning" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/源码-AOP-green" alt="" loading="lazy"></a></h2>
<h2 id="一、常用注解"> 一、常用注解</h2>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Before</td>
<td>前置通知, 在方法执行之前执行</td>
</tr>
<tr>
<td>@After</td>
<td>后置通知, 在方法执行之后执行</td>
</tr>
<tr>
<td>@AfterRunning</td>
<td>返回通知 在方法返回结果之后执行</td>
</tr>
<tr>
<td>@AfterThrowing</td>
<td>异常通知在方法抛出异常之后</td>
</tr>
<tr>
<td>@Around</td>
<td>环绕通知, 围绕着方法执行</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="二、切面表达式"> 二、切面表达式</h2>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>within</td>
<td>拦截指定类及指定包下所有的类</td>
</tr>
<tr>
<td>@within</td>
<td>拦截被指定注解修饰的类</td>
</tr>
<tr>
<td>this</td>
<td>拦截指定的类型</td>
</tr>
<tr>
<td>args</td>
<td>拦截指定参数类型的方法</td>
</tr>
<tr>
<td>@annotation</td>
<td>拦截带指定注解的方法</td>
</tr>
<tr>
<td>@args</td>
<td>拦截方法入参被中@args指定的注解(入参只能有一个)</td>
</tr>
<tr>
<td>execution</td>
<td>表达式详情见下文</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="三、api使用案例"> 三、API使用案例</h2>
<h2 id="_3-1-within"> 3.1 within</h2>
<h3 id="a-api说明"> a. API说明</h3>
<ol>
<li>精确匹配类名</li>
<li>模糊匹配包中所有的类</li>
<li>模糊匹配包中所有的带Impl后缀的</li>
</ol>
<h3 id="b-目录"> b. 目录</h3>
<div><pre><code>└── WithinMatchProcessor
    ├── AopWithinMatchProcessor.java
    ├── CokeImpl.java
    ├── Water.java
    └── readme.md
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="c-拦截代码"> c. 拦截代码</h3>
<div><pre><code><span>@Aspect</span>
<span>@Component</span>
<span>public</span> <span>class</span> <span>AopWithinMatchProcessor</span> <span>{</span>

    <span>/**
     * 精确匹配类名
     */</span>
    <span>@Pointcut</span><span>(</span><span>"within(spring.learning.aop.WithinMatchProcessor.Water)"</span><span>)</span>
    <span>private</span> <span>void</span> <span>matchClassName</span><span>(</span><span>)</span> <span>{</span>
    <span>}</span>

    <span>/**
     * 模糊匹配包中所有的类
     */</span>
    <span>@Pointcut</span><span>(</span><span>"within(spring.learning.aop.WithinMatchProcessor.*)"</span><span>)</span>
    <span>private</span> <span>void</span> <span>matchAllClassFromPackage</span><span>(</span><span>)</span> <span>{</span>
    <span>}</span>

    <span>/**
     * 模糊匹配包中所有的带Impl后缀的
     */</span>
    <span>@Pointcut</span><span>(</span><span>"within(spring.learning.aop.WithinMatchProcessor.*Impl)"</span><span>)</span>
    <span>private</span> <span>void</span> <span>matchClassFromPackage</span><span>(</span><span>)</span> <span>{</span>
    <span>}</span>


    <span>@Before</span><span>(</span><span>"matchClassName()"</span><span>)</span>
    <span>public</span> <span>void</span> <span>beforeMatchClassName</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"--------精确匹配类名-------"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Before</span><span>(</span><span>"matchAllClassFromPackage()"</span><span>)</span>
    <span>public</span> <span>void</span> <span>beforeMatchAllClassFormPackage</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"--------模糊匹配包中所有的类-------"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Before</span><span>(</span><span>"matchClassFromPackage()"</span><span>)</span>
    <span>public</span> <span>void</span> <span>beforeMatchClassFromPackage</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"--------模糊匹配包中所有的带Impl后缀的-------"</span><span>)</span><span>;</span>
    <span>}</span>


<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br></div></div><h2 id="_3-2-within"> 3.2 @within</h2>
<h3 id="a-api说明-2"> a. API说明</h3>
<p>拦截被指定注解标注的类</p>
<h3 id="b-目录-2"> b. 目录</h3>
<div><pre><code>├── AnnotationWithinMatchProcessor
│   ├── AopAnnotationWithinMatchProcessor.java
│   ├── Log.java
│   ├── Sprite.java
│   └── readme.md

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="c-拦截代码-2"> c. 拦截代码</h3>
<div><pre><code><span>@Log</span><span>(</span>tag <span>=</span> <span>"SpriteLog"</span><span>)</span>
<span>@Component</span>
<span>public</span> <span>class</span> <span>Sprite</span> <span>{</span>

    <span>public</span> <span>void</span> <span>drink</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"空参数"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>void</span> <span>drink</span><span>(</span><span>Integer</span> age<span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"age"</span><span>)</span><span>;</span>
    <span>}</span>


    <span>public</span> <span>String</span> <span>name</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>"Sprite.name"</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>void</span> <span>toCalculate</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>0</span> <span>/</span> <span>0</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

<span>@Aspect</span>
<span>@Component</span>
<span>public</span> <span>class</span> <span>AopAnnotationWithinMatchProcessor</span> <span>{</span>


    <span>/**
     * 注意可以将注解,放到参数中,此时@within()会将参数入参名去找到注解的类型
     * 凡是被Log标记的类,都会被拦截
     *
     * @param spriteLog 注解
     */</span>
    <span>@Before</span><span>(</span><span>"@within(spriteLog)"</span><span>)</span>
    <span>public</span> <span>void</span> <span>beforeAnnotationMatch</span><span>(</span><span>Log</span> spriteLog<span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"--------拦截被Log修饰类的所有方法"</span> <span>+</span> spriteLog<span>.</span><span>tag</span><span>(</span><span>)</span> <span>+</span> <span>"-------"</span><span>)</span><span>;</span>
    <span>}</span>


    <span>/**
     * 返回值
     *
     * @param value     返回值
     * @param spriteLog 注解
     */</span>
    <span>@AfterReturning</span><span>(</span>value <span>=</span> <span>"@within(spriteLog)"</span><span>,</span> returning <span>=</span> <span>"value"</span><span>)</span>
    <span>public</span> <span>void</span> <span>afterReturningAnnotationMatch</span><span>(</span><span>String</span> value<span>,</span> <span>Log</span> spriteLog<span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"afterReturningAnnotationMatch返回值:"</span> <span>+</span> value <span>+</span> <span>",注解:"</span> <span>+</span> spriteLog<span>)</span><span>;</span>
    <span>}</span>

    <span>/**
     * 拦截异常
     *
     * @param e         异常
     * @param spriteLog 拦截日志
     */</span>
    <span>@AfterThrowing</span><span>(</span>value <span>=</span> <span>"@within(spriteLog)"</span><span>,</span> throwing <span>=</span> <span>"e"</span><span>)</span>
    <span>public</span> <span>void</span> <span>AfterThrowingAnnotationMatch</span><span>(</span><span>Exception</span> e<span>,</span> <span>Log</span> spriteLog<span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>e<span>.</span><span>getMessage</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>

<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br></div></div><h2 id="_3-3-this"> 3.3 this</h2>
<h3 id="a-api说明-3"> a. API说明</h3>
<p>拦截指定的类</p>
<h3 id="b-目录-3"> b. 目录</h3>
<div><pre><code>├── ThisMatchProcessor
│   ├── AopThisMatchProcessor.java
│   ├── ThisPerson.java
│   └── readme.md

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="c-拦截代码-3"> c. 拦截代码</h3>
<div><pre><code><span>@Aspect</span>
<span>@Component</span>
<span>public</span> <span>class</span> <span>AopThisMatchProcessor</span> <span>{</span>

    <span>@Before</span><span>(</span>value <span>=</span> <span>"this(ThisPerson)"</span><span>)</span>
    <span>public</span> <span>void</span> <span>thisMatch</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"--------------ThisPerson------------"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_3-4-args"> 3.4 args</h2>
<h3 id="a-api说明-4"> a. API说明</h3>
<div><pre><code><span>@Component</span>
<span>public</span> <span>class</span> <span>Person</span> <span>{</span>

    <span>public</span> <span>String</span> <span>info</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>
        <span>return</span> <span>"姓名："</span> <span>+</span> name<span>;</span>
    <span>}</span>

    <span>public</span> <span>String</span> <span>info</span><span>(</span><span>String</span> name<span>,</span> <span>Integer</span> age<span>)</span> <span>{</span>
        <span>return</span> <span>"姓名："</span> <span>+</span> name <span>+</span> <span>",年龄:"</span> <span>+</span> age<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>Person类中有两个info方法,但是入参不一样,假如要拦截指定入参的方法时候,就可以使用args</p>
<h3 id="b-目录-4"> b. 目录</h3>
<div><pre><code>├── ArgsMatchProcessor
│   ├── AopArgsMatchProcessor.java
│   ├── Person.java
│   └── readme.md
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="c-拦截代码-4"> c. 拦截代码</h3>
<p>可以看到args 和 within可以通过&amp;&amp;来进行,联合匹配。另外可以通过returning方法指定方法的返回值。但是注意，类型要和要拦截的方法的返回类型匹配。否则会报错。</p>
<div><pre><code><span>@Aspect</span>
<span>@Component</span>
<span>public</span> <span>class</span> <span>AopArgsMatchProcessor</span> <span>{</span>

    <span>@AfterReturning</span><span>(</span>value <span>=</span> <span>"within(Person) &amp;&amp; args(name,age)"</span><span>,</span> returning <span>=</span> <span>"value"</span><span>)</span>
    <span>public</span> <span>void</span> <span>beforeArgs</span><span>(</span><span>Integer</span> age<span>,</span> <span>String</span> name<span>,</span> <span>String</span> value<span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"拦截器逻辑----------------------------"</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"入参name:"</span> <span>+</span> name<span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"入参age:"</span> <span>+</span> age<span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"返回值:"</span> <span>+</span> value<span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"拦截器逻辑----------------------------"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_3-5-annotation"> 3.5 @annotation</h2>
<h3 id="a-api说明-5"> a. API说明</h3>
<p>拦截被指定注解标记的方法。</p>
<h3 id="b-目录-5"> b. 目录</h3>
<div><pre><code>├── AnnotationMethodMatchProcessor
│   ├── AopAnnotationMethodMatchProcessor.java
│   ├── LogMethod.java
│   └── Main.java

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="c-代码"> c. 代码</h3>
<div><pre><code><span>@Aspect</span>
<span>@Component</span>
<span>public</span> <span>class</span> <span>AopAnnotationMethodMatchProcessor</span> <span>{</span>


    <span>@Before</span><span>(</span>value <span>=</span> <span>"@annotation(logMethod) &amp;&amp; args(args)"</span><span>)</span>
    <span>public</span> <span>void</span> <span>annotationMethodMatch</span><span>(</span><span>LogMethod</span> logMethod<span>,</span> <span>String</span> args<span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"注解方法匹配"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_3-6-args"> 3.6 @args</h2>
<h3 id="a-api说明-6"> a. API说明</h3>
<p>拦截方法中入参被@args指定注解的方法。</p>
<h3 id="b-目录-6"> b. 目录</h3>
<div><pre><code>├── AnnotationArgsMatchProcessor
│   ├── AopAnnotationArgsMatchProcessor.java
│   ├── Apple.java
│   ├── Fruit.java
│   ├── Orange.java
│   └── Teacher.java
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="c-代码-2"> c. 代码</h3>
<p>注意当出现以下异常说明aop声明的拦截范围太广泛了，导致了一些不能拦截的类被拦截从而报错了，此时只用缩小拦截的范围即可</p>
<div><pre><code> Cannot subclass final class org.springframework.boot.autoconfigure.AutoConfigurationPackages$BasePackages
</code></pre>
<div><span>1</span><br></div></div><p>缩小拦截范围如下使用this拦截指定类型</p>
<div><pre><code><span>@Aspect</span>
<span>@Component</span>
<span>public</span> <span>class</span> <span>AopAnnotationArgsMatchProcessor</span> <span>{</span>

    <span>@Before</span><span>(</span>value <span>=</span> <span>"@args(fruit) &amp;&amp; this(Teacher)"</span><span>)</span>
    <span>public</span> <span>void</span> <span>annotationMethodMatch</span><span>(</span><span>Fruit</span> fruit<span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"拦截被Fruit+tag:"</span><span>+</span>fruit<span>.</span><span>tag</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_3-7-execution"> 3.7 execution</h2>
<h3 id="a-api说明-7"> a. API说明</h3>
<p>execution()是最常用的切点函数，其语法如下所示：</p>
<p><code>execution(&lt;修饰符模式&gt;? &lt;返回类型模式&gt; &lt;方法名模式&gt;(&lt;参数模式&gt;) &lt;异常模式&gt;?) 除了返回类型模式、方法名模式和参数模式外，其它项都是可选的</code></p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>execution(public * *(..))</td>
<td>匹配所有目标类的public方法</td>
</tr>
<tr>
<td>execution(* *Test(..))</td>
<td>匹配目标类所有以To为后缀的方法</td>
</tr>
<tr>
<td>execution(<em>spring.learning.Water.</em>(..))</td>
<td>匹配Water接口所有方法</td>
</tr>
<tr>
<td>execution(<em>spring.learning.Water+.</em>(..))</td>
<td>匹配Water接口以及实现类中所有方法(包括Water接口中没有的方法)</td>
</tr>
<tr>
<td>execution(* spring.learning.*(..))</td>
<td>匹配spring.learning包下所有的类所有方法</td>
</tr>
<tr>
<td>execution(* spring.learning..*(..))</td>
<td>匹配spring.learning包及其子孙包下所有的类所有方法</td>
</tr>
<tr>
<td>execution(* spring..*.<em>Dao.find</em>(..))</td>
<td>匹配包名前缀为spring的任何包下类名后缀为Dao的方法，方法名必须以find为前缀</td>
</tr>
<tr>
<td>execution(* info(String,Integer))</td>
<td>匹配info方法中,第一个参数是String,第二个Integer的方法</td>
</tr>
<tr>
<td>execution(* info(String,*)))</td>
<td>匹配info方法中,第一个参数是String,第二个任意类型</td>
</tr>
<tr>
<td>execution(* info(String,..)))</td>
<td>匹配info方法中,第一个参数是String,后面任意参数</td>
</tr>
<tr>
<td>execution(* info(Object+)))</td>
<td>匹配info方法中,方法拥有一个入参，且入参是Object类型或该类的子类</td>
</tr>
</tbody>
</table>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-04-05T16:29:39.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Spring Boot Endpoint监控端点扩展</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/spring/Endpoint%E7%9B%91%E6%8E%A7%E7%AB%AF%E7%82%B9%E6%89%A9%E5%B1%95/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/spring/Endpoint%E7%9B%91%E6%8E%A7%E7%AB%AF%E7%82%B9%E6%89%A9%E5%B1%95/"/>
    <updated>2022-05-22T07:02:41.000Z</updated>
    <content type="html"><![CDATA[<div><p>提示</p>
<p>什么是端点? 端点就是SpringBoot通过web或者jmx的方式向外部暴露应用的信息,或者上下文的信息。SpringCloud-Admin就是根据此技术来进行实现的。他们用到的技术就是@Endpoint，而不是通过自己@GetMapping之类进行实现的。下面小编就带大家一起来学习端点的使用。学会本文后在利用前面我们讲过的autoconfigure的自动化配置后，你就可以开发更高级的SpringBoot应用(非业务系统)。本教程将带你从业务系统开发者转变为研发系统开发者。</p>
</div>
<p>用过SpringBoot的同学可能知道，SpringBoot有很多监控端点,比如当我们引入健康监控组件</p>
<div><pre><code><span><span><span>&lt;</span>dependency</span><span>></span></span>
  <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>
  <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-starter-actuator<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
  <span><span><span>&lt;</span>version</span><span>></span></span>2.6.7<span><span><span>&lt;/</span>version</span><span>></span></span>
<span><span><span>&lt;/</span>dependency</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>系统就会自动暴露出许多,web端口供外部调用，获取应用的信息，或者上下文的信息。</p>
<p><img src="https://img.springlearn.cn/learn_010cf865b5c13bd4a2c855dbf383a81d.jpg" alt="image-20190308191019856" loading="lazy"></p>
<h2 id="一、如何定义端点"> 一、如何定义端点</h2>
<p>可以使用<code>@Endpoint</code>,<code>@WebEndpoint</code>,<code>@JmxEndpoint</code>,或者<code>EndpointWebExtension</code>来实现HTTP方式的端点,可以是传统SpringMVC也可以是最新的<code>Spring WebFlux</code></p>
<ul>
<li>
<p><code>@Endpoint</code>相当于<code>@WebEndpoint</code>和<code>@JmxEndpoint</code>的整合。web和jmx方式都支持</p>
</li>
<li>
<p><code>@WebEndpoint</code> 只会生成web的方式的端点监控</p>
</li>
</ul>
<p><img src="https://img.springlearn.cn/learn_b2c367712133b4affaf175b38eaad3cc.jpg" alt="image-20190308190517126" loading="lazy"></p>
<ul>
<li><code>JmxEndpoint</code> 只会生成Jmx的方式监控</li>
</ul>
<p><img src="https://img.springlearn.cn/learn_6490cd4917d5633fbbe9b205eb191dde.jpg" alt="image-20190308183731989" loading="lazy"></p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>HTTP method</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@ReadOperation</code></td>
<td><code>GET</code></td>
</tr>
<tr>
<td><code>@WriteOperation</code></td>
<td><code>POST</code></td>
</tr>
<tr>
<td><code>@DeleteOperation</code></td>
<td><code>DELETE</code></td>
</tr>
</tbody>
</table>
<h2 id="二、路径规则"> 二、路径规则</h2>
<p>默认的基础路径是<code>/actuator</code>,如果一个端点配置的路径是<code>sessions</code>,那么它的全路径就是<code>/actuator/sessions</code></p>
<div><pre><code><span>@Component</span>
<span>@WebEndpoint</span><span>(</span>id <span>=</span> <span>"sessions"</span><span>)</span>
<span>public</span> <span>class</span> <span>MyHealthEndpoint</span> <span>{</span>
  <span>@ReadOperation</span>
  <span>public</span> <span>Info</span> <span>get</span><span>(</span><span>@Selector</span> <span>String</span> name<span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>Info</span><span>(</span>name<span>,</span> <span>"23"</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p><code>@Selector</code> 的含义是让这个路径变成<code>/actuator/sessions/{name}</code> 我们能从路径上获取一个入参。</p>
<h2 id="三、相关配置"> 三、相关配置</h2>
<h3 id="_3-1-自定义管理端点路径"> 3.1 自定义管理端点路径</h3>
<p><code>management.endpoints.web.base-path = /manage</code></p>
<p>此配置会将<code>/actuator/sessions/{name}</code>转换成<code>/manage/sessions/{name}</code></p>
<h3 id="_3-2-自定义管理服务器地址"> 3.2 自定义管理服务器地址</h3>
<p>默认端口和应用的端口是一致的,但是也可以通过配置的方式改变端口</p>
<div><pre><code>management.server.port = 8081
management.server.address = 127.0.0.1
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="_3-3-激活端点"> 3.3 激活端点</h3>
<div><pre><code>//激活所有的端点的web方式请求
management.endpoints.web.exposure.include=*
//关闭端点web方式
management.endpoints.web.exposure.exclude=env,beans
//激活所有的JMX方式请求
management.endpoints.jmx.exposure.include=*
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="_3-4-跨域方式请求"> 3.4 跨域方式请求</h3>
<div><pre><code>//允许跨域的网址
management.endpoints.web.cors.allowed-origins=http://example.com
//允许跨域的方法
management.endpoints.web.cors.allowed-methods=GET,POST
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="四、总结"> 四、总结</h2>
<p>最后我们来总结。
其实@WebEndpoint 就相当于<code>声明成一个@RestController</code>的控制类而请求方法分别被下面注解代替。</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>HTTP method</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@ReadOperation</code></td>
<td><code>GET</code></td>
</tr>
<tr>
<td><code>@WriteOperation</code></td>
<td><code>POST</code></td>
</tr>
<tr>
<td><code>@DeleteOperation</code></td>
<td><code>DELETE</code></td>
</tr>
</tbody>
</table>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Spring循环依赖</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/spring/Spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/spring/Spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/"/>
    <updated>2022-03-28T15:13:45.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1647108921000.png" alt="" loading="lazy"></p>
<p><strong>作者: 八阿哥的剑</strong></p>
<p><em>博客: https://springlearn.cn</em></p>
<div><p>一日一句毒鸡汤</p>
<p>问世间钱为何物，只叫人生死相许。！😄</p>
</div>
<p>写文章不容易，如果感觉还行，请点个关注，点关注不迷路。</p>
<h2 id="一、什么是循环依赖"> 一、什么是循环依赖</h2>
<p>这种简单的问题，直接伪代码吧。</p>
<div><pre><code><span>@Service</span>
<span>public</span> <span>class</span> <span>A</span> <span>{</span>
    <span>@Autowired</span>
    <span>private</span> <span>B</span> b<span>;</span>
<span>}</span>

<span>@Service</span>
<span>public</span> <span>class</span> <span>B</span> <span>{</span>
    <span>@Autowired</span>
    <span>private</span> <span>A</span> a<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>我中有你，你中有我。</p>
<h2 id="二、解决循环依赖思路"> 二、解决循环依赖思路</h2>
<p>思路其实非常简单还是用伪代码来说明</p>
<div><pre><code><span>A</span> a <span>=</span> <span>new</span> <span>A</span><span>(</span><span>)</span><span>;</span>
<span>B</span> b <span>=</span> <span>new</span> <span>B</span><span>(</span><span>)</span><span>;</span>
a<span>.</span><span>setB</span><span>(</span>b<span>)</span><span>;</span>
b<span>.</span><span>setA</span><span>(</span>a<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>思路就是这么简单，先分别把A和B给实例化。
这时候实例化的A和B仅仅是完成了实例化,内部的属性其实都没有。
只有当执行了3、4行才算正常完成。</p>
<div><div><br><br><div>&nbsp;</div><div>&nbsp;</div><br></div><pre><code><span>A</span> a <span>=</span> <span>new</span> <span>A</span><span>(</span><span>)</span><span>;</span>
<span>B</span> b <span>=</span> <span>new</span> <span>B</span><span>(</span><span>)</span><span>;</span>
a<span>.</span><span>setB</span><span>(</span>b<span>)</span><span>;</span>
b<span>.</span><span>setA</span><span>(</span>a<span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>通过上面的代码我们总结下，要想实现循环注入。首先要满足第一个条件。</p>
<ol>
<li><strong>能被实例化</strong></li>
</ol>
<ul>
<li>有空构造</li>
<li>或有构造且构造参数满足能被实例化。</li>
</ul>
<p>好了，知道这点就成了，相信让你来实现循环注入，应该也可以了吧。其实就这么简单 ?</p>
<p>那我们来看Spring如何来实现的。相信看完你就头大了。但是没关系，基本原理你已经知道了。
带着这个思路来看Spring的源码就简单了。</p>
<h2 id="三、spring如何解决循环依赖"> 三、Spring如何解决循环依赖</h2>
<p>首先我们要知道Spring中的bean, 有两种形式。</p>
<ul>
<li>第一种是单例。所谓单例就是容器中这个类，只会存在一个实例。不管你调用了多少次 <code>getBean(String beanName)</code> 返回的都是一个实例(因为每次都从缓存中获取的实例)。</li>
<li>第二种是原型。所谓原型就是容器中这个类，没有缓存。每次都是新建一个Bean。</li>
</ul>
<p>在这里我们思考下，如果要你来实现循环注入，以上两种模式。你能用那一个?
要想实现循环注入，即这个Bean必须要有一个缓存的地方。不然每次都是创建，虽然能完成实例化，但是实例化后，需要注入的 <code>bean</code> 无法实现注入，就会陷入死循环。</p>
<p>这里第二个必要因素就出来了。</p>
<p><mark>2. 必须要是单例</mark></p>
<p>好了，知道这么多我们开始看源码吧。</p>
<h3 id="_3-1-spring中创建bean的步骤"> 3.1 Spring中创建Bean的步骤</h3>
<ul>
<li>实例化，createBeanInstance，就是new了个对象。</li>
<li>属性注入，populateBean， 就是 set 一些属性值。</li>
<li>初始化，initializeBean，执行一些 aware 接口中的方法，initMethod，AOP代理等</li>
</ul>
<h3 id="_3-2-循环依赖三层缓存"> 3.2 循环依赖三层缓存</h3>
<p>注意看细节，每个缓存的数据类型是什么? 后面要考。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1647104251000.png" alt="" loading="lazy"></p>
<ul>
<li>一级缓存 <code>Map&lt;String, Object&gt; singletonObjects</code>
<ul>
<li>如果等于空，或者当前单例正在创建中(即只完成了实例化)。就从二级缓存中获取。</li>
</ul>
</li>
<li>二级缓存 <code>Map&lt;String, Object&gt; earlySingletonObjects</code>
<ul>
<li>如果等于空，就从三级缓存中获取。</li>
</ul>
</li>
<li>三级缓存 <code>Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories</code>
<ul>
<li>创建Bean的一个工厂，允许容器中定义特殊的，生成Bean的方法。使用 <code>addSingletonFactory</code></li>
</ul>
</li>
</ul>
<p>其实要想实现循环依赖只用2个缓存就行。三级缓存的意义是为了完成某些功能。至于什么功能呢? 这里先不说后面看流程。</p>
<div><div><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span>protected</span> <span>Object</span> <span>getSingleton</span><span>(</span><span>String</span> beanName<span>,</span> <span>boolean</span> allowEarlyReference<span>)</span> <span>{</span>
		<span>Object</span> singletonObject <span>=</span> <span>this</span><span>.</span>singletonObjects<span>.</span><span>get</span><span>(</span>beanName<span>)</span><span>;</span>
		<span>if</span> <span>(</span>singletonObject <span>==</span> <span>null</span> <span>&amp;&amp;</span> <span>isSingletonCurrentlyInCreation</span><span>(</span>beanName<span>)</span><span>)</span> <span>{</span>
			<span>synchronized</span> <span>(</span><span>this</span><span>.</span>singletonObjects<span>)</span> <span>{</span>
				singletonObject <span>=</span> <span>this</span><span>.</span>earlySingletonObjects<span>.</span><span>get</span><span>(</span>beanName<span>)</span><span>;</span>
				<span>if</span> <span>(</span>singletonObject <span>==</span> <span>null</span> <span>&amp;&amp;</span> allowEarlyReference<span>)</span> <span>{</span>
					<span>ObjectFactory</span><span><span>&lt;</span><span>?</span><span>></span></span> singletonFactory <span>=</span> <span>this</span><span>.</span>singletonFactories<span>.</span><span>get</span><span>(</span>beanName<span>)</span><span>;</span>
					<span>if</span> <span>(</span>singletonFactory <span>!=</span> <span>null</span><span>)</span> <span>{</span>
						singletonObject <span>=</span> singletonFactory<span>.</span><span>getObject</span><span>(</span><span>)</span><span>;</span>
						<span>this</span><span>.</span>earlySingletonObjects<span>.</span><span>put</span><span>(</span>beanName<span>,</span> singletonObject<span>)</span><span>;</span>
						<span>this</span><span>.</span>singletonFactories<span>.</span><span>remove</span><span>(</span>beanName<span>)</span><span>;</span>
					<span>}</span>
				<span>}</span>
			<span>}</span>
		<span>}</span>
		<span>return</span> singletonObject<span>;</span>
	<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>好我们知道有这两个缓存就继续往下看源码。当 <code>getSingleton</code> 是 <code>null</code>。继续往下走。其他源码就跳过了，不是本篇的主要内容，我们只看
解决循环依赖的核心代码。</p>
<ul>
<li>doCreateBean#createBeanInstance 先实现实例化。</li>
<li>当前bean是单例,不会添加到二级缓存，直接就添加到三级缓存中,注意这里不是添加的Bean，而是生成Bean的工厂方法 <code>ObjectFactory(#getEarlyBeanReference)</code>。</li>
</ul>
<div><div><br><br><br><br><br><br><br><div>&nbsp;</div><br><br></div><pre><code>	   <span>boolean</span> earlySingletonExposure <span>=</span> <span>(</span>mbd<span>.</span><span>isSingleton</span><span>(</span><span>)</span> <span>&amp;&amp;</span> <span>this</span><span>.</span>allowCircularReferences <span>&amp;&amp;</span>
				<span>isSingletonCurrentlyInCreation</span><span>(</span>beanName<span>)</span><span>)</span><span>;</span>
		<span>if</span> <span>(</span>earlySingletonExposure<span>)</span> <span>{</span>
			<span>if</span> <span>(</span>logger<span>.</span><span>isTraceEnabled</span><span>(</span><span>)</span><span>)</span> <span>{</span>
				logger<span>.</span><span>trace</span><span>(</span><span>"Eagerly caching bean '"</span> <span>+</span> beanName <span>+</span>
						<span>"' to allow for resolving potential circular references"</span><span>)</span><span>;</span>
			<span>}</span>
			<span>addSingletonFactory</span><span>(</span>beanName<span>,</span> <span>(</span><span>)</span> <span>-></span> <span>getEarlyBeanReference</span><span>(</span>beanName<span>,</span> mbd<span>,</span> bean<span>)</span><span>)</span><span>;</span>
		<span>}</span> 
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>
<li>doCreateBean#populateBean 实现属性注入</li>
</ul>
<p>以上面的代码的例子，A创建时候被加入到了三级缓存中，然后继续执行 <code>populateBean</code>。发现要依赖B。然后依次从缓存中
来找这个A。最终在三级缓存中读取到了B。然后实现注入。这里三级缓存中的 <code>Bean</code>。 有可能只是完成了 <code>new</code>。但是容器
不管，先完成循环注入。至于注入的东西是否是完全品还是半成品不关心，因为都是单例所以，后面在注入属性也没关系。
这里我们知道单例的用处了吧。试想一下，如果不是单例模式，而是原型模式。那么bean就必须是完全品，不然就陷入了死循环。</p>
<p>下面我们还用伪代码的方式再来说一篇实现思路。</p>
<div><pre><code><span>// createBeanInstance先实例化，然后加入到三级缓存中</span>
<span>A</span> a <span>=</span> <span>new</span> <span>A</span><span>(</span><span>)</span><span>;</span>
<span>// a在执行populateBean的时候，发现要注入属性B，于是就使用getBean。</span>
<span>// getBean(b) 执行createBeanInstance先实例化</span>
<span>B</span> b <span>=</span> <span>new</span> <span>B</span><span>(</span><span>)</span><span>;</span>
<span>// 然后加入到三级缓存中，b在执行populateBean注入属性值的时候。发现也依赖了A。</span>
<span>// 然后从缓存中找到办成品A。于是乎B的注入就完成，然后再执行B的init方法。</span>
b<span>.</span><span>setA</span><span>(</span>a<span>)</span><span>;</span>
<span>// B完成后,则返回到A的populateBean也注入了B。然后在执行A的init方法</span>
a<span>.</span><span>setB</span><span>(</span>b<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>到这里就完成了循环注入，这里有点绕，小编画了一个图，大家跟着序号来看，然后好好理解下。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1647104949000.png" alt="" loading="lazy"></p>
<p>通过这个图其实我们能发现一个问题。B此时从三级缓存中拿到的A是一个半成品的A。
假如B在执行初始化方法的时候,依赖A的populateBean注入的属性。那么此时一定会拿不到的。
下面写点伪代码，说一下这个问题。</p>
<h3 id="_3-3-发现点问题"> 3.3 发现点问题</h3>
<h4 id="_3-3-1-半成品问题-1"> 3.3.1 半成品问题-1</h4>
<div><pre><code><span>@Component</span>
<span>public</span> <span>class</span> <span>A</span> <span>implements</span> <span>InitializingBean</span> <span>{</span>

    <span>@Autowired</span>
    <span>private</span> <span>B</span> b<span>;</span>

    <span>@Value</span><span>(</span><span>"${a.name}"</span><span>)</span>
    <span>private</span> <span>String</span> name<span>;</span>

    <span>public</span> <span>String</span> <span>getName</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> name<span>;</span>
    <span>}</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>afterPropertiesSet</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"A:"</span> <span>+</span> b<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

<span>@Component</span>
<span>public</span> <span>class</span> <span>B</span> <span>implements</span> <span>InitializingBean</span> <span>{</span>

    <span>@Autowired</span>
    <span>private</span> <span>A</span> a<span>;</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>afterPropertiesSet</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"B:"</span> <span>+</span> a<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p><img src="https://img.springlearn.cn/blog/learn_1647105136000.png" alt="" loading="lazy"></p>
<p>通过上图我们知道B会先执行初始化，而这里B的初始化 <mark>(图例8)</mark> 会依赖A的参数注入 <mark>(图例4)</mark> 。而B在执行初始化的时候。A(图例4没有完全完成注入)并没有完成属性注入。
那么我们此时在拿到A的getName一定是空的。</p>
<p><strong>以上代码执行就是:</strong></p>
<div><pre><code><span>B</span><span>:</span><span>null</span>
<span>A</span><span>:</span><span><span>com<span>.</span>example<span>.</span>demo<span>.</span></span>B</span><span>@38aa816f</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h4 id="_3-3-2-半成品问题-2"> 3.3.2 半成品问题-2</h4>
<p>A的BeanPostProcessor没有执行,那么假如我们想要对A进行方法代理。B在执行初始化的时候,调用A的 <code>getName</code>。会成功代理上吗?</p>
<div><pre><code><span>@Component</span>
<span>public</span> <span>class</span> <span>A</span> <span>implements</span> <span>InitializingBean</span> <span>{</span>

    <span>@Autowired</span>
    <span>private</span> <span>B</span> b<span>;</span>

    <span>private</span> <span>final</span> <span>String</span> name <span>=</span> <span>"孙悟空"</span><span>;</span>

    <span>public</span> <span>String</span> <span>getName</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> name<span>;</span>
    <span>}</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>afterPropertiesSet</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"A:"</span> <span>+</span> b<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
<span>@Component</span>
<span>public</span> <span>class</span> <span>B</span> <span>implements</span> <span>InitializingBean</span> <span>{</span>

    <span>@Autowired</span>
    <span>private</span> <span>A</span> a<span>;</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>afterPropertiesSet</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"B:"</span> <span>+</span> a<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
<span>@Aspect</span>
<span>@Component</span>
<span>public</span> <span>class</span> <span>AopConfig</span> <span>{</span>

    <span>/**
     * 精确匹配类名
     */</span>
    <span>@Pointcut</span><span>(</span><span>"within(A)"</span><span>)</span>
    <span>private</span> <span>void</span> <span>matchClass</span><span>(</span><span>)</span> <span>{</span>
    <span>}</span>

    <span>@Before</span><span>(</span><span>"matchClass()"</span><span>)</span>
    <span>public</span> <span>void</span> <span>beforeMatchClassName</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"--------精确匹配类名-------"</span><span>)</span><span>;</span>
    <span>}</span>

<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><p><strong>执行结果:</strong></p>
<div><pre><code><span>--</span><span>--</span><span>--</span><span>--</span>精确匹配类名<span>--</span><span>--</span><span>--</span><span>-</span>
<span>B</span><span>:</span>孙悟空
<span>A</span><span>:</span><span><span>com<span>.</span>example<span>.</span>demo<span>.</span></span>B</span><span>@5e01a982</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>发现疑问了吗? 前面我们说了,在执行B图例8的时候(b的初始化方法)，A图例9并没有执行，那为什么这里会代理成功呢?
<img src="https://img.springlearn.cn/blog/learn_1647105949000.png" alt="" loading="lazy"></p>
<div><p>答案揭晓</p>
<p>这里在添加缓存的时候，并不是直接把实例添加到缓存中的。
而是将图例9的逻辑，封装到
ObjectFactory的方式添加到缓存中的。
ObjectFactory#getObject时候执行了Bean
的处理。(AOP代理等)</p>
</div>
<p><strong>注意: 这里并不是把所有的处理器都包装到ObjectFactory方法中,而是有选择的使用,只有实现了SmartInstantiationAwareBeanPostProcessor接口
才会放到里面。</strong></p>
<p><img src="https://img.springlearn.cn/blog/learn_1647106252000.png" alt="" loading="lazy"></p>
<p>答案就在这里，这里执行了。一些特殊逻辑的处理器。当实现了 <code>SmartInstantiationAwareBeanPostProcessor</code> 接口。
就可以提前对那些半成品的Bean进行处理。</p>
<div><div><br><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br></div><pre><code><span>protected</span> <span>Object</span> <span>getEarlyBeanReference</span><span>(</span><span>String</span> beanName<span>,</span> <span>RootBeanDefinition</span> mbd<span>,</span> <span>Object</span> bean<span>)</span> <span>{</span>
		<span>Object</span> exposedObject <span>=</span> bean<span>;</span>
		<span>if</span> <span>(</span><span>!</span>mbd<span>.</span><span>isSynthetic</span><span>(</span><span>)</span> <span>&amp;&amp;</span> <span>hasInstantiationAwareBeanPostProcessors</span><span>(</span><span>)</span><span>)</span> <span>{</span>
			<span>for</span> <span>(</span><span>SmartInstantiationAwareBeanPostProcessor</span> bp <span>:</span> <span>getBeanPostProcessorCache</span><span>(</span><span>)</span><span>.</span>smartInstantiationAware<span>)</span> <span>{</span>
				exposedObject <span>=</span> bp<span>.</span><span>getEarlyBeanReference</span><span>(</span>exposedObject<span>,</span> beanName<span>)</span><span>;</span>
			<span>}</span>
		<span>}</span>
		<span>return</span> exposedObject<span>;</span>
	<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>比如AOP的实现类。
<img src="https://img.springlearn.cn/blog/learn_1647106893000.png" alt="" loading="lazy"></p>
<p>这里我们在思考一个问题。A半成品的时候被AOP代理了一次，那么当A在执行Bean处理器的时候岂不是有要被代理一次吗?</p>
<p>AbstractAutoProxyCreator#getEarlyBeanReference</p>
<p>第一次代理时候会被加到缓存中。</p>
<div><pre><code>    <span>public</span> <span>Object</span> <span>getEarlyBeanReference</span><span>(</span><span>Object</span> bean<span>,</span> <span>String</span> beanName<span>)</span> <span>{</span>
        <span>Object</span> cacheKey <span>=</span> <span>this</span><span>.</span><span>getCacheKey</span><span>(</span>bean<span>.</span><span>getClass</span><span>(</span><span>)</span><span>,</span> beanName<span>)</span><span>;</span>
        <span>this</span><span>.</span>earlyProxyReferences<span>.</span><span>put</span><span>(</span>cacheKey<span>,</span> bean<span>)</span><span>;</span>
        <span>return</span> <span>this</span><span>.</span><span>wrapIfNecessary</span><span>(</span>bean<span>,</span> beanName<span>,</span> cacheKey<span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>第二次时候在执行AOP后置处理器,会先判断缓存,如果缓存中存在就不在处理了。</p>
<div><pre><code>   <span>public</span> <span>Object</span> <span>postProcessAfterInitialization</span><span>(</span><span>@Nullable</span> <span>Object</span> bean<span>,</span> <span>String</span> beanName<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>bean <span>!=</span> <span>null</span><span>)</span> <span>{</span>
            <span>Object</span> cacheKey <span>=</span> <span>this</span><span>.</span><span>getCacheKey</span><span>(</span>bean<span>.</span><span>getClass</span><span>(</span><span>)</span><span>,</span> beanName<span>)</span><span>;</span>
            <span>if</span> <span>(</span><span>this</span><span>.</span>earlyProxyReferences<span>.</span><span>remove</span><span>(</span>cacheKey<span>)</span> <span>!=</span> bean<span>)</span> <span>{</span>
                <span>return</span> <span>this</span><span>.</span><span>wrapIfNecessary</span><span>(</span>bean<span>,</span> beanName<span>,</span> cacheKey<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>

        <span>return</span> bean<span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="四、知识点总结"> 四、知识点总结</h2>
<h3 id="_4-1-满足循环依赖的条件是什么"> 4.1 满足循环依赖的条件是什么?</h3>
<ol>
<li>必须是单例模式</li>
<li>循环依赖类,必须能实例化(空构造,或构造参数满足循环依赖条件)</li>
</ol>
<h3 id="_4-2-循环依赖可能导致什么问题"> 4.2 循环依赖可能导致什么问题?</h3>
<p>在执行初始化的时候，如果初始化方法，依赖循环来的属性注入参数，可能导致获取不到数据信息的情况</p>
<p>如上面问题1。</p>
<h3 id="_4-3-为什么要用三级缓存而不是二级缓存"> 4.3 为什么要用三级缓存而不是二级缓存?</h3>
<p>为了满足Spring声明周期方法,即对半成品的B进行提前生命周期处理。如实现AOP。</p>
<h2 id="五、开放性问题"> 五、开放性问题</h2>
<p>只使用一级缓存，和三级缓存是否就能解决循环依赖，并且满足bean一些特殊逻辑处理呢（eg:aop）?</p>
<div><div><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span>protected</span> <span>Object</span> <span>getSingleton</span><span>(</span><span>String</span> beanName<span>,</span> <span>boolean</span> allowEarlyReference<span>)</span> <span>{</span>
		<span>// Quick check for existing instance without full singleton lock</span>
		<span>Object</span> singletonObject <span>=</span> <span>this</span><span>.</span>singletonObjects<span>.</span><span>get</span><span>(</span>beanName<span>)</span><span>;</span>
		<span>if</span> <span>(</span>singletonObject <span>==</span> <span>null</span> <span>&amp;&amp;</span> <span>isSingletonCurrentlyInCreation</span><span>(</span>beanName<span>)</span><span>)</span> <span>{</span>
			singletonObject <span>=</span> <span>this</span><span>.</span>earlySingletonObjects<span>.</span><span>get</span><span>(</span>beanName<span>)</span><span>;</span>
			<span>if</span> <span>(</span>singletonObject <span>==</span> <span>null</span> <span>&amp;&amp;</span> allowEarlyReference<span>)</span> <span>{</span>
				<span>synchronized</span> <span>(</span><span>this</span><span>.</span>singletonObjects<span>)</span> <span>{</span>
					<span>// Consistent creation of early reference within full singleton lock</span>
					singletonObject <span>=</span> <span>this</span><span>.</span>singletonObjects<span>.</span><span>get</span><span>(</span>beanName<span>)</span><span>;</span>
					<span>if</span> <span>(</span>singletonObject <span>==</span> <span>null</span><span>)</span> <span>{</span>
						singletonObject <span>=</span> <span>this</span><span>.</span>earlySingletonObjects<span>.</span><span>get</span><span>(</span>beanName<span>)</span><span>;</span>
						<span>if</span> <span>(</span>singletonObject <span>==</span> <span>null</span><span>)</span> <span>{</span>
							<span>ObjectFactory</span><span><span>&lt;</span><span>?</span><span>></span></span> singletonFactory <span>=</span> <span>this</span><span>.</span>singletonFactories<span>.</span><span>get</span><span>(</span>beanName<span>)</span><span>;</span>
							<span>if</span> <span>(</span>singletonFactory <span>!=</span> <span>null</span><span>)</span> <span>{</span>
								singletonObject <span>=</span> singletonFactory<span>.</span><span>getObject</span><span>(</span><span>)</span><span>;</span>
								<span>this</span><span>.</span>earlySingletonObjects<span>.</span><span>put</span><span>(</span>beanName<span>,</span> singletonObject<span>)</span><span>;</span>
								<span>this</span><span>.</span>singletonFactories<span>.</span><span>remove</span><span>(</span>beanName<span>)</span><span>;</span>
							<span>}</span>
						<span>}</span>
					<span>}</span>
				<span>}</span>
			<span>}</span>
		<span>}</span>
		<span>return</span> singletonObject<span>;</span>
	<span>}</span>

</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>小编回答:  仅仅使用1级缓存和3级缓存完全可以的。</p>
<p>之所以使用2级缓存是因为三级缓存是ObjectFactory#getObject()。是每次都从工厂里面去拿。而使用了2级缓存，仅仅是为了提高性能。
而设计的。所以一单这个单例Bean完成后。会里面把二级和三级缓存给移除掉。</p>
<div><pre><code><span>protected</span> <span>void</span> <span>addSingleton</span><span>(</span><span>String</span> beanName<span>,</span> <span>Object</span> singletonObject<span>)</span> <span>{</span>
		<span>synchronized</span> <span>(</span><span>this</span><span>.</span>singletonObjects<span>)</span> <span>{</span>
			<span>this</span><span>.</span>singletonObjects<span>.</span><span>put</span><span>(</span>beanName<span>,</span> singletonObject<span>)</span><span>;</span>
			<span>this</span><span>.</span>singletonFactories<span>.</span><span>remove</span><span>(</span>beanName<span>)</span><span>;</span>
			<span>this</span><span>.</span>earlySingletonObjects<span>.</span><span>remove</span><span>(</span>beanName<span>)</span><span>;</span>
			<span>this</span><span>.</span>registeredSingletons<span>.</span><span>add</span><span>(</span>beanName<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Web接口资源是如何保存起来的?</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/spring/Web%E6%8E%A5%E5%8F%A3%E8%B5%84%E6%BA%90%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E5%AD%98%E8%B5%B7%E6%9D%A5%E7%9A%84/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/spring/Web%E6%8E%A5%E5%8F%A3%E8%B5%84%E6%BA%90%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E5%AD%98%E8%B5%B7%E6%9D%A5%E7%9A%84/"/>
    <updated>2022-05-22T07:02:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言"> 前言</h2>
<p>在我们使用 <code>SpringBoot</code> 开发中,我们定义一接口是下面这样的</p>
<div><pre><code>@RestController
public class UserController{
    
    @GetMapping( name = &quot;/getUserName&quot;)
    public String getUserName(){
        return &quot;Hello World&quot;;
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>这时候我们思考一个问题,我们在浏览器上只输入了一个URL地址,怎么就能访问到这个接口的呢？于是乎就引出了
今天我们要讨论的话题。Spring中的Web接口资源是如何保存起来的?</p>
<h2 id="一、spring中的web接口资源是如何保存起来的"> 一、Spring中的Web接口资源是如何保存起来的?</h2>
<p>在我们学习之前我们可以先自己来进行思考一下。处理逻辑是什么样的？</p>
<ul>
<li>Spring容器解析 <code>@RequestMapping</code> 注解。当然这个注解又派生了其他的注解比如。</li>
</ul>
<div><pre><code>@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@RequestMapping(method = RequestMethod.POST)
public @interface PostMapping {}

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@RequestMapping(method = RequestMethod.PUT)
public @interface PutMapping {}

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@RequestMapping(method = RequestMethod.GET)
public @interface GetMapping {}

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@RequestMapping(method = RequestMethod.DELETE)
public @interface DeleteMapping {}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><ul>
<li>我们猜测Spring源码中一定会对<code>@RestController</code> 和 <code>@Controller</code>标记的类,里面的每个
Method进行处理,判断是否包含了上面的注解。注解那么多Spring肯定不会这样一个一个去处理。我们可以看到
上面的注解都使用了<code>@AliasFor</code>注解。其中奥妙就在这里。看下面例子代码。</li>
<li>我们猜测Spring肯定对这些Method判断是否有<code>@RequestMapping</code>有注解。</li>
</ul>
<h3 id="_1-aliasfor使用"> 1. @AliasFor使用</h3>
<div><pre><code>@RestController
public class PostController {

    @ApiOperation(value = &quot;查询Bbs所有文章&quot;)
    @PostMapping(value = &quot;/query/bbs/posts&quot;, produces = MediaType.APPLICATION_JSON_VALUE)
    public Result&lt;PostAllResponse&gt; queryBbsPostAll(@RequestBody PostAllSelectRequest postAllSelectRequest) {
        return postBiz.queryBbsPostAll(postAllSelectRequest);
    }

    public static void main(String[] args) {
        Method queryBbsPostAll = ClassUtils.getMethod(PostController.class, &quot;queryBbsPostAll&quot;,PostAllSelectRequest.class);
        PostMapping annotation = AnnotationUtils.findAnnotation(queryBbsPostAll, PostMapping.class);
        ///query/bbs/posts
        System.out.println(StringUtils.arrayToCommaDelimitedString(annotation.value()));
        //application/json
        System.out.println(StringUtils.arrayToCommaDelimitedString(annotation.produces()));
        //是否包含RequestMapping: true
        System.out.println(&quot;是否包含RequestMapping: &quot;+AnnotatedElementUtils.hasAnnotation(queryBbsPostAll,RequestMapping.class));

        RequestMapping mergedAnnotation = AnnotatedElementUtils.getMergedAnnotation(queryBbsPostAll, RequestMapping.class);
        ///query/bbs/posts
        System.out.println(StringUtils.arrayToCommaDelimitedString(mergedAnnotation.value()));
    }
}

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>可以看到只要使用下面代码就能把被<code>@PostMapping</code>等等的注解都涵盖了。</p>
<div><pre><code>System.out.println(&quot;是否包含RequestMapping: &quot;+AnnotatedElementUtils.hasAnnotation(queryBbsPostAll,RequestMapping.class));
RequestMapping mergedAnnotation = AnnotatedElementUtils.getMergedAnnotation(queryBbsPostAll, RequestMapping.class);
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="_2-解析请求method"> 2. 解析请求Method</h3>
<p><code>AbstractHandlerMethodMapping</code> 实现 <code>InitializingBean</code>。在当前 <code>Bean</code>初始化时候会执行</p>
<p><code>afterPropertiesSet -&gt; initHandlerMethods</code></p>
<p>从这里开始解析Web资源类的信息。请小伙伴们看下面的截图,截图中源码已经把类名也截上了,方便小伙伴们自己在根据截图看一遍源码。</p>
<div><pre><code>public abstract class AbstractHandlerMethodMapping&lt;T&gt; extends AbstractHandlerMapping implements InitializingBean {

    @Override
    public void afterPropertiesSet() {
        initHandlerMethods();
    }
    
    /**
	 * Scan beans in the ApplicationContext, detect and register handler methods.
	 * @see #getCandidateBeanNames()
	 * @see #processCandidateBean
	 * @see #handlerMethodsInitialized
	 */
    protected void initHandlerMethods() {
        for (String beanName : getCandidateBeanNames()) {
            if (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) {
                processCandidateBean(beanName);
            }
        }
        handlerMethodsInitialized(getHandlerMethods());
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p><strong>RequestMappingHandlerMapping解析Method上的RequestMapping信息</strong></p>
<p><img src="https://img.springlearn.cn/blog/learn_1596563456000.png" alt="" loading="lazy"></p>
<p>isHandler 方法判断是否是web资源类。 当一个类被标记了 <code>@Controller 或者@RequestMapping</code>。 注意 <code>@RestController</code> 是<code>@Controller</code>的派生类。所以这里只用判断 <code>@Controller 或者@RequestMapping</code>就行了。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596563605000.png" alt="" loading="lazy"></p>
<p>detectHandlerMethods方法就是真正开始解析Method的逻辑。通过解析Method上的 <code>@RequestMapping</code>或者其他派生的注解。生成请求信息。
注意这个请求信息里面也是有很多逻辑的不过不是本篇讨论的重点,就不说了。稍微提一下。根据规则来匹配url逻辑就在这里面。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596563872000.png" alt="" loading="lazy"></p>
<p>这里我们能看到源码里拿到了Method并拿到了执行这个Method的实例Bean。在这里封装成了HandlerMethod并注册到了MappingRegistry中。
<img src="https://img.springlearn.cn/blog/learn_1596564039000.png" alt="" loading="lazy"></p>
<p>在注册的过程中把RequestMapping中的路径信息同事也放到一个urlLookup中。key是url,value是Mapping信息。
<img src="https://img.springlearn.cn/blog/learn_1596564246000.png" alt="" loading="lazy"></p>
<p>到这里其实我们就把本篇的议题就说明清楚了。下面我们在看下SpringWeb是如何将http请求信息路由到具体的HandlerMethod的吧。</p>
<h3 id="_3-最后串一下流程"> 3. 最后串一下流程</h3>
<p>看了前面的截图,我们知道Spring是如何把这些Web资源信息给保存起来的了。然后就看是<code>DispatcherServlet</code>的逻辑了。</p>
<p>首先<code>DispatcherServlet</code> 是一个Servlet。Servlet相信大家都都知道就不重点说原理。 我们直接看
<code>doService</code> -&gt; <code>doDispatch</code> 方法</p>
<p><img src="https://img.springlearn.cn/blog/learn_1596564523000.png" alt="" loading="lazy"></p>
<p>根据请求路径,找到从Mapping信息,然后根据Mapping信息匹配到具体的HandlerMethod。 ok本篇内容就到这里。谢谢大家。
<img src="https://img.springlearn.cn/blog/learn_1596565589000.png" alt="" loading="lazy">
<img src="https://img.springlearn.cn/blog/learn_1596564759000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">动态绑定配置</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/spring/Spring%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E9%85%8D%E7%BD%AE/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/spring/Spring%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E9%85%8D%E7%BD%AE/"/>
    <updated>2022-05-22T07:02:41.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1652957155000.png" alt="" loading="lazy"></p>
<h2 id="一、如何实现动态配置"> 一、如何实现动态配置</h2>
<p>在Spring体系下,如果实现了ConfigurationProperties则会自动刷新。而如果只使用<code>@Value</code>的方法,要加上 <code>@RefreshScope</code> 才能实现。
本篇文章我们来分别研究下他们的原理。然后在来看看其他的方案是如何做的吧。</p>
<h2 id="二、实现原理"> 二、实现原理</h2>
<h2 id="_2-1-configurationproperties"> 2.1 @ConfigurationProperties</h2>
<p>所有被<code>@ConfigurationProperties</code>修饰的类都会被ConfigurationPropertiesBeans处理</p>
<ol>
<li>实现<code>BeanPostProcessor</code>处理器，初始化时候判断是否被<code>@ConfigurationProperties</code>修饰,如果是就保存到<code>ConfigurationPropertiesBeans#beans属性中</code></li>
</ol>
<div><pre><code>    <span>public</span> <span>Object</span> <span>postProcessBeforeInitialization</span><span>(</span><span>Object</span> bean<span>,</span> <span>String</span> beanName<span>)</span>
			<span>throws</span> <span>BeansException</span> <span>{</span>
		<span>// 1. 如果已经被RefreshScope修饰了,也会自动更新就不用在处理了。 	</span>
		<span>if</span> <span>(</span><span>isRefreshScoped</span><span>(</span>beanName<span>)</span><span>)</span> <span>{</span>
			<span>return</span> bean<span>;</span>
		<span>}</span>
		<span>ConfigurationProperties</span> annotation <span>=</span> <span>AnnotationUtils</span>
				<span>.</span><span>findAnnotation</span><span>(</span>bean<span>.</span><span>getClass</span><span>(</span><span>)</span><span>,</span> <span>ConfigurationProperties</span><span>.</span><span>class</span><span>)</span><span>;</span>
		<span>if</span> <span>(</span>annotation <span>!=</span> <span>null</span><span>)</span> <span>{</span>
			<span>this</span><span>.</span>beans<span>.</span><span>put</span><span>(</span>beanName<span>,</span> bean<span>)</span><span>;</span>
		<span>}</span>
		<span>else</span> <span>if</span> <span>(</span><span>this</span><span>.</span>metaData <span>!=</span> <span>null</span><span>)</span> <span>{</span>
			annotation <span>=</span> <span>this</span><span>.</span>metaData<span>.</span><span>findFactoryAnnotation</span><span>(</span>beanName<span>,</span>
					<span>ConfigurationProperties</span><span>.</span><span>class</span><span>)</span><span>;</span>
			<span>if</span> <span>(</span>annotation <span>!=</span> <span>null</span><span>)</span> <span>{</span>
				<span>this</span><span>.</span>beans<span>.</span><span>put</span><span>(</span>beanName<span>,</span> bean<span>)</span><span>;</span>
			<span>}</span>
		<span>}</span>
		<span>return</span> bean<span>;</span>
	<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><ol start="2">
<li>ConfigurationPropertiesRebinder 实现 <code>EnvironmentChangeEvent</code> 变更事件, 当收到EnvironmentChangeEvent事件
会重新触发绑定事件。需要绑定的bean就从ConfigurationPropertiesBeans#beans属性中获取。</li>
</ol>
<p>具体的实现类 <code>ConfigurationPropertiesRebinder</code></p>
<ol>
<li>先调用销毁方法</li>
<li>然后重新初始化</li>
</ol>
<div><pre><code>    <span>// 接受事件</span>
    <span>public</span> <span>void</span> <span>onApplicationEvent</span><span>(</span><span>EnvironmentChangeEvent</span> event<span>)</span> <span>{</span>
		<span>if</span> <span>(</span><span>this</span><span>.</span>applicationContext<span>.</span><span>equals</span><span>(</span>event<span>.</span><span>getSource</span><span>(</span><span>)</span><span>)</span>
				<span>// Backwards compatible</span>
				<span>||</span> event<span>.</span><span>getKeys</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>event<span>.</span><span>getSource</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
			<span>rebind</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>
	<span>// 重新绑定</span>
    <span>public</span> <span>boolean</span> <span>rebind</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>
		<span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span>beans<span>.</span><span>getBeanNames</span><span>(</span><span>)</span><span>.</span><span>contains</span><span>(</span>name<span>)</span><span>)</span> <span>{</span>
			<span>return</span> <span>false</span><span>;</span>
		<span>}</span>
		<span>if</span> <span>(</span><span>this</span><span>.</span>applicationContext <span>!=</span> <span>null</span><span>)</span> <span>{</span>
			<span>try</span> <span>{</span>
				<span>Object</span> bean <span>=</span> <span>this</span><span>.</span>applicationContext<span>.</span><span>getBean</span><span>(</span>name<span>)</span><span>;</span>
				<span>if</span> <span>(</span><span>AopUtils</span><span>.</span><span>isAopProxy</span><span>(</span>bean<span>)</span><span>)</span> <span>{</span>
					bean <span>=</span> <span>ProxyUtils</span><span>.</span><span>getTargetObject</span><span>(</span>bean<span>)</span><span>;</span>
				<span>}</span>
				<span>if</span> <span>(</span>bean <span>!=</span> <span>null</span><span>)</span> <span>{</span>
					<span>this</span><span>.</span>applicationContext<span>.</span><span>getAutowireCapableBeanFactory</span><span>(</span><span>)</span>
							<span>.</span><span>destroyBean</span><span>(</span>bean<span>)</span><span>;</span>
					<span>this</span><span>.</span>applicationContext<span>.</span><span>getAutowireCapableBeanFactory</span><span>(</span><span>)</span>
							<span>.</span><span>initializeBean</span><span>(</span>bean<span>,</span> name<span>)</span><span>;</span>
					<span>return</span> <span>true</span><span>;</span>
				<span>}</span>
			<span>}</span>
			<span>catch</span> <span>(</span><span>RuntimeException</span> e<span>)</span> <span>{</span>
				<span>this</span><span>.</span>errors<span>.</span><span>put</span><span>(</span>name<span>,</span> e<span>)</span><span>;</span>
				<span>throw</span> e<span>;</span>
			<span>}</span>
			<span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
				<span>this</span><span>.</span>errors<span>.</span><span>put</span><span>(</span>name<span>,</span> e<span>)</span><span>;</span>
				<span>throw</span> <span>new</span> <span>IllegalStateException</span><span>(</span><span>"Cannot rebind to "</span> <span>+</span> name<span>,</span> e<span>)</span><span>;</span>
			<span>}</span>
		<span>}</span>
		<span>return</span> <span>false</span><span>;</span>
	<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><h2 id="_2-2-refreshscope"> 2.2 @RefreshScope</h2>
<p><code>@RefreshScope</code> 的原理相对流程较长，首先他需要你将类用 <code>@RefreshScope</code>来修饰。</p>
<ol>
<li>首先明确那些是被修饰的<code>AnnotatedBeanDefinitionReader#registerBean</code>。</li>
</ol>
<div><pre><code><span><span>&lt;</span><span>T</span><span>></span></span> <span>void</span> <span>doRegisterBean</span><span>(</span><span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> annotatedClass<span>,</span> <span>@Nullable</span> <span>Supplier</span><span><span>&lt;</span><span>T</span><span>></span></span> instanceSupplier<span>,</span> <span>@Nullable</span> <span>String</span> name<span>,</span>
			<span>@Nullable</span> <span>Class</span><span><span>&lt;</span><span>?</span> <span>extends</span> <span>Annotation</span><span>></span></span><span>[</span><span>]</span> qualifiers<span>,</span> <span>BeanDefinitionCustomizer</span><span>.</span><span>.</span><span>.</span> definitionCustomizers<span>)</span> <span>{</span>

		<span>AnnotatedGenericBeanDefinition</span> abd <span>=</span> <span>new</span> <span>AnnotatedGenericBeanDefinition</span><span>(</span>annotatedClass<span>)</span><span>;</span>
		<span>if</span> <span>(</span><span>this</span><span>.</span>conditionEvaluator<span>.</span><span>shouldSkip</span><span>(</span>abd<span>.</span><span>getMetadata</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
			<span>return</span><span>;</span>
		<span>}</span>

		abd<span>.</span><span>setInstanceSupplier</span><span>(</span>instanceSupplier<span>)</span><span>;</span>
		<span>ScopeMetadata</span> scopeMetadata <span>=</span> <span>this</span><span>.</span>scopeMetadataResolver<span>.</span><span>resolveScopeMetadata</span><span>(</span>abd<span>)</span><span>;</span>
		abd<span>.</span><span>setScope</span><span>(</span>scopeMetadata<span>.</span><span>getScopeName</span><span>(</span><span>)</span><span>)</span><span>;</span>
		<span>.</span><span>.</span><span>.</span>
		<span>BeanDefinitionHolder</span> definitionHolder <span>=</span> <span>new</span> <span>BeanDefinitionHolder</span><span>(</span>abd<span>,</span> beanName<span>)</span><span>;</span>
		<span>// 创建bean描述信息 beanClass = ScopedProxyFactoryBean</span>
		<span>// ScopedProxyCreator#createScopedProxy->ScopedProxyUtils#createScopedProxy</span>
		definitionHolder <span>=</span> <span>AnnotationConfigUtils</span><span>.</span><span>applyScopedProxyMode</span><span>(</span>scopeMetadata<span>,</span> definitionHolder<span>,</span> <span>this</span><span>.</span>registry<span>)</span><span>;</span>
		<span>BeanDefinitionReaderUtils</span><span>.</span><span>registerBeanDefinition</span><span>(</span>definitionHolder<span>,</span> <span>this</span><span>.</span>registry<span>)</span><span>;</span>

<span>}</span>		
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><ol start="2">
<li>被Scope修饰的beanClass都是ScopedProxyFactoryBean
<ul>
<li>GenericScope 实现BeanFactoryPostProcessor 会提前将RefreshScope注册到BeanFactory中</li>
<li>beanFactory.registerScope(this.name, this)</li>
<li>当执行完上面 AbstractBeanFactory#scopes属性中就有值了。对于RefreshScope name = refresh</li>
</ul>
</li>
</ol>
<div><pre><code><span>public</span> <span>class</span> <span>GenericScope</span> <span>implements</span> <span>Scope</span><span>,</span> <span>BeanFactoryPostProcessor</span><span>,</span>
		<span>BeanDefinitionRegistryPostProcessor</span><span>,</span> <span>DisposableBean</span> <span>{</span>

<span>}</span>
<span>public</span> <span>class</span> <span>RefreshScope</span> <span>extends</span> <span>GenericScope</span> <span>implements</span> <span>ApplicationContextAware</span><span>,</span>
		<span>ApplicationListener</span><span><span>&lt;</span><span>ContextRefreshedEvent</span><span>></span></span><span>,</span> <span>Ordered</span> <span>{</span>	
<span>}</span>		
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ol start="3">
<li>当getBean时候,对于域对象会有特殊的处理逻辑,会调用 <code>Scope#get(String name, ObjectFactory&lt;?&gt; objectFactory)</code></li>
</ol>
<div><pre><code>	<span>protected</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>doGetBean</span><span>(</span><span>final</span> <span>String</span> name<span>,</span> <span>@Nullable</span> <span>final</span> <span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> requiredType<span>,</span>
			<span>@Nullable</span> <span>final</span> <span>Object</span><span>[</span><span>]</span> args<span>,</span> <span>boolean</span> typeCheckOnly<span>)</span> <span>throws</span> <span>BeansException</span> <span>{</span>
			<span>.</span><span>.</span><span>.</span>
				<span>// 创建单例逻辑</span>
				<span>if</span> <span>(</span>mbd<span>.</span><span>isSingleton</span><span>(</span><span>)</span><span>)</span> <span>{</span>
					<span>.</span><span>.</span><span>.</span>
					bean <span>=</span> <span>getObjectForBeanInstance</span><span>(</span>sharedInstance<span>,</span> name<span>,</span> beanName<span>,</span> mbd<span>)</span><span>;</span>
				<span>}</span>
				<span>// 创建原型逻辑</span>
				<span>else</span> <span>if</span> <span>(</span>mbd<span>.</span><span>isPrototype</span><span>(</span><span>)</span><span>)</span> <span>{</span>
					<span>.</span><span>.</span><span>.</span>
					bean <span>=</span> <span>getObjectForBeanInstance</span><span>(</span>prototypeInstance<span>,</span> name<span>,</span> beanName<span>,</span> mbd<span>)</span><span>;</span>
				<span>}</span>
				<span>else</span> <span>{</span>
				    <span>// 创建域对象</span>
				    <span>// refresh</span>
					<span>String</span> scopeName <span>=</span> mbd<span>.</span><span>getScope</span><span>(</span><span>)</span><span>;</span>
					<span>// RefreshScope</span>
					<span>final</span> <span>Scope</span> scope <span>=</span> <span>this</span><span>.</span>scopes<span>.</span><span>get</span><span>(</span>scopeName<span>)</span><span>;</span>
					<span>if</span> <span>(</span>scope <span>==</span> <span>null</span><span>)</span> <span>{</span>
						<span>throw</span> <span>new</span> <span>IllegalStateException</span><span>(</span><span>"No Scope registered for scope name '"</span> <span>+</span> scopeName <span>+</span> <span>"'"</span><span>)</span><span>;</span>
					<span>}</span>
					<span>try</span> <span>{</span>
						<span>Object</span> scopedInstance <span>=</span> scope<span>.</span><span>get</span><span>(</span>beanName<span>,</span> <span>(</span><span>)</span> <span>-></span> <span>{</span>
							<span>beforePrototypeCreation</span><span>(</span>beanName<span>)</span><span>;</span>
							<span>try</span> <span>{</span>
								<span>return</span> <span>createBean</span><span>(</span>beanName<span>,</span> mbd<span>,</span> args<span>)</span><span>;</span>
							<span>}</span>
							<span>finally</span> <span>{</span>
								<span>afterPrototypeCreation</span><span>(</span>beanName<span>)</span><span>;</span>
							<span>}</span>
						<span>}</span><span>)</span><span>;</span>
						bean <span>=</span> <span>getObjectForBeanInstance</span><span>(</span>scopedInstance<span>,</span> name<span>,</span> beanName<span>,</span> mbd<span>)</span><span>;</span>
					<span>}</span>
				<span>}</span>
			<span>}</span>
		<span>}</span>
		<span>return</span> <span>(</span><span>T</span><span>)</span> bean<span>;</span>
	<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><div><pre><code><span>public</span> <span>interface</span> <span>Scope</span> <span>{</span>
	<span>Object</span> <span>get</span><span>(</span><span>String</span> name<span>,</span> <span>ObjectFactory</span><span><span>&lt;</span><span>?</span><span>></span></span> objectFactory<span>)</span><span>;</span> 
<span>}</span>
<span>public</span> <span>class</span> <span>GenericScope</span> <span>implements</span> <span>Scope</span><span>,</span> <span>BeanFactoryPostProcessor</span><span>,</span>
		<span>BeanDefinitionRegistryPostProcessor</span><span>,</span> <span>DisposableBean</span> <span>{</span><span>}</span>
<span>public</span> <span>class</span> <span>RefreshScope</span> <span>extends</span> <span>GenericScope</span> <span>implements</span> <span>ApplicationContextAware</span><span>,</span>
		<span>ApplicationListener</span><span><span>&lt;</span><span>ContextRefreshedEvent</span><span>></span></span><span>,</span> <span>Ordered</span> <span>{</span><span>}</span>		
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ol start="4">
<li>RefreshEventListener 接受事件，触发刷新操作</li>
</ol>
<div><pre><code><span>public</span> <span>class</span> <span>RefreshEventListener</span> <span>implements</span> <span>SmartApplicationListener</span> <span>{</span>
    <span>private</span> <span>ContextRefresher</span> refresh<span>;</span>
    <span>@Override</span>
	<span>public</span> <span>void</span> <span>onApplicationEvent</span><span>(</span><span>ApplicationEvent</span> event<span>)</span> <span>{</span>
		<span>if</span> <span>(</span>event <span>instanceof</span> <span>ApplicationReadyEvent</span><span>)</span> <span>{</span>
			<span>handle</span><span>(</span><span>(</span><span>ApplicationReadyEvent</span><span>)</span> event<span>)</span><span>;</span>
		<span>}</span>
		<span>else</span> <span>if</span> <span>(</span>event <span>instanceof</span> <span>RefreshEvent</span><span>)</span> <span>{</span>
			<span>handle</span><span>(</span><span>(</span><span>RefreshEvent</span><span>)</span> event<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>public</span> <span>void</span> <span>handle</span><span>(</span><span>ApplicationReadyEvent</span> event<span>)</span> <span>{</span>
		<span>this</span><span>.</span>ready<span>.</span><span>compareAndSet</span><span>(</span><span>false</span><span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>}</span>

	<span>public</span> <span>void</span> <span>handle</span><span>(</span><span>RefreshEvent</span> event<span>)</span> <span>{</span>
		<span>if</span> <span>(</span><span>this</span><span>.</span>ready<span>.</span><span>get</span><span>(</span><span>)</span><span>)</span> <span>{</span> <span>// don't handle events before app is ready</span>
			log<span>.</span><span>debug</span><span>(</span><span>"Event received "</span> <span>+</span> event<span>.</span><span>getEventDesc</span><span>(</span><span>)</span><span>)</span><span>;</span>
			<span>Set</span><span><span>&lt;</span><span>String</span><span>></span></span> keys <span>=</span> <span>this</span><span>.</span>refresh<span>.</span><span>refresh</span><span>(</span><span>)</span><span>;</span>
			log<span>.</span><span>info</span><span>(</span><span>"Refresh keys changed: "</span> <span>+</span> keys<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><ol start="5">
<li>ContextRefresher#refresh
<ol>
<li>refreshEnvironment刷新环境</li>
<li>调用RefreshScope#refreshAll</li>
</ol>
</li>
</ol>
<div><pre><code><span>public</span> <span>class</span> <span>ContextRefresher</span> <span>{</span>
   <span>public</span> <span>synchronized</span> <span>Set</span><span><span>&lt;</span><span>String</span><span>></span></span> <span>refresh</span><span>(</span><span>)</span> <span>{</span>
		<span>Set</span><span><span>&lt;</span><span>String</span><span>></span></span> keys <span>=</span> <span>refreshEnvironment</span><span>(</span><span>)</span><span>;</span>
		<span>this</span><span>.</span>scope<span>.</span><span>refreshAll</span><span>(</span><span>)</span><span>;</span>
		<span>return</span> keys<span>;</span>
	<span>}</span>

	<span>public</span> <span>synchronized</span> <span>Set</span><span><span>&lt;</span><span>String</span><span>></span></span> <span>refreshEnvironment</span><span>(</span><span>)</span> <span>{</span>
		<span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Object</span><span>></span></span> before <span>=</span> <span>extract</span><span>(</span>
				<span>this</span><span>.</span>context<span>.</span><span>getEnvironment</span><span>(</span><span>)</span><span>.</span><span>getPropertySources</span><span>(</span><span>)</span><span>)</span><span>;</span>
		<span>addConfigFilesToEnvironment</span><span>(</span><span>)</span><span>;</span>
		<span>Set</span><span><span>&lt;</span><span>String</span><span>></span></span> keys <span>=</span> <span>changes</span><span>(</span>before<span>,</span>
				<span>extract</span><span>(</span><span>this</span><span>.</span>context<span>.</span><span>getEnvironment</span><span>(</span><span>)</span><span>.</span><span>getPropertySources</span><span>(</span><span>)</span><span>)</span><span>)</span><span>.</span><span>keySet</span><span>(</span><span>)</span><span>;</span>
		<span>this</span><span>.</span>context<span>.</span><span>publishEvent</span><span>(</span><span>new</span> <span>EnvironmentChangeEvent</span><span>(</span><span>this</span><span>.</span>context<span>,</span> keys<span>)</span><span>)</span><span>;</span>
		<span>return</span> keys<span>;</span>
	<span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><ol start="6">
<li>RefreshScope#refreshAll
会将容器中的bean给销毁。
而ScopedProxyFactoryBean中getObject是一个代理对象。带代理类每次都从容器中获取。而容器前面已经将被RefreshScope修饰的类给销毁了
测试拿到的对象就是重新从容器中生成的。</li>
</ol>
<div><pre><code><span>public</span> <span>class</span> <span>ScopedProxyFactoryBean</span> <span>extends</span> <span>ProxyConfig</span>
		<span>implements</span> <span>FactoryBean</span><span><span>&lt;</span><span>Object</span><span>></span></span><span>,</span> <span>BeanFactoryAware</span><span>,</span> <span>AopInfrastructureBean</span> <span>{</span>
	<span>private</span> <span>Object</span> proxy<span>;</span>	
	<span>private</span> <span>final</span> <span>SimpleBeanTargetSource</span> scopedTargetSource <span>=</span> <span>new</span> <span>SimpleBeanTargetSource</span><span>(</span><span>)</span><span>;</span>
	<span>@Override</span>
	<span>public</span> <span>void</span> <span>setBeanFactory</span><span>(</span><span>BeanFactory</span> beanFactory<span>)</span> <span>{</span>
        <span>.</span><span>.</span><span>.</span>
		<span>ProxyFactory</span> pf <span>=</span> <span>new</span> <span>ProxyFactory</span><span>(</span><span>)</span><span>;</span>
		pf<span>.</span><span>copyFrom</span><span>(</span><span>this</span><span>)</span><span>;</span>
		pf<span>.</span><span>setTargetSource</span><span>(</span><span>this</span><span>.</span>scopedTargetSource<span>)</span><span>;</span>
		<span>this</span><span>.</span>proxy <span>=</span> pf<span>.</span><span>getProxy</span><span>(</span>cbf<span>.</span><span>getBeanClassLoader</span><span>(</span><span>)</span><span>)</span><span>;</span>
	<span>}</span>
<span>}</span>		

<span>public</span> <span>class</span> <span>SimpleBeanTargetSource</span> <span>extends</span> <span>AbstractBeanFactoryBasedTargetSource</span> <span>{</span>
	<span>@Override</span>
	<span>public</span> <span>Object</span> <span>getTarget</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
		<span>return</span> <span>getBeanFactory</span><span>(</span><span>)</span><span>.</span><span>getBean</span><span>(</span><span>getTargetBeanName</span><span>(</span><span>)</span><span>)</span><span>;</span>
	<span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id="三、其他方案"> 三、其他方案</h2>
<p>因为我们项目中用的是阿波罗，那我们只看阿波罗是如何来做的吧。
在阿波罗只用使用@Value就行了</p>
<h2 id="_3-1-先扫描-value注解"> 3.1 先扫描@Value注解</h2>
<p>将被@Value修饰的Bean和配置key先生成一个<code>SpringValue</code>对象然后注册到<code>SpringValueRegistry</code>中</p>
<div><pre><code><span>public</span> <span>class</span> <span>SpringValueProcessor</span> <span>extends</span> <span>ApolloProcessor</span> <span>implements</span> <span>BeanFactoryPostProcessor</span><span>,</span> <span>BeanFactoryAware</span> <span>{</span>
   <span>protected</span> <span>void</span> <span>processField</span><span>(</span><span>Object</span> bean<span>,</span> <span>String</span> beanName<span>,</span> <span>Field</span> field<span>)</span> <span>{</span>
       <span>// register @Value on field</span>
       <span>Value</span> value <span>=</span> field<span>.</span><span>getAnnotation</span><span>(</span><span>Value</span><span>.</span><span>class</span><span>)</span><span>;</span>
       <span>if</span> <span>(</span>value <span>==</span> <span>null</span><span>)</span> <span>{</span>
         <span>return</span><span>;</span>
       <span>}</span>
       <span>Set</span><span><span>&lt;</span><span>String</span><span>></span></span> keys <span>=</span> placeholderHelper<span>.</span><span>extractPlaceholderKeys</span><span>(</span>value<span>.</span><span>value</span><span>(</span><span>)</span><span>)</span><span>;</span>
   
       <span>if</span> <span>(</span>keys<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
         <span>return</span><span>;</span>
       <span>}</span>
   
       <span>for</span> <span>(</span><span>String</span> key <span>:</span> keys<span>)</span> <span>{</span>
         <span>SpringValue</span> springValue <span>=</span> <span>new</span> <span>SpringValue</span><span>(</span>key<span>,</span> value<span>.</span><span>value</span><span>(</span><span>)</span><span>,</span> bean<span>,</span> beanName<span>,</span> field<span>,</span> <span>false</span><span>)</span><span>;</span>
         springValueRegistry<span>.</span><span>register</span><span>(</span>beanFactory<span>,</span> key<span>,</span> springValue<span>)</span><span>;</span>
         logger<span>.</span><span>debug</span><span>(</span><span>"Monitoring {}"</span><span>,</span> springValue<span>)</span><span>;</span>
       <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id="_3-2-找到需要更新的bean"> 3.2 找到需要更新的Bean</h2>
<p>接受到配置变更事件后,遍历本地变更的配置key，然后将本次key关联需要变更的Bean,从<code>springValueRegistry</code>中找到。</p>
<div><pre><code><span>public</span> <span>class</span> <span>AutoUpdateConfigChangeListener</span> <span>implements</span> <span>ConfigChangeListener</span><span>{</span>
   <span>@Override</span>
  <span>public</span> <span>void</span> <span>onChange</span><span>(</span><span>ConfigChangeEvent</span> changeEvent<span>)</span> <span>{</span>
    <span>Set</span><span><span>&lt;</span><span>String</span><span>></span></span> keys <span>=</span> changeEvent<span>.</span><span>changedKeys</span><span>(</span><span>)</span><span>;</span>
    <span>if</span> <span>(</span><span>CollectionUtils</span><span>.</span><span>isEmpty</span><span>(</span>keys<span>)</span><span>)</span> <span>{</span>
      <span>return</span><span>;</span>
    <span>}</span>
    <span>for</span> <span>(</span><span>String</span> key <span>:</span> keys<span>)</span> <span>{</span>
      <span>// 1. check whether the changed key is relevant</span>
      <span>Collection</span><span><span>&lt;</span><span>SpringValue</span><span>></span></span> targetValues <span>=</span> springValueRegistry<span>.</span><span>get</span><span>(</span>beanFactory<span>,</span> key<span>)</span><span>;</span>
      <span>if</span> <span>(</span>targetValues <span>==</span> <span>null</span> <span>||</span> targetValues<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
        <span>continue</span><span>;</span>
      <span>}</span>

      <span>// 2. update the value</span>
      <span>for</span> <span>(</span><span>SpringValue</span> val <span>:</span> targetValues<span>)</span> <span>{</span>
        <span>updateSpringValue</span><span>(</span>val<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h2 id="_3-3-通过反射的方法注入"> 3.3 通过反射的方法注入</h2>
<div><pre><code><span>public</span> <span>class</span> <span>SpringValue</span> <span>{</span>
   <span>public</span> <span>void</span> <span>update</span><span>(</span><span>Object</span> newVal<span>)</span> <span>throws</span> <span>IllegalAccessException</span><span>,</span> <span>InvocationTargetException</span> <span>{</span>
       <span>if</span> <span>(</span><span>isField</span><span>(</span><span>)</span><span>)</span> <span>{</span>
         <span>injectField</span><span>(</span>newVal<span>)</span><span>;</span>
       <span>}</span> <span>else</span> <span>{</span>
         <span>injectMethod</span><span>(</span>newVal<span>)</span><span>;</span>
       <span>}</span>
     <span>}</span>
    <span>private</span> <span>void</span> <span>injectField</span><span>(</span><span>Object</span> newVal<span>)</span> <span>throws</span> <span>IllegalAccessException</span> <span>{</span>
       <span>Object</span> bean <span>=</span> beanRef<span>.</span><span>get</span><span>(</span><span>)</span><span>;</span>
       <span>if</span> <span>(</span>bean <span>==</span> <span>null</span><span>)</span> <span>{</span>
         <span>return</span><span>;</span>
       <span>}</span>
       <span>boolean</span> accessible <span>=</span> field<span>.</span><span>isAccessible</span><span>(</span><span>)</span><span>;</span>
       field<span>.</span><span>setAccessible</span><span>(</span><span>true</span><span>)</span><span>;</span>
       field<span>.</span><span>set</span><span>(</span>bean<span>,</span> newVal<span>)</span><span>;</span>
       field<span>.</span><span>setAccessible</span><span>(</span>accessible<span>)</span><span>;</span>
     <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>非常简单，高效。相比使用@RefreshScope是不是清爽多了呢?</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">JUnit API</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/JUnitAPI/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/JUnitAPI/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<div><p>提示</p>
<p>只打印的单测是没有意义的,正确使用单测工具, 提高单测质量。</p>
</div>
<h2 id="一、常用注解"> 一、常用注解</h2>
<h3 id="_1-1-before-after"> 1.1 @Before &amp; @After</h3>
<p>单测类中每个单测方法执行都会触发这两个方法</p>
<div><pre><code>    <span>@Before</span>
    <span>public</span> <span>void</span> <span>before</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"before"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@After</span>
    <span>public</span> <span>void</span> <span>after</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"after"</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="_1-2-beforeclass-afterclass"> 1.2 @BeforeClass &amp; @AfterClass</h3>
<p>区别与上一个,不管单测类中有几个单测方法,都只会执行一次</p>
<p>要用静态修饰</p>
<div><pre><code>    <span>@BeforeClass</span>
    <span>public</span> <span>static</span> <span>void</span> <span>beforeClass</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"beforeClass"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@AfterClass</span>
    <span>public</span> <span>static</span> <span>void</span> <span>afterClass</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"afterClass"</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><div><p>代码实例</p>
<p>针对上面说的两个注解演示一下</p>
<ul>
<li>beforeClass</li>
<li>before</li>
<li>testOne</li>
<li>after</li>
<li>before</li>
<li>testTwo</li>
<li>after</li>
<li>afterClass</li>
</ul>
</div>
<hr>
<div><pre><code><span>public</span> <span>class</span> <span>JUnitTest</span> <span>{</span>

    <span>@BeforeClass</span>
    <span>public</span> <span>static</span> <span>void</span> <span>beforeClass</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"beforeClass"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Before</span>
    <span>public</span> <span>void</span> <span>before</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"before"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Test</span>
    <span>public</span> <span>void</span> <span>testOne</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"testOne"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Test</span>
    <span>public</span> <span>void</span> <span>testTwo</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"testTwo"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@AfterClass</span>
    <span>public</span> <span>static</span> <span>void</span> <span>afterClass</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"afterClass"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@After</span>
    <span>public</span> <span>void</span> <span>after</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"after"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h3 id="_1-3-timed"> 1.3 @Timed</h3>
<p>被修饰的方法会加上一个时间限制,如果超过了指定的时间范围,就算单侧代码执行成功
了也被认为是失败。(注意该方法依赖于SpringBoot容器)</p>
<p>@Timed</p>
<div><pre><code>    <span>@Test</span>
    <span>@Timed</span><span>(</span>millis <span>=</span> <span>2000</span><span>)</span>
    <span>public</span> <span>void</span> <span>testTimeout</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"testOne"</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="_1-4-repeat"> 1.4 @Repeat</h3>
<p>指定当前单测方法被执行的次数,如果被该注解修饰
将会被重复执行。(注意该方法依赖于SpringBoot容器)</p>
<p>@Repeat</p>
<div><pre><code>    <span>@Test</span>
    <span>@Repeat</span><span>(</span><span>3</span><span>)</span>
    <span>public</span> <span>void</span> <span>testOne</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"testOne"</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="二、断言api"> 二、断言API</h2>
<p>断言的好处在于程序帮忙判断单测结果。不需要人工在接入验证数据。JUnit的口号就是</p>
<p><code>keep the bar green to keep the code clean。</code></p>
<p>一个不用观察输出就知道代码有没有问题的高效单元测试工具。</p>
<div><pre><code>import org.hamcrest.Matchers;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.AnyOf;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="_2-1-matchers"> 2.1 Matchers</h3>
<p>Matchers</p>
<div><pre><code>        <span>// 是否相等</span>
        <span>Assert</span><span>.</span><span>assertThat</span><span>(</span><span>2</span><span>,</span> <span>Matchers</span><span>.</span><span>is</span><span>(</span><span>2</span><span>)</span><span>)</span><span>;</span>
        <span>// 2 小于等于2</span>
        <span>Assert</span><span>.</span><span>assertThat</span><span>(</span><span>2</span><span>,</span><span>Matchers</span><span>.</span><span>lessThanOrEqualTo</span><span>(</span><span>2</span><span>)</span><span>)</span><span>;</span>
        <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span><span>String</span><span>></span></span> map <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        map<span>.</span><span>put</span><span>(</span><span>"name"</span><span>,</span><span>"jay"</span><span>)</span><span>;</span>
        <span>// map 中是否包含key为name的元素</span>
        <span>Assert</span><span>.</span><span>assertThat</span><span>(</span>map<span>,</span><span>Matchers</span><span>.</span><span>hasKey</span><span>(</span><span>"name"</span><span>)</span><span>)</span><span>;</span>
        <span>// map 中是否包含value为jay的元素</span>
        <span>Assert</span><span>.</span><span>assertThat</span><span>(</span>map<span>,</span><span>Matchers</span><span>.</span><span>hasValue</span><span>(</span><span>"jay"</span><span>)</span><span>)</span><span>;</span>
        <span>// map 中是否包含name等于jay的元素</span>
        <span>Assert</span><span>.</span><span>assertThat</span><span>(</span>map<span>,</span><span>Matchers</span><span>.</span><span>hasEntry</span><span>(</span><span>"name"</span><span>,</span><span>"jay"</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id="_2-2-allof"> 2.2 AllOf</h3>
<p>全部满足</p>
<div><pre><code>   <span>// 2 小于4同时也小于3</span>
   <span>Assert</span><span>.</span><span>assertThat</span><span>(</span><span>2</span><span>,</span> <span>AllOf</span><span>.</span><span>allOf</span><span>(</span><span>Matchers</span><span>.</span><span>lessThan</span><span>(</span><span>4</span><span>)</span><span>,</span> <span>Matchers</span><span>.</span><span>lessThan</span><span>(</span><span>3</span><span>)</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="_2-3-anyof"> 2.3 AnyOf</h3>
<p>任意满足</p>
<div><pre><code>   <span>// 2 大于1小于3</span>
   <span>Assert</span><span>.</span><span>assertThat</span><span>(</span><span>2</span><span>,</span> <span>AnyOf</span><span>.</span><span>anyOf</span><span>(</span><span>Matchers</span><span>.</span><span>greaterThan</span><span>(</span><span>1</span><span>)</span><span>,</span> <span>Matchers</span><span>.</span><span>lessThan</span><span>(</span><span>3</span><span>)</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="三、结果验证"> 三、结果验证</h2>
<h3 id="_3-1-空值验证"> 3.1 空值验证</h3>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>{</span>
        <span>Object</span> o <span>=</span> <span>new</span> <span>Object</span><span>(</span><span>)</span><span>;</span>
        <span>// 非空验证</span>
        <span>Assert</span><span>.</span><span>assertNotNull</span><span>(</span>o<span>)</span><span>;</span>
        <span>// 空值验证</span>
        <span>Assert</span><span>.</span><span>assertNull</span><span>(</span><span>null</span><span>)</span><span>;</span>
    <span>}</span>    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="_3-2-逻辑验证"> 3.2 逻辑验证</h3>
<div><pre><code>    <span>import</span> <span>static</span> <span>org<span>.</span>hamcrest<span>.</span></span><span>MatcherAssert</span><span>.</span>*<span>;</span>
    <span>import</span> <span>static</span> <span>org<span>.</span>hamcrest<span>.</span></span><span>CoreMatchers</span><span>.</span>*<span>;</span>
    <span>public</span> calss <span>Test</span><span>{</span>
        <span>@Test</span>
        <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>{</span>
            <span>//测试变量是否大于指定值</span>
            <span>ArrivalNoticeOrderDO</span> ao <span>=</span> <span>new</span> <span>ArrivalNoticeOrderDO</span><span>(</span><span>)</span><span>;</span>
            ao<span>.</span><span>setId</span><span>(</span><span>12L</span><span>)</span><span>;</span>
            <span>//测试所有条件必须成立</span>
            <span>assertThat</span><span>(</span>ao<span>.</span><span>getId</span><span>(</span><span>)</span><span>,</span> <span>allOf</span><span>(</span><span>is</span><span>(</span><span>12L</span><span>)</span><span>)</span><span>)</span><span>;</span>
            <span>//测试只要有一个条件成立</span>
            <span>assertThat</span><span>(</span>ao<span>.</span><span>getId</span><span>(</span><span>)</span><span>,</span> <span>anyOf</span><span>(</span><span>is</span><span>(</span><span>50</span><span>)</span><span>,</span> <span>is</span><span>(</span><span>12L</span><span>)</span><span>)</span><span>)</span><span>;</span>
            <span>//测试变量值等于指定值</span>
            <span>assertThat</span><span>(</span>ao<span>.</span><span>getId</span><span>(</span><span>)</span><span>,</span> <span>is</span><span>(</span><span>12L</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id="_3-3-异常验证"> 3.3 异常验证</h3>
<div><pre><code>    <span>/**
     * 预期异常
     */</span>
    <span>@Test</span><span>(</span>expected <span>=</span> <span>NullPointerException</span><span>.</span><span>class</span><span>)</span>
    <span>public</span> <span>void</span> <span>testError</span><span>(</span><span>)</span><span>{</span>
        <span>Object</span> o <span>=</span> <span>null</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>o<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="四、快速创建"> 四、快速创建</h2>
<p>建议使用 <code>Idea</code> 自动创建, 不要手动创建。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Feign Mock注意事项</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/FeignMock/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/FeignMock/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、feign接口模拟"> 一、Feign接口模拟</h2>
<p>以下两种API的用法会导致你Feign类型推断不出来,建议使用最后一种</p>
<div建议使用最后一种" line-numbers-mode"><pre><code>        <span>Mockito</span><span>.</span><span>when</span><span>(</span>arrivalOrderFeignClient<span>.</span><span>listArrivalNoticeBatch</span><span>(</span><span>new</span> <span>PmsArrivalNoticeBatchQueryDTO</span><span>(</span><span>)</span><span>)</span><span>)</span><span>.</span><span>thenReturn</span><span>(</span><span>JsonResult</span><span>.</span><span>success</span><span>(</span>result<span>)</span><span>)</span><span>;</span>
        <span>Mockito</span><span>.</span><span>doReturn</span><span>(</span><span>JsonResult</span><span>.</span><span>success</span><span>(</span>result<span>)</span><span>)</span><span>.</span><span>when</span><span>(</span>arrivalOrderFeignClient<span>)</span><span>.</span><span>listArrivalNoticeBatch</span><span>(</span><span>Mockito</span><span>.</span><span>any</span><span>(</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="二、mapper接口要使用mock"> 二、Mapper接口要使用Mock</h2>
<p>对于Service层的数据测试,Mapper类使用@MockBean。保证数据都是模拟的。</p>
<p>对于Dal层数据测试,Mapper使用真实的示例信息。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">MockData API</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/MockDataAPI/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/MockDataAPI/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<p><code>JMockData</code> 是一款国人开发用来生成模拟数据的工具</p>
<h2 id="基础类型"> 基础类型</h2>
<table>
<thead>
<tr>
<th>描述</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>基础类型</td>
<td><code>byte</code> <code>boolean</code> <code>char</code> <code>short</code> <code>int</code> <code>long</code> <code>float</code> <code>double</code></td>
</tr>
<tr>
<td>包装类型包装</td>
<td><code>Byte</code> <code>Boolean</code> <code>Character</code> <code>Short</code> <code>Integer</code> <code>Long</code> <code>Float</code> <code>Double</code></td>
</tr>
<tr>
<td>常用类型</td>
<td><code>BigDecimal</code> <code>BigInteger</code> <code>Date</code> <code>LocalDateTime</code> <code>LocalDate</code> <code>LocalTime</code> <code>java.sql.Timestamp</code> <code>String</code> <code>Enum</code></td>
</tr>
<tr>
<td>多维数组</td>
<td>以上所有类型的多维数组 如：<code>int[]</code> <code>int[][]</code> <code>int[][][]</code> .... etc.</td>
</tr>
</tbody>
</table>
<div><pre><code><span>//基本类型模拟</span>
<span>int</span> intNum <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>int</span><span>.</span><span>class</span><span>)</span><span>;</span>
<span>int</span><span>[</span><span>]</span> intArray <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>int</span><span>[</span><span>]</span><span>.</span><span>class</span><span>)</span><span>;</span>
<span>Integer</span> integer <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>Integer</span><span>.</span><span>class</span><span>)</span><span>;</span>
<span>Integer</span><span>[</span><span>]</span> integerArray <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>Integer</span><span>[</span><span>]</span><span>.</span><span>class</span><span>)</span><span>;</span>
<span>//常用类型模拟</span>
<span>BigDecimal</span> bigDecimal <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>BigDecimal</span><span>.</span><span>class</span><span>)</span><span>;</span>
<span>BigInteger</span> bigInteger <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>BigInteger</span><span>.</span><span>class</span><span>)</span><span>;</span>
<span>Date</span> date <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>Date</span><span>.</span><span>class</span><span>)</span><span>;</span>
<span>String</span> str <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>String</span><span>.</span><span>class</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="java对象"> JAVA对象</h2>
<p>模拟bean，被模拟的数据最好是plain bean，通过反射给属性赋值。</p>
<div><pre><code><span>public</span> <span>class</span> <span>User</span> <span>{</span>

    <span>private</span> <span>String</span> name<span>;</span>

    <span>private</span> <span>int</span> age<span>;</span>

    <span>private</span> <span>long</span> cardId<span>;</span>
    
<span>}</span>  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>{</span>
        <span>User</span> mock <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>User</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>// User{name='jrq2b', age=9338, cardId=2850}</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>mock<span>)</span><span>;</span>
    <span>}</span>  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="容器类型"> 容器类型</h2>
<div><pre><code><span>@Test</span>
<span>//******注意TypeReference要加{}才能模拟******</span>
<span>public</span> <span>void</span> <span>testTypeRefrence</span><span>(</span><span>)</span> <span>{</span>
  <span>//模拟基础类型，不建议使用这种方式，参考基础类型章节直接模拟。</span>
  <span>Integer</span> integerNum <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>new</span> <span>TypeReference</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>(</span><span>)</span><span>{</span><span>}</span><span>)</span><span>;</span>
  <span>Integer</span><span>[</span><span>]</span> integerArray <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>new</span> <span>TypeReference</span><span>&lt;</span><span>Integer</span><span>[</span><span>]</span><span>></span><span>(</span><span>)</span><span>{</span><span>}</span><span>)</span><span>;</span>
  <span>//模拟集合</span>
  <span>List</span><span><span>&lt;</span><span>Integer</span><span>></span></span> integerList <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>new</span> <span>TypeReference</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span><span>(</span><span>)</span><span>{</span><span>}</span><span>)</span><span>;</span>
  <span>//模拟数组集合</span>
  <span>List</span><span>&lt;</span><span>Integer</span><span>[</span><span>]</span><span>></span> integerArrayList <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>new</span> <span>TypeReference</span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>[</span><span>]</span><span>>></span><span>(</span><span>)</span><span>{</span><span>}</span><span>)</span><span>;</span>
  <span>//模拟集合数组</span>
  <span>List</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>[</span><span>]</span> integerListArray <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>new</span> <span>TypeReference</span><span>&lt;</span><span>List</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>[</span><span>]</span><span>></span><span>(</span><span>)</span><span>{</span><span>}</span><span>)</span><span>;</span>
  <span>//模拟集合实体</span>
  <span>List</span><span><span>&lt;</span><span>BasicBean</span><span>></span></span> basicBeanList <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>new</span> <span>TypeReference</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>BasicBean</span><span>></span><span>></span></span><span>(</span><span>)</span><span>{</span><span>}</span><span>)</span><span>;</span>
  <span>//各种组合忽略。。。。map同理。下面模拟一个不知道什么类型的map</span>
  <span>Map</span><span>&lt;</span><span>List</span><span>&lt;</span><span>Map</span><span>&lt;</span><span>Integer</span><span>,</span> <span>String</span><span>[</span><span>]</span><span>[</span><span>]</span><span>>></span><span>,</span> <span>Map</span><span>&lt;</span><span>Set</span><span><span>&lt;</span><span>String</span><span>></span></span><span>,</span> <span>Double</span><span>[</span><span>]</span><span>>></span> some <span>=</span> <span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>new</span> <span>TypeReference</span><span>&lt;</span><span>Map</span><span>&lt;</span><span>List</span><span>&lt;</span><span>Map</span><span>&lt;</span><span>Integer</span><span>,</span> <span>String</span><span>[</span><span>]</span><span>[</span><span>]</span><span>>></span><span>,</span> <span>Map</span><span>&lt;</span><span>Set</span><span><span>&lt;</span><span>String</span><span>></span></span><span>,</span> <span>Double</span><span>[</span><span>]</span><span>>>></span><span>(</span><span>)</span><span>{</span><span>}</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="范围配置"> 范围配置</h2>
<p>前面说了可以模拟各种数据,不同类型的数据都允许指定一个范围。
如下</p>
<div><pre><code><span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>
<span>JMockData</span><span>.</span><span>mock</span><span>(</span><span>Date</span><span>.</span><span>class</span><span>,</span><span>MockConfig</span><span>.</span><span>newInstance</span><span>(</span><span>)</span>
<span>.</span><span>dateRange</span><span>(</span><span>"2018-11-20"</span><span>,</span> <span>"2018-11-30"</span><span>)</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div允许指定模拟数据的范围或者是排除" line-numbers-mode"><pre><code>        <span>MockConfig</span> mockConfig <span>=</span> <span>new</span> <span>MockConfig</span><span>(</span><span>)</span>
                <span>// 全局配置</span>
                <span>.</span><span>globalConfig</span><span>(</span><span>)</span>
                <span>.</span><span>setEnabledStatic</span><span>(</span><span>false</span><span>)</span>
                <span>.</span><span>setEnabledPrivate</span><span>(</span><span>false</span><span>)</span>
                <span>.</span><span>setEnabledPublic</span><span>(</span><span>false</span><span>)</span>
                <span>.</span><span>setEnabledProtected</span><span>(</span><span>false</span><span>)</span>
                <span>.</span><span>sizeRange</span><span>(</span><span>1</span><span>,</span> <span>1</span><span>)</span>
                <span>.</span><span>charSeed</span><span>(</span><span>(</span><span>char</span><span>)</span> <span>97</span><span>,</span> <span>(</span><span>char</span><span>)</span> <span>98</span><span>)</span>
                <span>.</span><span>byteRange</span><span>(</span><span>(</span><span>byte</span><span>)</span> <span>0</span><span>,</span> <span>Byte</span><span>.</span>MAX_VALUE<span>)</span>
                <span>.</span><span>shortRange</span><span>(</span><span>(</span><span>short</span><span>)</span> <span>0</span><span>,</span> <span>Short</span><span>.</span>MAX_VALUE<span>)</span>
                <span>// 某些字段（名等于integerNum的字段、包含float的字段、double开头的字段）配置</span>
                <span>.</span><span>subConfig</span><span>(</span><span>"integerNum"</span><span>,</span> <span>"*float*"</span><span>,</span> <span>"double*"</span><span>)</span>
                <span>.</span><span>intRange</span><span>(</span><span>10</span><span>,</span> <span>11</span><span>)</span>
                <span>.</span><span>floatRange</span><span>(</span><span>1.22f</span><span>,</span> <span>1.50f</span><span>)</span>
                <span>.</span><span>doubleRange</span><span>(</span><span>1.50</span><span>,</span> <span>1.99</span><span>)</span>
                <span>.</span><span>longRange</span><span>(</span><span>12</span><span>,</span> <span>13</span><span>)</span>
                <span>.</span><span>dateRange</span><span>(</span><span>"2018-11-20"</span><span>,</span> <span>"2018-11-30"</span><span>)</span>
                <span>.</span><span>stringSeed</span><span>(</span><span>"SAVED"</span><span>,</span> <span>"REJECT"</span><span>,</span> <span>"APPROVED"</span><span>)</span>
                <span>.</span><span>sizeRange</span><span>(</span><span>1</span><span>,</span> <span>1</span><span>)</span>
                <span>// 全局配置</span>
                <span>.</span><span>globalConfig</span><span>(</span><span>)</span>
                <span>// 排除所有包含list/set/map字符的字段。表达式不区分大小写。</span>
                <span>.</span><span>excludes</span><span>(</span><span>"*List*"</span><span>,</span> <span>"*Set*"</span><span>,</span> <span>"*Map*"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">JUnit单测类属性注入</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/JUnit%E5%8D%95%E6%B5%8B%E7%B1%BB%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/JUnit%E5%8D%95%E6%B5%8B%E7%B1%BB%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<p>通过前面的阅读我们已经能拿到了所有的容器启动参数。那么我们可以思考下。我们自己的
单测类其实并没有交给容器来管理,那么我们的单测类中的属性都是什么时候注入的呢?</p>
<p>答案就在 <code>TestExecutionListener</code></p>
<div><pre><code><span>public</span> <span>interface</span> <span>TestExecutionListener</span> <span>{</span>

	<span>default</span> <span>void</span> <span>beforeTestClass</span><span>(</span><span>TestContext</span> testContext<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
	<span>}</span>

	<span>default</span> <span>void</span> <span>prepareTestInstance</span><span>(</span><span>TestContext</span> testContext<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
	<span>}</span>

	<span>default</span> <span>void</span> <span>beforeTestMethod</span><span>(</span><span>TestContext</span> testContext<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
	<span>}</span>

	<span>default</span> <span>void</span> <span>beforeTestExecution</span><span>(</span><span>TestContext</span> testContext<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
	<span>}</span>

	<span>default</span> <span>void</span> <span>afterTestExecution</span><span>(</span><span>TestContext</span> testContext<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
	<span>}</span>

	<span>default</span> <span>void</span> <span>afterTestMethod</span><span>(</span><span>TestContext</span> testContext<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
	<span>}</span>

	<span>default</span> <span>void</span> <span>afterTestClass</span><span>(</span><span>TestContext</span> testContext<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
	<span>}</span>

<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p><img src="https://img.springlearn.cn/blog/learn_1617795655000.png" alt="" loading="lazy"></p>
<p>通过名字我们发现了貌似一个可以进行依赖注入的类。没错就是在这里,在单侧方法执行前。通过</p>
<div><pre><code><span>public</span> <span>class</span> <span>DependencyInjectionTestExecutionListener</span> <span>extends</span> <span>AbstractTestExecutionListener</span> <span>{</span>
	<span>@Override</span>
	<span>public</span> <span>void</span> <span>beforeTestMethod</span><span>(</span><span>TestContext</span> testContext<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
		<span>if</span> <span>(</span><span>Boolean</span><span>.</span>TRUE<span>.</span><span>equals</span><span>(</span>testContext<span>.</span><span>getAttribute</span><span>(</span>REINJECT_DEPENDENCIES_ATTRIBUTE<span>)</span><span>)</span><span>)</span> <span>{</span>
			<span>if</span> <span>(</span>logger<span>.</span><span>isDebugEnabled</span><span>(</span><span>)</span><span>)</span> <span>{</span>
				logger<span>.</span><span>debug</span><span>(</span><span>"Reinjecting dependencies for test context ["</span> <span>+</span> testContext <span>+</span> <span>"]."</span><span>)</span><span>;</span>
			<span>}</span>
			<span>injectDependencies</span><span>(</span>testContext<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>protected</span> <span>void</span> <span>injectDependencies</span><span>(</span><span>TestContext</span> testContext<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
		<span>Object</span> bean <span>=</span> testContext<span>.</span><span>getTestInstance</span><span>(</span><span>)</span><span>;</span>
		<span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> clazz <span>=</span> testContext<span>.</span><span>getTestClass</span><span>(</span><span>)</span><span>;</span>
		<span>AutowireCapableBeanFactory</span> beanFactory <span>=</span> testContext<span>.</span><span>getApplicationContext</span><span>(</span><span>)</span><span>.</span><span>getAutowireCapableBeanFactory</span><span>(</span><span>)</span><span>;</span>
		beanFactory<span>.</span><span>autowireBeanProperties</span><span>(</span>bean<span>,</span> <span>AutowireCapableBeanFactory</span><span>.</span>AUTOWIRE_NO<span>,</span> <span>false</span><span>)</span><span>;</span>
		beanFactory<span>.</span><span>initializeBean</span><span>(</span>bean<span>,</span> clazz<span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>AutowireCapableBeanFactory</span><span>.</span>ORIGINAL_INSTANCE_SUFFIX<span>)</span><span>;</span>
		testContext<span>.</span><span>removeAttribute</span><span>(</span>REINJECT_DEPENDENCIES_ATTRIBUTE<span>)</span><span>;</span>
	<span>}</span>
<span>}</span>	
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Mockito API</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/MockitoAPI/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/MockitoAPI/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<div><p>注意</p>
<p>这里只是介绍原生的Mockito的API,针对SpringBoot应用有更简单的调用方式</p>
</div>
<h2 id="一、mockito加载方式"> 一、Mockito加载方式</h2>
<p>Mockito可以配合JUnit使用,也可以单独使用。有两种方式来引入Mockito</p>
<h3 id="_1-1-方式-1-不依赖spring容器"> 1.1 方式:1 不依赖Spring容器</h3>
<p>如果你的单测不依赖容器,那么使用这种方式是比较方便和简介的。但是如果
依赖容器,我们是到JUnit的原理是只要发现有一个Runner就会返回,如果这里指定了
MockitoJUnitRunner那么SpringRunner就不会被使用。</p>
<p>指定MockitoJUnitRunner</p>
<div><pre><code>   <span>@RunWith</span><span>(</span><span>MockitoJUnitRunner</span><span>.</span><span>class</span><span>)</span>
   <span>public</span> <span>class</span> <span>ExampleTest</span> <span>{</span>
   
       <span>@Mock</span>
       <span>private</span> <span>List</span> list<span>;</span>
   
       <span>@Test</span>
       <span>public</span> <span>void</span> <span>shouldDoSomething</span><span>(</span><span>)</span> <span>{</span>
           list<span>.</span><span>add</span><span>(</span><span>100</span><span>)</span><span>;</span>
       <span>}</span>
   <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="_1-2-方式-2-依赖容器"> 1.2 方式:2 依赖容器</h3>
<p>方式2是依赖于Spring容器的,所以要求我们在单测方法执行前来通知Mockito来处理
他的逻辑,处理他说使用的注解。JUnit4的@Before注解就是做好的加载时机,因为我们
可以这样写。</p>
<div><pre><code>   <span>/**
     * 将单测类中依赖Mockito的属性,进行处理。
     * 帮我们实现 Mockito.mock()
     */</span>
    <span>@Before</span>
    <span>public</span> <span>void</span> <span>setUp</span><span>(</span><span>)</span> <span>{</span>
        <span>MockitoAnnotations</span><span>.</span><span>initMocks</span><span>(</span><span>this</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="二、mockito必知概念"> 二、Mockito必知概念</h2>
<h3 id="_2-1-完全模拟-mock"> 2.1 完全模拟 Mock</h3>
<p>什么是完全模拟,使用的注解就是@Mock。被Mock的对象,所有的方法都不会被
真正的执行。</p>
<h3 id="_2-2-部分模拟-spy"> 2.2 部分模拟 Spy</h3>
<p>部分模拟,使用的注解就是@Spy(间谍一样)。被声明的方法走Mock,没有声明的方法
还是由实例进行执行和反馈。</p>
<h2 id="三、代码实例"> 三、代码实例</h2>
<p>这里的例子我们为了启动快速,不依赖Spring容器。直接new出来对象。
另外多说一句,其实就算依赖Spring容器,当@Before方法执行前所有的示例其实也都是已经注入好的了。</p>
<p>下面所有的演示围绕这个类进行</p>
<div><pre><code><span>public</span> <span>class</span> <span>MockitoEmp</span> <span>{</span>
        <span>public</span> <span>String</span> <span>getName</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> <span>"真实的MockitoTest"</span><span>;</span>
        <span>}</span>

        <span>public</span> <span>Integer</span> <span>getAge</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> <span>23</span><span>;</span>
        <span>}</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="_3-1-mock"> 3.1 @Mock</h3>
<p>手动声明</p>
<div><pre><code><span>MockitoEmp</span> mock <span>=</span> <span>Mockito</span><span>.</span><span>mock</span><span>(</span><span>MockitoEmp</span><span>.</span><span>class</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><div><p>说明</p>
<p>前面说了这个是完全模拟,所有的动作都是模拟的。看下面代码颜色
标记的地方,我们只声明了getName使用Mock返回。但是当我们
调用getAge() 的时候竟然也是假数据。</p>
</div>
<p>基于注解和@Before自动声明</p>
<div><div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br></div><pre><code>
<span>public</span> <span>class</span> <span>MockitoTest</span> <span>{</span>

    <span>// 整个对象都是Mock的</span>
    <span>@Mock</span>
    <span>private</span> <span>MockitoEmp</span> mock <span>=</span> <span>new</span> <span>MockitoEmp</span><span>(</span><span>)</span><span>;</span>

    <span>/**
     * 将单测类中依赖Mockito的属性,进行处理。
     * 帮我们实现 Mockito.mock()
     */</span>
    <span>@Before</span>
    <span>public</span> <span>void</span> <span>setUp</span><span>(</span><span>)</span> <span>{</span>
        <span>MockitoAnnotations</span><span>.</span><span>initMocks</span><span>(</span><span>this</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Test</span>
    <span>public</span> <span>void</span> <span>testMock</span><span>(</span><span>)</span> <span>{</span>
        <span>Mockito</span><span>.</span><span>doReturn</span><span>(</span><span>"Mock数据"</span><span>)</span><span>.</span><span>when</span><span>(</span>mock<span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>;</span>
        <span>//等价于Mockito.when(mock.getName()).thenReturn("Mock数据");</span>
        <span>// Mock数据</span>
        <span>Assert</span><span>.</span><span>assertSame</span><span>(</span><span>"Mock数据"</span><span>,</span> mock<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// getAge() 方法没有用Mockito声明动作, 应该是多少呢?</span>
        <span>Assert</span><span>.</span><span>assertSame</span><span>(</span><span>0</span><span>,</span> mock<span>.</span><span>getAge</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 0</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>mock<span>.</span><span>getAge</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><h3 id="_3-2-spy"> 3.2 @Spy</h3>
<p>手动声明</p>
<div><pre><code><span>MockitoEmp</span> spy <span>=</span> <span>Mockito</span><span>.</span><span>spy</span><span>(</span><span>MockitoEmp</span><span>.</span><span>class</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><div><p>说明</p>
<p>Spy部分模拟,下面的例子和上面基本一样,唯一不一样的是我们吧 @Mock换成了@Spy。
此时getAge() 方法就不是模拟的了。</p>
</div>
<p>基于注解和@Before自动声明</p>
<div><div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><div>&nbsp;</div><br><br><br><br><br><br></div><pre><code>
<span>public</span> <span>class</span> <span>MockitoTest</span> <span>{</span>

    <span>// 整个对象都是Mock的</span>
    <span>@Mock</span>
    <span>private</span> <span>MockitoEmp</span> mock <span>=</span> <span>new</span> <span>MockitoEmp</span><span>(</span><span>)</span><span>;</span>

    <span>/**
     * 将单测类中依赖Mockito的属性,进行处理。
     * 帮我们实现 Mockito.mock()
     */</span>
    <span>@Before</span>
    <span>public</span> <span>void</span> <span>setUp</span><span>(</span><span>)</span> <span>{</span>
        <span>MockitoAnnotations</span><span>.</span><span>initMocks</span><span>(</span><span>this</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Test</span>
    <span>public</span> <span>void</span> <span>testSpy</span><span>(</span><span>)</span> <span>{</span>
        <span>Mockito</span><span>.</span><span>doReturn</span><span>(</span><span>"Mock数据"</span><span>)</span><span>.</span><span>when</span><span>(</span>spy<span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>;</span>
        <span>// Mock数据</span>
        <span>Assert</span><span>.</span><span>assertSame</span><span>(</span><span>"Mock数据"</span><span>,</span> spy<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// getAge() 方法没有用Mockito声明动作, 应该是多少呢?</span>
        <span>Assert</span><span>.</span><span>assertSame</span><span>(</span><span>23</span><span>,</span> spy<span>.</span><span>getAge</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 23</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>spy<span>.</span><span>getAge</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">事务回滚原理</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A%E5%8E%9F%E7%90%86/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A%E5%8E%9F%E7%90%86/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<p>在前文单测类注入中我们知道.JUnit提供了一些监听器,允许
当单测方法执行时候去对单测上下文进行调整。所以呢事务回滚也是基于
这里的特性完成的。<Version>基于SpringBoot 2.1.x版本分析</Version></p>
<p><img src="https://img.springlearn.cn/blog/learn_1617795655000.png" alt="" loading="lazy"></p>
<h3 id="源码分析"> 源码分析</h3>
<p>Spring中为了适配不通的数据库,提供了事务平台的概念。 <code>PlatformTransactionManager</code> 只要实现了该接口
就允许对事务进行控制。具体事务的控制是通过工具类来处理的。 <code>TransactionContextHolder</code> 可以获取当前线程
执行的事务上下文。JUnit通过该工具拿到事务的上下文,然后对此做响应的修改。具体的
修改逻辑见下文注释。两句话解释清楚。</p>
<p><code>TransactionalTestExecutionListener</code></p>
<p>伪代码分析</p>
<div><div><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code>    <span>// 单测方法执行前,移除容器原来的事务管理器,然后开启一个新的事务</span>
    <span>@Override</span>
	<span>public</span> <span>void</span> <span>beforeTestMethod</span><span>(</span><span>final</span> <span>TestContext</span> testContext<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
		<span>Method</span> testMethod <span>=</span> testContext<span>.</span><span>getTestMethod</span><span>(</span><span>)</span><span>;</span>
		<span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> testClass <span>=</span> testContext<span>.</span><span>getTestClass</span><span>(</span><span>)</span><span>;</span>
		<span>Assert</span><span>.</span><span>notNull</span><span>(</span>testMethod<span>,</span> <span>"Test method of supplied TestContext must not be null"</span><span>)</span><span>;</span>

		<span>TransactionContext</span> txContext <span>=</span> <span>TransactionContextHolder</span><span>.</span><span>removeCurrentTransactionContext</span><span>(</span><span>)</span><span>;</span>
		<span>Assert</span><span>.</span><span>state</span><span>(</span>txContext <span>==</span> <span>null</span><span>,</span> <span>"Cannot start new transaction without ending existing transaction"</span><span>)</span><span>;</span>

		<span>PlatformTransactionManager</span> tm <span>=</span> <span>null</span><span>;</span>
		<span>TransactionAttribute</span> transactionAttribute <span>=</span> <span>this</span><span>.</span>attributeSource<span>.</span><span>getTransactionAttribute</span><span>(</span>testMethod<span>,</span> testClass<span>)</span><span>;</span>

		<span>if</span> <span>(</span>transactionAttribute <span>!=</span> <span>null</span><span>)</span> <span>{</span>
			transactionAttribute <span>=</span> <span>TestContextTransactionUtils</span><span>.</span><span>createDelegatingTransactionAttribute</span><span>(</span>testContext<span>,</span>
				transactionAttribute<span>)</span><span>;</span>

			<span>if</span> <span>(</span>logger<span>.</span><span>isDebugEnabled</span><span>(</span><span>)</span><span>)</span> <span>{</span>
				logger<span>.</span><span>debug</span><span>(</span><span>"Explicit transaction definition ["</span> <span>+</span> transactionAttribute <span>+</span>
						<span>"] found for test context "</span> <span>+</span> testContext<span>)</span><span>;</span>
			<span>}</span>

			<span>if</span> <span>(</span>transactionAttribute<span>.</span><span>getPropagationBehavior</span><span>(</span><span>)</span> <span>==</span> <span>TransactionDefinition</span><span>.</span>PROPAGATION_NOT_SUPPORTED<span>)</span> <span>{</span>
				<span>return</span><span>;</span>
			<span>}</span>

			tm <span>=</span> <span>getTransactionManager</span><span>(</span>testContext<span>,</span> transactionAttribute<span>.</span><span>getQualifier</span><span>(</span><span>)</span><span>)</span><span>;</span>
			<span>Assert</span><span>.</span><span>state</span><span>(</span>tm <span>!=</span> <span>null</span><span>,</span>
					<span>(</span><span>)</span> <span>-></span> <span>"Failed to retrieve PlatformTransactionManager for @Transactional test: "</span> <span>+</span> testContext<span>)</span><span>;</span>
		<span>}</span>

		<span>if</span> <span>(</span>tm <span>!=</span> <span>null</span><span>)</span> <span>{</span>
			txContext <span>=</span> <span>new</span> <span>TransactionContext</span><span>(</span>testContext<span>,</span> tm<span>,</span> transactionAttribute<span>,</span> <span>isRollback</span><span>(</span>testContext<span>)</span><span>)</span><span>;</span>
			<span>runBeforeTransactionMethods</span><span>(</span>testContext<span>)</span><span>;</span>
			txContext<span>.</span><span>startTransaction</span><span>(</span><span>)</span><span>;</span>
			<span>TransactionContextHolder</span><span>.</span><span>setCurrentTransactionContext</span><span>(</span>txContext<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>
	
	<span>// 单测方法执行结束后,结束事务然后回滚或提交</span>
	<span>@Override</span>
	<span>public</span> <span>void</span> <span>afterTestMethod</span><span>(</span><span>TestContext</span> testContext<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
		<span>Method</span> testMethod <span>=</span> testContext<span>.</span><span>getTestMethod</span><span>(</span><span>)</span><span>;</span>
		<span>Assert</span><span>.</span><span>notNull</span><span>(</span>testMethod<span>,</span> <span>"The test method of the supplied TestContext must not be null"</span><span>)</span><span>;</span>

		<span>TransactionContext</span> txContext <span>=</span> <span>TransactionContextHolder</span><span>.</span><span>removeCurrentTransactionContext</span><span>(</span><span>)</span><span>;</span>
		<span>// If there was (or perhaps still is) a transaction...</span>
		<span>if</span> <span>(</span>txContext <span>!=</span> <span>null</span><span>)</span> <span>{</span>
			<span>TransactionStatus</span> transactionStatus <span>=</span> txContext<span>.</span><span>getTransactionStatus</span><span>(</span><span>)</span><span>;</span>
			<span>try</span> <span>{</span>
				<span>// If the transaction is still active...</span>
				<span>if</span> <span>(</span>transactionStatus <span>!=</span> <span>null</span> <span>&amp;&amp;</span> <span>!</span>transactionStatus<span>.</span><span>isCompleted</span><span>(</span><span>)</span><span>)</span> <span>{</span>
					txContext<span>.</span><span>endTransaction</span><span>(</span><span>)</span><span>;</span>
				<span>}</span>
			<span>}</span>
			<span>finally</span> <span>{</span>
				<span>runAfterTransactionMethods</span><span>(</span>testContext<span>)</span><span>;</span>
			<span>}</span>
		<span>}</span>
	<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">单元测试专题</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1617880083000.png" alt="" loading="lazy"></p>
<p>沉淀、分享、成长、让自己和他人都有所收货。</p>
<h2 id="一、前言"> 一、前言</h2>
<p>本系列文章主要的目的是提高大家对代码的单测意识, 其中文章主要会分享单测过程中,常见的测试场景及这些场景的解决方案和处理思路。
为了能使大家更好的了解单元测试,作为程序员首先从源码入手,分享JUnit的运行原理。在先了解了JUnit的原理后,再来回顾我们的问题场景, 就自然而然的从根源深处解决大家的测单痛点以及大家对单测框架不熟悉的情况。</p>
<h2 id="二、单测的意义"> 二、单测的意义</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1617886822000.png" alt="" loading="lazy"></p>
<p>很多人说单测没有意义, 这是完全不正确的思想。相信随着码龄增加你会越发的认同这句话。据国外研究统计软件系统中最大的成本是
维护成本,所以你能看到凡是开源的框架单测一定是非常丰富的,因为它要去迭代升级,要去向下兼容版本。如果没有单测那就是完全的黑盒。
是好是坏听从天意,这是没有质量保证的。这点是软件系统都具有的所以说就这一点,就证明了单测的必须性。下面谈几个不写单元测试的说法。</p>
<h3 id="_2-1-压缩开发时间-任务延期"> 2.1 压缩开发时间,任务延期</h3>
<p>或许说中国的国情跟国外的不一样,中国的系统或者说是业务系统更新的快,单测用完就失效。写单测会压缩开发时间,导致任务延期。从眼下看是压缩了开发的时间,但是它提高了开发的质量,一定程度上减少了系统的维护成本。其次单测并不是说要对你所有的方法进行测试, 这个要针对业务系统情况,把系统的核心业务中使用到的核心方法进行详细的单测维护即可。系统的核心逻辑是不会经常变动的,
所以这部分的单测就是你整个单测的核心。</p>
<h3 id="_2-2-公司性质"> 2.2 公司性质</h3>
<p>像一般政府的项目基本都会给到外部的公司来竞争,部分的外包公司只注重交付,不注重质量。或者说这个项目就是一个xx工程, 没有实用价值。
只要上线就行。也不用维护。对于这种的确实现状是都不会写单元测试。(因为整个项目就是没有任何实用价值)</p>
<h3 id="_2-3-别人都不写-我为啥要写"> 2.3 别人都不写,我为啥要写</h3>
<p>代码是有温度的,养成好的习惯从自己做起。好习惯会传染,需要一个<Highlight color='green'>好的带头人</Highlight>。团队内部成员每个人都有自己负责的功能区域。
只要每个人针对自己的功能区域的核心计算逻辑写好单测,那么一定是好处大于坏处的。另外要写在平时,不要专门找时间来写代码。那样就容易把单测当做是任务去完成,就失去了写单测的意义。</p>
<Highlight color="red">相信你所认为虽然很正确,但是做起来很傻逼的事情,一定有人在默默的坚持着。努力做一个优秀的人。</Highlight>
<h3 id="_2-4-代码都测完了-要测试干嘛"> 2.4 代码都测完了,要测试干嘛</h3>
<p>自己测完了,要测试干嘛。首先如果你有这样的想法,那么一定是因为你不了解测试的工作。测试是开发的补充,他一定不是开发的保姆。测试
是对应用或系统的整体场景或者说功能的验证, 他不能对你代码的最小单元进行验证。所谓代码的最小单元一定是开发同学最了解的,代码的最小单元
就是你定义的代码块,方法,技术框架。这部分测试同学是无法帮你验证的。我们这里举一个例子。</p>
<p>软件工程师好比是盖大楼的,具体每一堵墙砖头如何摆放,房间如何设计,是否关注采光这是你设计师要干的事情,而测试好比质量验收,会看你整栋
大楼是否有倾斜,水电煤气是否可以使用。测试同学并不了解所有的细节。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1618206722000.png" alt="" loading="lazy"></p>
<p>开发和测试看到的东西不是完全一样的,越往上测试的黑盒越大。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1618051810000.png" alt="" loading="lazy"></p>
<h3 id="_2-5-应付覆盖率指标"> 2.5 应付覆盖率指标</h3>
<p>当然如果公司对这个有要求,一定会有应付的办法。最差的情况就是全部都是为了应付而写代码。从价值观上来看,这是不对的。从实用性上来看这是没有任何价值的。那么如何解决这个办法呢? 价值观来保证咯。那么就需要一个指标了(非硬性指标), 把数据量化展示出来,作为应用质量的一个参考的因素。
就算你全是应付而写,也一定有一定的价值。</p>
<p>另外要说一点的是<Highlight color="red">单测行覆盖率高不代表应用的质量就一定高,</Highlight>但是单测行覆盖率低一定代表着这个应用出现质量问题的可能性就越大。
这无疑增加了业务风险和测试成本。为了减少业务风险和测试成本,希望大家提高对单测的意识。</p>
<p><strong>那么我们在上升一点总结下如何提高应用的质量呢? 请看下文</strong></p>
<h2 id="三、应用质量的看法"> 三、应用质量的看法</h2>
<p>应用质量如何来衡量, 这是一个完全可以通过指标来进行衡量的。那么究竟如何指标化呢? 这里首先对应用质量进行一个拆分。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1617889750000.png" alt="" loading="lazy"></p>
<p>可以将应用质量分为两种:</p>
<ol>
<li>代码编程质量(编程风格)</li>
<li>业务编程质量(业务是否清晰,异常场景的考虑)</li>
</ol>
<h3 id="_3-1-代码编程质量"> 3.1 代码编程质量</h3>
<p>代码编程质量往往只的是开发人员的编程风格,基于团队成员风格的相似度。
也可以说是代码的可读性,可维护性,方法的复杂度,方法的执行效率。这个是最容易指标化处理的。
基于规则引擎,进行静态代码扫描就可以扫描出。Sonar 或者 阿里规约都可以完成。
他们都会把问题分为四个等级Blocker, Critical, Major, Minor/Trivial。</p>
<h4 id="_3-1-1-blocker"> 3.1.1  Blocker</h4>
<p>即系统无法执行、崩溃或严重资源不足、应用模块无法启动或异常退出、无法测试、造成系统不稳定。</p>
<h4 id="_3-1-2-critical"> 3.1.2 Critical</h4>
<p>即影响系统功能或操作，主要功能存在严重缺陷，但不会影响到系统稳定性。</p>
<h4 id="_3-1-3-major"> 3.1.3 Major</h4>
<p>即界面、性能缺陷、兼容性。</p>
<h4 id="_3-1-4-minor-trivial"> 3.1.4 Minor/Trivial</h4>
<p>即易用性及建议性问题。</p>
<Highlight color="red">质量分计算</Highlight>
<div><p>质量分计算</p>
<p>100-(Blocker<em>100+Critical</em>10+Major*1)/(代码数/100)</p>
<ul>
<li>Blocker 占比100%,因为是比较严重的问题</li>
<li>Critical 低于Blocker占比10%</li>
<li>Major 性能缺陷占比1%</li>
</ul>
</div>
<h3 id="_2-2-业务编程质量"> 2.2 业务编程质量</h3>
<ul>
<li>对软件设计的最小单位进行正确性检测，如函数或一个类的方法。</li>
<li>系统集成测试</li>
</ul>
<p><img src="https://img.springlearn.cn/blog/learn_1618206722000.png" alt="" loading="lazy"></p>
<h4 id="_2-2-1-ut由开发同学保证"> 2.2.1 UT由开发同学保证</h4>
<p>开发同学进行最小单元测试, 数据如何进行衡量呢?</p>
<p>基于Jenkins的 <code>Jcoco</code> 插件,会统计行覆盖率，类覆盖率，复杂方法覆盖率等。输出一个
可视化的图表。</p>
<h4 id="_2-2-2-it由自动化测试同学编写"> 2.2.2 IT由自动化测试同学编写</h4>
<h2 id="四、代码编程质量例子"> 四、代码编程质量例子</h2>
<p>面向对象的思想写入复用性高的代码</p>
<div><pre><code>
<span>// 姓名，家乡，大学，专业，兴趣爱好，单位职称 </span>
<span>public</span> <span>interface</span> <span>Introduce</span><span>{</span>
     <span>// 这是一个介绍类,负责介绍自己</span>
     <span>public</span> <span>void</span> <span>introduce</span><span>(</span><span>)</span><span>;</span>
<span>}</span>

<span>public</span> <span>class</span> <span>XiaoMing</span> <span>implements</span> <span>Introduce</span><span>{</span>

     <span>public</span> <span>void</span> <span>introduce</span><span>(</span><span>)</span><span>{</span>
         <span>sout</span><span>(</span><span>"我叫小明"</span><span>)</span>
         <span>sout</span><span>(</span><span>"我的老家是河南南阳"</span><span>)</span>
         <span>sout</span><span>(</span><span>"我的家乡就坐落在河南南阳邓州市"</span><span>)</span>
         <span>sout</span><span>(</span><span>"邓州市一个美丽的城市,是中国邓姓的发源地"</span><span>)</span>
         <span>sout</span><span>(</span><span>"邓州也是河南境内人口最多的一个县级城市"</span><span>)</span>
         <span>sout</span><span>(</span><span>"我大学是在河南大学"</span><span>)</span>
         <span>sout</span><span>(</span>"河南大学简称河大，是一所位于中国河南省开封市涵盖文、史、哲、经、管、
         法、理、工、医、农、教育、艺术等<span>12</span>个学科门类的省部共建型综合性公立大学。"<span>)</span>
         <span>sout</span><span>(</span><span>"我的专业是计算机与信息工程"</span><span>)</span>
         <span>sout</span><span>(</span><span>"我的个人爱好是写博客、打游戏、做美食、偶会也会跑跑步"</span><span>)</span>
         <span>sout</span><span>(</span><span>"从业xx年,目前在公司的职称是xxx"</span><span>)</span>
     <span>}</span>
<span>}</span>

<span>public</span> <span>class</span> <span>XiaoMing</span> <span>implements</span> <span>Introduce</span><span>{</span>

     <span>private</span> <span>void</span> <span>introduceHometown</span><span>(</span><span>)</span><span>{</span>
         <span>sout</span><span>(</span><span>"我的老家是河南南阳"</span><span>)</span>
         <span>sout</span><span>(</span><span>"我的家乡就坐落在河南南阳邓州市"</span><span>)</span>
         <span>sout</span><span>(</span><span>"邓州市一个美丽的城市,是中国邓姓的发源地"</span><span>)</span>
         <span>sout</span><span>(</span><span>"邓州也是河南境内人口最多的一个县级城市"</span><span>)</span>
     <span>}</span>
     
     <span>private</span> <span>void</span> <span>introduceSchool</span><span>(</span><span>)</span><span>{</span>
         <span>sout</span><span>(</span><span>"我大学是在河南大学"</span><span>)</span>
         <span>sout</span><span>(</span>"河南大学简称河大，是一所位于中国河南省开封市涵盖文、史、哲、经、管、
         法、理、工、医、农、教育、艺术等<span>12</span>个学科门类的省部共建型综合性公立大学。"<span>)</span>
     <span>}</span>
     
     <span>private</span> <span>void</span> <span>introduceMajor</span><span>(</span><span>)</span><span>{</span>
         <span>sout</span><span>(</span><span>"我的专业是计算机与信息工程"</span><span>)</span>
     <span>}</span>
     
     <span>private</span> <span>void</span> <span>introduceInterest</span><span>(</span><span>)</span><span>{</span>
         <span>sout</span><span>(</span><span>"我的个人爱好是写博客、打游戏、做美食、偶会也会跑跑步"</span><span>)</span>
     <span>}</span>
     
     <span>// 将任务进行拆分,拆分的维度是逻辑顺序,然后抽离出方法,抽离的维度是单一职责。</span>
     <span>// 这样的好处是工能化,模块化,便于复用。</span>
     <span>public</span> <span>void</span> <span>introduce</span><span>(</span><span>)</span><span>{</span>
         <span>sout</span><span>(</span><span>"我叫小明"</span><span>)</span><span>;</span>
         <span>introduceHometown</span><span>(</span><span>)</span><span>;</span>
         <span>introduceSchool</span><span>(</span><span>)</span><span>;</span>
         <span>introduceMajor</span><span>(</span><span>)</span><span>;</span>
         <span>introduceInterest</span><span>(</span><span>)</span><span>;</span>
         <span>sout</span><span>(</span><span>"从业xx年,目前在公司的职称是xxx"</span><span>)</span><span>;</span>
     <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br></div></div><p>有人会说了,明明很简单就搞定了,为啥多写了这么多方法。这是因为你的思维没有转变过来,简单来说就是要
学会用面向对象的方法去写代码,不要写面向过程的代码了。如果高级点说就是代码层面上的领域驱动。
领域驱动和面向过程最大的相同就是思想上都是要对问题进行拆分成最小粒度,已解决代码冗余重复,以方便重复组装利用
,以达到快速简单维护的目的。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">SpringBoot Testing</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/SpringBootTesting/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/SpringBootTesting/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1618140868000.png" alt="" loading="lazy"></p>
<p>前面我们对Mockito的用法有了一个了解,这里告诉大家一个好消息,SpringBoot已经帮我们继承了
这些框架,而且提供了更加简单好用的API。</p>
<h2 id="一、mockito加载方式"> 一、Mockito加载方式</h2>
<p>前面我们说了两种加载方式 <code>MockitoJUnitRunner</code> 和 <code>MockitoAnnotations.initMocks(this);</code>
这些在SpringBoot中都不需要了。</p>
<p>所以这一段就是废话, 不用在看了。但是相信你已经看完了。</p>
<h2 id="二、mockito必知概念"> 二、Mockito必知概念</h2>
<p>这些概念,参考Mockito章节,概念统统保留。</p>
<h3 id="_2-1-完全模拟-mockbean"> 2.1 完全模拟 MockBean</h3>
<p>只需要将@Mock 换成 @MockBean即可</p>
<h3 id="_2-2-部分模拟-spybean"> 2.2 部分模拟 SpyBean</h3>
<p>只需要将@Spy 换成 @MockBean即可。主要这里有一个小坑。
如果是Feign接口,使用@SpyBean会报错。提示final class不能被代理。</p>
<p>原因是SpringBoot依赖的Mockito版本太古老了,是2.23.4。从Mockito2.7.6
开始已经解决了这个问题, 我们可以通过引入下面依赖解决。</p>
<div><pre><code> <span><span><span>&lt;</span>dependency</span><span>></span></span>
    <span><span><span>&lt;</span>groupId</span><span>></span></span>org.mockito<span><span><span>&lt;/</span>groupId</span><span>></span></span>
    <span><span><span>&lt;</span>artifactId</span><span>></span></span>mockito-inline<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
    <span><span><span>&lt;</span>version</span><span>></span></span>3.3.3<span><span><span>&lt;/</span>version</span><span>></span></span>
<span><span><span>&lt;/</span>dependency</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>解决方案就是帮我们新增了一个配置,启动Mockit的插件来生成代理。
大概原理就是及不实用JDK代理,也不是Cglib代理。
<code>DefaultMockitoPlugins</code> &amp; <code>InlineByteBuddyMockMaker</code>
<img src="https://img.springlearn.cn/blog/learn_1617877205000.png" alt="" loading="lazy"></p>
<h2 id="三、代码实例"> 三、代码实例</h2>
<h3 id="_3-1-mockbean-完全模拟"> 3.1 @MockBean 完全模拟</h3>
<p>没有被声明的方法返回值,对象类型返回null,基本类型是返回默认类型。</p>
<p>@MockBean完全模拟</p>
<div><pre><code>

<span>public</span> <span>class</span> <span>TradeShopIntegrationImplTest</span> <span>extends</span> <span>BaseApplicationTest</span> <span>{</span>

    <span>@Autowired</span>
    <span>private</span> <span>TradeShopIntegration</span> shopBrandIntegration<span>;</span>

    <span>@MockBean</span>
    <span>private</span> <span>BrandServiceApi</span> brandService<span>;</span>
    
    <span>@MockBean</span>
    <span>private</span> <span>GoodsStockApi</span> goodsStockApi<span>;</span>
    
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>testGetAllBrands</span><span>(</span><span>)</span> <span>{</span>
        <span>Mockito</span><span>.</span><span>doReturn</span><span>(</span><span>JsonResult</span><span>.</span><span>failure</span><span>(</span><span>"fail"</span><span>)</span><span>)</span><span>.</span><span>when</span><span>(</span>goodsStockApi<span>)</span><span>.</span><span>getSkuList</span><span>(</span><span>Mockito</span><span>.</span><span>any</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 底层调用的是goodsStockApi.getSkuList()</span>
        <span>List</span><span><span>&lt;</span><span>GoodsBaseMsgDTO</span><span>></span></span> goodsBaseMsgDTOS <span>=</span> shopBrandIntegration<span>.</span><span>queryAllSku</span><span>(</span><span>)</span><span>;</span>
        <span>// 因为前面声明了返回fail。所以这里没有数据返回。</span>
        <span>JsonConsoleUtils</span><span>.</span><span>println</span><span>(</span>goodsBaseMsgDTOS<span>)</span><span>;</span>
        <span>// 这里因为使用的是Mock完全模拟,所以尽管前面没有声明返回值,就默认返回null</span>
        <span>List</span><span><span>&lt;</span><span>OutBrandDTO</span><span>></span></span> allBrands <span>=</span> shopBrandIntegration<span>.</span><span>getAllBrands</span><span>(</span><span>)</span><span>;</span>
        <span>JsonConsoleUtils</span><span>.</span><span>println</span><span>(</span>allBrands<span>)</span><span>;</span>
    <span>}</span>
    
<span>}</span>    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><h3 id="_3-1-spybean-部分模拟"> 3.1 @SpyBean 部分模拟</h3>
<p>没有被声明的方法返回值,走原来逻辑。</p>
<p>@SpyBean部分模拟</p>
<div><div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br></div><pre><code>

<span>public</span> <span>class</span> <span>TradeShopIntegrationImplTest</span> <span>extends</span> <span>BaseApplicationTest</span> <span>{</span>

    <span>@Autowired</span>
    <span>private</span> <span>TradeShopIntegration</span> shopBrandIntegration<span>;</span>

    <span>@MockBean</span>
    <span>private</span> <span>BrandServiceApi</span> brandService<span>;</span>
    
    <span>@MockBean</span>
    <span>private</span> <span>GoodsStockApi</span> goodsStockApi<span>;</span>
    
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>testGetAllBrands</span><span>(</span><span>)</span> <span>{</span>
        <span>Mockito</span><span>.</span><span>doReturn</span><span>(</span><span>JsonResult</span><span>.</span><span>failure</span><span>(</span><span>"fail"</span><span>)</span><span>)</span><span>.</span><span>when</span><span>(</span>goodsStockApi<span>)</span><span>.</span><span>getSkuList</span><span>(</span><span>Mockito</span><span>.</span><span>any</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 底层调用的是goodsStockApi.getSkuList()</span>
        <span>List</span><span><span>&lt;</span><span>GoodsBaseMsgDTO</span><span>></span></span> goodsBaseMsgDTOS <span>=</span> shopBrandIntegration<span>.</span><span>queryAllSku</span><span>(</span><span>)</span><span>;</span>
        <span>// 因为前面声明了返回fail。所以这里没有数据返回。</span>
        <span>JsonConsoleUtils</span><span>.</span><span>println</span><span>(</span>goodsBaseMsgDTOS<span>)</span><span>;</span>
        <span>// 这里跟上面的区别就是,如果没有声明返回值,就走原来的方法。</span>
        <span>List</span><span><span>&lt;</span><span>OutBrandDTO</span><span>></span></span> allBrands <span>=</span> shopBrandIntegration<span>.</span><span>getAllBrands</span><span>(</span><span>)</span><span>;</span>
        <span>JsonConsoleUtils</span><span>.</span><span>println</span><span>(</span>allBrands<span>)</span><span>;</span>
    <span>}</span>
    
<span>}</span>    
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">单测维护</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E5%8D%95%E6%B5%8B%E7%BB%B4%E6%8A%A4/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E5%8D%95%E6%B5%8B%E7%BB%B4%E6%8A%A4/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<div><p>单测维护</p>
</div>
<h2 id="一、考虑不要跳过单测"> 一、考虑不要跳过单测</h2>
<p>目前我们都是跳过单测的,测试都是每次改造完成后,手工去进行验证。
验证没有问题就提测了。这样的单测是没有维护性的。</p>
<p>当我们建立起单测体系后,真正重视单测维护后,就可以考虑不要跳过单元测试
这样,每次编译时候都可以执行一遍单测用例,观察失败的单测试服是这次改造的bug导致。</p>
<h2 id="二、后期维护单测"> 二、后期维护单测</h2>
<p>开发时间紧张,没有进行单测就提测了,测试也通过了。对于这类代码后期可以补充上单测。方便后面进行业务调整时候,进行单测验证。</p>
<p>只有这样开发人员才更有底气。</p>
<h2 id="三、售后服务"> 三、售后服务</h2>
<p>应用Owner要督促,应用成员要重视。做好应用质量把控。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">命名规则</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<div><p>命名规则</p>
<p>单测类: 类名 + <code>Test</code> 整体大驼峰</p>
<p>单测方法: <code>test</code> + 方法名 整体小驼峰</p>
</div>
<h3 id="保证目录结构是一致的"> 保证目录结构是一致的</h3>
<p>在这里有个误区,发现很多同学都是随意去创建测试类,其实这不是一个好的习惯,在Maven项目中,
要尽量保证测试类与被测类的目录结构是一致的。如下图一样。这样的好处是,我们可以快速在
这两个类中进行快捷键跳转,也方便我们去新增测试方法。<Highlight color="green">跳转快捷键和创建快捷键保持一致,见下文.</Highlight></p>
<p><img src="https://img.springlearn.cn/blog/learn_1618123124000.png" alt="" loading="lazy"></p>
<p>其实Idea已经为我们提供了快捷操作,如下图。</p>
<p><img src="/junit.gif" alt="" loading="lazy"></p>
<h3 id="快捷键"> 快捷键</h3>
<p><img src="https://img.springlearn.cn/blog/learn_1618036976000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">启动缓慢</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E5%90%AF%E5%8A%A8%E7%BC%93%E6%85%A2/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E5%90%AF%E5%8A%A8%E7%BC%93%E6%85%A2/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<div><p>启动缓慢分析</p>
<p>当应用中拥有大对象,可能会导致单侧启动比较慢,针对这种问题有不同的解决方案</p>
</div>
<h3 id="springboot-2-2-解决方案"> SpringBoot 2.2 解决方案</h3>
<div><pre><code>spring.main.lazy-initialization = true
</code></pre>
<div><span>1</span><br></div></div><p>SpringApplication 会自动添加一个叫 <code>LazyInitializationBeanFactoryPostProcessor</code>的处理器
<img src="https://img.springlearn.cn/blog/learn_1617787733000.png" alt="" loading="lazy"></p>
<h3 id="springboot-2-2-以前"> SpringBoot 2.2 以前</h3>
<p>给应用上下文提前装载一个类似的处理器,然后通过 <code>BeanFactoryPostProcessor</code> 在容器刷新前循环将 <code>BeanDefinition</code> 声明懒加载</p>
<div><pre><code><span>public</span> <span>class</span> <span>BeanLazyApplicationContextInitializer</span> <span>implements</span> <span>ApplicationContextInitializer</span><span><span>&lt;</span><span>ConfigurableApplicationContext</span><span>></span></span> <span>{</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>initialize</span><span>(</span><span>ConfigurableApplicationContext</span> applicationContext<span>)</span> <span>{</span>
        applicationContext<span>.</span><span>addBeanFactoryPostProcessor</span><span>(</span><span>new</span> <span>LazyBeanDefinitionPostProcessor</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>class</span> <span>LazyBeanDefinitionPostProcessor</span> <span>implements</span> <span>BeanFactoryPostProcessor</span><span>,</span> <span>Ordered</span> <span>{</span>

        <span>@Override</span>
        <span>public</span> <span>void</span> <span>postProcessBeanFactory</span><span>(</span><span>ConfigurableListableBeanFactory</span> beanFactory<span>)</span> <span>throws</span> <span>BeansException</span> <span>{</span>
            <span>for</span> <span>(</span><span>String</span> beanName <span>:</span> beanFactory<span>.</span><span>getBeanDefinitionNames</span><span>(</span><span>)</span><span>)</span> <span>{</span>
                <span>BeanDefinition</span> beanDefinition <span>=</span> beanFactory<span>.</span><span>getBeanDefinition</span><span>(</span>beanName<span>)</span><span>;</span>
                <span>if</span> <span>(</span>beanDefinition <span>instanceof</span> <span>AbstractBeanDefinition</span><span>)</span> <span>{</span>
                    beanDefinition<span>.</span><span>setLazyInit</span><span>(</span><span>true</span><span>)</span><span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>

        <span>@Override</span>
        <span>public</span> <span>int</span> <span>getOrder</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> <span>Ordered</span><span>.</span>HIGHEST_PRECEDENCE<span>;</span>
        <span>}</span>
    <span>}</span>

<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><div><p>测试引导类配置变更</p>
<ul>
<li>@ContextConfiguration 通过容器初始化去新增处理器</li>
<li>@ActiveProfiles       指定测试环境激活的配置是local</li>
</ul>
</div>
<p>@ContextConfiguration添加处理器</p>
<div><pre><code><span>@Slf4j</span>
<span>@ActiveProfiles</span><span>(</span><span>{</span><span>"local"</span><span>}</span><span>)</span>
<span>@ContextConfiguration</span><span>(</span>initializers <span>=</span> <span>{</span><span>BeanLazyApplicationContextInitializer</span><span>.</span><span>class</span><span>}</span><span>)</span>
<span>// 使用Spring容器引导</span>
<span>@RunWith</span><span>(</span><span>SpringRunner</span><span>.</span><span>class</span><span>)</span>
<span>@SpringBootTest</span><span>(</span>classes <span>=</span> <span>{</span><span>CenterProviderApplication</span><span>.</span><span>class</span><span>}</span><span>)</span> <span>// 指定启动类</span>
<span>public</span> <span>class</span> <span>BaseApplicationTest</span> <span>{</span>
    
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="如何确定版本"> 如何确定版本?</h3>
<p><code>Idea</code> 中搜索 <code>@SpringApplication</code> 查看所在的包
<img src="https://img.springlearn.cn/blog/learn_1617787113000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">使用断言</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E4%BD%BF%E7%94%A8%E6%96%AD%E8%A8%80/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E4%BD%BF%E7%94%A8%E6%96%AD%E8%A8%80/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<div><p>断言</p>
<p>单测方法尽可能去使用断言,明确方法的执行结果</p>
</div>
<h2 id="一、单测的目的"> 一、单测的目的</h2>
<p>我们单测的目的就是为了确定,被测试的方法或者是接口是否符合业务要求。
其中一些方法是只要跑成功就算成功了,但是其实大部分方法还是要看其中的返回值是否符合预期。</p>
<p>在平时的开发中发现许多同学只是喜欢把结果打印出来,人工去验证数据。这其实就跟JUnit的口号相违背了。
JUnit的口号: <Highlight color="green">keep the bar green to keep the code clean。</Highlight></p>
<p><img src="/junit-success.gif" alt="" loading="lazy"></p>
<h3 id="_1-1-正确的单测一定是有断言的"> 1.1 正确的单测一定是有断言的</h3>
<p>断言明确执行结果,如果你要看数据也可以把结果打印出来。但是断言也要加上。
<code>JUnit</code> 为我们提供了一些辅助的函数，就是用来帮助我们来判断被测试的方法是否如我们预期的效果一样正常执行。</p>
<h2 id="二、断言api"> 二、断言API</h2>
<h3 id="_2-1-assertequals"> 2.1 assertEquals</h3>
<ul>
<li>assertEquals(Object expected, Object actual)</li>
<li>assertEquals(String message, Object expected, Object actual)</li>
</ul>
<p>String message： 可选参数，将在发生错误时报告这个消息
Object expected： 期望值，一般为用户指定的内容
Object actual： 被测试的代码实际返回的结果</p>
<h3 id="_2-2-asserttrue-与-assertfalse"> 2.2 assertTrue 与 assertFalse</h3>
<ul>
<li>assertTrue(boolean condition)</li>
<li>assertTrue(String message, boolean condition)</li>
</ul>
<p>String message： 可选参数，将在发生错误时报告这个消息
boolean condition：待验证的 Boolean 类型值</p>
<p>assertTrue 该断言用来验证给定的布尔型值是否为真，如果结果为假，则验证失败；
相反，assertFalse 用来验证给定的布尔型值是否为假，如果结果为真，则验证失败。</p>
<h3 id="_2-3-assertnull-与-assertnotnull"> 2.3 assertNull 与 assertNotNull</h3>
<ul>
<li>assertNull(Object object)</li>
<li>assertNull(String message, Object object)</li>
</ul>
<p>String message： 可选参数，将会在发生错误时报告这个消息
Object object： 待验证是否为 Null 的对象</p>
<p>assertNull 该断言用来验证给定的对象是否为 Null ,如果给定对象为 非Null，则验证失败。
相反，assertNotNull 用来验证给定的对象是否为 非Null，如果为 Null，则验证失败。</p>
<h3 id="_2-4-assertsame-与-assertnotsame"> 2.4 assertSame 与 assertNotSame</h3>
<ul>
<li>assertSame(Object expected, Object actual)</li>
<li>assertSame(String message, Object expected, Object actual)</li>
</ul>
<p>String message： 可选参数，将会在发生错误时报告这个消息
Object expected：期望值
Object actual：被测试代码返回的实际值</p>
<p>assertSame 该断言用来验证 expected 和 actual 的引用是否为同一个对象的引用，如果不是同一引用，则验证失败。
相反，assertNotSame 用来验证 expected 和 actual 的引用是否为不同对象的引用，如果为同一对象引用，则验证失败。</p>
<h3 id="_2-5-fail"> 2.5 Fail</h3>
<ul>
<li>Fail()</li>
<li>Fail(String message)</li>
</ul>
<p>String message是个可选参数，假如提供，将会在发生错误时报告这个消息。</p>
<p>该断言会使测试立即失败，通常用在测试不能达到的分支上（如异常）。</p>
<h2 id="三、断言匹配"> 三、断言匹配</h2>
<p>依赖包</p>
<div><pre><code><span>import</span> <span>org<span>.</span>hamcrest<span>.</span></span><span>Matchers</span><span>;</span>
<span>import</span> <span>org<span>.</span>hamcrest<span>.</span>core<span>.</span></span><span>AllOf</span><span>;</span>
<span>import</span> <span>org<span>.</span>hamcrest<span>.</span>core<span>.</span></span><span>AnyOf</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="_3-1-matchers匹配器"> 3.1 Matchers匹配器</h3>
<div><pre><code>        <span>// 是否相等</span>
        <span>Assert</span><span>.</span><span>assertThat</span><span>(</span><span>2</span><span>,</span> <span>Matchers</span><span>.</span><span>is</span><span>(</span><span>2</span><span>)</span><span>)</span><span>;</span>
        <span>// 2 小于等于2</span>
        <span>Assert</span><span>.</span><span>assertThat</span><span>(</span><span>2</span><span>,</span><span>Matchers</span><span>.</span><span>lessThanOrEqualTo</span><span>(</span><span>2</span><span>)</span><span>)</span><span>;</span>
        <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span><span>String</span><span>></span></span> map <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        map<span>.</span><span>put</span><span>(</span><span>"name"</span><span>,</span><span>"jay"</span><span>)</span><span>;</span>
        <span>// map 中是否包含key为name的元素</span>
        <span>Assert</span><span>.</span><span>assertThat</span><span>(</span>map<span>,</span><span>Matchers</span><span>.</span><span>hasKey</span><span>(</span><span>"name"</span><span>)</span><span>)</span><span>;</span>
        <span>// map 中是否包含value为jay的元素</span>
        <span>Assert</span><span>.</span><span>assertThat</span><span>(</span>map<span>,</span><span>Matchers</span><span>.</span><span>hasValue</span><span>(</span><span>"jay"</span><span>)</span><span>)</span><span>;</span>
        <span>// map 中是否包含name等于jay的元素</span>
        <span>Assert</span><span>.</span><span>assertThat</span><span>(</span>map<span>,</span><span>Matchers</span><span>.</span><span>hasEntry</span><span>(</span><span>"name"</span><span>,</span><span>"jay"</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id="_3-2-allof"> 3.2 AllOf</h3>
<div><pre><code>   <span>// 2 小于4同时也小于3</span>
   <span>Assert</span><span>.</span><span>assertThat</span><span>(</span><span>2</span><span>,</span> <span>AllOf</span><span>.</span><span>allOf</span><span>(</span><span>Matchers</span><span>.</span><span>lessThan</span><span>(</span><span>4</span><span>)</span><span>,</span> <span>Matchers</span><span>.</span><span>lessThan</span><span>(</span><span>3</span><span>)</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="_3-3-anyof"> 3.3 AnyOf</h3>
<div><pre><code>   <span>// 2 大于1小于3</span>
   <span>Assert</span><span>.</span><span>assertThat</span><span>(</span><span>2</span><span>,</span> <span>AnyOf</span><span>.</span><span>anyOf</span><span>(</span><span>Matchers</span><span>.</span><span>greaterThan</span><span>(</span><span>1</span><span>)</span><span>,</span> <span>Matchers</span><span>.</span><span>lessThan</span><span>(</span><span>3</span><span>)</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">技术选型</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、junit"> 一、JUnit</h2>
<p><a href="https://junit.org/junit5/" target="_blank" rel="noopener noreferrer">JUnit</a>目标是为JVM上的开发人员端测试创建最新的基础。这包括关注Java 8及更高版本，以及启用许多不同的测试样式。</p>
<p>强制使用 <code>Junit3</code> 以上版本, 目前最新的版本是 <code>Junit5</code>, 常用的是 <code>JUnit4</code>,建议使用<Highlight color="#25c2a0">JUnit4</Highlight>
或者使用<Highlight color="#25c2a0">JUnit5</Highlight>。</p>
<p>这里有一个小坑。如果SpringBoot2.1.x版本依赖的Junit4。SpringBoot应用要通过 @RunWith + @SpringBootTest。
在SpringBoot后续的版本依赖JUnit5,直接使用@SpringBootTest即可。</p>
<div><pre><code>
<span><span><span>&lt;</span>dependency</span><span>></span></span>
    <span><span><span>&lt;</span>groupId</span><span>></span></span>junit<span><span><span>&lt;/</span>groupId</span><span>></span></span>
    <span><span><span>&lt;</span>artifactId</span><span>></span></span>junit<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
    <span><span><span>&lt;</span>version</span><span>></span></span>4.12<span><span><span>&lt;/</span>version</span><span>></span></span>
    <span><span><span>&lt;</span>scope</span><span>></span></span>test<span><span><span>&lt;/</span>scope</span><span>></span></span>
<span><span><span>&lt;/</span>dependency</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="二、mockito"> 二、Mockito</h2>
<p><a href="https://site.mockito.org/" target="_blank" rel="noopener noreferrer">Mockito</a> 是一个非常不错的模拟框架。它使您可以使用干净简单的API编写漂亮的测试。Mockito不会给您带来麻烦，因为这些测试的可读性很强，并且会产生清晰的验证错误。</p>
<p><img src="https://github.com/mockito/mockito.github.io/raw/master/img/logo%402x.png" alt="" loading="lazy"></p>
<p>mockito-core只包含mockito类，而mockito-all包含mockito类以及一些依赖项，其中一个是hamcrest。</p>
<p>实际上mockito-all已停产according to the mockito website</p>
<div><pre><code><span>&lt;!-- https://mvnrepository.com/artifact/org.mockito/mockito-core --></span>
<span><span><span>&lt;</span>dependency</span><span>></span></span>
    <span><span><span>&lt;</span>groupId</span><span>></span></span>org.mockito<span><span><span>&lt;/</span>groupId</span><span>></span></span>
    <span><span><span>&lt;</span>artifactId</span><span>></span></span>mockito-core<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
    <span><span><span>&lt;</span>version</span><span>></span></span>3.8.0<span><span><span>&lt;/</span>version</span><span>></span></span>
    <span><span><span>&lt;</span>scope</span><span>></span></span>test<span><span><span>&lt;/</span>scope</span><span>></span></span>
<span><span><span>&lt;/</span>dependency</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>代码实例</p>
<div><pre><code>    
    <span>// 根据这个原理,我们可以mock所有未实现的功能,比如三方的接口</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span><span>{</span>
        <span>List</span> mockList <span>=</span> <span>Mockito</span><span>.</span><span>mock</span><span>(</span><span>List</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>Mockito</span><span>.</span><span>doReturn</span><span>(</span><span>12</span><span>)</span><span>.</span><span>when</span><span>(</span>mockList<span>)</span><span>.</span><span>get</span><span>(</span><span>0</span><span>)</span><span>;</span>
        <span>// 12</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>mockList<span>.</span><span>get</span><span>(</span><span>0</span><span>)</span><span>)</span><span>;</span>
        <span>Assert</span><span>.</span><span>assertSame</span><span>(</span><span>12</span><span>,</span>mockList<span>.</span><span>get</span><span>(</span><span>0</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="三、jmockdata"> 三、JMockData</h2>
<p><code>JMockData</code> 是一款国人开发用来生成模拟数据的工具,对象太复杂,模拟数据复制太难? 一行代码搞定。</p>
<div><pre><code>   <span><span><span>&lt;</span>dependency</span><span>></span></span>
       <span><span><span>&lt;</span>groupId</span><span>></span></span>com.github.jsonzou<span><span><span>&lt;/</span>groupId</span><span>></span></span>
       <span><span><span>&lt;</span>artifactId</span><span>></span></span>jmockdata<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
       <span><span><span>&lt;</span>version</span><span>></span></span>4.3.0<span><span><span>&lt;/</span>version</span><span>></span></span>
       <span><span><span>&lt;</span>scope</span><span>></span></span>test<span><span><span>&lt;/</span>scope</span><span>></span></span>
   <span><span><span>&lt;/</span>dependency</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">②如何知道是否依赖Spring容器</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E6%98%AF%E5%90%A6%E4%BE%9D%E8%B5%96Spring%E5%AE%B9%E5%99%A8/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E6%98%AF%E5%90%A6%E4%BE%9D%E8%B5%96Spring%E5%AE%B9%E5%99%A8/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<p>默认使用 <code>BlockJUnit4ClassRunner</code> 来进行运行。即不依赖容器。
假如说如果需要容器怎么办呢 ? <Version>基于SpringBoot 2.1.x版本分析</Version></p>
<div><pre><code><span>@RunWith</span><span>(</span><span>SpringRunner</span><span>.</span><span>class</span><span>)</span>
<span>@SpringBootTest</span><span>(</span>classes <span>=</span> <span>{</span><span>Application</span><span>.</span><span>class</span><span>}</span><span>)</span> <span>// 指定启动类</span>
<span>public</span> <span>class</span> <span>BaseApplicationTest</span> <span>{</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>
<li>SpringRunner告诉JUnit要使用Spring容器</li>
<li>SpringBootTest告诉JUnit容器的引导类是这个</li>
</ul>
<p>JUnit是如何实现的呢?</p>
<p><img src="https://img.springlearn.cn/blog/learn_1617791013000.png" alt="" loading="lazy"></p>
<p>前面启动类中我们使用的注解是 <code>@RunWith</code> 和 <code>@SpringBootTest</code> 那么哪里来解析这个的呢?</p>
<p><img src="https://img.springlearn.cn/blog/learn_1617791209000.png" alt="" loading="lazy"></p>
<p>由此 <code>JUnit</code> 知道要使用 <code>SpringRunner</code> 进行引导。</p>
<p>由上图我们知道 <code>SpringRunner</code> 实例化的入参就是当前的测试类。那么后续所有的奥妙就在这里了。
我们跟进构造往下追究。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1617795279000.png" alt="" loading="lazy"></p>
<p><code>BootstrapUtils#resolveTestContextBootstrapper</code>
拿到SpringBoot的测试引导类 <code>SpringBootTestContextBootstrapper</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1617795346000.png" alt="" loading="lazy"></p>
<p>拿到SpringBoot容器的启动 <code>Main</code> 函数。</p>
<p>到此已经拿到了所有的SpringBoot容器启动参数了。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">影响范围</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E5%BD%B1%E5%93%8D%E8%8C%83%E5%9B%B4/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E5%BD%B1%E5%93%8D%E8%8C%83%E5%9B%B4/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<div><p>注意影响</p>
<p>所有的单测一定针对不是生产环境,一般线上发布我们会声明不运行单测。
如何考虑环境因素呢?</p>
<p>两个解决办法:</p>
<ul>
<li>应用维度环境分离 spring.profiles.active=test</li>
<li>测试基类指定环境 @ActiveProfiles(&quot;test&quot;)</li>
</ul>
</div>
<h2 id="一、影响范围考虑哪些因素"> 一、影响范围考虑哪些因素?</h2>
<h3 id="_1-1-是否影响测试环境"> 1.1 是否影响测试环境?</h3>
<p>可以设置单测事务不提交,保证对数据无影响。</p>
<h3 id="_1-2-是否对业务无影响"> 1.2 是否对业务无影响?</h3>
<p>检查是否做了环境隔离。</p>
<h3 id="_1-3-是否可重复跑"> 1.3 是否可重复跑?</h3>
<p>如果前两点都已经解决,那么就可以重复跑。
重复跑可以模拟验证幂等或者重复提交的问题。</p>
<h2 id="三、什么时候写单测"> 三、什么时候写单测</h2>
<p>后端开发进度: 开发50% + 单元测试30% + 联调20%</p>
<ol>
<li>自己代码开发完成后,就应该进行单测。</li>
<li>自己代码开发完了,其他人没有开发完。可以进行Mockito单测,先确保自己的代码没问题。</li>
<li>对自己负责的功能模块进行单测维护。</li>
</ol>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">异步验证</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E5%BC%82%E6%AD%A5%E9%AA%8C%E8%AF%81/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E5%BC%82%E6%AD%A5%E9%AA%8C%E8%AF%81/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<div><p>请听题</p>
<p>对于下面这段代码你觉得单测能通过吗?</p>
</div>
<p>异步场景</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>{</span>
        <span>ExecutorService</span> executorService <span>=</span> <span>Executors</span><span>.</span><span>newFixedThreadPool</span><span>(</span><span>3</span><span>)</span><span>;</span>
        executorService<span>.</span><span>submit</span><span>(</span><span>new</span> <span>Runnable</span><span>(</span><span>)</span> <span>{</span>
            <span>@SneakyThrows</span>
            <span>@Override</span>
            <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
                <span>Thread</span><span>.</span><span>sleep</span><span>(</span><span>5000</span><span>)</span><span>;</span>
                <span>Object</span> obj <span>=</span> <span>null</span><span>;</span>
                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>obj<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"单侧结束"</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id="一、常用解决方案"> 一、常用解决方案</h2>
<h3 id="_1-1-white解决简单暴力"> 1.1 white解决简单暴力</h3>
<p>white解决</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>{</span>
        <span>ExecutorService</span> executorService <span>=</span> <span>Executors</span><span>.</span><span>newFixedThreadPool</span><span>(</span><span>3</span><span>)</span><span>;</span>
        executorService<span>.</span><span>submit</span><span>(</span><span>new</span> <span>Runnable</span><span>(</span><span>)</span> <span>{</span>
            <span>@SneakyThrows</span>
            <span>@Override</span>
            <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
                <span>Thread</span><span>.</span><span>sleep</span><span>(</span><span>5000</span><span>)</span><span>;</span>
                <span>Object</span> obj <span>=</span> <span>null</span><span>;</span>
                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>obj<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"单侧结束"</span><span>)</span><span>;</span>
        <span>white</span><span>(</span><span>true</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h3 id="_1-2-locksupport最大时间限制"> 1.2 LockSupport最大时间限制</h3>
<p>LockSupport.parkNanos()线程挂起</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>{</span>
        <span>ExecutorService</span> executorService <span>=</span> <span>Executors</span><span>.</span><span>newFixedThreadPool</span><span>(</span><span>3</span><span>)</span><span>;</span>
        executorService<span>.</span><span>submit</span><span>(</span><span>new</span> <span>Runnable</span><span>(</span><span>)</span> <span>{</span>
            <span>@SneakyThrows</span>
            <span>@Override</span>
            <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
                <span>Thread</span><span>.</span><span>sleep</span><span>(</span><span>5000</span><span>)</span><span>;</span>
                <span>Object</span> obj <span>=</span> <span>null</span><span>;</span>
                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>obj<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"单侧结束"</span><span>)</span><span>;</span>
         <span>// 挂起指定时间</span>
        <span>LockSupport</span><span>.</span><span>parkNanos</span><span>(</span><span>TimeUnit</span><span>.</span>SECONDS<span>.</span><span>toNanos</span><span>(</span><span>6</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="二、基于上面两种配合junit定制"> 二、基于上面两种配合JUnit定制</h2>
<h3 id="_2-1-使用演示"> 2.1 使用演示</h3>
<p>📢 注意这里的 @Timed 原生是不具备这个能力的,要基于JUnit进行扩展。</p>
<p>@Timed 灵活控制时间</p>
<div><div><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code>    <span>@Test</span>
    <span>@Timed</span><span>(</span>millis <span>=</span> <span>5000</span><span>)</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>{</span>
        <span>ExecutorService</span> executorService <span>=</span> <span>Executors</span><span>.</span><span>newFixedThreadPool</span><span>(</span><span>3</span><span>)</span><span>;</span>
        executorService<span>.</span><span>submit</span><span>(</span><span>new</span> <span>Runnable</span><span>(</span><span>)</span> <span>{</span>
            <span>@SneakyThrows</span>
            <span>@Override</span>
            <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
                <span>Thread</span><span>.</span><span>sleep</span><span>(</span><span>5000</span><span>)</span><span>;</span>
                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"任务执行结束"</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"单侧结束"</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="_2-2-扩展实现"> 2.2 扩展实现</h3>
<p>同样是基于LockSupport线程挂起方案,类似于切面解决。</p>
<p>扩展TestExecutionListener</p>
<div><div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br></div><pre><code>
    <span>private</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Long</span><span>></span></span> timedMap <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>

    <span>private</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Long</span><span>></span></span> beforeTestCostMap <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
    
    <span>@Override</span>
    <span>public</span> <span>void</span> <span>beforeTestMethod</span><span>(</span><span>TestContext</span> testContext<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>String</span> key <span>=</span> testContext<span>.</span><span>getTestMethod</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>;</span>
        beforeTestCostMap<span>.</span><span>put</span><span>(</span>key<span>,</span> <span>System</span><span>.</span><span>currentTimeMillis</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>Timed</span> timedA <span>=</span> <span>AnnotationUtils</span><span>.</span><span>getAnnotation</span><span>(</span>testContext<span>.</span><span>getTestMethod</span><span>(</span><span>)</span><span>,</span> <span>Timed</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>nonNull</span><span>(</span>timedA<span>)</span><span>)</span> <span>{</span>
            timedMap<span>.</span><span>put</span><span>(</span>testContext<span>.</span><span>getTestMethod</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> timedA<span>.</span><span>millis</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>
        <span>Method</span> testMethod <span>=</span> testContext<span>.</span><span>getTestMethod</span><span>(</span><span>)</span><span>;</span>
        <span>printActiveProfile</span><span>(</span>testContext<span>)</span><span>;</span>
        <span>checkTransactional</span><span>(</span>testContext<span>)</span><span>;</span>
        <span>TestConsole</span><span>.</span><span>colorPrintln</span><span>(</span><span>AnsiColor</span><span>.</span>BLUE<span>,</span> <span>"西魏陶渊明发起了一个单侧用例: {}#{}"</span><span>,</span> testContext<span>.</span><span>getTestClass</span><span>(</span><span>)</span><span>,</span> testMethod<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>afterTestMethod</span><span>(</span><span>TestContext</span> testContext<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>String</span> key <span>=</span> testContext<span>.</span><span>getTestMethod</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>;</span>
        <span>Long</span> afterTestCost <span>=</span> <span>System</span><span>.</span><span>currentTimeMillis</span><span>(</span><span>)</span><span>;</span>
        <span>Long</span> beforeTestCost <span>=</span> beforeTestCostMap<span>.</span><span>get</span><span>(</span>key<span>)</span><span>;</span>
        <span>long</span> timed <span>=</span> timedMap<span>.</span><span>get</span><span>(</span>key<span>)</span><span>;</span>
        <span>// 如果耗时已经大于指定的时间了,就直接过</span>
        <span>if</span> <span>(</span><span>(</span>timed <span>&lt;=</span> <span>0</span><span>)</span> <span>||</span> afterTestCost <span>-</span> beforeTestCost <span>></span> timed<span>)</span> <span>{</span>
            <span>Throwable</span> testException <span>=</span> testContext<span>.</span><span>getTestException</span><span>(</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>nonNull</span><span>(</span>testException<span>)</span><span>)</span> <span>{</span>
                <span>TestConsole</span><span>.</span><span>colorPrintln</span><span>(</span><span>AnsiColor</span><span>.</span>BRIGHT_RED<span>,</span> <span>"测试用例执行失败了,快检查检查吧。🚒"</span><span>)</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>
                <span>TestConsole</span><span>.</span><span>colorPrintln</span><span>(</span><span>"用例执行成功。💪"</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>// 如果不够,就要挂起指定时间。（减去1000毫秒,给Timed预留的时间）</span>
            <span>long</span> nanos <span>=</span> <span>TimeUnit</span><span>.</span>MILLISECONDS<span>.</span><span>toNanos</span><span>(</span>timed <span>-</span> <span>(</span>afterTestCost <span>-</span> beforeTestCost<span>)</span> <span>-</span> <span>1000</span><span>)</span><span>;</span>
            <span>// 主线程挂起,等待异步执行</span>
            <span>System</span><span>.</span>err<span>.</span><span>printf</span><span>(</span><span>"Timed任务挂起通知: 主线程挂起%d s,等待异步执行%n"</span><span>,</span> <span>TimeUnit</span><span>.</span>NANOSECONDS<span>.</span><span>toSeconds</span><span>(</span>nanos<span>)</span><span>)</span><span>;</span>
            <span>LockSupport</span><span>.</span><span>parkNanos</span><span>(</span>nanos<span>)</span><span>;</span>
        <span>}</span>

    <span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><h3 id="_2-3-引导类配置"> 2.3 引导类配置</h3>
<ul>
<li>@TestExecutionListeners 注意声明添加模式是合并(默认是替换)</li>
</ul>
<div><div><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br></div><pre><code><span>@Slf4j</span>
<span>@ActiveProfiles</span><span>(</span><span>{</span><span>"local"</span><span>}</span><span>)</span>
<span>@ContextConfiguration</span><span>(</span>initializers <span>=</span> <span>{</span><span>BeanLazyApplicationContextInitializer</span><span>.</span><span>class</span><span>}</span><span>)</span>
<span>// 使用Spring容器引导</span>
<span>@RunWith</span><span>(</span><span>SpringRunner</span><span>.</span><span>class</span><span>)</span>
<span>// 合并模式下,增加测试执行监听器</span>
<span>@TestExecutionListeners</span><span>(</span>value <span>=</span> <span>PmsSentryTestExecutionListener</span><span>.</span><span>class</span><span>,</span> mergeMode <span>=</span> <span>TestExecutionListeners<span>.</span>MergeMode</span><span>.</span>MERGE_WITH_DEFAULTS<span>)</span>
<span>// 默认就是回滚,不用加@Rollback,如果全局不想回滚就在这个吧@Rollback(false),如果某个单测不想回滚,就放到单侧类上</span>
<span>@Transactional</span>
<span>@SpringBootTest</span><span>(</span>classes <span>=</span> <span>{</span><span>CenterProviderApplication</span><span>.</span><span>class</span><span>}</span><span>)</span> <span>// 指定启动类</span>
<span>public</span> <span>class</span> <span>BaseApplicationTest</span> <span>{</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">数据隔离</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E6%95%B0%E6%8D%AE%E9%9A%94%E7%A6%BB/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E6%95%B0%E6%8D%AE%E9%9A%94%E7%A6%BB/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<div><p>数据隔离</p>
<p>数据隔离一直是一个测试的痛点，测试数据可能是 <code>mock</code> 的数据,所以单测过程中,难免会造成脏数据
这种场景,有通用的解决方案。<code>JUnit</code> 已经帮我们做好了。这里我们只讲实操和用法。
如果有兴趣的话可以研究下 <Highlight>TransactionalTestExecutionListener</Highlight></p>
</div>
<h2 id="解决方案"> 解决方案</h2>
<div><p>单测引导类配置说明</p>
<ul>
<li>@Transactional 如果加上这个注解,就代表全局的单测,事务执行完都会自动回滚</li>
<li>@Rollback(false) 如果想某个方法事务不回滚,可以单独在方法上设置。<Highlight color="#25c2a0">【方法级别&gt;全局】</Highlight></li>
</ul>
</div>
<p>下面这两个方法</p>
<ul>
<li>第一个方法因为是使用测试全局事务配置,所以默认是回滚。</li>
<li>第二个方法因为使用了方法事务配置,所以会忽略全局配置,然后提交事务。</li>
</ul>
<p>单测引导类配置</p>
<div><pre><code><span>@Slf4j</span>
<span>@ActiveProfiles</span><span>(</span><span>{</span><span>"local"</span><span>}</span><span>)</span>
<span>// 使用Spring容器引导</span>
<span>@RunWith</span><span>(</span><span>SpringRunner</span><span>.</span><span>class</span><span>)</span>
<span>// 默认就是回滚,不用加@Rollback,如果全局不想回滚就在这个吧@Rollback(false),如果某个单测不想回滚,就放到单侧类上</span>
<span>@Transactional</span>
<span>@SpringBootTest</span><span>(</span>classes <span>=</span> <span>{</span><span>CenterProviderApplication</span><span>.</span><span>class</span><span>}</span><span>)</span> <span>// 指定启动类</span>
<span>public</span> <span>class</span> <span>BaseApplicationTest</span> <span>{</span>

    <span>// 全局事务,默认自动回滚</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>testInsert</span><span>(</span><span>)</span> <span>{</span>
        <span>String</span> json <span>=</span> <span>"{\n"</span> <span>+</span>
                <span>"  \"id\": 1344215264312557570,\n"</span> <span>+</span>
                <span>"  \"arrivalOrderId\": 1344215264287391745,\n"</span> <span>+</span>
                <span>"  \"goodsDeployId\": 1344170561282879489,\n"</span> <span>+</span>
                <span>"  \"expectedReceiveNum\": 150,\n"</span> <span>+</span>
                <span>"}"</span><span>;</span>
        <span>OrderDetailDO</span> orderDetail <span>=</span> <span>TestConsole</span><span>.</span><span>toObject</span><span>(</span>json<span>,</span> <span>ArrivalNoticeOrderDetailDO</span><span>.</span><span>class</span><span>)</span><span>;</span>
        orderDetail<span>.</span><span>setId</span><span>(</span><span>null</span><span>)</span><span>;</span>
        orderDetail<span>.</span><span>setCreaterId</span><span>(</span><span>888888L</span><span>)</span><span>;</span>
        <span>// true</span>
        <span>Assert</span><span>.</span><span>assertTrue</span><span>(</span>DB<span>.</span><span>insert</span><span>(</span>orderDetail<span>)</span> <span>></span> <span>0</span><span>)</span><span>;</span>
        <span>// notNull</span>
        <span>Assert</span><span>.</span><span>assertNotNull</span><span>(</span>DB<span>.</span><span>selectById</span><span>(</span>orderDetail<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
    
    <span>// 方法事务>全局事务, 这里声明了不自动回滚</span>
    <span>@Test</span>
    <span>@Rollback</span><span>(</span>value <span>=</span> <span>false</span><span>)</span>
    <span>public</span> <span>void</span> <span>testInsert</span><span>(</span><span>)</span> <span>{</span>
        <span>String</span> json <span>=</span> <span>"{\n"</span> <span>+</span>
                <span>"  \"id\": 1344215264312557570,\n"</span> <span>+</span>
                <span>"  \"arrivalOrderId\": 1344215264287391745,\n"</span> <span>+</span>
                <span>"  \"goodsDeployId\": 1344170561282879489,\n"</span> <span>+</span>
                <span>"  \"expectedReceiveNum\": 150,\n"</span> <span>+</span>
                <span>"}"</span><span>;</span>
        <span>OrderDetailDO</span> orderDetail <span>=</span> <span>TestConsole</span><span>.</span><span>toObject</span><span>(</span>json<span>,</span> <span>ArrivalNoticeOrderDetailDO</span><span>.</span><span>class</span><span>)</span><span>;</span>
        orderDetail<span>.</span><span>setId</span><span>(</span><span>null</span><span>)</span><span>;</span>
        orderDetail<span>.</span><span>setCreaterId</span><span>(</span><span>888888L</span><span>)</span><span>;</span>
        <span>// true</span>
        <span>Assert</span><span>.</span><span>assertTrue</span><span>(</span>DB<span>.</span><span>insert</span><span>(</span>orderDetail<span>)</span> <span>></span> <span>0</span><span>)</span><span>;</span>
        <span>// notNull</span>
        <span>Assert</span><span>.</span><span>assertNotNull</span><span>(</span>DB<span>.</span><span>selectById</span><span>(</span>orderDetail<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">测试成本</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E6%B5%8B%E8%AF%95%E6%88%90%E6%9C%AC/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E6%B5%8B%E8%AF%95%E6%88%90%E6%9C%AC/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<div><p>相关信息</p>
<p>测试成本到底有多大? 你认为你写的代码需不需要测试? 为了引出成本的话题, 我们先从实际工作中出发
看看你能否经受住这些灵魂的考验吧。</p>
</div>
<h2 id="一、灵魂深处的拷问"> 一、灵魂深处的拷问</h2>
<ul>
<li>你的代码质量如何度量？</li>
<li>你是如何保证代码质量？</li>
<li>你敢随时重构代码吗？</li>
<li>你是如何确保重构的代码依然保持正确性？</li>
<li>你是否有足够信心在没有测试的情况下随时发布你的代码？</li>
</ul>
<p>📢 如果答案都比较犹豫，那么就证明我们非常需要单元测试。(ps: 不会有人心里想的是我们需要测试同学吧 😏)</p>
<p><mark>它能带给我们很多保障：</mark></p>
<hr>
<ul>
<li>代码质量持续有保障</li>
<li>重构正确性保障</li>
<li>增强自信心</li>
<li>自动化运行</li>
</ul>
<hr>
<p>Web 应用中的单元测试更加重要，在 Web 产品快速迭代的时期，每个测试用例都给应用的稳定性提供了一层保障。 API 升级，测试用例可以很好地检查代码是否向下兼容。 对于各种可能的输入，一旦测试覆盖，都能明确它的输出。 代码改动后，可以通过测试结果判断代码的改动是否影响已确定的结果。</p>
<p>所以，应用的 Controller、Service、Common、Manager 等代码，都必须有对应的单元测试保证代码质量。 当然，框架和插件的每个功能改动和重构都需要有相应的单元测试，并且要求尽量做到修改的代码能被 100% 覆盖到。</p>
<p>特别是中大型项目，经过多年的代码迭代，业务逻辑复杂，代码改动很容易牵一发动全身，
单元测试就能给应用的稳定性提供了一层保障。不用面对qa的灵魂拷问：</p>
<Highlight color="#ff603f">为什么老是你的bug最多！</Highlight>
<h2 id="二、单测是手段不是目的"> 二、单测是手段不是目的</h2>
<blockquote>
<p>单测行覆盖率高不代表应用的质量就一定高,但是单测行覆盖率低一定代表着这个应用出现质量问题的可能性就越大</p>
</blockquote>
<p>还是引用前面话,我们不要为了单测而写单测,如果是把单测当做是目的来做,那么就偏离了单测的意义,自然而然你就认为
这个单测的成本是高的。... ... ... ... ... ... ... <Highlight color="#ff603f">你品你细品</Highlight></p>
<p><img src="https://img.springlearn.cn/blog/learn_1618049846000.png" alt="" loading="lazy"></p>
<h2 id="三、软件的质量不是测试出来的-而是设计和维护出来的"> 三、软件的质量不是测试出来的，而是设计和维护出来的</h2>
<Highlight color="#ff603f">你品你细品</Highlight>
<p><img src="https://img.springlearn.cn/blog/learn_1618206722000.png" alt="" loading="lazy"></p>
<p>作为底层开发人员, 我们清晰每一行代码, 也就是最小执行单元。哪里容易出现错误，这次改造涉及到了那些代码。一线开发人员一定是最清楚的人,没有之一。</p>
<p>从这个角度来了, 这就不是成本的问题了, 是职责范围内的事情。</p>
<p>如果单元测试都不做,就好比我去街上买鸡蛋, 我问老板鸡蛋是好是坏, 老板说我不知道, 然后说坏了拿来可以换。
你认为那个成本更大呢? 那个代价更大呢? 玩意坏鸡蛋把人吃坏了，这老板岂不是赔了夫人又折兵,还要受到法律的制裁?</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">极限测试</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E6%9E%81%E9%99%90%E6%B5%8B%E8%AF%95/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E6%9E%81%E9%99%90%E6%B5%8B%E8%AF%95/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<div><p>极限测试</p>
<ul>
<li>最大值</li>
<li>最小值</li>
<li>null值</li>
<li>空值</li>
<li>异常</li>
</ul>
</div>
<h3 id="这段代码会执行通过吗"> 这段代码会执行通过吗?</h3>
<div><pre><code>  <span>int</span> a <span>=</span> <span>24</span> <span>*</span> <span>24</span> <span>*</span> <span>60</span> <span>*</span> <span>60</span> <span>*</span> <span>1000</span><span>;</span>
  <span>int</span> b <span>=</span> <span>25</span> <span>*</span> <span>24</span> <span>*</span> <span>60</span> <span>*</span> <span>60</span> <span>*</span> <span>1000</span><span>;</span>
  <span>Assert</span><span>.</span><span>assertTrue</span><span>(</span>b <span>></span> a<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>关于测试用例的要思考下是否要使用极限值,验证。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">消息验证</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E6%B6%88%E6%81%AF%E9%AA%8C%E8%AF%81/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E6%B6%88%E6%81%AF%E9%AA%8C%E8%AF%81/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<div><p>相关信息</p>
<p>这一是凑数的,想表达的内容只有一点: 消息入口不应该出现复杂的业务逻辑。
对于消息的验证,我们只需要验证消息收发是否正常即可。处理方案就是将消息与
业务分离测试。</p>
</div>
<p>eg:</p>
<p>Message入口就类似于Web入口一样。我们复杂的业务逻辑一定不会再入口处直接写代码，
如果是这样写的那么维护性和复用性一定是很差的。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">测试范围</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E6%B5%8B%E8%AF%95%E8%8C%83%E5%9B%B4/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E6%B5%8B%E8%AF%95%E8%8C%83%E5%9B%B4/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<div><p>相关信息</p>
<p>项目中拿些类需要进行单元测试呢?
单测不是目的,是手段。目的都是保证质量</p>
</div>
<h2 id="一、从项目分层维度设计单测用例"> 一、从项目分层维度设计单测用例</h2>
<p>常见的项目分层有一下这些。</p>
<ul>
<li>Web层</li>
<li>Service层</li>
<li>domain层</li>
<li>Integration层</li>
<li>Common层 公用类必须要做</li>
</ul>
<h3 id="_1-1-web层-【忽略】"> 1.1 Web层   【忽略】</h3>
<p>一般web层已经上线不会发生改动,往往改动的是新增或者删除参数。可以忽略。</p>
<h3 id="_1-2-service层-【建议】"> 1.2 Service层   【建议】</h3>
<p>Service层往往是程序的接口层,接受来自Web或者Message、Job的调用。Service的逻辑会覆盖大部分的下游分层。Service是我们的业务入口
接口往往不会改变,改变最多的是它的实现。这一层我们要做好单元测试。</p>
<p>但是这一层的单元测试可能会涉及数据的读写和外部的数据读写。可以使用Mockito数据进行替换外部数据的返回。
内部数据的读写可以通过事务回滚的方式处理,主要验证自己代码中对这些数据的结算逻辑是否有问题。</p>
<p>这一层入参的数据往往会很多,对系统也有相关的依赖,自行评估方案。
这里提供两个曲线救国的方案:</p>
<ol>
<li>如果不好测试可以对程序的最小单元进行测试,曲线救国。</li>
<li>对某个方法中,不满足测试场景的接口,进行Mockito,以跳过这段逻辑。</li>
</ol>
<h3 id="_1-3-domain层-【建议】"> 1.3 Domain层   【建议】</h3>
<p>这一层和Service的业务是比较相像的,只不过不会有Service层一样那么复杂,参考上文。</p>
<h3 id="_1-4-integration层-【建议】"> 1.4 Integration层 【建议】</h3>
<p>防腐层,主要逻辑就是对外部接口的调用,主要测试不要出现NPE。参数的输入值做好非空非null判断,对返回结果做好非空和非null。</p>
<div><pre><code><span>public</span> <span>List</span><span><span>&lt;</span><span>GoodsBaseMsgDTO</span><span>></span></span> <span>querySkuList</span><span>(</span><span>Long</span> skuId<span>,</span> <span>Long</span> brandId<span>,</span> <span>String</span> goodsName<span>)</span> <span>{</span>
        <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>isNull</span><span>(</span>skuId<span>)</span> <span>&amp;&amp;</span> <span>Objects</span><span>.</span><span>isNull</span><span>(</span>brandId<span>)</span> <span>&amp;&amp;</span> <span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span>goodsName<span>)</span><span>)</span> <span>{</span>
            <span>// 根据业务来判断是报错还是为空</span>
            <span>return</span> <span>EnhanceStream</span><span>.</span><span>emptyList</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
        <span>GoodsMsgQueryParam</span> queryParam <span>=</span> <span>new</span> <span>GoodsMsgQueryParam</span><span>(</span><span>)</span><span>;</span>
        queryParam<span>.</span><span>setBrandId</span><span>(</span>brandId<span>)</span><span>;</span>
        queryParam<span>.</span><span>setSkuId</span><span>(</span>skuId<span>)</span><span>;</span>
        queryParam<span>.</span><span>setGoodsName</span><span>(</span>goodsName<span>)</span><span>;</span>
        <span>JsonResult</span><span><span>&lt;</span><span>PageData</span><span>&lt;</span><span>GoodsBaseMsgDTO</span><span>></span><span>></span></span> pageDataJsonResult <span>=</span> goodsStockApi<span>.</span><span>pageQuerySkuList</span><span>(</span>queryParam<span>)</span><span>;</span>
        <span>PageData</span><span><span>&lt;</span><span>GoodsBaseMsgDTO</span><span>></span></span> pageData <span>=</span> <span>JsonResultUtils</span><span>.</span><span>orElseGetSafeData</span><span>(</span>pageDataJsonResult<span>,</span> <span>new</span> <span>PageData</span><span><span>&lt;</span><span>GoodsBaseMsgDTO</span><span>></span></span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>isNull</span><span>(</span>pageData<span>)</span><span>)</span> <span>{</span>
            <span>return</span> <span>EnhanceStream</span><span>.</span><span>emptyList</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> pageData<span>.</span><span>getRecords</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
    
<span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>orElseGetSafeData</span><span>(</span><span>JsonResult</span><span><span>&lt;</span><span>T</span><span>></span></span> result<span>,</span> <span>T</span> defaultValue<span>)</span> <span>{</span>
        <span>if</span> <span>(</span><span>null</span> <span>!=</span> result <span>&amp;&amp;</span> result<span>.</span><span>isSuccess</span><span>(</span><span>)</span> <span>&amp;&amp;</span> <span>Objects</span><span>.</span><span>nonNull</span><span>(</span>result<span>.</span><span>getData</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
            <span>return</span> result<span>.</span><span>getData</span><span>(</span><span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>if</span> <span>(</span><span>Objects</span><span>.</span><span>nonNull</span><span>(</span>result<span>)</span><span>)</span><span>{</span>
                log<span>.</span><span>error</span><span>(</span>result<span>.</span><span>getMsg</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>}</span>
            <span>return</span> <span>Objects</span><span>.</span><span>nonNull</span><span>(</span>defaultValue<span>)</span> <span>?</span> defaultValue <span>:</span> <span>null</span><span>;</span>
        <span>}</span>
<span>}</span>    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>外部提供的 <code>Feign</code> 接口, 在没有提供实现之前可以先使用 <code>Mockito</code>进行Mock
帮助完成接口的测试。</p>
<div><pre><code><span>public</span> <span>class</span> <span>TradeShopIntegrationImplTest</span> <span>extends</span> <span>BaseApplicationTest</span> <span>{</span>

    <span>@Autowired</span>
    <span>private</span> <span>TradeShopIntegration</span> shopBrandIntegration<span>;</span>

    <span>@MockBean</span>
    <span>private</span> <span>BrandServiceApi</span> brandService<span>;</span>
    
    <span>@MockBean</span>
    <span>private</span> <span>GoodsStockApi</span> goodsStockApi<span>;</span>
    
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>testGetAllBrands</span><span>(</span><span>)</span> <span>{</span>
        <span>Mockito</span><span>.</span><span>doReturn</span><span>(</span><span>JsonResult</span><span>.</span><span>failure</span><span>(</span><span>"fail"</span><span>)</span><span>)</span><span>.</span><span>when</span><span>(</span>goodsStockApi<span>)</span><span>.</span><span>getSkuList</span><span>(</span><span>Mockito</span><span>.</span><span>any</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 底层调用的是goodsStockApi.getSkuList()</span>
        <span>List</span><span><span>&lt;</span><span>GoodsBaseMsgDTO</span><span>></span></span> goodsBaseMsgDTOS <span>=</span> shopBrandIntegration<span>.</span><span>queryAllSku</span><span>(</span><span>)</span><span>;</span>
        <span>// 因为前面声明了返回fail。所以这里没有数据返回。</span>
        <span>JsonConsoleUtils</span><span>.</span><span>println</span><span>(</span>goodsBaseMsgDTOS<span>)</span><span>;</span>
        <span>// 这里跟上面的区别就是,如果没有声明返回值,就走原来的方法。</span>
        <span>List</span><span><span>&lt;</span><span>OutBrandDTO</span><span>></span></span> allBrands <span>=</span> shopBrandIntegration<span>.</span><span>getAllBrands</span><span>(</span><span>)</span><span>;</span>
        <span>JsonConsoleUtils</span><span>.</span><span>println</span><span>(</span>allBrands<span>)</span><span>;</span>
    <span>}</span>
    
<span>}</span>    

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h3 id="_1-5-common层-【必须-】"> 1.5 Common层   【必须  】</h3>
<p>这一层基本出现的都是工具类,主要是功能性代码,自己提供的工具类,一定要做好单元测试。主要是考虑
异常情况和极限的情况。工具类因为变动的不会太频繁所以维护成本是也比较低的。</p>
<p><a href="https://ddd.springlearn.cn/docs/test/spring-boot-testing" target="_blank" rel="noopener noreferrer">Mockito学习跳转</a></p>
<h2 id="二、针对核心计算逻辑设计单测用例"> 二、针对核心计算逻辑设计单测用例</h2>
<p>比较核心的计算逻辑进行测试。比如根据外部数据进行组装生成新的数据模型的方法。</p>
<h2 id="三、忽略测试"> 三、忽略测试</h2>
<p>在实际开发中可能有些测试只是为了验证某些数据,每次执行要提前准备数据之类的。这种特殊的单测,只能人工指定运行的
我们可以忽略它,使用<code>@Ignore</code> 忽略。这样在Maven运行单测时候,会只运行你没有进行忽略的单测。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">①谁在调用JUnit</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E8%B0%81%E5%9C%A8%E8%B0%83%E7%94%A8JUnit/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E8%B0%81%E5%9C%A8%E8%B0%83%E7%94%A8JUnit/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<p>当点击了执行单例,发生了什么事情? <Version>基于SpringBoot 2.1.x版本分析</Version></p>
<p><img src="https://img.springlearn.cn/blog/learn_1617790044000.png" alt="" loading="lazy"></p>
<p>可以看到idea会将单侧的类和方法传递给JUnit。最终由</p>
<p><img src="https://img.springlearn.cn/blog/learn_1617790263000.png" alt="" loading="lazy"></p>
<p>可以看到最终是由 <code>AllDefaultPossibilitiesBuilder</code> 来进行了承接 。所以到这里我们就找到了入口。后续所有的能力,都要从JUnit中去寻找了。</p>
<div><pre><code>    <span>@Override</span>
    <span>public</span> <span>Runner</span> <span>getRunner</span><span>(</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>runner <span>==</span> <span>null</span><span>)</span> <span>{</span>
            <span>synchronized</span> <span>(</span>runnerLock<span>)</span> <span>{</span>
                <span>if</span> <span>(</span>runner <span>==</span> <span>null</span><span>)</span> <span>{</span>
                    runner <span>=</span> <span>new</span> <span>AllDefaultPossibilitiesBuilder</span><span>(</span>canUseSuiteMethod<span>)</span><span>.</span><span>safeRunnerForClass</span><span>(</span>fTestClass<span>)</span><span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> runner<span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">案例分享</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E6%A1%88%E4%BE%8B%E5%88%86%E4%BA%AB/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/test/%E6%A1%88%E4%BE%8B%E5%88%86%E4%BA%AB/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言"> 前言</h2>
<div><p>单测覆盖率为应用质量指标化提供解决方案</p>
<p><strong>一口吃不了一个胖子, 由于每个人的认识不一样,要想达到理想的状态,显然是不可能的。此章节主要从实践出发,一步一步带领我们完成一个有效的可复用的单元测试的编写。</strong></p>
</div>
<h2 id="一、目标"> 一、目标</h2>
<h3 id="_1-1-质量保障"> 1.1 质量保障</h3>
<p><strong>单测是保证项目质量的手段,而不是目的。</strong></p>
<p>通过 <code>mvn test</code> 在每次编译时候，对代码进行测试。以到达可持续集成的目的。这里的关键是在每次服务发布的时候,首先要运行测试用例。
只有这样,我们的单测用例才有价值,才能提前发现问题。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1621248108000.png" alt="" loading="lazy"></p>
<h3 id="_1-2-打扫屋子"> 1.2 打扫屋子</h3>
<p>要解决前面的这个问题,就要求我们编写正确的测试用例。因为大多数项目目前的编译脚本都是,跳过单元测试的.
<code>mvn -Dmaven.test.skip=true</code>, 之所以这样是因为大多数的单测都是为 <code>debug</code> 写的,一旦在编译的时候执行单测用例,
就会编译不通过。所以要想达到可持续集成的目的, 就要先把阻塞应用的单元测试用例给移除。</p>
<p>我们可以通过 <code>@Ignore</code> 来。 当然这不是说不允许你写debug的单测,而是要我们<Highlight color="#ffffff" bg="#117eed"> 遵守一个约定</Highlight>, 对那种debug的单测, 必须人工执行的单测
我们要通过 <code>@Ignore</code> 来标记, 避免我们执行单测时候失败。</p>
<h3 id="_1-3-发挥价值"> 1.3 发挥价值</h3>
<p>如果做到了 1.1 和 1.2 那么单测的价值有会真正体现出来了。但是这一切的一切的前提是我们要编写出正确的符合规范的单测用例。</p>
<p><img src="https://i0.hdslb.com/bfs/article/7698c4b6720896ccd93fffc15257b79122fe06df.gif" alt="" loading="lazy"></p>
<h2 id="二、真实案例分享"> 二、真实案例分享</h2>
<p>首先这里我们使用到的技术,其实再前面的技术框架中都有列举了,所以这里就不详细说明了。这里就分享几个测试用例。</p>
<h3 id="_2-1-查询接口测试用例-难度-⭐️"> 2.1 查询接口测试用例 难度:⭐️</h3>
<p><img src="https://img.springlearn.cn/blog/learn_1620982729000.png" alt="" loading="lazy"></p>
<p>对于上图这种仅仅涉及到读的接口,是比较简单的。我们的验证点其实只有两个。</p>
<ol>
<li>web接口是否可以调用</li>
<li>接口查询条件是否有效</li>
</ol>
<h4 id="_2-1-1-启动web服务器"> 2.1.1 启动web服务器</h4>
<p>随机web端口,执行单测的时候启动一个web容器,用来模拟Web接口测试。</p>
<div><pre><code><span>@RunWith</span><span>(</span><span>SpringRunner</span><span>.</span><span>class</span><span>)</span>
<span>@SpringBootTest</span><span>(</span>classes <span>=</span> <span>CenterProviderApplication</span><span>.</span><span>class</span><span>,</span>
                webEnvironment <span>=</span> <span>SpringBootTest<span>.</span>WebEnvironment</span><span>.</span>RANDOM_PORT<span>)</span>
<span>// 指定启动类</span>
<span>public</span> <span>class</span> <span>BaseApplicationTest</span> <span>{</span>

    <span>protected</span> <span>URL</span> base<span>;</span>

    <span>@LocalServerPort</span>
    <span>private</span> <span>int</span> port<span>;</span>

    <span>@Before</span>
    <span>public</span> <span>void</span> <span>setUp</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>this</span><span>.</span>base <span>=</span> <span>new</span> <span>URL</span><span>(</span><span>"http://localhost:"</span> <span>+</span> port <span>+</span> <span>"/pms/"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h4 id="_2-1-2-编写接口"> 2.1.2 编写接口</h4>
<p>这里就验证了Web的请求,同时可以进度查询条件的校验。当然这里也可以加上返回值类型的校验</p>
<div><pre><code><span>public</span> <span>class</span> <span>CommonControllerTest</span> <span>extends</span> <span>BaseApplicationTest</span> <span>{</span>

    <span>@Resource</span>
    <span>private</span> <span>CommonController</span> commonController<span>;</span>

    <span>/**
     * 使用测试工具进行web端测试
     *
     */</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>goodsList</span><span>(</span><span>)</span> <span>{</span>
        <span>GoodsListDTO</span> dto <span>=</span> <span>new</span> <span>GoodsListDTO</span><span>(</span><span>)</span><span>;</span>
        dto<span>.</span><span>setSize</span><span>(</span><span>5L</span><span>)</span><span>;</span>
        dto<span>.</span><span>setCurrent</span><span>(</span><span>1L</span><span>)</span><span>;</span>
        <span>// 使用该方法允许数据Mock</span>
        <span>JsonResult</span><span><span>&lt;</span><span>DiyPage</span><span>&lt;</span><span>PmsGoodsVO</span><span>></span><span>></span></span> result <span>=</span> <span>TestWebUtils</span><span>.</span><span>web</span><span>(</span><span>this</span><span>.</span>base<span>)</span><span>.</span><span>mockWhen</span><span>(</span>commonController<span>)</span><span>.</span><span>goodsList</span><span>(</span>dto<span>)</span><span>;</span>
        <span>// 非空判断</span>
        <span>Assert</span><span>.</span><span>assertNotNull</span><span>(</span>result<span>)</span><span>;</span>
        <span>// 接口响应值判断</span>
        <span>Assert</span><span>.</span><span>assertTrue</span><span>(</span>result<span>.</span><span>getMsg</span><span>(</span><span>)</span><span>,</span> result<span>.</span><span>isSuccess</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 接口数据输出</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>TestConsole</span><span>.</span><span>color</span><span>(</span><span>"执行结果:"</span><span>)</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>TestConsole</span><span>.</span><span>colors</span><span>(</span>result<span>,</span> <span>AnsiColor</span><span>.</span>BRIGHT_BLUE<span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>看到这里我们能亲身感受到,对于纯粹读的接口测试用例是比较容易编写的。一个项目只用维护一次就好了,开发同学也不会每次都去维护这个用例。
虽然这个用例简单,但是我们能在每次发布完成后自动化的去执行校验。能帮助我们提前发现问题。</p>
<h3 id="_2-2-读写测试用例-难度-⭐️⭐️"> 2.2 读写测试用例 难度:⭐️⭐️</h3>
<p><img src="https://img.springlearn.cn/blog/learn_1620988529000.png" alt="" loading="lazy"></p>
<p>像这种读写操作,且涉及到对外部数据调用的接口。我们要使用Mockito技术,对外部对象进行代理,并制定其中的行为。
如下图这个测试用例,看下如何编写测试用例。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1620989004000.png" alt="" loading="lazy"></p>
<p>首先分析下涉及到的接口。</p>
<ul>
<li>saveArrivalOrder 这个接口里面是包含了内部的业务逻辑和外部的数据调用,包含了下面两个外部的接口依赖。</li>
</ul>
<ol>
<li>noticeTransportNodeNote 在保存到货通知单的时候,通知库存增加商品的在途库存数量的</li>
<li>syncPurchaseOrder      在保存到货通知单的时候,是通知仓储做到货准备的</li>
</ol>
<p>这个业务中我们只需要验证我们内部的逻辑即可,涉及到外部的调用只需要验证代码即可,并不真的需要仓库和库存系统做
真实的业务处理。所以我们就要针对这两个方法做数据mock我们使用到的技术就是Mockito做对象行为的mock。如下案例。</p>
<p>主要看注释,我们在调用接口的时候,先通过给外部接口最Mockito代理,然后指定动作的出入参数。</p>
<div><pre><code><span>public</span> <span>class</span> <span>NoticeOrderControllerTest</span> <span>extends</span> <span>BaseApplicationTest</span> <span>{</span>

    <span>@Autowired</span>
    <span>NoticeOrderController</span> controller<span>;</span>

    <span>/**
     * 接口穿插在po单创建的单侧里面
     */</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>saveArrivalOrder</span><span>(</span><span>)</span> <span>{</span>
        <span>// 1. 构建保存单据的参数(从浏览器中复制数据)</span>
        <span>String</span> saveOrderJson <span>=</span>  <span>"{}"</span>
        <span>NoticeOrderDTO</span> noticeOrder <span>=</span> <span>TestConsole</span><span>.</span><span>toObject</span><span>(</span>saveOrderJson<span>,</span> <span>ArrivalNoticeOrderDTO</span><span>.</span><span>class</span><span>)</span><span>;</span>

        <span>// 2. mock库存中心返回 - inventoryTransportClient.noticeTransportNodeNote</span>
        <span>JsonResult</span><span><span>&lt;</span><span>Boolean</span><span>></span></span> noticeResult <span>=</span> <span>JsonResult</span><span>.</span><span>success</span><span>(</span><span>true</span><span>)</span><span>;</span>
        <span>Mockito</span><span>.</span><span>doReturn</span><span>(</span>noticeResult<span>)</span><span>.</span><span>when</span><span>(</span>inventoryTransportClient<span>)</span><span>.</span><span>noticeTransportNodeNote</span><span>(</span><span>Mockito</span><span>.</span><span>any</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 3. mock同步中控台 - bookingOrderPmsFeignClient.syncPurchaseOrder(bookingOrderDetailDTO)</span>
        <span>JsonResult</span><span><span>&lt;</span><span>Object</span><span>></span></span> syncResult <span>=</span> <span>JsonResult</span><span>.</span><span>success</span><span>(</span><span>)</span><span>;</span>
        <span>Mockito</span><span>.</span><span>doReturn</span><span>(</span>syncResult<span>)</span><span>.</span><span>when</span><span>(</span>bookingOrderPmsFeignClient<span>)</span><span>.</span><span>syncPurchaseOrder</span><span>(</span><span>Mockito</span><span>.</span><span>any</span><span>(</span><span>)</span><span>)</span><span>;</span>

        <span>// 4. 执行保存+提交(走网络请求,事务不会自动回滚,如果想自动回滚直接调用,controller.saveArrivalOrder(arrivalNoticeOrder))</span>
        arrivalNoticeOrder<span>.</span><span>setStatus</span><span>(</span><span>1</span><span>)</span><span>;</span>
        <span>JsonResult</span><span><span>&lt;</span><span>Long</span><span>></span></span> longJsonResult <span>=</span> <span>TestWebUtils</span><span>.</span><span>web</span><span>(</span><span>this</span><span>.</span>base<span>)</span><span>.</span><span>when</span><span>(</span><span>ArrivalNoticeOrderController</span><span>.</span><span>class</span><span>)</span>
                <span>.</span><span>saveArrivalOrder</span><span>(</span>arrivalNoticeOrder<span>)</span><span>;</span>
        <span>PmsAssert</span><span>.</span><span>assertSuccess</span><span>(</span>longJsonResult<span>)</span><span>;</span>

        <span>// 5. 验证关闭(这里因为我要验证关闭接口,所以不要自动会馆)</span>
        <span>Mockito</span><span>.</span><span>doReturn</span><span>(</span>syncResult<span>)</span><span>.</span><span>when</span><span>(</span>bookingOrderPmsFeignClient<span>)</span><span>.</span><span>cancelPurchaseOrder</span><span>(</span><span>Mockito</span><span>.</span><span>any</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>Mockito</span><span>.</span><span>doReturn</span><span>(</span>noticeResult<span>)</span><span>.</span><span>when</span><span>(</span>inventoryTransportClient<span>)</span><span>.</span><span>cancelTransportNode</span><span>(</span><span>Mockito</span><span>.</span><span>any</span><span>(</span><span>)</span><span>)</span><span>;</span>

        <span>JsonResult</span><span><span>&lt;</span><span>Void</span><span>></span></span> jsonResult <span>=</span> <span>TestWebUtils</span><span>.</span><span>web</span><span>(</span><span>this</span><span>.</span>base<span>)</span><span>.</span><span>when</span><span>(</span><span>ArrivalNoticeOrderController</span><span>.</span><span>class</span><span>)</span>
                <span>.</span><span>closeOrder</span><span>(</span><span>(</span>longJsonResult<span>.</span><span>getData</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
        <span>PmsAssert</span><span>.</span><span>assertSuccess</span><span>(</span>jsonResult<span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><p>这个案例,我们可以学会如何使用Mockito做外部接口的代理,整体难度也不是很大。</p>
<h3 id="_2-3-读写接口-复杂接口-难度-⭐️⭐️⭐️⭐️"> 2.3 读写接口(复杂接口) 难度:⭐️⭐️⭐️⭐️</h3>
<p>针对项目中核心流程, 可能并不仅仅是一个接口，而是有依赖关系的多个接口。</p>
<p>针对系统核心链路流程，我们是有必要维护些自动化流程的测试用例。然后对每个接口中的出入参数进行校验。**当做到这一步的时候
其实我们在发布时候就会更加有底气。敢于去重构代码了。**因为在项目迭代发布的过程中，我们会先跑一边单测。只要单测流程能通过，说明这个核心链路的流程问题就不会太大。</p>
<p>当然这里不是说一定没有问题, 而是有问题的几率变小了。如果说出现问题了,我们的自动化流程没有提前发现，那么说明这些场景,我们的单测流程没有覆盖到, 那么这个时候我们再补充我们的自动化流程。</p>
<p><strong>注意这里的自动化流程，跟测试同学的自动化流程是有区别的。开发的自动化流程的测试目标是自身项目的代码，所以我们关于外部接口都是通过Mock来模拟的。而测试同学的
自动化流程，都是走真实的系统调用。</strong></p>
<h4 id="_2-3-1-业务说明"> 2.3.1 业务说明</h4>
<ol>
<li>
<p>创建一个包含一个商品的，草稿状态的临时采购单【验证保存接口】</p>
</li>
<li>
<p>模拟用户对采购单的商品进行二次修改【验证修改逻辑接口】</p>
</li>
<li>
<p>模拟对已经审核的采购单,添加不同类型货通知单【验证不同单据到货通知单的校验接口】</p>
</li>
<li>
<p>对已经创建的到货通知单进行人工关闭【验证关闭】</p>
</li>
<li>
<p>关闭所有到货通知单【验证关闭】</p>
</li>
<li>
<p>关闭采购单【验证采购关闭】</p>
</li>
</ol>
<p>做到业务流程闭环</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>tempPurchaseOrderSave</span><span>(</span><span>)</span> <span>{</span>
        <span>String</span> saveOrderJson <span>=</span> <span>"{\"poOrderItemList\":[{\"id\":null,\"goodsId\":\"1\",\"skuId\":\"1001062\",\"goodsName\":\"ABM品牌招商手册包11112\",\"englishName\":\"1\",\"goodsCode\":\"9314807022860\",\"brandCode\":\"brand230\",\"brandName\":\"34 西班牙\",\"specificationModel\":\"12ml/瓶\",\"wmsItemList\":[{\"purchaseNum\":null,\"warehouseName\":\"DHL\",\"warehouseCode\":0},{\"purchaseNum\":null,\"warehouseName\":\"PCA\",\"warehouseCode\":1},{\"purchaseNum\":null,\"warehouseName\":\"EWE\",\"warehouseCode\":2},{\"purchaseNum\":null,\"warehouseName\":\"新西兰仓\",\"warehouseCode\":3}],\"purchaseNum\":30,\"goodProductNum\":30,\"purchasePrice\":\"10\",\"expectDeliveryDate\":\"2021-05-12\",\"actualPurchaseNum\":null}],\"tradeCompanyIdList\":[\"13\"],\"supplierId\":\"347\",\"businessLineId\":\"1\",\"sameChainId\":49,\"title\":\"mevan test自动跑验证流程\",\"companyId\":null,\"channelCode\":\"ABM\",\"brandCode\":\"brand230\",\"purchaseBrandId\":\"1374262965415165953\",\"currencyCode\":\"AUD\",\"tradeType\":20,\"deliveryWarehouseId\":null,\"transferWarehouseId\":\"542\",\"salesWarehouseId\":\"9\",\"giveawayOrderSign\":1,\"ids\":\"\"}"</span><span>;</span>
        <span>PurchaseOrderDTO</span> purchaseOrderDTO <span>=</span> <span>TestConsole</span><span>.</span><span>toObject</span><span>(</span>saveOrderJson<span>,</span> <span>PurchaseOrderDTO</span><span>.</span><span>class</span><span>)</span><span>;</span>
        purchaseOrderDTO<span>.</span><span>setTitle</span><span>(</span><span>"mvn test(临时订单自动化流程验证)"</span><span>)</span><span>;</span>
        <span>List</span><span><span>&lt;</span><span>PurchaseOrderDetailDTO</span><span>></span></span> poOrderItemList <span>=</span> purchaseOrderDTO<span>.</span><span>getPoOrderItemList</span><span>(</span><span>)</span><span>;</span>
        <span>for</span> <span>(</span><span>PurchaseOrderDetailDTO</span> purchaseOrderDetailDTO <span>:</span> poOrderItemList<span>)</span> <span>{</span>
            <span>// 赠品刚开始设置成1</span>
            purchaseOrderDetailDTO<span>.</span><span>setGiveawayNum</span><span>(</span><span>1</span><span>)</span><span>;</span>
            purchaseOrderDetailDTO<span>.</span><span>setExpectDeliveryDate</span><span>(</span><span>JodaTimeUtils</span><span>.</span><span>addDay</span><span>(</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>,</span> <span>1</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>
        <span>// 1. 执行保存</span>
        <span>Long</span> purchaseOrderId <span>=</span> <span>createPurchaseOrder</span><span>(</span>purchaseOrderDTO<span>)</span><span>;</span>

        <span>// 2. 然后修改下商品明细</span>
        <span>List</span><span><span>&lt;</span><span>PurchaseOrderDetailDTO</span><span>></span></span> updateOrderDetailList <span>=</span> purchaseOrderDTO<span>.</span><span>getPoOrderItemList</span><span>(</span><span>)</span><span>;</span>
        <span>EnhanceStream</span><span>.</span><span>findAny</span><span>(</span>updateOrderDetailList<span>)</span>
                <span>.</span><span>ifPresent</span><span>(</span>order <span>-></span> <span>{</span>
                    order<span>.</span><span>setGiveawayNum</span><span>(</span><span>0</span><span>)</span><span>;</span>
                <span>}</span><span>)</span><span>;</span>
        purchaseOrderDTO<span>.</span><span>setId</span><span>(</span>purchaseOrderId<span>)</span><span>;</span><span>//第二次要修改要orderType</span>
        purchaseOrderDTO<span>.</span><span>setOrderType</span><span>(</span><span>PurchaseOrderTypeEnum</span><span>.</span>TEMPORARY_ORDER<span>.</span><span>getKey</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>updatePurchaseOrder</span><span>(</span>purchaseOrderDTO<span>)</span><span>;</span>

        <span>PurchaseOrderDTO</span> audit <span>=</span> <span>new</span> <span>PurchaseOrderDTO</span><span>(</span><span>)</span><span>;</span>
        audit<span>.</span><span>setId</span><span>(</span>purchaseOrderId<span>)</span><span>;</span>
        audit<span>.</span><span>setSameChainId</span><span>(</span>purchaseOrderDTO<span>.</span><span>getSameChainId</span><span>(</span><span>)</span><span>)</span><span>;</span>
        audit<span>.</span><span>setTradeCompanyIdList</span><span>(</span><span>(</span>purchaseOrderDTO<span>.</span><span>getTradeCompanyIdList</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
        audit<span>.</span><span>setSupplierId</span><span>(</span>purchaseOrderDTO<span>.</span><span>getSupplierId</span><span>(</span><span>)</span><span>)</span><span>;</span>
        audit<span>.</span><span>setCompanyId</span><span>(</span>purchaseOrderDTO<span>.</span><span>getCompanyId</span><span>(</span><span>)</span><span>)</span><span>;</span>

        <span>// 2. 执行审核</span>
        <span>JsonResult</span><span><span>&lt;</span><span>Void</span><span>></span></span> auditJson <span>=</span> <span>TestWebUtils</span><span>.</span><span>web</span><span>(</span><span>this</span><span>.</span>base<span>)</span><span>.</span><span>when</span><span>(</span><span>PurchaseOrderController</span><span>.</span><span>class</span><span>)</span><span>.</span><span>audit</span><span>(</span>audit<span>)</span><span>;</span>
        <span>PmsAssert</span><span>.</span><span>assertSuccess</span><span>(</span>auditJson<span>)</span><span>;</span>

        <span>// 3. 订单查询</span>
        <span>PurchaseOrderVO</span> purchaseOrderDetail <span>=</span> <span>queryPurchaseOrderDetail</span><span>(</span>purchaseOrderId<span>)</span><span>;</span>

        <span>// 3.1 对po单主单里面的必填值</span>
        <span>assertPo</span><span>(</span>purchaseOrderDetail<span>,</span> <span>false</span><span>,</span> purchaseOrderDetail<span>)</span><span>;</span>

        <span>// 4. 生成三笔到货通知单,然后关闭</span>
        <span>createArrivalOrderAndClose</span><span>(</span>purchaseOrderId<span>)</span><span>;</span>

        <span>// 5. PO订单手动关闭</span>
        <span>closePurchaseOrder</span><span>(</span>purchaseOrderId<span>,</span> <span>"maven test 自动化脚本"</span><span>)</span><span>;</span>

    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div><p>当执行完上面的单测用例,就完成了采购核心链路的自动化流程,就会生成下面单据。</p>
<p>采购单</p>
<p><img src="https://img.springlearn.cn/blog/learn_1621232807000.png" alt="" loading="lazy"></p>
<p>到货通知单</p>
<p><img src="https://img.springlearn.cn/blog/learn_1621232854000.png" alt="" loading="lazy"></p>
<h2 id="三、可复用能力"> 三、可复用能力</h2>
<p>通过2我们知道如何使用Mockito做对象行为的mock。还有一个点要思考的,这里单独拿出来说。就是测试用例的可复用行。什么叫可复用性呢?
就是说你这个单侧用例,在每次代码提交和编译时候执行，是否会有问题。如果是,且只能运行一次,那么这个就是不合格的。要做到可复用还要考虑两个地方。</p>
<h3 id="_3-1-接口参数动态生成"> 3.1 接口参数动态生成</h3>
<p>为什么要动态生成呢? 因为比如我们指定了一个id去作为查询条件,那么当我们这个id被删除的时候,这个测试用例一定是失败的。
这种场景下我们就应该动态去查询一个。如下，我们查询采购单的全链路数据。那么首先我先查询所有的有效的采购单,然后拿出任意一条
作为测试用例的查询条件即可。</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>queryFullLinkData</span><span>(</span><span>)</span> <span>{</span>
        <span>// 执行测试用例时候,动态获取一个采购单code</span>
        <span>String</span> orderCode <span>=</span> testOrderUtils<span>.</span><span>purchaseOrderCode</span><span>(</span><span>)</span><span>;</span>
        <span>TrackFullLinkDTO</span> trackFullLinkDTO <span>=</span> <span>new</span> <span>TrackFullLinkDTO</span><span>(</span><span>)</span><span>;</span>
        trackFullLinkDTO<span>.</span><span>setCurrent</span><span>(</span><span>1L</span><span>)</span><span>;</span>
        trackFullLinkDTO<span>.</span><span>setSize</span><span>(</span><span>10L</span><span>)</span><span>;</span>
        trackFullLinkDTO<span>.</span><span>setPurchaseOrderCode</span><span>(</span>orderCode<span>)</span><span>;</span>
        <span>JsonResult</span><span><span>&lt;</span><span>TrackFullLinkVO</span><span>></span></span> fullLinkData <span>=</span> <span>TestWebUtils</span><span>.</span><span>web</span><span>(</span><span>this</span><span>.</span>base<span>)</span><span>.</span><span>when</span><span>(</span><span>PurchaseOrderController</span><span>.</span><span>class</span><span>)</span><span>.</span><span>queryFullLinkData</span><span>(</span>trackFullLinkDTO<span>)</span><span>;</span>
        <span>PmsAssert</span><span>.</span><span>assertSuccess</span><span>(</span>fullLinkData<span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>上面这个用例只用声明一个测试的bean对象即可。在我们的 <code>src/test/java</code>包中。</p>
<p>TestComponent</p>
<div><pre><code><span>@TestComponent</span>
<span>public</span> <span>class</span> <span>TestOrderUtils</span> <span>{</span>

    <span>@Resource</span>
    <span>private</span> <span>ArrivalNoticeOrderController</span> arrivalNoticeOrderController<span>;</span>

    <span>public</span> <span>String</span> <span>purchaseOrderCode</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>purchaseOrder</span><span>(</span><span>)</span><span>.</span><span>getOrderCode</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="_3-2-业务流程要闭环"> 3.2 业务流程要闭环</h3>
<ol>
<li>要么数据执行完成自动回滚</li>
<li>要么数据不回滚,但是业务流程要闭环。</li>
</ol>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Arthas（阿尔萨斯） 能为你做什么</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/arthas/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/arthas/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1647177070000.png" alt="" loading="lazy"></p>
<p>Arthas 是Alibaba开源的Java诊断工具，深受开发者喜爱。</p>
<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-0"><label for="task-item-0"> 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-1"><label for="task-item-1"> 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-2"><label for="task-item-2"> 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-3"><label for="task-item-3"> 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-4"><label for="task-item-4"> 是否有一个全局视角来查看系统的运行状况？</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-5"><label for="task-item-5"> 有什么办法可以监控到JVM的实时运行状态？</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-6"><label for="task-item-6"> 怎么快速定位应用的热点，生成火焰图？</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-7"><label for="task-item-7"> 怎样直接从JVM内查找某个类的实例？</label></li>
</ul>
<p>Arthas支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">基础教程</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/arthas/learn/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/arthas/learn/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、启动arthas"> 一、启动Arthas</h2>
<div><pre><code>curl -O https://arthas.aliyun.com/arthas-boot.jar
java -jar arthas-boot.jar
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>启动命令 <code>java -jar arthas-boot.jar</code></p>
<h2 id="二、选择进程"> 二、选择进程</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1647178107000.png" alt="" loading="lazy"></p>
<p>直接选择我们要监控的进程，输入3进入</p>
<div><pre><code>[INFO] Attach process 28667 success.
[INFO] arthas-client connect 127.0.0.1 3658
  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.                           
 /  O  \ |  .--. &#39;&#39;--.  .--&#39;|  &#39;--&#39;  | /  O  \ &#39;   .-&#39;                          
|  .-.  ||  &#39;--&#39;.&#39;   |  |   |  .--.  ||  .-.  |`.  `-.                          
|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-&#39;    |                         
`--&#39; `--&#39;`--&#39; &#39;--&#39;   `--&#39;   `--&#39;  `--&#39;`--&#39; `--&#39;`-----&#39;                          

wiki       https://arthas.aliyun.com/doc                                        
tutorials  https://arthas.aliyun.com/doc/arthas-tutorials.html                  
version    3.5.6                                                                
main_class com.example.demo.DemoApplication                                     
pid        28667                                                                
time       2022-03-13 21:31:04   
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>提示已经连接上进程。</p>
<h2 id="三、基础信息查询命令"> 三、基础信息查询命令</h2>
<h3 id="_3-1-dashboard-看板命令"> 3.1 dashboard 看板命令</h3>
<p>输入 <code>dashboard</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1647178404000.png" alt="" loading="lazy"></p>
<p>会定时将应用信息输出到控制台上。</p>
<h3 id="_3-2-jad-反向编译"> 3.2 jad 反向编译</h3>
<p><code>jad com.example.demo.DemoApplication</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1647178673000.png" alt="" loading="lazy"></p>
<h3 id="_3-3-watch-监控指令"> 3.3 watch 监控指令</h3>
<p>这个命令是比较常用的命令,可以用来分析系统性能。</p>
<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>demo</span><span>;</span>

<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>GetMapping</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>ResponseBody</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>RestController</span><span>;</span>
<span>@RestController</span>
<span>public</span> <span>class</span> <span>WebController</span> <span>{</span>

    <span>@GetMapping</span><span>(</span><span>"/get"</span><span>)</span>
    <span>@ResponseBody</span>
    <span>public</span> <span>String</span> <span>get</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>
        <span>return</span> name<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>监控这个类 <code>watch com.example.demo.WebController get returnObj</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">参数名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">returnObj</td>
<td style="text-align:center">返回值</td>
</tr>
<tr>
<td style="text-align:center">params</td>
<td style="text-align:center">入参</td>
</tr>
<tr>
<td style="text-align:center">target</td>
<td style="text-align:center">方法调用方</td>
</tr>
</tbody>
</table>
<p><code>watch com.example.demo.WebController get {params,returnObj,target}</code></p>
<div><pre><code>[arthas@32818]$ watch com.example.demo.WebController get returnObj
Press Q or Ctrl+C to abort.
Affect(class count: 1 , method count: 1) cost in 120 ms, listenerId: 1
method=com.example.demo.WebController.get location=AtExit
ts=2022-03-13 21:41:56; [cost=1.317166ms] result=@String[123]
method=com.example.demo.WebController.get location=AtExit
ts=2022-03-13 21:42:03; [cost=0.051875ms] result=@String[测试]
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h1 id="四、退出"> 四、退出</h1>
<p>输入 <code>q</code></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">monitor/watch/trace相关</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/arthas/watch-cli/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/arthas/watch-cli/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、启动arthas"> 一、启动Arthas</h2>
<div><pre><code>curl -O https://arthas.aliyun.com/arthas-boot.jar
java -jar arthas-boot.jar
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>启动命令 <code>java -jar arthas-boot.jar</code></p>
<h2 id="二、选择进程"> 二、选择进程</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1647178107000.png" alt="" loading="lazy"></p>
<p>直接选择我们要监控的进程，输入3进入</p>
<div><pre><code>[INFO] Attach process 28667 success.
[INFO] arthas-client connect 127.0.0.1 3658
  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.                           
 /  O  \ |  .--. &#39;&#39;--.  .--&#39;|  &#39;--&#39;  | /  O  \ &#39;   .-&#39;                          
|  .-.  ||  &#39;--&#39;.&#39;   |  |   |  .--.  ||  .-.  |`.  `-.                          
|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-&#39;    |                         
`--&#39; `--&#39;`--&#39; &#39;--&#39;   `--&#39;   `--&#39;  `--&#39;`--&#39; `--&#39;`-----&#39;                          

wiki       https://arthas.aliyun.com/doc                                        
tutorials  https://arthas.aliyun.com/doc/arthas-tutorials.html                  
version    3.5.6                                                                
main_class com.example.demo.DemoApplication                                     
pid        28667                                                                
time       2022-03-13 21:31:04   
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>提示已经连接上进程。</p>
<h2 id="三、基础信息查询命令"> 三、基础信息查询命令</h2>
<h3 id="_3-1-dashboard-看板命令"> 3.1 dashboard 看板命令</h3>
<p>输入 <code>dashboard</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1647178404000.png" alt="" loading="lazy"></p>
<p>会定时将应用信息输出到控制台上。</p>
<h3 id="_3-2-jad-反向编译"> 3.2 jad 反向编译</h3>
<p><code>jad com.example.demo.DemoApplication</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1647178673000.png" alt="" loading="lazy"></p>
<h3 id="_3-3-watch-监控指令"> 3.3 watch 监控指令</h3>
<p>这个命令是比较常用的命令,可以用来分析系统性能。</p>
<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>demo</span><span>;</span>

<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>GetMapping</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>ResponseBody</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>RestController</span><span>;</span>
<span>@RestController</span>
<span>public</span> <span>class</span> <span>WebController</span> <span>{</span>

    <span>@GetMapping</span><span>(</span><span>"/get"</span><span>)</span>
    <span>@ResponseBody</span>
    <span>public</span> <span>String</span> <span>get</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>
        <span>return</span> name<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>监控这个类 <code>watch com.example.demo.WebController get returnObj</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">参数名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">returnObj</td>
<td style="text-align:center">返回值</td>
</tr>
<tr>
<td style="text-align:center">params</td>
<td style="text-align:center">入参</td>
</tr>
<tr>
<td style="text-align:center">target</td>
<td style="text-align:center">方法调用方</td>
</tr>
</tbody>
</table>
<p><code>watch com.example.demo.WebController get {params,returnObj,target}</code></p>
<div><pre><code>[arthas@32818]$ watch com.example.demo.WebController get returnObj
Press Q or Ctrl+C to abort.
Affect(class count: 1 , method count: 1) cost in 120 ms, listenerId: 1
method=com.example.demo.WebController.get location=AtExit
ts=2022-03-13 21:41:56; [cost=1.317166ms] result=@String[123]
method=com.example.demo.WebController.get location=AtExit
ts=2022-03-13 21:42:03; [cost=0.051875ms] result=@String[测试]
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h1 id="四、退出"> 四、退出</h1>
<p>输入 <code>q</code></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">class/classloader相关</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/arthas/class-cli/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/arthas/class-cli/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、启动arthas"> 一、启动Arthas</h2>
<div><pre><code>curl -O https://arthas.aliyun.com/arthas-boot.jar
java -jar arthas-boot.jar
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>启动命令 <code>java -jar arthas-boot.jar</code></p>
<h2 id="二、选择进程"> 二、选择进程</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1647178107000.png" alt="" loading="lazy"></p>
<p>直接选择我们要监控的进程，输入3进入</p>
<div><pre><code>[INFO] Attach process 28667 success.
[INFO] arthas-client connect 127.0.0.1 3658
  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.                           
 /  O  \ |  .--. &#39;&#39;--.  .--&#39;|  &#39;--&#39;  | /  O  \ &#39;   .-&#39;                          
|  .-.  ||  &#39;--&#39;.&#39;   |  |   |  .--.  ||  .-.  |`.  `-.                          
|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-&#39;    |                         
`--&#39; `--&#39;`--&#39; &#39;--&#39;   `--&#39;   `--&#39;  `--&#39;`--&#39; `--&#39;`-----&#39;                          

wiki       https://arthas.aliyun.com/doc                                        
tutorials  https://arthas.aliyun.com/doc/arthas-tutorials.html                  
version    3.5.6                                                                
main_class com.example.demo.DemoApplication                                     
pid        28667                                                                
time       2022-03-13 21:31:04   
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>提示已经连接上进程。</p>
<h2 id="三、基础信息查询命令"> 三、基础信息查询命令</h2>
<h3 id="_3-1-dashboard-看板命令"> 3.1 dashboard 看板命令</h3>
<p>输入 <code>dashboard</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1647178404000.png" alt="" loading="lazy"></p>
<p>会定时将应用信息输出到控制台上。</p>
<h3 id="_3-2-jad-反向编译"> 3.2 jad 反向编译</h3>
<p><code>jad com.example.demo.DemoApplication</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1647178673000.png" alt="" loading="lazy"></p>
<h3 id="_3-3-watch-监控指令"> 3.3 watch 监控指令</h3>
<p>这个命令是比较常用的命令,可以用来分析系统性能。</p>
<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>demo</span><span>;</span>

<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>GetMapping</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>ResponseBody</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>RestController</span><span>;</span>
<span>@RestController</span>
<span>public</span> <span>class</span> <span>WebController</span> <span>{</span>

    <span>@GetMapping</span><span>(</span><span>"/get"</span><span>)</span>
    <span>@ResponseBody</span>
    <span>public</span> <span>String</span> <span>get</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>
        <span>return</span> name<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>监控这个类 <code>watch com.example.demo.WebController get returnObj</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">参数名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">returnObj</td>
<td style="text-align:center">返回值</td>
</tr>
<tr>
<td style="text-align:center">params</td>
<td style="text-align:center">入参</td>
</tr>
<tr>
<td style="text-align:center">target</td>
<td style="text-align:center">方法调用方</td>
</tr>
</tbody>
</table>
<p><code>watch com.example.demo.WebController get {params,returnObj,target}</code></p>
<div><pre><code>[arthas@32818]$ watch com.example.demo.WebController get returnObj
Press Q or Ctrl+C to abort.
Affect(class count: 1 , method count: 1) cost in 120 ms, listenerId: 1
method=com.example.demo.WebController.get location=AtExit
ts=2022-03-13 21:41:56; [cost=1.317166ms] result=@String[123]
method=com.example.demo.WebController.get location=AtExit
ts=2022-03-13 21:42:03; [cost=0.051875ms] result=@String[测试]
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h1 id="四、退出"> 四、退出</h1>
<p>输入 <code>q</code></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">基础命令</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/arthas/base-cli/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/arthas/base-cli/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、启动arthas"> 一、启动Arthas</h2>
<div><pre><code>curl -O https://arthas.aliyun.com/arthas-boot.jar
java -jar arthas-boot.jar
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>启动命令 <code>java -jar arthas-boot.jar</code></p>
<h2 id="二、选择进程"> 二、选择进程</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1647178107000.png" alt="" loading="lazy"></p>
<p>直接选择我们要监控的进程，输入3进入</p>
<div><pre><code>[INFO] Attach process 28667 success.
[INFO] arthas-client connect 127.0.0.1 3658
  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.                           
 /  O  \ |  .--. &#39;&#39;--.  .--&#39;|  &#39;--&#39;  | /  O  \ &#39;   .-&#39;                          
|  .-.  ||  &#39;--&#39;.&#39;   |  |   |  .--.  ||  .-.  |`.  `-.                          
|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-&#39;    |                         
`--&#39; `--&#39;`--&#39; &#39;--&#39;   `--&#39;   `--&#39;  `--&#39;`--&#39; `--&#39;`-----&#39;                          

wiki       https://arthas.aliyun.com/doc                                        
tutorials  https://arthas.aliyun.com/doc/arthas-tutorials.html                  
version    3.5.6                                                                
main_class com.example.demo.DemoApplication                                     
pid        28667                                                                
time       2022-03-13 21:31:04   
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>提示已经连接上进程。</p>
<h2 id="三、基础信息查询命令"> 三、基础信息查询命令</h2>
<h3 id="_3-1-dashboard-看板命令"> 3.1 dashboard 看板命令</h3>
<p>输入 <code>dashboard</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1647178404000.png" alt="" loading="lazy"></p>
<p>会定时将应用信息输出到控制台上。</p>
<h3 id="_3-2-jad-反向编译"> 3.2 jad 反向编译</h3>
<p><code>jad com.example.demo.DemoApplication</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1647178673000.png" alt="" loading="lazy"></p>
<h3 id="_3-3-watch-监控指令"> 3.3 watch 监控指令</h3>
<p>这个命令是比较常用的命令,可以用来分析系统性能。</p>
<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>demo</span><span>;</span>

<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>GetMapping</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>ResponseBody</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>RestController</span><span>;</span>
<span>@RestController</span>
<span>public</span> <span>class</span> <span>WebController</span> <span>{</span>

    <span>@GetMapping</span><span>(</span><span>"/get"</span><span>)</span>
    <span>@ResponseBody</span>
    <span>public</span> <span>String</span> <span>get</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>
        <span>return</span> name<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>监控这个类 <code>watch com.example.demo.WebController get returnObj</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">参数名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">returnObj</td>
<td style="text-align:center">返回值</td>
</tr>
<tr>
<td style="text-align:center">params</td>
<td style="text-align:center">入参</td>
</tr>
<tr>
<td style="text-align:center">target</td>
<td style="text-align:center">方法调用方</td>
</tr>
</tbody>
</table>
<p><code>watch com.example.demo.WebController get {params,returnObj,target}</code></p>
<div><pre><code>[arthas@32818]$ watch com.example.demo.WebController get returnObj
Press Q or Ctrl+C to abort.
Affect(class count: 1 , method count: 1) cost in 120 ms, listenerId: 1
method=com.example.demo.WebController.get location=AtExit
ts=2022-03-13 21:41:56; [cost=1.317166ms] result=@String[123]
method=com.example.demo.WebController.get location=AtExit
ts=2022-03-13 21:42:03; [cost=0.051875ms] result=@String[测试]
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h1 id="四、退出"> 四、退出</h1>
<p>输入 <code>q</code></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">JVM相关命令</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/arthas/jvm-cli/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/arthas/jvm-cli/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、启动arthas"> 一、启动Arthas</h2>
<div><pre><code>curl -O https://arthas.aliyun.com/arthas-boot.jar
java -jar arthas-boot.jar
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>启动命令 <code>java -jar arthas-boot.jar</code></p>
<h2 id="二、选择进程"> 二、选择进程</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1647178107000.png" alt="" loading="lazy"></p>
<p>直接选择我们要监控的进程，输入3进入</p>
<div><pre><code>[INFO] Attach process 28667 success.
[INFO] arthas-client connect 127.0.0.1 3658
  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.                           
 /  O  \ |  .--. &#39;&#39;--.  .--&#39;|  &#39;--&#39;  | /  O  \ &#39;   .-&#39;                          
|  .-.  ||  &#39;--&#39;.&#39;   |  |   |  .--.  ||  .-.  |`.  `-.                          
|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-&#39;    |                         
`--&#39; `--&#39;`--&#39; &#39;--&#39;   `--&#39;   `--&#39;  `--&#39;`--&#39; `--&#39;`-----&#39;                          

wiki       https://arthas.aliyun.com/doc                                        
tutorials  https://arthas.aliyun.com/doc/arthas-tutorials.html                  
version    3.5.6                                                                
main_class com.example.demo.DemoApplication                                     
pid        28667                                                                
time       2022-03-13 21:31:04   
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>提示已经连接上进程。</p>
<h2 id="三、基础信息查询命令"> 三、基础信息查询命令</h2>
<h3 id="_3-1-dashboard-看板命令"> 3.1 dashboard 看板命令</h3>
<p>输入 <code>dashboard</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1647178404000.png" alt="" loading="lazy"></p>
<p>会定时将应用信息输出到控制台上。</p>
<h3 id="_3-2-jad-反向编译"> 3.2 jad 反向编译</h3>
<p><code>jad com.example.demo.DemoApplication</code></p>
<p><img src="https://img.springlearn.cn/blog/learn_1647178673000.png" alt="" loading="lazy"></p>
<h3 id="_3-3-watch-监控指令"> 3.3 watch 监控指令</h3>
<p>这个命令是比较常用的命令,可以用来分析系统性能。</p>
<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>demo</span><span>;</span>

<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>GetMapping</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>ResponseBody</span><span>;</span>
<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>RestController</span><span>;</span>
<span>@RestController</span>
<span>public</span> <span>class</span> <span>WebController</span> <span>{</span>

    <span>@GetMapping</span><span>(</span><span>"/get"</span><span>)</span>
    <span>@ResponseBody</span>
    <span>public</span> <span>String</span> <span>get</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>
        <span>return</span> name<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>监控这个类 <code>watch com.example.demo.WebController get returnObj</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">参数名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">returnObj</td>
<td style="text-align:center">返回值</td>
</tr>
<tr>
<td style="text-align:center">params</td>
<td style="text-align:center">入参</td>
</tr>
<tr>
<td style="text-align:center">target</td>
<td style="text-align:center">方法调用方</td>
</tr>
</tbody>
</table>
<p><code>watch com.example.demo.WebController get {params,returnObj,target}</code></p>
<div><pre><code>[arthas@32818]$ watch com.example.demo.WebController get returnObj
Press Q or Ctrl+C to abort.
Affect(class count: 1 , method count: 1) cost in 120 ms, listenerId: 1
method=com.example.demo.WebController.get location=AtExit
ts=2022-03-13 21:41:56; [cost=1.317166ms] result=@String[123]
method=com.example.demo.WebController.get location=AtExit
ts=2022-03-13 21:42:03; [cost=0.051875ms] result=@String[测试]
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h1 id="四、退出"> 四、退出</h1>
<p>输入 <code>q</code></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Javassist</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/bytecode/Javassist/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/bytecode/Javassist/"/>
    <updated>2022-03-24T17:05:50.000Z</updated>
    <content type="html"><![CDATA[<div><p>Javassist</p>
<p>Javassist是一个开源的分析、编辑和创建Java字节码的类库，可以直接编辑和生成Java生成的字节码。
相对于bcel, asm等这些工具，开发者不需要了解虚拟机指令，就能动态改变类的结构，或者动态生成类。javassist简单易用， 快速。</p>
</div>
<p><a href="https://github.com/lxchinesszz/bytecode-example" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/字节码编程-bytecode--example-green" alt="" loading="lazy"></a></p>
<h2 id="一、核心工具类"> 一、核心工具类</h2>
<table>
<thead>
<tr>
<th style="text-align:left">核心类</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ClassPool</td>
<td style="text-align:left">javassist的类池，使用ClassPool 类可以跟踪和控制所操作的类，它的工作方式与 JVM 类装载器非常相似</td>
</tr>
<tr>
<td style="text-align:left">CtClass</td>
<td style="text-align:left">CtClass提供了类的操作，如在类中动态添加新字段、方法和构造函数、以及改变类、父类和接口的方法。</td>
</tr>
<tr>
<td style="text-align:left">CtField</td>
<td style="text-align:left">类的属性，通过它可以给类创建新的属性，还可以修改已有的属性的类型，访问修饰符等</td>
</tr>
<tr>
<td style="text-align:left">CtMethod</td>
<td style="text-align:left">类中的方法，通过它可以给类创建新的方法，还可以修改返回类型，访问修饰符等， 甚至还可以修改方法体内容代码</td>
</tr>
<tr>
<td style="text-align:left">CtConstructor</td>
<td style="text-align:left">与CtMethod类似</td>
</tr>
</tbody>
</table>
<h2 id="二、api"> 二、API</h2>
<h3 id="_2-1-classpool"> 2.1 ClassPool</h3>
<div><pre><code>    <span>// 类库, jvm中所加载的class</span>
 	<span>ClassPool</span> pool <span>=</span> <span>ClassPool</span><span>.</span><span>getDefault</span><span>(</span><span>)</span><span>;</span>
	<span>// 加载一个已知的类, 注：参数必须为全量类名</span>
	<span>CtClass</span> ctClass <span>=</span> pool<span>.</span><span>get</span><span>(</span><span>"com.itheima.Student"</span><span>)</span><span>;</span>
	<span>// 创建一个新的类, 类名必须为全量类名</span>
	<span>CtClass</span> tClass <span>=</span> pool<span>.</span><span>makeClass</span><span>(</span><span>"com.itheima.Calculator"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="_2-2-ctfield"> 2.2 CtField</h3>
<div><pre><code>	<span>// 获取已知类的属性</span>
	<span>CtField</span> ctField <span>=</span> ctClass<span>.</span><span>getDeclaredField</span><span>(</span><span>"name"</span><span>)</span><span>;</span>
	<span>// 构建新的类的成员变量</span>
	<span>CtField</span> ctFieldNew <span>=</span> <span>new</span> <span>CtField</span><span>(</span><span>CtClass</span><span>.</span>intType<span>,</span><span>"age"</span><span>,</span>ctClass<span>)</span><span>;</span>
	<span>// 设置类的访问修饰符为public</span>
	ctFieldNew<span>.</span><span>setModifiers</span><span>(</span><span>Modifier</span><span>.</span>PUBLIC<span>)</span><span>;</span>
	<span>// 将属性添加到类中</span>
	ctClass<span>.</span><span>addField</span><span>(</span>ctFieldNew<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="_2-3-ctmethod"> 2.3 CtMethod</h3>
<div><pre><code>	<span>// 获取已有方法</span>
	<span>//创建新的方法, 参数1:方法的返回类型，参数2：名称，参数3：方法的参数，参数4：方法所属的类</span>
	<span>CtMethod</span> ctMethod <span>=</span> <span>new</span> <span>CtMethod</span><span>(</span><span>CtClass</span><span>.</span>intType<span>,</span> <span>"calc"</span><span>,</span> <span>new</span> <span>CtClass</span><span>[</span><span>]</span>
<span>{</span><span>CtClass</span><span>.</span>intType<span>,</span><span>CtClass</span><span>.</span>intType<span>}</span><span>,</span> tClass<span>)</span><span>;</span>
	<span>// 设置方法的访问修饰</span>
	ctMethod<span>.</span><span>setModifiers</span><span>(</span><span>Modifier</span><span>.</span>PUBLIC<span>)</span><span>;</span>
	<span>// 将新建的方法添加到类中</span>
	ctClass<span>.</span><span>addMethod</span><span>(</span>ctMethod<span>)</span><span>;</span>
	<span>// 方法体内容代码 $1代表第一个参数，$2代表第二个参数</span>
	ctMethod<span>.</span><span>setBody</span><span>(</span><span>"return $1 + $2;"</span><span>)</span><span>;</span> 

	<span>CtMethod</span> ctMethod <span>=</span> ctClass<span>.</span><span>getDeclaredMethod</span><span>(</span><span>"sayHello"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id="_2-4-ctconstructor"> 2.4 CtConstructor</h3>
<div><pre><code>    <span>// 获取已有的构造方法, 参数为构建方法的参数类型数组</span>
    <span>CtConstructor</span> ctConstructor <span>=</span> ctClass<span>.</span><span>getDeclaredConstructor</span><span>(</span><span>new</span> <span>CtClass</span><span>[</span><span>]</span><span>{</span><span>}</span><span>)</span><span>;</span>
    <span>// 创建新的构造方法</span>
    <span>CtConstructor</span> ctConstructor <span>=</span> <span>new</span> <span>CtConstructor</span><span>(</span><span>new</span> <span>CtClass</span><span>[</span><span>]</span><span>{</span><span>CtClass</span><span>.</span>intType<span>}</span><span>,</span>ctClass<span>)</span><span>;</span> ctConstructor<span>.</span><span>setModifiers</span><span>(</span><span>Modifier</span><span>.</span>PUBLIC<span>)</span><span>;</span>
    ctConstructor<span>.</span><span>setBody</span><span>(</span><span>"this.age = $1;"</span><span>)</span><span>;</span>
    ctClass<span>.</span><span>addConstructor</span><span>(</span>ctConstructor<span>)</span><span>;</span>
    <span>// 也可直接创建</span>
    ctConstructor <span>=</span> <span>CtNewConstructor</span><span>.</span><span>make</span><span>(</span><span>"public Student(int age){this.age=age;}"</span><span>,</span> ctClass<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="三、示例"> 三、示例</h2>
<div><pre><code><span>public</span> <span>class</span> <span>User</span> <span>{</span>

    <span>private</span> <span>String</span> name<span>;</span>

    <span>public</span> <span>User</span><span>(</span><span>)</span> <span>{</span>
    <span>}</span>

    <span>public</span> <span>User</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>
        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
    <span>}</span>

    <span>public</span> <span>String</span> <span>sayJavassist</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>"Hello Javassist"</span><span>;</span>
    <span>}</span>

    <span>@Override</span>
    <span>public</span> <span>String</span> <span>toString</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>"User{"</span> <span>+</span>
                <span>"name='"</span> <span>+</span> name <span>+</span> <span>'\''</span> <span>+</span>
                <span>'}'</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h3 id="_3-1-修改方法"> 3.1 修改方法</h3>
<div><pre><code>        <span>// 类库池, jvm中所加载的class</span>
        <span>ClassPool</span> pool <span>=</span> <span>ClassPool</span><span>.</span><span>getDefault</span><span>(</span><span>)</span><span>;</span>
        <span>// 获取指定的Student类</span>
        <span>CtClass</span> ctClass <span>=</span> pool<span>.</span><span>get</span><span>(</span><span>"com.example.test.User"</span><span>)</span><span>;</span>
        <span>// 获取sayHello方法</span>
        <span>CtMethod</span> ctMethod <span>=</span> ctClass<span>.</span><span>getDeclaredMethod</span><span>(</span><span>"sayJavassist"</span><span>)</span><span>;</span>
        <span>// 在方法的代码后追加 一段代码</span>
        ctMethod<span>.</span><span>insertAfter</span><span>(</span><span>"System.out.println(\"I'm Javassist.\");"</span><span>)</span><span>;</span>
        <span>// 使用当前的ClassLoader加载被修改后的类</span>
        <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> newClass <span>=</span> ctClass<span>.</span><span>toClass</span><span>(</span><span>)</span><span>;</span>
        <span>User</span> user <span>=</span> <span>(</span><span>User</span><span>)</span> newClass<span>.</span><span>newInstance</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>user<span>.</span><span>sayJavassist</span><span>(</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id="_3-2-动态添加方法"> 3.2 动态添加方法</h3>
<div><pre><code>        <span>// 类库池, jvm中所加载的class</span>
        <span>ClassPool</span> pool <span>=</span> <span>ClassPool</span><span>.</span><span>getDefault</span><span>(</span><span>)</span><span>;</span>
        <span>// 获取指定的Student类</span>
        <span>CtClass</span> ctClass <span>=</span> pool<span>.</span><span>get</span><span>(</span><span>"com.example.test.User"</span><span>)</span><span>;</span>
        <span>// 增加方法</span>
        <span>CtMethod</span> ctMethod <span>=</span> <span>new</span> <span>CtMethod</span><span>(</span><span>CtClass</span><span>.</span>intType<span>,</span> <span>"getAgeSum"</span><span>,</span>
                <span>new</span> <span>CtClass</span><span>[</span><span>]</span><span>{</span><span>CtClass</span><span>.</span>intType<span>,</span> <span>CtClass</span><span>.</span>intType<span>}</span><span>,</span> ctClass<span>)</span><span>;</span>
        <span>// 设置方法的访问修饰</span>
        ctMethod<span>.</span><span>setModifiers</span><span>(</span><span>Modifier</span><span>.</span>PUBLIC<span>)</span><span>;</span>
        <span>// 设置方法体代码</span>
        ctMethod<span>.</span><span>setBody</span><span>(</span><span>"return $1 + $2;"</span><span>)</span><span>;</span>
        <span>// 添加新建的方法到原有的类中</span>
        ctClass<span>.</span><span>addMethod</span><span>(</span>ctMethod<span>)</span><span>;</span>
        <span>// 加载修改后的类</span>
        ctClass<span>.</span><span>toClass</span><span>(</span><span>)</span><span>;</span>
        <span>// 创建对象</span>
        <span>User</span> stu <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>
        <span>// 获取calc方法</span>
        <span>Method</span> dMethod <span>=</span> <span>User</span><span>.</span><span>class</span><span>.</span><span>getDeclaredMethod</span><span>(</span><span>"getAgeSum"</span><span>,</span> <span>new</span> <span>Class</span><span>[</span><span>]</span>
                <span>{</span><span>int</span><span>.</span><span>class</span><span>,</span> <span>int</span><span>.</span><span>class</span><span>}</span><span>)</span><span>;</span>
        <span>// 反射调用 方法</span>
        <span>Object</span> result <span>=</span> dMethod<span>.</span><span>invoke</span><span>(</span>stu<span>,</span> <span>10</span><span>,</span> <span>20</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>result<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h3 id="_3-3-动态创建类"> 3.3 动态创建类</h3>
<div><pre><code>        <span>// 类库池, jvm中所加载的class</span>
        <span>ClassPool</span> pool <span>=</span> <span>ClassPool</span><span>.</span><span>getDefault</span><span>(</span><span>)</span><span>;</span>
        <span>// 创建一个学校类</span>
        <span>CtClass</span> schoolClass <span>=</span> pool<span>.</span><span>makeClass</span><span>(</span><span>"com.example.test.School"</span><span>)</span><span>;</span>
        <span>// 设置为公有类</span>
        schoolClass<span>.</span><span>setModifiers</span><span>(</span><span>Modifier</span><span>.</span>PUBLIC<span>)</span><span>;</span>
        <span>// 获取String类型</span>
        <span>CtClass</span> stringClass <span>=</span> pool<span>.</span><span>get</span><span>(</span><span>"java.lang.String"</span><span>)</span><span>;</span>
        <span>// 获取list类型</span>
        <span>CtClass</span> listClass <span>=</span> pool<span>.</span><span>get</span><span>(</span><span>"java.util.List"</span><span>)</span><span>;</span>
        <span>// 获取学生的类型</span>
        <span>CtClass</span> userClass <span>=</span> pool<span>.</span><span>get</span><span>(</span><span>"com.example.test.User"</span><span>)</span><span>;</span>
        <span>// 给学校添加一个校名属性</span>
        <span>CtField</span> nameField <span>=</span> <span>new</span> <span>CtField</span><span>(</span>stringClass<span>,</span> <span>"schoolName"</span><span>,</span> schoolClass<span>)</span><span>;</span>
        nameField<span>.</span><span>setModifiers</span><span>(</span><span>Modifier</span><span>.</span>PUBLIC<span>)</span><span>;</span>
        schoolClass<span>.</span><span>addField</span><span>(</span>nameField<span>)</span><span>;</span>
        <span>// 给学校添加一个学生集合</span>
        <span>CtField</span> studentList <span>=</span> <span>new</span> <span>CtField</span><span>(</span>listClass<span>,</span> <span>"users"</span><span>,</span> schoolClass<span>)</span><span>;</span>
        studentList<span>.</span><span>setModifiers</span><span>(</span><span>Modifier</span><span>.</span>PUBLIC<span>)</span><span>;</span>
        schoolClass<span>.</span><span>addField</span><span>(</span>studentList<span>)</span><span>;</span>
        <span>// 给学校一个空构造</span>
        <span>CtConstructor</span> ctConstructor <span>=</span> <span>CtNewConstructor</span><span>.</span><span>make</span><span>(</span><span>"public School() "</span> <span>+</span>
                <span>"{this.schoolName=\"湖畔小学\";this.users = new java.util.ArrayList();}"</span><span>,</span> schoolClass<span>)</span><span>;</span>
        schoolClass<span>.</span><span>addConstructor</span><span>(</span>ctConstructor<span>)</span><span>;</span>

        <span>// 给学校一个addUser的方法</span>
        <span>CtMethod</span> m <span>=</span> <span>new</span> <span>CtMethod</span><span>(</span><span>CtClass</span><span>.</span>voidType<span>,</span> <span>"addUser"</span><span>,</span> <span>new</span> <span>CtClass</span><span>[</span><span>]</span><span>{</span>userClass<span>}</span><span>,</span> schoolClass<span>)</span><span>;</span>
        m<span>.</span><span>setModifiers</span><span>(</span><span>Modifier</span><span>.</span>PUBLIC<span>)</span><span>;</span>
        <span>// 添加学生对象到students属性中, $1代表参数1</span>
        m<span>.</span><span>setBody</span><span>(</span><span>"this.users.add($1);"</span><span>)</span><span>;</span>
        schoolClass<span>.</span><span>addMethod</span><span>(</span>m<span>)</span><span>;</span>

        <span>// 给学校添加一个介绍的方法</span>
        <span>CtMethod</span> introduce <span>=</span> <span>new</span> <span>CtMethod</span><span>(</span><span>CtClass</span><span>.</span>voidType<span>,</span> <span>"introduce"</span><span>,</span> <span>new</span> <span>CtClass</span><span>[</span><span>]</span><span>{</span><span>}</span><span>,</span> schoolClass<span>)</span><span>;</span>
        introduce<span>.</span><span>setBody</span><span>(</span><span>"System.out.println(\"The School name is \" + this.schoolName);"</span><span>)</span><span>;</span>
        introduce<span>.</span><span>insertAfter</span><span>(</span><span>"System.out.println(this.users);"</span><span>)</span><span>;</span>
        schoolClass<span>.</span><span>addMethod</span><span>(</span>introduce<span>)</span><span>;</span>

        <span>// 加载修改后的学校</span>
        <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> schoolLoadClass <span>=</span> schoolClass<span>.</span><span>toClass</span><span>(</span><span>)</span><span>;</span>
        <span>// 构建一个学校(空构造)</span>
        <span>Object</span> school <span>=</span> schoolLoadClass<span>.</span><span>newInstance</span><span>(</span><span>)</span><span>;</span>
        <span>// 获取添加用户方法</span>
        <span>Method</span> addUserMethod <span>=</span> schoolLoadClass<span>.</span><span>getDeclaredMethod</span><span>(</span><span>"addUser"</span><span>,</span> userClass<span>.</span><span>toClass</span><span>(</span><span>)</span><span>)</span><span>;</span>
        addUserMethod<span>.</span><span>invoke</span><span>(</span>school<span>,</span> <span>new</span> <span>User</span><span>(</span><span>"小明"</span><span>)</span><span>)</span><span>;</span>
        addUserMethod<span>.</span><span>invoke</span><span>(</span>school<span>,</span> <span>new</span> <span>User</span><span>(</span><span>"小张"</span><span>)</span><span>)</span><span>;</span>
        <span>// 获取介绍方法，把刚才的信息给打印处理</span>
        <span>Method</span> introduceMethod <span>=</span> school<span>.</span><span>getClass</span><span>(</span><span>)</span><span>.</span><span>getDeclaredMethod</span><span>(</span><span>"introduce"</span><span>)</span><span>;</span>
        introduceMethod<span>.</span><span>invoke</span><span>(</span>school<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><div><pre><code>The School name is 湖畔小学
[User{name=&#39;小明&#39;}, User{name=&#39;小张&#39;}]
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T17:05:50.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Disruptor高性能队列</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/disruptor/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/disruptor/"/>
    <updated>2022-05-22T07:02:41.000Z</updated>
    <content type="html"><![CDATA[<div><p>介绍</p>
<p>Disruptor是英国外汇交易公司LMAX开发的一个高性能队列，研发的初衷是解决内存队列的延迟问题。与Kafka、RabbitMQ用于服务间的消息队列不同，disruptor一般用于线程间消息的传递。基于Disruptor开发的系统单线程能支撑每秒600万订单。</p>
<p>disruptor适用于多个线程之间的消息队列，<code>作用与ArrayBlockingQueue有相似之处</code>，但是disruptor从功能、性能都远好于ArrayBlockingQueue，当多个线程之间传递大量数据或对性能要求较高时，可以考虑使用disruptor作为ArrayBlockingQueue的替代者。
官方也对disruptor和ArrayBlockingQueue的性能在不同的应用场景下做了对比，目测性能只有有5~10倍左右的提升。</p>
</div>
<h2 id="一、disruptor的好处"> 一、Disruptor的好处</h2>
<p>通过前面的介绍我们知道Disruptor作用与ArrayBlockingQueue类似,适用于多个线程之间的消息队列。为什么呢?
因为Java中的队列就以BlockingQueue为例子,从命名上就能看出是一个阻塞的队列。当多线程的环境下会进行加锁。所以导致了性能不高，而Disruptor的设计
非常的巧妙,他形成了一个环形队列。通过消除锁,从而提高了性能。</p>
<p><a href="/learn/java/BlockingQueue/">如何你还不了解Queue,请点这里✈️</a></p>
<p>Log4j2 异步输出，在使用了Disruptor的提升如下图。来源<a href="https://logging.apache.org/log4j/2.x/performance.html" target="_blank" rel="noopener noreferrer">log4j2官网</a></p>
<p><img src="https://img.springlearn.cn/blog/learn_1653013607000.png" alt="" loading="lazy"></p>
<h2 id="二、为什么这么快"> 二、为什么这么快</h2>
<p>这里涉及到的知识点比较多,如果想学性能优化的同学可以去看看。可以学习里面的设计思想和优化的方向。</p>
<p><a href="https://www.jianshu.com/p/bad7b4b44e48" target="_blank" rel="noopener noreferrer">Disruptor详解</a></p>
<p><a href="/learn/java/Contended/">伪共享概念</a></p>
<h2 id="三、如何使用"> 三、如何使用</h2>
<div><pre><code>        <span><span><span>&lt;</span>dependency</span><span>></span></span>
            <span><span><span>&lt;</span>groupId</span><span>></span></span>com.lmax<span><span><span>&lt;/</span>groupId</span><span>></span></span>
            <span><span><span>&lt;</span>artifactId</span><span>></span></span>disruptor<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
            <span><span><span>&lt;</span>version</span><span>></span></span>3.4.2<span><span><span>&lt;/</span>version</span><span>></span></span>
        <span><span><span>&lt;/</span>dependency</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_3-1-定义disruptor"> 3.1 定义Disruptor</h2>
<div><pre><code>        <span>//指定RingBuffer大小,</span>
        <span>//必须是2的N次方</span>
        <span>int</span> bufferSize <span>=</span> <span>1024</span><span>;</span>

        <span>//构建Disruptor</span>
        <span>Disruptor</span><span><span>&lt;</span><span>LongEvent</span><span>></span></span> disruptor
                <span>=</span> <span>new</span> <span>Disruptor</span><span><span>&lt;</span><span>></span></span><span>(</span>
                <span>LongEvent</span><span>::</span><span>new</span><span>,</span>
                bufferSize<span>,</span>
                <span>DaemonThreadFactory</span><span>.</span>INSTANCE<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_3-2-定义事件处理器"> 3.2 定义事件处理器</h2>
<div><pre><code>        <span>//注册事件处理器</span>
        disruptor<span>.</span><span>handleEventsWith</span><span>(</span>
                <span>(</span>event<span>,</span> sequence<span>,</span> endOfBatch<span>)</span> <span>-></span>
                        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"E: "</span> <span>+</span> event<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_3-3-生产数据"> 3.3 生产数据</h2>
<div><pre><code>        <span>//启动Disruptor</span>
        disruptor<span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>

        <span>//获取RingBuffer</span>
        <span>RingBuffer</span><span><span>&lt;</span><span>LongEvent</span><span>></span></span> ringBuffer
                <span>=</span> disruptor<span>.</span><span>getRingBuffer</span><span>(</span><span>)</span><span>;</span>
        <span>//生产Event</span>
        <span>ByteBuffer</span> bb <span>=</span> <span>ByteBuffer</span><span>.</span><span>allocate</span><span>(</span><span>8</span><span>)</span><span>;</span>
        <span>for</span> <span>(</span><span>long</span> l <span>=</span> <span>0</span><span>;</span> l <span>&lt;</span> <span>10</span><span>;</span> l<span>++</span><span>)</span> <span>{</span>
            bb<span>.</span><span>putLong</span><span>(</span><span>0</span><span>,</span> l<span>)</span><span>;</span>
            <span>//生产者生产消息</span>
            ringBuffer<span>.</span><span>publishEvent</span><span>(</span>
                    <span>(</span>event<span>,</span> sequence<span>,</span> buffer<span>)</span> <span>-></span>
                            event<span>.</span><span>setValue</span><span>(</span>buffer<span>.</span><span>getLong</span><span>(</span><span>0</span><span>)</span><span>)</span><span>,</span> bb<span>)</span><span>;</span>
        <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Guava：用于 Java 的 Google 核心库</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/guava/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/guava/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/45e5eb02492f9e3bf6345cfd7ca7ecb42dca2268fef7af35dfe3da82740b4000/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f676f6f676c652f67756176612e737667" alt="" loading="lazy">
<img src="https://github.com/google/guava/workflows/CI/badge.svg?branch=master" alt="" loading="lazy"></p>
<p>Guava 是一组来自 Google 的核心 Java 库，其中包括新的集合类型（例如 multimap 和 multiset）、不可变集合、图形库以及用于并发、I/O、散列、缓存、原语、字符串等的实用程序！它广泛用于 Google 内部的大多数 Java 项目，也被许多其他公司广泛使用</p>
<div><pre><code><span><span><span>&lt;</span>dependency</span><span>></span></span>
    <span><span><span>&lt;</span>groupId</span><span>></span></span>com.google.guava<span><span><span>&lt;/</span>groupId</span><span>></span></span>
    <span><span><span>&lt;</span>artifactId</span><span>></span></span>guava<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
    <span><span><span>&lt;</span>version</span><span>></span></span>31.1-jre<span><span><span>&lt;/</span>version</span><span>></span></span>
    <span>&lt;!-- or, for Android: --></span>
    <span><span><span>&lt;</span>version</span><span>></span></span>31.1-android<span><span><span>&lt;/</span>version</span><span>></span></span>
<span><span><span>&lt;/</span>dependency</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Druid SQL解析</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/druid/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/druid/"/>
    <updated>2022-05-08T04:06:59.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1648308606000.png" alt="" loading="lazy"></p>
<div><p>相关信息</p>
<p>本篇主要学习Druid 对Sql的语法解析。学习完之后,我们可以对任意sql进行解析,同时也可以基于AST语法树来生成sql语句。</p>
</div>
<p><a href="https://github.com/lxchinesszz/sql-parse-example" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/SQL解析-sql--parse--example-green" alt="" loading="lazy"></a></p>
<h2 id="一、ast"> 一、AST</h2>
<p>AST是abstract syntax tree的缩写，也就是抽象语法树。和所有的Parser一样，Druid Parser会生成一个抽象语法树。</p>
<p>在Druid中，AST节点类型主要包括SQLObject、SQLExpr、SQLStatement三种抽象类型。</p>
<div><pre><code>
<span>interface</span> <span>SQLObject</span> <span>{</span><span>}</span>
<span>interface</span> <span>SQLExpr</span> <span>extends</span> <span>SQLObject</span> <span>{</span><span>}</span>
<span>interface</span> <span>SQLStatement</span> <span>extends</span> <span>SQLObject</span> <span>{</span><span>}</span>

<span>interface</span> <span>SQLTableSource</span> <span>extends</span> <span>SQLObject</span> <span>{</span><span>}</span>
<span>class</span> <span>SQLSelect</span> <span>extends</span> <span>SQLObject</span> <span>{</span><span>}</span>
<span>class</span> <span>SQLSelectQueryBlock</span> <span>extends</span> <span>SQLObject</span> <span>{</span><span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="二、语法树解析"> 二、语法树解析</h2>
<h2 id="_2-1-核心类介绍"> 2.1 核心类介绍</h2>
<h3 id="_2-1-1-sqlstatemment-dql-dml顶级抽象"> 2.1.1 SQLStatemment DQL &amp; DML顶级抽象</h3>
<ul>
<li>DQL 数据查询语言 select</li>
<li>DML 数据操纵语言 insert update delete</li>
</ul>
<p>最常用的Statement当然是SELECT/UPDATE/DELETE/INSERT，他们分别是</p>
<table>
<thead>
<tr>
<th style="text-align:left">核心类</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SQLSelectStatement</td>
<td style="text-align:left">查询语句</td>
</tr>
<tr>
<td style="text-align:left">SQLUpdateStatement</td>
<td style="text-align:left">更新语句</td>
</tr>
<tr>
<td style="text-align:left">SQLDeleteStatement</td>
<td style="text-align:left">删除语句</td>
</tr>
<tr>
<td style="text-align:left">SQLInsertStatement</td>
<td style="text-align:left">新增语句</td>
</tr>
</tbody>
</table>
<div><pre><code><span>@Test</span>
<span>public</span> <span>void</span> <span>statement</span><span>(</span><span>)</span> <span>{</span>
    <span>// 以下全部 true</span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>SQLUtils</span><span>.</span><span>parseSingleMysqlStatement</span><span>(</span><span>"select * from users"</span><span>)</span> <span>instanceof</span> <span>SQLSelectStatement</span><span>)</span><span>;</span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>SQLUtils</span><span>.</span><span>parseSingleMysqlStatement</span><span>(</span><span>"insert into users(id,name,age) values (1,'孙悟空',500)"</span><span>)</span> <span>instanceof</span> <span>SQLInsertStatement</span><span>)</span><span>;</span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>SQLUtils</span><span>.</span><span>parseSingleMysqlStatement</span><span>(</span><span>"update users set name = '唐僧' where id = 1 "</span><span>)</span> <span>instanceof</span> <span>SQLUpdateStatement</span><span>)</span><span>;</span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>SQLUtils</span><span>.</span><span>parseSingleMysqlStatement</span><span>(</span><span>"delete from users where id = 1"</span><span>)</span> <span>instanceof</span> <span>SQLDeleteStatement</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="_2-1-2-sqlselect-sql查询"> 2.1.2 SQLSelect SQL查询</h3>
<p>SQLSelectStatement包含一个SQLSelect，SQLSelect包含一个SQLSelectQuery。SQLSelectQuery有主要的两个派生类，
分别是SQLSelectQueryBlock(单表sql查询)和SQLUnionQuery(<a href="https://www.w3school.com.cn/sql/sql_union.asp" target="_blank" rel="noopener noreferrer">union查询</a>)。</p>
<div><pre><code>    <span>/**
     * SQLSelectStatement包含一个SQLSelect，SQLSelect包含一个SQLSelectQuery。SQLSelectQuery有主要的两个派生类，
     * 分别是SQLSelectQueryBlock(单表sql查询)和SQLUnionQuery(联合查询)。
     */</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>SQLSelectQuery</span><span>(</span><span>)</span> <span>{</span>
        <span>// true</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>parseSQLSelectQuery</span><span>(</span><span>"select * from users"</span><span>)</span> <span>instanceof</span> <span>SQLSelectQueryBlock</span><span>)</span><span>;</span>
        <span>// true</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>parseSQLSelectQuery</span><span>(</span><span>"select name from users union select name from school"</span><span>)</span> <span>instanceof</span> <span>SQLUnionQuery</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>SQLSelectQuery</span> <span>parseSQLSelectQuery</span><span>(</span><span>String</span> sql<span>)</span> <span>{</span>
        <span>SQLStatement</span> sqlStatement <span>=</span> <span>SQLUtils</span><span>.</span><span>parseSingleMysqlStatement</span><span>(</span>sql<span>)</span><span>;</span>
        <span>SQLSelectStatement</span> sqlSelectStatement <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>sqlStatement<span>,</span> <span>SQLSelectStatement</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>SQLSelect</span> select <span>=</span> sqlSelectStatement<span>.</span><span>getSelect</span><span>(</span><span>)</span><span>;</span>
        <span>return</span> select<span>.</span><span>getQuery</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id="_2-1-3-sqlexpr"> 2.1.3 SQLExpr</h3>
<p>SQLExpr 是有几个实现类的。</p>
<div><pre><code><span>select</span> id<span>,</span>name<span>,</span>age <span>from</span> users <span>where</span> id <span>=</span> <span>1</span> <span>and</span> name <span>=</span> <span>'孙悟空'</span><span>;</span>

<span>select</span> u<span>.</span>id<span>,</span> u<span>.</span>name <span>from</span> users <span>as</span> u <span>where</span> id <span>=</span> <span>1</span> <span>and</span> name <span>=</span> ?<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><table>
<thead>
<tr>
<th style="text-align:left">核心类</th>
<th style="text-align:left">举例</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">适用范围</th>
<th style="text-align:left">快速记忆</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SQLIdentifierExpr</td>
<td style="text-align:left">id,name,age</td>
<td style="text-align:left">SQLIdentifierExpr</td>
<td style="text-align:left">查询字段或者where条件</td>
<td style="text-align:left">唯一标记</td>
</tr>
<tr>
<td style="text-align:left">SQLPropertyExpr</td>
<td style="text-align:left">u.id,u.name</td>
<td style="text-align:left">区别于SQLIdentifierExpr,适用于有别名的场景; SQLPropertyExpr.name = id, SQLPropertyExpr.owner = SQLIdentifierExpr = u）</td>
<td style="text-align:left">查询字段或者where条件</td>
<td style="text-align:left">有别名就是它</td>
</tr>
<tr>
<td style="text-align:left">SQLBinaryOpExpr</td>
<td style="text-align:left">id = 1, id &gt; 5</td>
<td style="text-align:left">SQLBinaryOpExpr(left = SQLIdentifierExpr = id ,right = SQLValuableExpr = 1)</td>
<td style="text-align:left">where条件</td>
<td style="text-align:left">有操作符就是它</td>
</tr>
<tr>
<td style="text-align:left">SQLVariantRefExpr</td>
<td style="text-align:left">id = ?</td>
<td style="text-align:left">变量</td>
<td style="text-align:left">where条件</td>
<td style="text-align:left">有变量符就是它</td>
</tr>
<tr>
<td style="text-align:left">SQLIntegerExpr</td>
<td style="text-align:left">id = 1</td>
<td style="text-align:left">数字类型</td>
<td style="text-align:left">值类型</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">SQLCharExpr</td>
<td style="text-align:left">name = '孙悟空'</td>
<td style="text-align:left">字符类型</td>
<td style="text-align:left">值类型</td>
<td style="text-align:left">-</td>
</tr>
</tbody>
</table>
<h4 id="_2-1-3-1-sqlbinaryopexpr"> 2.1.3.1 SQLBinaryOpExpr</h4>
<div><pre><code>    <span>/**
     * 操作符相关: SQLBinaryOpExpr
     */</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>SQLBinaryOpExpr</span><span>(</span><span>)</span> <span>{</span>
        <span>String</span> sql <span>=</span> <span>"select * from users where id > 1 and age = 18"</span><span>;</span>
        <span>SQLSelectQuery</span> sqlSelectQuery <span>=</span> <span>Utils</span><span>.</span><span>parseSQLSelectQuery</span><span>(</span>sql<span>)</span><span>;</span>
        <span>SQLSelectQueryBlock</span> selectQueryBlock <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>sqlSelectQuery<span>,</span> <span>SQLSelectQueryBlock</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>SQLExpr</span> where <span>=</span> selectQueryBlock<span>.</span><span>getWhere</span><span>(</span><span>)</span><span>;</span>
        <span>List</span><span><span>&lt;</span><span>SQLObject</span><span>></span></span> conditions <span>=</span> where<span>.</span><span>getChildren</span><span>(</span><span>)</span><span>;</span>
        <span>// [id > 1 , age = 18] 出现了操作符所以是SQLBinaryOpExpr</span>
        <span>for</span> <span>(</span><span>SQLObject</span> condition <span>:</span> conditions<span>)</span> <span>{</span>
            <span>SQLBinaryOpExpr</span> conditionExpr <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>condition<span>,</span> <span>SQLBinaryOpExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
            <span>SQLBinaryOperator</span> operator <span>=</span> conditionExpr<span>.</span><span>getOperator</span><span>(</span><span>)</span><span>;</span>
            <span>SQLIdentifierExpr</span> conditionColumn <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>conditionExpr<span>.</span><span>getLeft</span><span>(</span><span>)</span><span>,</span> <span>SQLIdentifierExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
            <span>SQLValuableExpr</span> conditionColumnValue <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>conditionExpr<span>.</span><span>getRight</span><span>(</span><span>)</span><span>,</span> <span>SQLValuableExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
            <span>Utils</span><span>.</span><span>print</span><span>(</span><span>"条件字段:{},操作符号:{},条件值:{}"</span><span>,</span> conditionColumn<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> operator<span>.</span>name<span>,</span> conditionColumnValue<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h4 id="_2-1-3-2-sqlvariantrefexpr"> 2.1.3.2 SQLVariantRefExpr</h4>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>SQLVariantRefExpr</span><span>(</span><span>)</span> <span>{</span>
        <span>String</span> sql <span>=</span> <span>"select * from users where id = ? and name = ?"</span><span>;</span>
        <span>SQLSelectQuery</span> sqlSelectQuery <span>=</span> <span>Utils</span><span>.</span><span>parseSQLSelectQuery</span><span>(</span>sql<span>)</span><span>;</span>
        <span>SQLSelectQueryBlock</span> selectQueryBlock <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>sqlSelectQuery<span>,</span> <span>SQLSelectQueryBlock</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>SQLExpr</span> where <span>=</span> selectQueryBlock<span>.</span><span>getWhere</span><span>(</span><span>)</span><span>;</span>
        <span>List</span><span><span>&lt;</span><span>SQLObject</span><span>></span></span> conditions <span>=</span> where<span>.</span><span>getChildren</span><span>(</span><span>)</span><span>;</span>
        <span>// [id = ?] 出现了变量符,所以要用SQLVariantRefExpr</span>
        <span>for</span> <span>(</span><span>SQLObject</span> condition <span>:</span> conditions<span>)</span> <span>{</span>
            <span>SQLBinaryOpExpr</span> conditionExpr <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>condition<span>,</span> <span>SQLBinaryOpExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
            <span>SQLBinaryOperator</span> operator <span>=</span> conditionExpr<span>.</span><span>getOperator</span><span>(</span><span>)</span><span>;</span>
            <span>SQLIdentifierExpr</span> conditionColumn <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>conditionExpr<span>.</span><span>getLeft</span><span>(</span><span>)</span><span>,</span> <span>SQLIdentifierExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
            <span>SQLVariantRefExpr</span> conditionColumnValue <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>conditionExpr<span>.</span><span>getRight</span><span>(</span><span>)</span><span>,</span> <span>SQLVariantRefExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
            <span>int</span> index <span>=</span> conditionColumnValue<span>.</span><span>getIndex</span><span>(</span><span>)</span><span>;</span>
            <span>Utils</span><span>.</span><span>print</span><span>(</span><span>"条件字段:{},操作符号:{},索引位:{}"</span><span>,</span> conditionColumn<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> operator<span>.</span>name<span>,</span> index<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id="_2-1-4-sqltablesource"> 2.1.4 SQLTableSource</h3>
<p>常见的SQLTableSource包括SQLExprTableSource、SQLJoinTableSource、SQLSubqueryTableSource、SQLWithSubqueryClause.Entry</p>
<table>
<thead>
<tr>
<th style="text-align:left">核心类</th>
<th style="text-align:left">举例</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">快速记忆</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SQLExprTableSource</td>
<td style="text-align:left">select * from emp where i = 3</td>
<td style="text-align:left">name = SQLIdentifierExpr = emp</td>
<td style="text-align:left">单表查询</td>
</tr>
<tr>
<td style="text-align:left">SQLJoinTableSource</td>
<td style="text-align:left">select * from emp e inner join org o on e.org_id = o.id</td>
<td style="text-align:left">left = SQLExprTableSource(emp e),right = SQLExprTableSource(org o), condition = SQLBinaryOpExpr(e.org_id = o.id)</td>
<td style="text-align:left">join 查询使用</td>
</tr>
<tr>
<td style="text-align:left">SQLSubqueryTableSource</td>
<td style="text-align:left">select * from (select * from temp) a</td>
<td style="text-align:left">from(...)是一个SQLSubqueryTableSource</td>
<td style="text-align:left">子查询语句</td>
</tr>
<tr>
<td style="text-align:left">SQLWithSubqueryClause</td>
<td style="text-align:left">WITH RECURSIVE ancestors AS (SELECT * FROM org UNION SELECT f.* FROM org f, ancestors a WHERE f.id = a.parent_id ) SELECT * FROM ancestors;</td>
<td style="text-align:left">ancestors AS (...) 是一个SQLWithSubqueryClause.Entry</td>
<td style="text-align:left">with</td>
</tr>
</tbody>
</table>
<h2 id="_2-2-sql语句解析示例"> 2.2 SQL语句解析示例</h2>
<h3 id="_2-2-1-解析-where"> 2.2.1 解析 Where</h3>
<p>注意如果条件语句中只有一个条件,那么where就是一个 <code>SQLBinaryOpExpr</code>。
当条件大于2个,使用 <code>where.getChildren()</code></p>
<div><pre><code>    <span>/**
     * 判断where要
     * 1. 注意是SQLBinaryOpExpr(id = 1) or (u.id = 1) 需要注意是否使用了别名&lt;br>
     * 2. 注意如果只有一个查询添加 where本身就是一个SQLBinaryOpExpr，如果是多个就要用 where.getChildren()&lt;br>&lt;/>
     * 如果有别名: SQLPropertyExpr(name = id , ownerName = u)&lt;br>
     * 如果没别名: SQLIdentifierExpr(name = id) &lt;br>&lt;/>
     * 值对象: SQLValuableExpr
     *
     * @param where 条件对象
     */</span>
    <span>public</span> <span>static</span> <span>void</span> <span>parseWhere</span><span>(</span><span>SQLExpr</span> where<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>where <span>instanceof</span> <span>SQLBinaryOpExpr</span><span>)</span> <span>{</span>
            <span>parseSQLBinaryOpExpr</span><span>(</span><span>cast</span><span>(</span>where<span>,</span> <span>SQLBinaryOpExpr</span><span>.</span><span>class</span><span>)</span><span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>List</span><span><span>&lt;</span><span>SQLObject</span><span>></span></span> childrenList <span>=</span> where<span>.</span><span>getChildren</span><span>(</span><span>)</span><span>;</span>
            <span>for</span> <span>(</span><span>SQLObject</span> sqlObject <span>:</span> childrenList<span>)</span> <span>{</span>
                <span>// 包含了 left 和 right</span>
                <span>SQLBinaryOpExpr</span> conditionBinary <span>=</span> <span>cast</span><span>(</span>sqlObject<span>,</span> <span>SQLBinaryOpExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
                <span>parseSQLBinaryOpExpr</span><span>(</span>conditionBinary<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>

    <span>}</span>
    
     <span>public</span> <span>static</span> <span>void</span> <span>parseSQLBinaryOpExpr</span><span>(</span><span>SQLBinaryOpExpr</span> conditionBinary<span>)</span> <span>{</span>
        <span>SQLExpr</span> conditionExpr <span>=</span> conditionBinary<span>.</span><span>getLeft</span><span>(</span><span>)</span><span>;</span>
        <span>SQLExpr</span> conditionValueExpr <span>=</span> conditionBinary<span>.</span><span>getRight</span><span>(</span><span>)</span><span>;</span>
        <span>// 左边有别名所以是SQLPropertyExpr</span>
        <span>if</span> <span>(</span>conditionExpr <span>instanceof</span> <span>SQLPropertyExpr</span><span>)</span> <span>{</span>
            <span>SQLPropertyExpr</span> conditionColumnExpr <span>=</span> <span>cast</span><span>(</span>conditionExpr<span>,</span> <span>SQLPropertyExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
            <span>// 右边根据类型进行转换 id是SQLIntegerExpr name是SQLCharExpr</span>
            <span>SQLValuableExpr</span> conditionColumnValue <span>=</span> <span>cast</span><span>(</span>conditionValueExpr<span>,</span> <span>SQLValuableExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
            <span>print</span><span>(</span><span>"条件列名:{},条件别名:{},条件值:{}"</span><span>,</span> conditionColumnExpr<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> conditionColumnExpr<span>.</span><span>getOwnernName</span><span>(</span><span>)</span><span>,</span> conditionColumnValue<span>)</span><span>;</span>
        <span>}</span>
        <span>// 如果没有别名</span>
        <span>if</span> <span>(</span>conditionExpr <span>instanceof</span> <span>SQLIdentifierExpr</span><span>)</span> <span>{</span>
            <span>SQLIdentifierExpr</span> conditionColumnExpr <span>=</span> <span>cast</span><span>(</span>conditionExpr<span>,</span> <span>SQLIdentifierExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
            <span>SQLValuableExpr</span> conditionColumnValue <span>=</span> <span>cast</span><span>(</span>conditionValueExpr<span>,</span> <span>SQLValuableExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
            <span>print</span><span>(</span><span>"条件列名:{},条件值:{}"</span><span>,</span> conditionColumnExpr<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> conditionColumnValue<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><h3 id="_2-2-2-解析-sqlselectitem"> 2.2.2 解析 SQLSelectItem</h3>
<p>解析查询的列信息</p>
<div><pre><code>    <span>/**
     * 解析查询字段,注意是否使用了别名.u.id as userId, u.name as userName, u.age as userAge&lt;br>
     * userId（sqlSelectItem.getAlias）&lt;br>
     * 如果有别名: u.id( id = SQLPropertyExpr.getName,u = SQLPropertyExpr.getOwnernName)&lt;br>
     * 如果没别名: id(id = SQLIdentifierExpr.name)
     *
     * @param selectColumnList 查询字段
     */</span>
    <span>private</span> <span>void</span> <span>parseSQLSelectItem</span><span>(</span><span>List</span><span><span>&lt;</span><span>SQLSelectItem</span><span>></span></span> selectColumnList<span>)</span> <span>{</span>
        <span>for</span> <span>(</span><span>SQLSelectItem</span> sqlSelectItem <span>:</span> selectColumnList<span>)</span> <span>{</span>
            <span>// u.id as userId(selectColumnAlias)</span>
            <span>String</span> selectColumnAlias <span>=</span> sqlSelectItem<span>.</span><span>getAlias</span><span>(</span><span>)</span><span>;</span>
            <span>// u.id = SQLPropertyExpr</span>
            <span>SQLExpr</span> expr <span>=</span> sqlSelectItem<span>.</span><span>getExpr</span><span>(</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>expr <span>instanceof</span> <span>SQLPropertyExpr</span><span>)</span> <span>{</span>
                <span>SQLPropertyExpr</span> selectColumnExpr <span>=</span> <span>cast</span><span>(</span>expr<span>,</span> <span>SQLPropertyExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
                <span>print</span><span>(</span><span>"列名:{},别名:{},表别名:{}"</span><span>,</span> selectColumnExpr<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> selectColumnAlias<span>,</span> selectColumnExpr<span>.</span><span>getOwnernName</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>}</span>
            <span>if</span> <span>(</span>expr <span>instanceof</span> <span>SQLIdentifierExpr</span><span>)</span> <span>{</span>
                <span>SQLIdentifierExpr</span> selectColumnExpr <span>=</span> <span>cast</span><span>(</span>expr<span>,</span> <span>SQLIdentifierExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
                <span>print</span><span>(</span><span>"列名:{},别名:{}"</span><span>,</span> selectColumnExpr<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> selectColumnAlias<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h3 id="_2-2-3-解析-sqlupdatesetitem"> 2.2.3 解析 SQLUpdateSetItem</h3>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>SQLUpdateStatement</span><span>(</span><span>)</span> <span>{</span>
        <span>SQLStatement</span> sqlStatement <span>=</span> <span>SQLUtils</span><span>.</span><span>parseSingleMysqlStatement</span><span>(</span><span>"update users u set u.name = '唐僧',age = 18 where u.id = 1 "</span><span>)</span><span>;</span>
        <span>SQLUpdateStatement</span> sqlUpdateStatement <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>sqlStatement<span>,</span> <span>SQLUpdateStatement</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>List</span><span><span>&lt;</span><span>SQLUpdateSetItem</span><span>></span></span> setItems <span>=</span> sqlUpdateStatement<span>.</span><span>getItems</span><span>(</span><span>)</span><span>;</span>
        <span>for</span> <span>(</span><span>SQLUpdateSetItem</span> setItem <span>:</span> setItems<span>)</span> <span>{</span>
            <span>SQLExpr</span> column <span>=</span> setItem<span>.</span><span>getColumn</span><span>(</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>column <span>instanceof</span> <span>SQLPropertyExpr</span><span>)</span> <span>{</span>
                <span>SQLPropertyExpr</span> sqlPropertyExpr <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>column<span>,</span> <span>SQLPropertyExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
                <span>SQLExpr</span> value <span>=</span> setItem<span>.</span><span>getValue</span><span>(</span><span>)</span><span>;</span>
                <span>Utils</span><span>.</span><span>print</span><span>(</span><span>"column:{},列owner:{},value:{}"</span><span>,</span> sqlPropertyExpr<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> sqlPropertyExpr<span>.</span><span>getOwnernName</span><span>(</span><span>)</span><span>,</span> value<span>)</span><span>;</span>
            <span>}</span>
            <span>if</span> <span>(</span>column <span>instanceof</span> <span>SQLIdentifierExpr</span><span>)</span> <span>{</span>
                <span>SQLExpr</span> value <span>=</span> setItem<span>.</span><span>getValue</span><span>(</span><span>)</span><span>;</span>
                <span>Utils</span><span>.</span><span>print</span><span>(</span><span>"column:{},value:{}"</span><span>,</span> column<span>,</span> value<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
        <span>SQLExpr</span> where <span>=</span> sqlUpdateStatement<span>.</span><span>getWhere</span><span>(</span><span>)</span><span>;</span>
        <span>Utils</span><span>.</span><span>startParse</span><span>(</span><span>"解析where"</span><span>,</span> <span>Utils</span><span>::</span><span>parseWhere</span><span>,</span> where<span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h3 id="_2-2-4-解析-sqllimit"> 2.2.4 解析 SQLLimit</h3>
<div><pre><code>    <span>/**
     * 偏移量,只有2个值
     *
     * @param limit 限制
     */</span>
    <span>private</span> <span>void</span> <span>parseLimit</span><span>(</span><span>SQLLimit</span> limit<span>)</span> <span>{</span>
        <span>// 偏移量</span>
        <span>SQLExpr</span> offset <span>=</span> limit<span>.</span><span>getOffset</span><span>(</span><span>)</span><span>;</span>
        <span>// 便宜数量</span>
        <span>SQLExpr</span> rowCount <span>=</span> limit<span>.</span><span>getRowCount</span><span>(</span><span>)</span><span>;</span>
        <span>print</span><span>(</span><span>"偏移量:{},偏移数量:{}"</span><span>,</span> offset<span>,</span> rowCount<span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id="_2-2-5-解析-sqlselectgroupby"> 2.2.5 解析 SQLSelectGroupBy</h3>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>groupBy</span><span>(</span><span>)</span> <span>{</span>
        <span>SQLStatement</span> sqlStatement <span>=</span> <span>SQLUtils</span><span>.</span><span>parseSingleMysqlStatement</span><span>(</span><span>"select name,count(1) as count from users group by name,age having count > 2"</span><span>)</span><span>;</span>
        <span>SQLSelectStatement</span> selectStatement <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>sqlStatement<span>,</span> <span>SQLSelectStatement</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>SQLSelect</span> select <span>=</span> selectStatement<span>.</span><span>getSelect</span><span>(</span><span>)</span><span>;</span>
        <span>SQLSelectQueryBlock</span> query <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>select<span>.</span><span>getQuery</span><span>(</span><span>)</span><span>,</span> <span>SQLSelectQueryBlock</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>SQLSelectGroupByClause</span> groupBy <span>=</span> query<span>.</span><span>getGroupBy</span><span>(</span><span>)</span><span>;</span>
        <span>List</span><span><span>&lt;</span><span>SQLExpr</span><span>></span></span> items <span>=</span> groupBy<span>.</span><span>getItems</span><span>(</span><span>)</span><span>;</span>
        <span>for</span> <span>(</span><span>SQLExpr</span> item <span>:</span> items<span>)</span> <span>{</span>
            <span>// group by name</span>
            <span>// group by age</span>
            <span>SQLIdentifierExpr</span> groupByColumn <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>item<span>,</span> <span>SQLIdentifierExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
            <span>Utils</span><span>.</span><span>print</span><span>(</span><span>"group by {}"</span><span>,</span> groupByColumn<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id="_2-2-6-解析-having"> 2.2.6 解析 Having</h3>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>having</span><span>(</span><span>)</span> <span>{</span>
        <span>SQLStatement</span> sqlStatement <span>=</span> <span>SQLUtils</span><span>.</span><span>parseSingleMysqlStatement</span><span>(</span><span>"select name,count(1) as count from users group by name,age having count > 2"</span><span>)</span><span>;</span>
        <span>SQLSelectStatement</span> selectStatement <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>sqlStatement<span>,</span> <span>SQLSelectStatement</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>SQLSelect</span> select <span>=</span> selectStatement<span>.</span><span>getSelect</span><span>(</span><span>)</span><span>;</span>
        <span>SQLSelectQueryBlock</span> query <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>select<span>.</span><span>getQuery</span><span>(</span><span>)</span><span>,</span> <span>SQLSelectQueryBlock</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>SQLSelectGroupByClause</span> groupBy <span>=</span> query<span>.</span><span>getGroupBy</span><span>(</span><span>)</span><span>;</span>
        <span>SQLExpr</span> having <span>=</span> groupBy<span>.</span><span>getHaving</span><span>(</span><span>)</span><span>;</span>
        <span>// 因为只有一个条件,所以having就是SQLBinaryOpExpr</span>
        <span>SQLBinaryOpExpr</span> havingExpr <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>having<span>,</span> <span>SQLBinaryOpExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>// 没有使用别名,所以就是SQLIdentifierExpr</span>
        <span>SQLExpr</span> left <span>=</span> havingExpr<span>.</span><span>getLeft</span><span>(</span><span>)</span><span>;</span>
        <span>SQLIdentifierExpr</span> leftExpr <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>left<span>,</span> <span>SQLIdentifierExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>// 数字类型就是</span>
        <span>SQLExpr</span> right <span>=</span> havingExpr<span>.</span><span>getRight</span><span>(</span><span>)</span><span>;</span>
        <span>SQLValuableExpr</span> rightValue <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>right<span>,</span> <span>SQLValuableExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>SQLBinaryOperator</span> operator <span>=</span> havingExpr<span>.</span><span>getOperator</span><span>(</span><span>)</span><span>;</span>
        <span>// left:count, operator:>,right:2</span>
        <span>Utils</span><span>.</span><span>print</span><span>(</span><span>"left:{}, operator:{},right:{}"</span><span>,</span> leftExpr<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> operator<span>.</span>name<span>,</span> rightValue<span>.</span><span>getValue</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id="三、语法树生成"> 三、语法树生成</h2>
<p>前面的内容如果都搞清楚了,那么我们就能对sql进行解析,通知可以修改sql解析后的语法树,同时再将修改后的语法树,重新转换成sql</p>
<h2 id="_3-1-修改语法树"> 3.1 修改语法树</h2>
<h3 id="_3-1-1-增加一个条件"> 3.1.1 增加一个条件</h3>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>SQLDeleteStatement</span><span>(</span><span>)</span><span>{</span>
        <span>SQLStatement</span> sqlStatement <span>=</span> <span>SQLUtils</span><span>.</span><span>parseSingleMysqlStatement</span><span>(</span><span>"delete from users where id = 1"</span><span>)</span><span>;</span>
        <span>SQLDeleteStatement</span> sqlDeleteStatement <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>sqlStatement<span>,</span> <span>SQLDeleteStatement</span><span>.</span><span>class</span><span>)</span><span>;</span>
        sqlDeleteStatement<span>.</span><span>addCondition</span><span>(</span><span>SQLUtils</span><span>.</span><span>toSQLExpr</span><span>(</span><span>"name = '孙悟空'"</span><span>)</span><span>)</span><span>;</span>
<span>//        DELETE FROM users</span>
<span>//        WHERE id = 1</span>
<span>//        AND name = '孙悟空'</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>SQLUtils</span><span>.</span><span>toSQLString</span><span>(</span>sqlDeleteStatement<span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="_3-1-2-修改一个条件值"> 3.1.2 修改一个条件值</h3>
<p>将条件id = 1 修改成 id = 2</p>
<div><pre><code>    <span>@Test</span>
    <span>public</span> <span>void</span> <span>SQLDeleteStatement2</span><span>(</span><span>)</span><span>{</span>
        <span>SQLStatement</span> sqlStatement <span>=</span> <span>SQLUtils</span><span>.</span><span>parseSingleMysqlStatement</span><span>(</span><span>"delete from users where id = 1"</span><span>)</span><span>;</span>
        <span>SQLDeleteStatement</span> sqlDeleteStatement <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>sqlStatement<span>,</span> <span>SQLDeleteStatement</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>SQLExpr</span> where <span>=</span> sqlDeleteStatement<span>.</span><span>getWhere</span><span>(</span><span>)</span><span>;</span>
        <span>SQLBinaryOpExpr</span> sqlBinaryOpExpr <span>=</span> <span>Utils</span><span>.</span><span>cast</span><span>(</span>where<span>,</span> <span>SQLBinaryOpExpr</span><span>.</span><span>class</span><span>)</span><span>;</span>
<span>//        DELETE FROM users</span>
<span>//        WHERE id = 2</span>
        sqlBinaryOpExpr<span>.</span><span>setRight</span><span>(</span><span>SQLUtils</span><span>.</span><span>toSQLExpr</span><span>(</span><span>"2"</span><span>)</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>SQLUtils</span><span>.</span><span>toSQLString</span><span>(</span>sqlDeleteStatement<span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="四、visitor模式"> 四、Visitor模式</h2>
<p>访问者模式</p>
<p>所有的AST节点都支持Visitor模式，需要自定义遍历逻辑，可以实现相应的ASTVisitorAdapter派生类</p>
<div><pre><code>    <span>public</span> <span>static</span> <span>class</span> <span>CustomerMySqlASTVisitorAdapter</span> <span>extends</span> <span>MySqlASTVisitorAdapter</span> <span>{</span>

        <span>private</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>SQLTableSource</span><span>></span></span> ALIAS_MAP <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>String</span><span>,</span> <span>SQLTableSource</span><span>></span></span><span>(</span><span>)</span><span>;</span>

        <span>private</span> <span>final</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>SQLExpr</span><span>></span></span> ALIAS_COLUMN_MAP <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>String</span><span>,</span> <span>SQLExpr</span><span>></span></span><span>(</span><span>)</span><span>;</span>


        <span>public</span> <span>boolean</span> <span>visit</span><span>(</span><span>SQLExprTableSource</span> x<span>)</span> <span>{</span>
            <span>String</span> alias <span>=</span> x<span>.</span><span>getAlias</span><span>(</span><span>)</span><span>;</span>
            ALIAS_MAP<span>.</span><span>put</span><span>(</span>alias<span>,</span> x<span>)</span><span>;</span>
            <span>return</span> <span>true</span><span>;</span>
        <span>}</span>

        <span>@Override</span>
        <span>public</span> <span>boolean</span> <span>visit</span><span>(</span><span>MySqlSelectQueryBlock</span> x<span>)</span> <span>{</span>
            <span>List</span><span><span>&lt;</span><span>SQLSelectItem</span><span>></span></span> selectList <span>=</span> x<span>.</span><span>getSelectList</span><span>(</span><span>)</span><span>;</span>
            <span>for</span> <span>(</span><span>SQLSelectItem</span> sqlSelectItem <span>:</span> selectList<span>)</span> <span>{</span>
                <span>String</span> alias <span>=</span> sqlSelectItem<span>.</span><span>getAlias</span><span>(</span><span>)</span><span>;</span>
                <span>SQLExpr</span> expr <span>=</span> sqlSelectItem<span>.</span><span>getExpr</span><span>(</span><span>)</span><span>;</span>
                ALIAS_COLUMN_MAP<span>.</span><span>put</span><span>(</span>alias<span>,</span> expr<span>)</span><span>;</span>
            <span>}</span>
            <span>return</span> <span>true</span><span>;</span>
        <span>}</span>

        <span>public</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>SQLTableSource</span><span>></span></span> <span>getAliasMap</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> ALIAS_MAP<span>;</span>
        <span>}</span>

        <span>public</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>SQLExpr</span><span>></span></span> <span>getAliasColumnMap</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> ALIAS_COLUMN_MAP<span>;</span>
        <span>}</span>
    <span>}</span>

    <span>@Test</span>
    <span>public</span> <span>void</span> <span>AliasVisitor</span><span>(</span><span>)</span> <span>{</span>
        <span>String</span> sql <span>=</span> <span>"select u.id as userId, u.name as userName, age as userAge from users as u where u.id = 1 and u.name = '孙悟空' limit 2,10"</span><span>;</span>
        <span>// 解析SQL</span>
        <span>SQLStatement</span> sqlStatement <span>=</span> <span>SQLUtils</span><span>.</span><span>parseSingleMysqlStatement</span><span>(</span>sql<span>)</span><span>;</span>
        <span>CustomerMySqlASTVisitorAdapter</span> customerMySqlASTVisitorAdapter <span>=</span> <span>new</span> <span>CustomerMySqlASTVisitorAdapter</span><span>(</span><span>)</span><span>;</span>
        sqlStatement<span>.</span><span>accept</span><span>(</span>customerMySqlASTVisitorAdapter<span>)</span><span>;</span>
        <span>// 表别名:{u=users}</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"表别名:"</span> <span>+</span> customerMySqlASTVisitorAdapter<span>.</span><span>getAliasMap</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 列别名{userName=u.name, userId=u.id, userAge=age}</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"列别名"</span> <span>+</span> customerMySqlASTVisitorAdapter<span>.</span><span>getAliasColumnMap</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-27T13:12:51.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Guava-Map</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/guava/guava-map/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/guava/guava-map/"/>
    <updated>2022-03-24T14:34:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、简介"> 一、简介</h2>
<p>Guava 是一组来自 Google 的核心 Java 库，其中包括新的集合类型（例如 multimap 和 multiset）、不可变集合、图形库以及用于并发、I/O、散列、缓存、原语、字符串等的实用程序！它广泛用于 Google
内部的大多数 Java 项目，也被许多其他公司广泛使用。</p>
<p>API 非常的简单，我们可以非常轻松的使用，来封装成我们业务中自己的组件。</p>
<h2 id="二、依赖"> 二、依赖</h2>
<div><pre><code>    <span><span><span>&lt;</span>dependency</span><span>></span></span>
        <span><span><span>&lt;</span>groupId</span><span>></span></span>com.google.guava<span><span><span>&lt;/</span>groupId</span><span>></span></span>
        <span><span><span>&lt;</span>artifactId</span><span>></span></span>guava<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
        <span><span><span>&lt;</span>version</span><span>></span></span>30.1.1-jre<span><span><span>&lt;/</span>version</span><span>></span></span>
    <span><span><span>&lt;/</span>dependency</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="三、使用介绍"> 三、使用介绍</h2>
<h3 id="_3-1-table-双键-map"> 3.1 Table 双键 Map</h3>
<p>java中的Map只允许有一个key和一个value存在，但是guava中的Table允许一个value存在两个key。Table中的两个key分别被称为rowKey和columnKey，也就是行和列。</p>
<div><pre><code><span>Table</span><span><span>&lt;</span><span>String</span><span>,</span><span>String</span><span>,</span><span>Integer</span><span>></span></span> table<span>=</span> <span>HashBasedTable</span><span>.</span><span>create</span><span>(</span><span>)</span><span>;</span>
<span>//存放元素</span>
table<span>.</span><span>put</span><span>(</span><span>"Hydra"</span><span>,</span> <span>"Jan"</span><span>,</span> <span>20</span><span>)</span><span>;</span>
table<span>.</span><span>put</span><span>(</span><span>"Hydra"</span><span>,</span> <span>"Feb"</span><span>,</span> <span>28</span><span>)</span><span>;</span>
table<span>.</span><span>put</span><span>(</span><span>"Trunks"</span><span>,</span> <span>"Jan"</span><span>,</span> <span>28</span><span>)</span><span>;</span>
table<span>.</span><span>put</span><span>(</span><span>"Trunks"</span><span>,</span> <span>"Feb"</span><span>,</span> <span>16</span><span>)</span><span>;</span>
<span>//取出元素</span>
<span>Integer</span> dayCount <span>=</span> table<span>.</span><span>get</span><span>(</span><span>"Hydra"</span><span>,</span> <span>"Feb"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="_3-2-bimap-双向map"> 3.2 BiMap 双向Map</h3>
<p>在普通Map中，如果要想根据value查找对应的key，没什么简便的办法，无论是使用for循环还是迭代器，都需要遍历整个Map。
而guava中的BiMap提供了一种key和value双向关联的数据结构。</p>
<div><div><br><br><br><br><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>HashBiMap</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> biMap <span>=</span> <span>HashBiMap</span><span>.</span><span>create</span><span>(</span><span>)</span><span>;</span>
biMap<span>.</span><span>put</span><span>(</span><span>"Hydra"</span><span>,</span><span>"Programmer"</span><span>)</span><span>;</span>
biMap<span>.</span><span>put</span><span>(</span><span>"Tony"</span><span>,</span><span>"IronMan"</span><span>)</span><span>;</span>
biMap<span>.</span><span>put</span><span>(</span><span>"Thanos"</span><span>,</span><span>"Titan"</span><span>)</span><span>;</span>
<span>//使用key获取value</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>biMap<span>.</span><span>get</span><span>(</span><span>"Tony"</span><span>)</span><span>)</span><span>;</span>
<span>BiMap</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> inverse <span>=</span> biMap<span>.</span><span>inverse</span><span>(</span><span>)</span><span>;</span>
<span>//使用value获取key</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>inverse<span>.</span><span>get</span><span>(</span><span>"Titan"</span><span>)</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>注意: 反转后的BiMap并不是一个新的对象，它实现了一种视图的关联，所以对反转后的BiMap执行的所有操作会作用于原先的BiMap上。</p>
<div><pre><code><span>HashBiMap</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> biMap <span>=</span> <span>HashBiMap</span><span>.</span><span>create</span><span>(</span><span>)</span><span>;</span>
biMap<span>.</span><span>put</span><span>(</span><span>"Hydra"</span><span>,</span><span>"Programmer"</span><span>)</span><span>;</span>
biMap<span>.</span><span>put</span><span>(</span><span>"Tony"</span><span>,</span><span>"IronMan"</span><span>)</span><span>;</span>
biMap<span>.</span><span>put</span><span>(</span><span>"Thanos"</span><span>,</span><span>"Titan"</span><span>)</span><span>;</span>
<span>BiMap</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> inverse <span>=</span> biMap<span>.</span><span>inverse</span><span>(</span><span>)</span><span>;</span>
inverse<span>.</span><span>put</span><span>(</span><span>"IronMan"</span><span>,</span><span>"Stark"</span><span>)</span><span>;</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>biMap<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>对反转后的BiMap中的内容进行了修改后，再看一下原先BiMap中的内容：</p>
<div><pre><code><span>{</span><span>Hydra</span><span>=</span><span>Programmer</span><span>,</span> <span>Thanos</span><span>=</span><span>Titan</span><span>,</span> <span>Stark</span><span>=</span><span>IronMan</span><span>}</span>
</code></pre>
<div><span>1</span><br></div></div><p>可以看到，原先值为IronMan时对应的键是Tony，虽然没有直接修改，但是现在键变成了Stark。</p>
<h3 id="_3-3-multimap-多值map"> 3.3 Multimap 多值Map</h3>
<p>java中的Map维护的是键值一对一的关系，如果要将一个键映射到多个值上，那么就只能把值的内容设为集合形式，而在guava中可以使用如下：</p>
<div><pre><code><span>Multimap</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Integer</span><span>></span></span> multimap <span>=</span> <span>ArrayListMultimap</span><span>.</span><span>create</span><span>(</span><span>)</span><span>;</span>
multimap<span>.</span><span>put</span><span>(</span><span>"day"</span><span>,</span><span>1</span><span>)</span><span>;</span>
multimap<span>.</span><span>put</span><span>(</span><span>"day"</span><span>,</span><span>2</span><span>)</span><span>;</span>
multimap<span>.</span><span>put</span><span>(</span><span>"day"</span><span>,</span><span>8</span><span>)</span><span>;</span>
multimap<span>.</span><span>put</span><span>(</span><span>"month"</span><span>,</span><span>3</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>打印这个Multimap的内容，可以直观的看到每个key对应的都是一个集合：</p>
<div><pre><code>{month=[3], day=[1, 2, 8]}
</code></pre>
<div><span>1</span><br></div></div><h3 id="_3-4-rangemap-范围map"> 3.4 RangeMap 范围Map</h3>
<p>先看一个例子，假设我们要根据分数对考试成绩进行分类，那么代码中就会出现这样丑陋的if-else：</p>
<div><pre><code><span>public</span> <span>static</span> <span>String</span> <span>getRank</span><span>(</span><span>int</span> score<span>)</span><span>{</span>
    <span>if</span> <span>(</span><span>0</span><span>&lt;=</span>score <span>&amp;&amp;</span> score<span>&lt;</span><span>60</span><span>)</span>
        <span>return</span> <span>"fail"</span><span>;</span>
    <span>else</span> <span>if</span> <span>(</span><span>60</span><span>&lt;=</span>score <span>&amp;&amp;</span> score<span>&lt;=</span><span>90</span><span>)</span>
        <span>return</span> <span>"satisfactory"</span><span>;</span>
    <span>else</span> <span>if</span> <span>(</span><span>90</span><span>&lt;</span>score <span>&amp;&amp;</span> score<span>&lt;=</span><span>100</span><span>)</span>
        <span>return</span> <span>"excellent"</span><span>;</span>
    <span>return</span> <span>null</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>而guava中的RangeMap描述了一种从区间到特定值的映射关系，让我们能够以更为优雅的方法来书写代码。下面用RangeMap改造上面的代码并进行测试：</p>
<div><pre><code><span>RangeMap</span><span><span>&lt;</span><span>Integer</span><span>,</span> <span>String</span><span>></span></span> rangeMap <span>=</span> <span>TreeRangeMap</span><span>.</span><span>create</span><span>(</span><span>)</span><span>;</span>
rangeMap<span>.</span><span>put</span><span>(</span><span>Range</span><span>.</span><span>closedOpen</span><span>(</span><span>0</span><span>,</span><span>60</span><span>)</span><span>,</span><span>"fail"</span><span>)</span><span>;</span>
rangeMap<span>.</span><span>put</span><span>(</span><span>Range</span><span>.</span><span>closed</span><span>(</span><span>60</span><span>,</span><span>90</span><span>)</span><span>,</span><span>"satisfactory"</span><span>)</span><span>;</span>
rangeMap<span>.</span><span>put</span><span>(</span><span>Range</span><span>.</span><span>openClosed</span><span>(</span><span>90</span><span>,</span><span>100</span><span>)</span><span>,</span><span>"excellent"</span><span>)</span><span>;</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>rangeMap<span>.</span><span>get</span><span>(</span><span>59</span><span>)</span><span>)</span><span>;</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>rangeMap<span>.</span><span>get</span><span>(</span><span>60</span><span>)</span><span>)</span><span>;</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>rangeMap<span>.</span><span>get</span><span>(</span><span>90</span><span>)</span><span>)</span><span>;</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>rangeMap<span>.</span><span>get</span><span>(</span><span>91</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>在上面的代码中，先后创建了[0,60)的左闭右开区间、[60,90]的闭区间、(90,100]的左开右闭区间，并分别映射到某个值上。运行结果打印：</p>
<div><pre><code>fail
satisfactory
satisfactory
excellent
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="_3-5-classtoinstancemap-实例map"> 3.5 ClassToInstanceMap 实例Map</h3>
<p>ClassToInstanceMap是一个比较特殊的Map，它的键是Class，而值是这个Class对应的实例对象。先看一个简单使用的例子，使用putInstance方法存入对象</p>
<div><pre><code><span>ClassToInstanceMap</span><span><span>&lt;</span><span>Object</span><span>></span></span> instanceMap <span>=</span> <span>MutableClassToInstanceMap</span><span>.</span><span>create</span><span>(</span><span>)</span><span>;</span>
<span>User</span> user<span>=</span><span>new</span> <span>User</span><span>(</span><span>"Hydra"</span><span>,</span><span>18</span><span>)</span><span>;</span>
<span>Dept</span> dept<span>=</span><span>new</span> <span>Dept</span><span>(</span><span>"develop"</span><span>,</span><span>200</span><span>)</span><span>;</span>
instanceMap<span>.</span><span>putInstance</span><span>(</span><span>User</span><span>.</span><span>class</span><span>,</span>user<span>)</span><span>;</span>
instanceMap<span>.</span><span>putInstance</span><span>(</span><span>Dept</span><span>.</span><span>class</span><span>,</span>dept<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>那么，使用ClassToInstanceMap这种方式有什么好处呢?</p>
<p>最明显的就是在取出对象时省去了复杂的强制类型转换，避免了手动进行类型转换的错误。
所以，如果你想缓存对象，又不想做复杂的类型校验，那么使用方便的ClassToInstanceMap就可以了。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">池化技术</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/pool2/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/pool2/"/>
    <updated>2022-05-08T04:06:59.000Z</updated>
    <content type="html"><![CDATA[<div><p>羽化而登仙，池化而提效</p>
<p>本篇文章我们的研究专题是池化技术, 其实所谓池化可以简单理解为缓存。将那些创建比较耗时的对象,缓存起来,放到一个池子里。
比如数据库连接池，线程池，字符串常量池。这个技术常用于框架类设计。本文教你基于Apache-commons-pool2快速实现一个常量池的设计。</p>
</div>
<h2 id="一、pool2-四大件"> 一、Pool2 四大件</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1651339646000.png" alt="" loading="lazy"></p>
<h3 id="_1-1-新建资源"> 1.1 新建资源</h3>
<p><img src="https://img.springlearn.cn/blog/learn_1651340254000.png" alt="" loading="lazy"></p>
<h3 id="_1-2-回收资源"> 1.2 回收资源</h3>
<p><img src="https://img.springlearn.cn/blog/learn_1651340687000.png" alt="" loading="lazy"></p>
<h2 id="二、数据库连接池实战"> 二、数据库连接池实战</h2>
<p>我们利用Common Pool2工具 可以使用很少的代码就实现了池化的能力。</p>
<h2 id="_2-2-构建连接工厂"> 2.2 构建连接工厂</h2>
<p>可以看到核心方法非常少，开发者只用实现很少方法即可</p>
<ol>
<li>makeObject 创建资源</li>
<li>activateObject 资源被激活时候调用</li>
<li>passivateObject 资源在回收时候调用</li>
<li>validateObject 当配置了资源检查时候会在创建和回收时候调用</li>
<li>destroyObject 资源在销毁时候调用</li>
</ol>
<div><pre><code><span>public</span> <span>class</span> <span>PooledConnectFactory</span> <span>implements</span> <span>PooledObjectFactory</span><span><span>&lt;</span><span>Connection</span><span>></span></span> <span>{</span>


    <span>/**
     * 数据库连接
     */</span>
    <span>private</span> <span>final</span> <span>String</span> url<span>;</span>

    <span>/**
     * 用户名
     */</span>
    <span>private</span> <span>final</span> <span>String</span> userName<span>;</span>

    <span>/**
     * 数据密码
     */</span>
    <span>private</span> <span>final</span> <span>String</span> password<span>;</span>

    <span>public</span> <span>PooledConnectFactory</span><span>(</span><span>String</span> url<span>,</span> <span>String</span> userName<span>,</span> <span>String</span> password<span>)</span> <span>{</span>
        <span>this</span><span>.</span>url <span>=</span> url<span>;</span>
        <span>this</span><span>.</span>userName <span>=</span> userName<span>;</span>
        <span>this</span><span>.</span>password <span>=</span> password<span>;</span>
    <span>}</span>

    <span>/**
     * 对象被激活后，会进行调用
     *
     * @param pooledObject a {@code PooledObject} wrapping the instance to be activated
     */</span>
    <span>@Override</span>
    <span>public</span> <span>void</span> <span>activateObject</span><span>(</span><span>PooledObject</span><span><span>&lt;</span><span>Connection</span><span>></span></span> pooledObject<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
    <span>}</span>

    <span>/**
     * 销毁数据库连接
     *
     * @param pooledObject a {@code PooledObject} wrapping the instance to be destroyed
     * @throws Exception 异常
     */</span>
    <span>@Override</span>
    <span>public</span> <span>void</span> <span>destroyObject</span><span>(</span><span>PooledObject</span><span><span>&lt;</span><span>Connection</span><span>></span></span> pooledObject<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>Connection</span> connection <span>=</span> pooledObject<span>.</span><span>getObject</span><span>(</span><span>)</span><span>;</span>
        connection<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>/**
     * 创建一个数据库连接
     *
     * @return 数据库连接的池对象包装
     * @throws Exception 异常
     */</span>
    <span>@Override</span>
    <span>public</span> <span>PooledObject</span><span><span>&lt;</span><span>Connection</span><span>></span></span> <span>makeObject</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>
        <span>Connection</span> connection <span>=</span> <span>DriverManager</span><span>.</span><span>getConnection</span><span>(</span><span>this</span><span>.</span>url<span>,</span> <span>this</span><span>.</span>userName<span>,</span> <span>this</span><span>.</span>password<span>)</span><span>;</span>
        <span>return</span> <span>new</span> <span>DefaultPooledObject</span><span><span>&lt;</span><span>></span></span><span>(</span>connection<span>)</span><span>;</span>
    <span>}</span>

    <span>/**
     * 回收资源时候进行调用
     * @param pooledObject a {@code PooledObject} wrapping the instance to be passivated
     *
     * @throws Exception
     */</span>
    <span>@Override</span>
    <span>public</span> <span>void</span> <span>passivateObject</span><span>(</span><span>PooledObject</span><span><span>&lt;</span><span>Connection</span><span>></span></span> pooledObject<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>

    <span>}</span>

    <span>@Override</span>
    <span>@SneakyThrows</span>
    <span>public</span> <span>boolean</span> <span>validateObject</span><span>(</span><span>PooledObject</span><span><span>&lt;</span><span>Connection</span><span>></span></span> pooledObject<span>)</span> <span>{</span>
        <span>Connection</span> connection <span>=</span> pooledObject<span>.</span><span>getObject</span><span>(</span><span>)</span><span>;</span>
        <span>// 如果连接关闭说明已经失效就返回false告诉池子,已经失效,会自动移除</span>
        <span>return</span> <span>!</span>connection<span>.</span><span>isClosed</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br></div></div><h2 id="_2-3-连接池演示"> 2.3 连接池演示</h2>
<div><pre><code>    <span>@Test</span>
    <span>@DisplayName</span><span>(</span><span>"验证回收对象"</span><span>)</span>
    <span>public</span> <span>void</span> <span>testReturn</span><span>(</span><span>)</span><span>throws</span> <span>Exception</span><span>{</span>
        <span>// 1. 构建一个数据连接池化工厂</span>
        <span>String</span> dbUrl <span>=</span> <span>"jdbc:mysql://127.0.0.1:3306/test"</span><span>;</span>
        <span>String</span> user <span>=</span> <span>"root"</span><span>;</span>
        <span>String</span> pass <span>=</span> <span>"123456"</span><span>;</span>
        <span>PooledConnectFactory</span> pooledConnectFactory <span>=</span> <span>new</span> <span>PooledConnectFactory</span><span>(</span>dbUrl<span>,</span> user<span>,</span> pass<span>)</span><span>;</span>

        <span>// 2. 给池子添加支持的配置信息</span>
        <span>GenericObjectPoolConfig</span><span><span>&lt;</span><span>Connection</span><span>></span></span> config <span>=</span> <span>new</span> <span>GenericObjectPoolConfig</span><span><span>&lt;</span><span>Connection</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        <span>// 2.1 最大池化对象数量</span>
        config<span>.</span><span>setMaxTotal</span><span>(</span><span>5</span><span>)</span><span>;</span>
        <span>// 2.2 最大空闲池化对象数量</span>
        config<span>.</span><span>setMaxIdle</span><span>(</span><span>2</span><span>)</span><span>;</span>
        <span>// 2.3 最小空闲池化对象数量</span>
        config<span>.</span><span>setMinIdle</span><span>(</span><span>2</span><span>)</span><span>;</span>
        <span>// 2.4 间隔多久检查一次池化对象状态,驱逐空闲对象,检查最小空闲数量小于就创建</span>
        config<span>.</span><span>setTimeBetweenEvictionRuns</span><span>(</span><span>Duration</span><span>.</span><span>ofSeconds</span><span>(</span><span>5</span><span>)</span><span>)</span><span>;</span>
        <span>// 2.5 阻塞就报错</span>
        config<span>.</span><span>setBlockWhenExhausted</span><span>(</span><span>true</span><span>)</span><span>;</span>
        <span>// 2.6 最大等待时长超过5秒就报错,如果不配置一直进行等待</span>
        config<span>.</span><span>setMaxWait</span><span>(</span><span>Duration</span><span>.</span><span>ofSeconds</span><span>(</span><span>5</span><span>)</span><span>)</span><span>;</span>
        <span>// 2.7 是否开启jmx监控,默认开启</span>
        config<span>.</span><span>setJmxEnabled</span><span>(</span><span>true</span><span>)</span><span>;</span>
        <span>// 2.8 一定要符合命名规则,否则无效</span>
        config<span>.</span><span>setJmxNameBase</span><span>(</span><span>"org.apache.commons.pool2:type=MysqlConnObjectPool,name=ConnectJmxNameBase"</span><span>)</span><span>;</span>
        <span>// 生成数据库连接池</span>
        <span>// 连接池配置最大5个连接setMaxTotal(5),但是获取6次,那么有一次获取不到就会阻塞setBlockWhenExhausted(true),</span>
        <span>// 当等待了10秒setMaxWait(Duration.ofSeconds(10))还是获取不到。就直接报错</span>
        <span>try</span> <span>(</span><span>GenericObjectPool</span><span><span>&lt;</span><span>Connection</span><span>></span></span> connPool <span>=</span> <span>new</span> <span>GenericObjectPool</span><span><span>&lt;</span><span>></span></span><span>(</span>pooledConnectFactory<span>,</span> config<span>)</span><span>)</span> <span>{</span>
            <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> <span>7</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
                <span>Connection</span> connection <span>=</span> connPool<span>.</span><span>borrowObject</span><span>(</span><span>)</span><span>;</span>
                <span>Statement</span> statement <span>=</span> connection<span>.</span><span>createStatement</span><span>(</span><span>)</span><span>;</span>
                <span>ResultSet</span> show_tables <span>=</span> statement<span>.</span><span>executeQuery</span><span>(</span><span>"show tables"</span><span>)</span><span>;</span>
                <span>printRows</span><span>(</span><span>"Connect-"</span> <span>+</span> i <span>+</span> <span>">"</span><span>,</span> show_tables<span>)</span><span>;</span>
                connPool<span>.</span><span>returnObject</span><span>(</span>connection<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><p>甚至还能配置支持jmx管理。非常的简单和方便。</p>
<p><img src="https://img.springlearn.cn/blog/learn_1651342753000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-04-26T15:44:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Guava-cache</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/guava/guava-cache/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/guava/guava-cache/"/>
    <updated>2022-03-27T13:12:51.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/blog/learn_1588264022000.png" alt="" loading="lazy"></p>
<p><strong>本篇主要是本地缓存代码实战，提供业务中常用的本地缓存使用代码片段(直接跳过看标题五)</strong></p>
<div><p>写在前面</p>
<p>常在业务系统中做开发,不会点高级知识点,有点不好意思了。在业务系统中，提高系统响应速度，提供系统高并发能力，其实方向很简单，三个方向,六个字而已: <strong>缓存降级限流。</strong>
当然这是在排除代码质量非常差的情况，如果代码质量很差，都是while循环和高内存占用，那么其实再怎么做都于事无补。除非你有一个马云爸爸，性能不够，机器来凑嘛。阿里云前来支持(1000台机器够了吗?)</p>
</div>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/182855/1588128723239-12cbd329-ab03-4e8c-86be-fd63da9cb39f.png?x-oss-process=image%2Fresize%2Cw_1492" alt="" loading="lazy"></p>
<h2 id="一、什么是guava-cache"> 一、什么是Guava Cache</h2>
<div><pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.google.guava&lt;/groupId&gt;
    &lt;artifactId&gt;guava&lt;/artifactId&gt;
    &lt;version&gt;29.0-jre&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>其实就是Google提供的一个开发工具包,里面有很多好用的Java开工具,比如我们本文将的Cache缓存能力。
说到缓存,每个业务系统中现在都会用到缓存,常用的缓存数据库就是Redis和Memcache,这两款kv数据库最常用的场景就是当缓存使用，极其适合在微服务架构下做缓存使用。速度是极高的，但是跟本地缓存来比，还是算慢的，毕竟本地缓存其实就相当于一个Map集合，本地缓存获取没有网络IO。但是最大的缺点是每台服务器的本地缓存是不能共享的。所以如果要用分布式缓存就可以跳过了。因为本文将的本地缓存使用。</p>
<p>说到底其实缓存我们就可以理解为是一个Map集合，不过生产中我们不能用Map来做缓存，除非是缓存的数据只有一点点一点点。否则如果数据量瞬时或者数据积累量很大，很容易就直接就把Map撑爆。导致内存溢出,服务宕机下线风险。 所以我们必须要对Map做控制。</p>
<ol>
<li>控制数据量大小</li>
<li>控制数据生命周期</li>
<li>如果能做些数据命中率统计更好了</li>
</ol>
<p>对，以上就是Guava Cache已经为我们做好的能力了。我们只用使用就可以了</p>
<h2 id="二、什么场景适合缓存"> 二、什么场景适合缓存</h2>
<p>不长更新的数据都可以使用缓存，只要我们定时去刷新缓存获取最新的数据就可以了。
注意: 凡是使用GuavaCache的地方都可以使用RedisCache,但是使用RedisCache的地方不一定可以使用GuavaCache。因为前面我们也说了Guava是本地缓存，不支持多服务器数据共享,如果要共享缓存数据直接用Redis是更好的选择。</p>
<h2 id="三、使用本地缓存-高并发会把机器打爆"> 三、使用本地缓存,高并发会把机器打爆</h2>
<p>这个担心是逻辑思考的必然,使用缓存主要是提高系统响应效率的,如果用不过把机器搞爆就不好了。所以这种担心很有必要，但是只要弄清楚没参数或者它的实现原理就不用担心了。4和5是快速入门即代码片段，直接根据代码去做不会有问题。</p>
<h2 id="四、快速入门api"> 四、快速入门API</h2>
<p>CacheBuilder</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>removalListener</td>
<td>缓存移除的监听</td>
<td>对指定key的删除,做监听</td>
</tr>
<tr>
<td>maximumSize</td>
<td>设置最大缓存数量</td>
<td>当达到最大数量，会删除多余的缓存记录</td>
</tr>
<tr>
<td>expireAfterWrite</td>
<td>设置过期时间</td>
<td>过期的缓存自动移除</td>
</tr>
<tr>
<td>recordStats</td>
<td>统计信息</td>
<td>统计缓存命中率</td>
</tr>
</tbody>
</table>
<h3 id="_1-设置最大缓存数量"> 1. 设置最大缓存数量</h3>
<div><pre><code>    <span>Cache</span><span><span>&lt;</span><span>String</span><span>,</span><span>String</span><span>></span></span> cache <span>=</span> <span>CacheBuilder</span><span>.</span><span>newBuilder</span><span>(</span><span>)</span>
                                 <span>.</span><span>maximumSize</span><span>(</span><span>2</span><span>)</span><span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>
    cache<span>.</span><span>put</span><span>(</span><span>"key1"</span><span>,</span><span>"value1"</span><span>)</span><span>;</span>
    cache<span>.</span><span>put</span><span>(</span><span>"key2"</span><span>,</span><span>"value2"</span><span>)</span><span>;</span>
    cache<span>.</span><span>put</span><span>(</span><span>"key3"</span><span>,</span><span>"value3"</span><span>)</span><span>;</span>
    <span>// 第一个key是null，因为指定缓存数量是2个，当超过就删除前面一条</span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"第一个值:"</span> <span>+</span> cache<span>.</span><span>getIfPresent</span><span>(</span><span>"key1"</span><span>)</span><span>)</span><span>;</span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"第一个值:"</span> <span>+</span> cache<span>.</span><span>getIfPresent</span><span>(</span><span>"key2"</span><span>)</span><span>)</span><span>;</span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"第一个值:"</span> <span>+</span> cache<span>.</span><span>getIfPresent</span><span>(</span><span>"key3"</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="_2-设置过期时间"> 2. 设置过期时间</h3>
<div><pre><code>    <span>Cache</span><span><span>&lt;</span><span>String</span><span>,</span><span>String</span><span>></span></span> cache <span>=</span> <span>CacheBuilder</span><span>.</span><span>newBuilder</span><span>(</span><span>)</span>
                                 <span>.</span><span>maximumSize</span><span>(</span><span>2</span><span>)</span>
                                 <span>.</span><span>expireAfterWrite</span><span>(</span><span>3</span><span>,</span><span>TimeUnit</span><span>.</span>SECONDS<span>)</span>
                                     <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>
    cache<span>.</span><span>put</span><span>(</span><span>"key1"</span><span>,</span><span>"value1"</span><span>)</span><span>;</span>
    <span>int</span> time <span>=</span> <span>1</span><span>;</span>
    <span>while</span><span>(</span><span>true</span><span>)</span><span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"第"</span> <span>+</span> time <span>++</span> <span>"次取到的key1的值为："</span> <span>+</span> cache<span>.</span><span>getIfPresent</span><span>(</span><span>"key1"</span><span>)</span><span>)</span><span>;</span>
        <span>Thread</span><span>.</span><span>sleep</span><span>(</span><span>1000</span><span>)</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="_3-统计命中率"> 3. 统计命中率</h3>
<div><pre><code>    <span>Cache</span><span><span>&lt;</span><span>String</span><span>,</span><span>String</span><span>></span></span> cache <span>=</span> <span>CacheBuilder</span><span>.</span><span>newBuilder</span><span>(</span><span>)</span>
                                 <span>.</span><span>maximumSize</span><span>(</span><span>3</span><span>)</span>
                                 <span>.</span><span>recordStats</span><span>(</span><span>)</span>
                                     <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>
    cache<span>.</span><span>put</span><span>(</span><span>"key1"</span><span>,</span><span>"value1"</span><span>)</span><span>;</span>
    cache<span>.</span><span>put</span><span>(</span><span>"key2"</span><span>,</span><span>"value2"</span><span>)</span><span>;</span>
    cache<span>.</span><span>put</span><span>(</span><span>"key3"</span><span>,</span><span>"value3"</span><span>)</span><span>;</span>
    
    cache<span>.</span><span>getIfPresent</span><span>(</span><span>"key1"</span><span>)</span>
    cache<span>.</span><span>getIfPresent</span><span>(</span><span>"key1"</span><span>)</span>
    cache<span>.</span><span>getIfPresent</span><span>(</span><span>"key2"</span><span>)</span>
    cache<span>.</span><span>getIfPresent</span><span>(</span><span>"key3"</span><span>)</span>
    <span>// 获取统计信息</span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>cache<span>.</span><span>stats</span><span>(</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p><strong>CacheStats</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">属性值</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">requestCount</td>
<td style="text-align:left">返回cache查找缓存的次数</td>
</tr>
<tr>
<td style="text-align:left">hitCount</td>
<td style="text-align:left">命中缓存的次数</td>
</tr>
<tr>
<td style="text-align:left">missCount</td>
<td style="text-align:left">未命中缓存的次数</td>
</tr>
<tr>
<td style="text-align:left">missRate</td>
<td style="text-align:left">返回缓存请求未命中的比率，未命中次数除以请求次数</td>
</tr>
<tr>
<td style="text-align:left">loadCount</td>
<td style="text-align:left">返回缓存调用load方法加载新值的次数</td>
</tr>
<tr>
<td style="text-align:left">loadSuccessCount</td>
<td style="text-align:left">返回缓存加载新值的成功次数</td>
</tr>
<tr>
<td style="text-align:left">loadExceptionCount</td>
<td style="text-align:left">返回缓存加载新值出现异常的次数</td>
</tr>
<tr>
<td style="text-align:left">loadExceptionRate</td>
<td style="text-align:left">返回缓存加载新值出现异常的比率</td>
</tr>
<tr>
<td style="text-align:left">totalLoadTime</td>
<td style="text-align:left">返回缓存加载新值所耗费的总时间</td>
</tr>
<tr>
<td style="text-align:left">averageLoadPenalty</td>
<td style="text-align:left">缓存加载新值的耗费的平均时间，加载的次数除以加载的总时间</td>
</tr>
<tr>
<td style="text-align:left">evictionCount</td>
<td style="text-align:left">返回缓存中条目被移除的次数</td>
</tr>
</tbody>
</table>
<h2 id="五、代码片段"> 五、代码片段</h2>
<div><pre><code>    <span>private</span> <span>LoadingCache</span><span><span>&lt;</span><span>Long</span><span>,</span><span>UserInfoDTO</span><span>></span></span> userCache<span>;</span>
    
    <span>{</span>
        userCache <span>=</span>  <span>CacheBuilder</span><span>.</span><span>newBuilder</span><span>(</span><span>)</span><span>.</span><span>maximumSize</span><span>(</span><span>30</span><span>)</span><span>//缓存30条数据</span>
                <span>.</span><span>expireAfterWrite</span><span>(</span><span>10</span><span>,</span><span>TimeUnit</span><span>.</span>SECONDS<span>)</span> <span>// 缓存时间10s</span>
                    <span>.</span><span>build</span><span>(</span><span>// 缓存加载器，如果没有找到key,就去加载这个key到缓存中</span>
                <span>new</span> <span>CacheLoader</span><span><span>&lt;</span><span>Long</span><span>,</span><span>UserInfoDTO</span><span>></span></span><span>(</span><span>)</span><span>{</span>
                    <span>@Override</span>
                    <span>public</span> <span>UserInfoDTO</span> <span>load</span><span>(</span><span>Long</span> key<span>)</span> <span>throws</span> <span>Exception</span><span>{</span>
                        <span>return</span> userService<span>.</span><span>queryById</span><span>(</span>key<span>)</span><span>;</span>
                    <span>}</span>
                <span>}</span>
            <span>)</span>
    <span>}</span>
    
    <span>public</span> <span>UserInfoDTO</span> <span>queryUserInfoByIdFromCache</span><span>(</span><span>Long</span> userId<span>)</span><span>{</span>
        <span>return</span> userCache<span>.</span><span>get</span><span>(</span>userId<span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-27T13:12:51.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Guava-retry重试组件</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/guava/guava-retry/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/guava/guava-retry/"/>
    <updated>2022-03-24T17:05:50.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、简介"> 一、简介</h2>
<div><p>Guava-retry</p>
<p>Guava 是一组来自 Google 的核心 Java 库，其中包括新的集合类型（例如 multimap 和 multiset）、不可变集合、图形库以及用于并发、I/O、散列、缓存、原语、字符串等的实用程序！它广泛用于 Google
内部的大多数 Java 项目，也被许多其他公司广泛使用。</p>
<p>API 非常的简单，我们可以非常轻松的使用，来封装成我们业务中自己的组件。</p>
</div>
<h2 id="二、依赖"> 二、依赖</h2>
<div><pre><code>    <span><span><span>&lt;</span>dependency</span><span>></span></span>
        <span><span><span>&lt;</span>groupId</span><span>></span></span>com.github.rholder<span><span><span>&lt;/</span>groupId</span><span>></span></span>
        <span><span><span>&lt;</span>artifactId</span><span>></span></span>guava-retrying<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
        <span><span><span>&lt;</span>version</span><span>></span></span>2.0.0<span><span><span>&lt;/</span>version</span><span>></span></span>
    <span><span><span>&lt;/</span>dependency</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="三、使用"> 三、使用</h2>
<h3 id="_3-1-指定异常"> 3.1 指定异常</h3>
<p>配置如果发生了 <code>Exception</code> 异常进行重试</p>
<div><div><br><br><div>&nbsp;</div><br><br><br><br><br></div><pre><code>    <span>Retryer</span><span><span>&lt;</span><span>User</span><span>></span></span> retry <span>=</span> <span>RetryerBuilder</span><span>.</span><span><span>&lt;</span><span>User</span><span>></span></span><span>newBuilder</span><span>(</span><span>)</span>
                <span>//发生ConnectException异常时重试</span>
                <span>.</span><span>retryIfExceptionOfType</span><span>(</span><span>Exception</span><span>.</span><span>class</span><span>)</span>
                <span>//重试的等待策略 初始等待1s，每次递增1s。如：第一次1s，第二次2s，第三次3s，以此类推...</span>
                <span>.</span><span>withWaitStrategy</span><span>(</span><span>WaitStrategies</span><span>.</span><span>incrementingWait</span><span>(</span><span>1</span><span>,</span> <span>TimeUnit</span><span>.</span>SECONDS<span>,</span> <span>1</span><span>,</span> <span>TimeUnit</span><span>.</span>SECONDS<span>)</span><span>)</span>
                <span>//重试3次后停止</span>
                <span>.</span><span>withStopStrategy</span><span>(</span><span>StopStrategies</span><span>.</span><span>stopAfterAttempt</span><span>(</span><span>3</span><span>)</span><span>)</span><span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="_3-2-重试策略"> 3.2 重试策略</h3>
<p>WaitStrategy 重试策略</p>
<div><div><br><br><br><br><div>&nbsp;</div><br><br><br></div><pre><code>    <span>Retryer</span><span><span>&lt;</span><span>User</span><span>></span></span> retry <span>=</span> <span>RetryerBuilder</span><span>.</span><span><span>&lt;</span><span>User</span><span>></span></span><span>newBuilder</span><span>(</span><span>)</span>
                <span>//发生ConnectException异常时重试</span>
                <span>.</span><span>retryIfExceptionOfType</span><span>(</span><span>Exception</span><span>.</span><span>class</span><span>)</span>
                <span>//重试的等待策略 初始等待1s，每次递增1s。如：第一次1s，第二次2s，第三次3s，以此类推...</span>
                <span>.</span><span>withWaitStrategy</span><span>(</span><span>WaitStrategies</span><span>.</span><span>incrementingWait</span><span>(</span><span>1</span><span>,</span> <span>TimeUnit</span><span>.</span>SECONDS<span>,</span> <span>1</span><span>,</span> <span>TimeUnit</span><span>.</span>SECONDS<span>)</span><span>)</span>
                <span>//重试3次后停止</span>
                <span>.</span><span>withStopStrategy</span><span>(</span><span>StopStrategies</span><span>.</span><span>stopAfterAttempt</span><span>(</span><span>3</span><span>)</span><span>)</span><span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><table>
<thead>
<tr>
<th>策略</th>
<th>使用方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>固定策略</td>
<td>WaitStrategies.fixedWait(10,TimeUnit.SECONDS)</td>
<td>每10秒执行一次</td>
</tr>
<tr>
<td>随机策略</td>
<td>WaitStrategies.randomWait(100,TimeUnit.SECONDS)</td>
<td>0 到 100秒之间随机执行一次</td>
</tr>
<tr>
<td>随机策略</td>
<td>WaitStrategies.randomWait(10,TimeUnit.SECONDS,20,TimeUnit.SECONDS)</td>
<td>10 到 20秒之间随机执行一次</td>
</tr>
<tr>
<td>递增策略</td>
<td>WaitStrategies.incrementingWait(1, TimeUnit.SECONDS, 1, TimeUnit.SECONDS)</td>
<td>初始等待1s，每次递增1s。如：第一次1s，第二次2s，第三次3s，以此类推...</td>
</tr>
<tr>
<td>异常策略</td>
<td>WaitStrategies.exceptionWait(...)</td>
<td>不同的异常返回不同的重试时间</td>
</tr>
<tr>
<td>斐波那契数列策略</td>
<td>WaitStrategies.fibonacciWait(...)</td>
<td>1、1、2、3、5、8、13、21类推</td>
</tr>
</tbody>
</table>
<h3 id="_3-3-重试监听器"> 3.3 重试监听器</h3>
<p>Attempt 代表每次执行动作，可以获取执行次数，打印执行日志</p>
<div><div><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br></div><pre><code> <span>Retryer</span><span><span>&lt;</span><span>User</span><span>></span></span> retry <span>=</span> <span>RetryerBuilder</span><span>.</span><span><span>&lt;</span><span>User</span><span>></span></span><span>newBuilder</span><span>(</span><span>)</span>
                <span>//发生ConnectException异常时重试</span>
                <span>.</span><span>retryIfExceptionOfType</span><span>(</span><span>Exception</span><span>.</span><span>class</span><span>)</span>
                <span>//重试的等待策略 初始等待1s，每次递增1s。如：第一次1s，第二次2s，第三次3s，以此类推...</span>
                <span>.</span><span>withWaitStrategy</span><span>(</span><span>WaitStrategies</span><span>.</span><span>incrementingWait</span><span>(</span><span>1</span><span>,</span> <span>TimeUnit</span><span>.</span>SECONDS<span>,</span> <span>1</span><span>,</span> <span>TimeUnit</span><span>.</span>SECONDS<span>)</span><span>)</span>
                <span>//重试监听器</span>
                <span>.</span><span>withRetryListener</span><span>(</span><span>new</span> <span>RetryListener</span><span>(</span><span>)</span> <span>{</span>
                    <span>@Override</span>
                    <span>public</span> <span><span>&lt;</span><span>V</span><span>></span></span> <span>void</span> <span>onRetry</span><span>(</span><span>Attempt</span><span><span>&lt;</span><span>V</span><span>></span></span> attempt<span>)</span> <span>{</span>
                        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"重试次数:"</span> <span>+</span> attempt<span>.</span><span>getAttemptNumber</span><span>(</span><span>)</span><span>)</span><span>;</span>
                        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"异常:"</span> <span>+</span> attempt<span>.</span><span>getExceptionCause</span><span>(</span><span>)</span><span>)</span><span>;</span>
                        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"返回值:"</span><span>+</span>attempt<span>.</span><span>get</span><span>(</span><span>)</span><span>)</span><span>;</span>
                    <span>}</span>
                <span>}</span><span>)</span>
                <span>//重试3次后停止</span>
                <span>.</span><span>withStopStrategy</span><span>(</span><span>StopStrategies</span><span>.</span><span>stopAfterAttempt</span><span>(</span><span>10</span><span>)</span><span>)</span><span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id="_3-4-停止策略"> 3.4 停止策略</h3>
<p>StopStrategy 一般常用的就是重试多少次</p>
<div><div><br><br><br><br><br><br><div>&nbsp;</div><br></div><pre><code> <span>Retryer</span><span><span>&lt;</span><span>User</span><span>></span></span> retry <span>=</span> <span>RetryerBuilder</span><span>.</span><span><span>&lt;</span><span>User</span><span>></span></span><span>newBuilder</span><span>(</span><span>)</span>
                <span>//发生ConnectException异常时重试</span>
                <span>.</span><span>retryIfExceptionOfType</span><span>(</span><span>Exception</span><span>.</span><span>class</span><span>)</span>
                <span>//重试的等待策略 初始等待1s，每次递增1s。如：第一次1s，第二次2s，第三次3s，以此类推...</span>
                <span>.</span><span>withWaitStrategy</span><span>(</span><span>WaitStrategies</span><span>.</span><span>incrementingWait</span><span>(</span><span>1</span><span>,</span> <span>TimeUnit</span><span>.</span>SECONDS<span>,</span> <span>1</span><span>,</span> <span>TimeUnit</span><span>.</span>SECONDS<span>)</span><span>)</span>
                <span>//重试3次后停止</span>
                <span>.</span><span>withStopStrategy</span><span>(</span><span>StopStrategies</span><span>.</span><span>stopAfterAttempt</span><span>(</span><span>10</span><span>)</span><span>)</span><span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>
<li>StopAfterDelayStrategy ：设定一个最长允许的执行时间；比如设定最长执行10s，无论任务执行次数，只要重试的时候超出了最长时间，则任务终止，并返回重试异常RetryException；</li>
<li>NeverStopStrategy ：不停止，用于需要一直轮训直到返回期望结果的情况；</li>
<li>StopAfterAttemptStrategy ：设定最大重试次数，如果超出最大重试次数则停止重试，并返回重试异常；</li>
</ul>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Spring-retry重试组件</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/guava/spring-retry/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/guava/spring-retry/"/>
    <updated>2022-03-24T17:05:50.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、简介"> 一、简介</h2>
<div><p>Spring-retry</p>
<p>前面我们了解到了,Guava的重试组件,我们可以基于Guava的能力,来封装我们需要的能力来满足我们的业务。今天来分享Spring-Retry重试组件。当然Spring只是帮我们封装好了，如果你不想自定义
重试组件，那么我们可以直接使用Spring的能力来实现。</p>
<p>API 也是非常的简单，几个注解就可以搞定。</p>
</div>
<p><a href="https://github.com/lxchinesszz/spring-retry-example" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/仓库-spring--retry--example-green" alt="" loading="lazy"></a></p>
<h2 id="二、依赖"> 二、依赖</h2>
<div><pre><code>    <span>&lt;!--springboot项目都不用引入版本号--></span>
    <span><span><span>&lt;</span>dependency</span><span>></span></span>
      <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.retry<span><span><span>&lt;/</span>groupId</span><span>></span></span>
      <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-retry<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
    <span><span><span>&lt;/</span>dependency</span><span>></span></span>
    <span>&lt;!--还是需要aop的支持的(如果已经引入了aop就不用再添加这个依赖了)--></span>
    <span><span><span>&lt;</span>dependency</span><span>></span></span>
      <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework<span><span><span>&lt;/</span>groupId</span><span>></span></span>
      <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-aspects<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
    <span><span><span>&lt;/</span>dependency</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="三、使用"> 三、使用</h2>
<h3 id="_3-1-enableretry-开启重试"> 3.1 @EnableRetry 开启重试</h3>
<p>SpringBoot启动类上添加开启重试注解</p>
<div><pre><code>    <span>@EnableRetry</span>
    <span>@SpringBootApplication</span>
    <span>public</span> <span>class</span> <span>Application</span> <span>{</span>
        <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
            <span>ConfigurableApplicationContext</span> applicationContext <span>=</span> <span>SpringApplication</span><span>.</span><span>run</span><span>(</span><span>Application</span><span>.</span><span>class</span><span>,</span> args<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="_3-2-retryable-重试策略"> 3.2 @Retryable 重试策略</h3>
<p>在需要重试的方法上加注解@Retryable</p>
<div><pre><code>    <span>@Retryable</span><span>(</span>value <span>=</span> <span>RuntimeException</span><span>.</span><span>class</span><span>,</span> maxAttempts <span>=</span> <span>5</span><span>,</span> backoff <span>=</span> <span>@Backoff</span><span>(</span>delay <span>=</span> <span>100</span><span>)</span><span>)</span>
    <span>public</span> <span>String</span> <span>say</span><span>(</span><span>String</span> param<span>)</span> <span>{</span>
        <span>double</span> random <span>=</span> <span>Math</span><span>.</span><span>random</span><span>(</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>random <span>></span> <span>0.1</span><span>)</span> <span>{</span>
            <span>throw</span> <span>new</span> <span>RuntimeException</span><span>(</span><span>"超时"</span><span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> random <span>+</span> <span>""</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-0"><label for="task-item-0"> value = RuntimeException.class：是指方法抛出RuntimeException异常时，进行重试。这里可以指定你想要拦截的异常。</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-1"><label for="task-item-1"> maxAttempts：是最大重试次数。如果不写，则是默认3次。</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-2"><label for="task-item-2"> backoff = @Backoff(delay = 100)：是指重试间隔。delay=100意味着下一次的重试，要等100毫秒之后才能执行。</label></li>
</ul>
<h3 id="_3-3-recover-重试失败"> 3.3 @Recover 重试失败</h3>
<p>当@Retryable方法重试失败之后，最后就会调用@Recover方法。用于@Retryable失败时的“兜底”处理方法。 @Recover的方法必须要与@Retryable注解的方法保持一致，第一入参为要重试的异常，其他参数与@Retryable保持一致，返回值也要一样，否则无法执行！</p>
<div><pre><code>    <span>@Retryable</span><span>(</span>value <span>=</span> <span>IllegalAccessException</span><span>.</span><span>class</span><span>)</span>
    <span>public</span> <span>void</span> <span>say</span><span>(</span><span>)</span> <span>throws</span> <span>IllegalAccessException</span> <span>{</span>
        log<span>.</span><span>info</span><span>(</span><span>"do something... {}"</span><span>,</span> <span>LocalDateTime</span><span>.</span><span>now</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>throw</span> <span>new</span> <span>IllegalAccessException</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>


    <span>@Recover</span>
    <span>public</span> <span>void</span> <span>sayBackup</span><span>(</span><span>IllegalAccessException</span> e<span>)</span> <span>{</span>
        log<span>.</span><span>info</span><span>(</span><span>"service retry after Recover => {}"</span><span>,</span> e<span>.</span><span>getMessage</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="_3-4-circuitbreaker-熔断策略"> 3.4 @CircuitBreaker 熔断策略</h3>
<p>规定时间内如果重试次数达到了最大次数,开启熔断策略。
5秒内,这个方法重试了2次,就会断路。直接走@Recover修饰的方法。当超过10s后进行重置,继续走get方法。</p>
<p>注意@Retryable和@CircuitBreaker不要修饰同一个方法。</p>
<div><pre><code>    <span>@CircuitBreaker</span><span>(</span>openTimeout <span>=</span> <span>5000</span><span>,</span> maxAttempts <span>=</span> <span>2</span><span>,</span>resetTimeout <span>=</span> <span>10000</span><span>)</span>
    <span>public</span> <span>String</span> <span>get</span><span>(</span><span>@PathVariable</span> <span>Integer</span> flag<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>flag <span>></span> <span>1</span><span>)</span> <span>{</span>
            log<span>.</span><span>info</span><span>(</span><span>"重试进入"</span><span>)</span><span>;</span>
            <span>throw</span> <span>new</span> <span>RuntimeException</span><span>(</span><span>"自定义异常"</span><span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> <span>"处理正常"</span><span>;</span>
    <span>}</span>
    <span>@Recover</span>
    <span>public</span> <span>String</span> <span>getBackup</span><span>(</span><span>RuntimeException</span> runtimeException<span>)</span> <span>{</span>
        log<span>.</span><span>error</span><span>(</span><span>"重试一直失败,进入备用方法:"</span> <span>+</span> runtimeException<span>.</span><span>getMessage</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>return</span> <span>"备用方法进去"</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">意思</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">include</td>
<td style="text-align:left">指定处理的异常类。默认为空</td>
</tr>
<tr>
<td style="text-align:left">exclude</td>
<td style="text-align:left">指定不需要处理的异常。默认为空</td>
</tr>
<tr>
<td style="text-align:left">value</td>
<td style="text-align:left">指定要重试的异常。默认为空</td>
</tr>
<tr>
<td style="text-align:left">maxAttempts</td>
<td style="text-align:left">最大重试次数。默认3次</td>
</tr>
<tr>
<td style="text-align:left">openTimeout</td>
<td style="text-align:left">配置熔断器打开的超时时间，默认5s，当超过openTimeout之后熔断器电路变成半打开状态（只要有一次重试成功，则闭合电路）</td>
</tr>
<tr>
<td style="text-align:left">resetTimeout</td>
<td style="text-align:left">配置熔断器重新闭合的超时时间，默认20s，超过这个时间断路器关闭</td>
</tr>
<tr>
<td style="text-align:left">include</td>
<td style="text-align:left">指定处理的异常类。默认为空</td>
</tr>
</tbody>
</table>
<h3 id="_3-5-retrylistener-监听器"> 3.5 RetryListener 监听器</h3>
<p>spring-retry和guava-retry一样同样有监听器。我们可以自定义我们的监听器</p>
<div><pre><code><span>@Slf4j</span>
<span>public</span> <span>class</span> <span>DefaultListenerSupport</span> <span>extends</span> <span>RetryListenerSupport</span> <span>{</span>
    <span>@Override</span>
    <span>public</span> <span><span>&lt;</span><span>T</span><span>,</span> <span>E</span> <span>extends</span> <span>Throwable</span><span>></span></span> <span>void</span> <span>close</span><span>(</span><span>RetryContext</span> context<span>,</span>
                                               <span>RetryCallback</span><span><span>&lt;</span><span>T</span><span>,</span> <span>E</span><span>></span></span> callback<span>,</span> <span>Throwable</span> throwable<span>)</span> <span>{</span>
        log<span>.</span><span>info</span><span>(</span><span>"onClose"</span><span>)</span><span>;</span>
        <span>super</span><span>.</span><span>close</span><span>(</span>context<span>,</span> callback<span>,</span> throwable<span>)</span><span>;</span>
    <span>}</span>

    <span>@Override</span>
    <span>public</span> <span><span>&lt;</span><span>T</span><span>,</span> <span>E</span> <span>extends</span> <span>Throwable</span><span>></span></span> <span>void</span> <span>onError</span><span>(</span><span>RetryContext</span> context<span>,</span>
                                                 <span>RetryCallback</span><span><span>&lt;</span><span>T</span><span>,</span> <span>E</span><span>></span></span> callback<span>,</span> <span>Throwable</span> throwable<span>)</span> <span>{</span>
        log<span>.</span><span>info</span><span>(</span><span>"onError"</span><span>)</span><span>;</span>
        <span>super</span><span>.</span><span>onError</span><span>(</span>context<span>,</span> callback<span>,</span> throwable<span>)</span><span>;</span>
    <span>}</span>

    <span>@Override</span>
    <span>public</span> <span><span>&lt;</span><span>T</span><span>,</span> <span>E</span> <span>extends</span> <span>Throwable</span><span>></span></span> <span>boolean</span> <span>open</span><span>(</span><span>RetryContext</span> context<span>,</span>
                                                 <span>RetryCallback</span><span><span>&lt;</span><span>T</span><span>,</span> <span>E</span><span>></span></span> callback<span>)</span> <span>{</span>
        log<span>.</span><span>info</span><span>(</span><span>"onOpen"</span><span>)</span><span>;</span>
        <span>return</span> <span>super</span><span>.</span><span>open</span><span>(</span>context<span>,</span> callback<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

<span>@Configuration</span>
<span>public</span> <span>class</span> <span>RetryConfig</span> <span>{</span>

    <span>@Bean</span>
    <span>public</span> <span>RetryTemplate</span> <span>retryTemplate</span><span>(</span><span>)</span> <span>{</span>
        <span>RetryTemplate</span> retryTemplate <span>=</span> <span>new</span> <span>RetryTemplate</span><span>(</span><span>)</span><span>;</span>
        <span>SimpleRetryPolicy</span> retryPolicy <span>=</span> <span>new</span> <span>SimpleRetryPolicy</span><span>(</span><span>)</span><span>;</span> <span>//设置重试策略</span>
        retryPolicy<span>.</span><span>setMaxAttempts</span><span>(</span><span>2</span><span>)</span><span>;</span>
        retryTemplate<span>.</span><span>setRetryPolicy</span><span>(</span>retryPolicy<span>)</span><span>;</span>

        <span>FixedBackOffPolicy</span> fixedBackOffPolicy <span>=</span> <span>new</span> <span>FixedBackOffPolicy</span><span>(</span><span>)</span><span>;</span> <span>//设置退避策略</span>
        fixedBackOffPolicy<span>.</span><span>setBackOffPeriod</span><span>(</span><span>2000L</span><span>)</span><span>;</span>
        retryTemplate<span>.</span><span>setBackOffPolicy</span><span>(</span>fixedBackOffPolicy<span>)</span><span>;</span>
        
        retryTemplate<span>.</span><span>registerListener</span><span>(</span><span>new</span> <span>DefaultListenerSupport</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>//设置retryListener</span>
        <span>return</span> retryTemplate<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><h3 id="_3-6-retrypolicy-重试策略"> 3.6 RetryPolicy 重试策略</h3>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">意思</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">NeverRetryPolicy</td>
<td style="text-align:left">只允许调用RetryCallback一次，不允许重试；</td>
</tr>
<tr>
<td style="text-align:left">AlwaysRetryPolicy</td>
<td style="text-align:left">允许无限重试，直到成功，此方式逻辑不当会导致死循环；</td>
</tr>
<tr>
<td style="text-align:left">SimpleRetryPolicy</td>
<td style="text-align:left">固定次数重试策略，默认重试最大次数为3次，RetryTemplate默认使用的策略；</td>
</tr>
<tr>
<td style="text-align:left">TimeoutRetryPolicy</td>
<td style="text-align:left">超时时间重试策略，默认超时时间为1秒，在指定的超时时间内允许重试；</td>
</tr>
<tr>
<td style="text-align:left">CircuitBreakerRetryPolicy</td>
<td style="text-align:left">有熔断功能的重试策略，需设置3个参数openTimeout、resetTimeout和delegate</td>
</tr>
<tr>
<td style="text-align:left">CompositeRetryPolicy</td>
<td style="text-align:left">组合重试策略，有两种组合方式，乐观组合重试策略是指只要有一个策略允许重试即可以，悲观组合重试策略是指只要有一个策略不允许重试即可以，但不管哪种组合方式，组合中的每一个策略都会执行。</td>
</tr>
</tbody>
</table>
<h3 id="_3-7-backoffpolicy-退避策略"> 3.7 BackOffPolicy 退避策略</h3>
<p>下一次重试的策略。
退避是指怎么去做下一次的重试，在这里其实就是等待多长时间。</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">意思</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">FixedBackOffPolicy</td>
<td style="text-align:left">默认固定延迟1秒后执行下一次重试</td>
</tr>
<tr>
<td style="text-align:left">ExponentialBackOffPolicy</td>
<td style="text-align:left">指数递增延迟执行重试，默认初始0.1秒，系数是2，那么下次延迟0.2秒，再下次就是延迟0.4秒，如此类推，最大30秒。</td>
</tr>
<tr>
<td style="text-align:left">ExponentialRandomBackOffPolicy</td>
<td style="text-align:left">在上面那个策略上增加随机性</td>
</tr>
<tr>
<td style="text-align:left">UniformRandomBackOffPolicy</td>
<td style="text-align:left">这个跟上面的区别就是，上面的延迟会不停递增，这个只会在固定的区间随机</td>
</tr>
<tr>
<td style="text-align:left">StatelessBackOffPolicy</td>
<td style="text-align:left">这个说明是无状态的，所谓无状态就是对上次的退避无感知，从它下面的子类也能看出来</td>
</tr>
</tbody>
</table>
<h2 id="四、总结"> 四、总结</h2>
<p>天下代码一大抄，看你会抄不会抄。发现无论是guava还是spring的重试，基本都是类似的思路。只是看谁的功能比较鉴权而已。
guava提供了基础的能力，你任意封装。
spring基于spring提供了已经完好的能力，直接使用就好。不过因为是spring给你封装的能力，所以你要先了解清楚才行。不然可能使用错误，造成故障。</p>
<p>以上两款工具都挺好，不过他们都不支持分布式重试的能力。不过这已经满足我们的日常开发了，如果真遇到分布式的重试，就自己来实现咯。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Reactive 反应式编程</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/reactor/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/reactor/"/>
    <updated>2022-05-08T04:06:59.000Z</updated>
    <content type="html"><![CDATA[<div><p>反应式编程</p>
<p>reactive 是一种新的编程思想, 如同名字一样, 反应式编程。而Reactor 是一个工具包，类似于
Spring一样。这点我们可以直接在Spring的官网上可以看到。本篇基于小编自己的学习进行总结。</p>
</div>
<p><img src="https://img.springlearn.cn/blog/learn_1651411884000.png" alt="" loading="lazy"></p>
<h2 id="一、提出问题"> 一、提出问题</h2>
<p>目前来说反应式编程在Java行业其实不是很流行, 其原因1在于传统的编程模型已经根深蒂固。虽然阻塞但是其实对于业务开发
并不是一个很大的痛点。其2新的编程思想具有学习成本，但是又不是特别的痛，所以没有引起关注。下面我们来带着问题来学习吧。</p>
<h2 id="_1-1-什么是反应式编程"> 1.1 什么是反应式编程?</h2>
<p>哎，可能因为都是从外国翻译过来的缘故，总喜欢翻译写高大上，且晦涩难懂的文字进行描述，搞得大多数程序猿一头雾水。但是没办法，
谁让你不主动去学习原文，而要吃一些大牛的二手翻译资料呢。所以我们就要最这些二手资料进行重读，并且深入思考，来总结出自己的理解。
小编理解，所谓反应式编程，简单来说就是基于事件编程，由事件去驱动。比如我们servlet api，传统的方式servlet 线程是阻塞线程，
如果方法没有执行完成，那么servlet线程会一直在阻塞等待。从而会导致不能接受更多的外部请求。而如果要使用反应式编程</p>
<h2 id="_1-2-反应式编程中背压指得是什么"> 1.2 反应式编程中背压指得是什么?</h2>
<p>我也不知道为什么称背压，如果单从这个词汇来说，想死都想不通。什么鬼玩意呀。现在我们忽略这个sb的词汇。直接来说他的含义。
要想搞明白这个，先知道事件驱动是如何设计的。首先有一个事件发送者，和一个事件处理者。传统的方式是事件处理者被动的来接受
事件发送者，发起的事件，并进行处理，而在reactor中，事件的处理者不仅可以被动的接受，同时也支持主动的拉去事件。于是这种
能力被称为背压。在高大上的解释就是，这能实现组件之间的弹性。</p>
<h2 id="_1-3-反应式编程好处是什么"> 1.3 反应式编程好处是什么?</h2>
<p>我们直接看官网的说明，然后进行白话翻译。</p>
<blockquote>
<p>Reactive systems better utilize modern processors. Also, the inclusion of back-pressure in reactive programming
ensures better resilience between decoupled components.</p>
</blockquote>
<p>直白点就是可以充分的利用其cpu多核多线程的处理能力, 另外背压的能力,使组件知道当前的负载,动态的确定自己还能接受的任务数量,称之为弹性。</p>
<h2 id="二、reactor-核心类"> 二、Reactor 核心类</h2>
<p>这种编程思想其实还是值得学习的，因为基于事件来驱动，确实可以充分的利用其cpu多核多线程的处理能力。充分压榨cpu的能力。
其实我们在很多地方都能看到类似的设计思想。eg: RxJava, Netty。
下面我们就学习下如何使用吧。</p>
<h2 id="_2-1-publisher-发布者"> 2.1 Publisher 发布者</h2>
<p>发布者只有一个接口,提供订阅能力。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>Publisher</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>{</span>
    <span>// 绑定一个订阅者</span>
    <span>public</span> <span>void</span> <span>subscribe</span><span>(</span><span>Subscriber</span><span><span>&lt;</span><span>?</span> <span>super</span> <span>T</span><span>></span></span> s<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_2-2-subscriber-订阅者"> 2.2 Subscriber 订阅者</h2>
<p>订阅者主要处理发布者发布的信息</p>
<div><pre><code><span>public</span> <span>interface</span> <span>Subscriber</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>{</span>
    <span>// 确定订阅关系</span>
    <span>public</span> <span>void</span> <span>onSubscribe</span><span>(</span><span>Subscription</span> s<span>)</span><span>;</span>
    <span>// 处理数据</span>
    <span>public</span> <span>void</span> <span>onNext</span><span>(</span><span>T</span> t<span>)</span><span>;</span>
    <span>// 错误处理</span>
    <span>public</span> <span>void</span> <span>onError</span><span>(</span><span>Throwable</span> t<span>)</span><span>;</span>
    <span>// 当事件处理完时触发</span>
    <span>public</span> <span>void</span> <span>onComplete</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_2-3-subscription-订阅关系"> 2.3 Subscription 订阅关系</h2>
<p>订阅关系，可以取消订阅，通知可以实现拉去能力。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>Subscription</span> <span>{</span>
    <span>// 获取指定数量的数据</span>
    <span>public</span> <span>void</span> <span>request</span><span>(</span><span>long</span> n<span>)</span><span>;</span>
    <span>// 取消订阅关系</span>
    <span>public</span> <span>void</span> <span>cancel</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_2-4-sink-数据池"> 2.4 Sink 数据池</h2>
<p>Sink#next会将数据放入池中，由Sink缓存或直接发送给订阅者。</p>
<p>Mono和Flux分别提供了create和generate的方法,用来绑定事件发射器 Sink。开发者可以利用Sink来
生产事件数据，然后发送给订阅者。</p>
<h2 id="三、事件模式"> 三、事件模式</h2>
<p>Push推模式，PUSH_PULL混合模式</p>
<div><pre><code><span>enum</span> <span>CreateMode</span> <span>{</span>
	PUSH_ONLY<span>,</span> PUSH_PULL
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_3-1-pull-模式"> 3.1 Pull 模式</h2>
<p>generate 方法适用于拉去模式，当订阅者调用Subscription#request,则从Sink#next生产一条数据。
如下两个代码示例。</p>
<div><pre><code>    <span>@Test</span>
    <span>@DisplayName</span><span>(</span><span>"Flux Pull模式 Integer.MAX_VALUE"</span><span>)</span>
    <span>public</span> <span>void</span> <span>testFluxPull</span><span>(</span><span>)</span> <span>{</span>
        <span>Flux</span><span>.</span><span>generate</span><span>(</span><span>(</span><span>Consumer</span><span><span>&lt;</span><span>SynchronousSink</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span><span>)</span> sink <span>-></span> <span>{</span>
                    <span>int</span> k <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span><span>Math</span><span>.</span><span>random</span><span>(</span><span>)</span> <span>*</span> <span>10</span><span>)</span><span>;</span>
                    sink<span>.</span><span>next</span><span>(</span>k<span>)</span><span>;</span>
                <span>}</span><span>)</span>
                <span>// 默认获取 request(Integer.MAX_VALUE)</span>
                <span>.</span><span>subscribe</span><span>(</span>integer <span>-></span> <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"Pull:"</span> <span>+</span> integer<span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Test</span>
    <span>@DisplayName</span><span>(</span><span>"Flux Pull模式 request调用一次,则调用Sink生产一次"</span><span>)</span>
    <span>public</span> <span>void</span> <span>testFluxPullTwo</span><span>(</span><span>)</span> <span>{</span>
        <span>Flux</span><span>.</span><span>generate</span><span>(</span><span>(</span><span>Consumer</span><span><span>&lt;</span><span>SynchronousSink</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span><span>)</span> sink <span>-></span> <span>{</span>
                    <span>int</span> k <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span><span>Math</span><span>.</span><span>random</span><span>(</span><span>)</span> <span>*</span> <span>10</span><span>)</span><span>;</span>
                    sink<span>.</span><span>next</span><span>(</span>k<span>)</span><span>;</span>
                <span>}</span><span>)</span>
                <span>.</span><span>subscribe</span><span>(</span><span>new</span> <span>Subscriber</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>(</span><span>)</span> <span>{</span>
                    <span>Subscription</span> subscription<span>;</span>

                    <span>private</span> <span>int</span> count<span>;</span>

                    <span>@Override</span>
                    <span>public</span> <span>void</span> <span>onSubscribe</span><span>(</span><span>Subscription</span> s<span>)</span> <span>{</span>
                        <span>this</span><span>.</span>subscription <span>=</span> s<span>;</span>
                        <span>// 订阅时候,生产1条数据</span>
                        <span>this</span><span>.</span>subscription<span>.</span><span>request</span><span>(</span><span>1</span><span>)</span><span>;</span>
                    <span>}</span>

                    <span>@Override</span>
                    <span>public</span> <span>void</span> <span>onNext</span><span>(</span><span>Integer</span> integer<span>)</span> <span>{</span>
                        count<span>++</span><span>;</span>
                        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"处理:"</span> <span>+</span> integer<span>)</span><span>;</span>
                        <span>// 在处理1次，当第二次处理时候,就不拉数据了</span>
                        <span>if</span> <span>(</span>count <span>&lt;</span> <span>2</span><span>)</span> <span>{</span>
                            <span>this</span><span>.</span>subscription<span>.</span><span>request</span><span>(</span><span>1</span><span>)</span><span>;</span>
                        <span>}</span>
                    <span>}</span>

                    <span>@Override</span>
                    <span>public</span> <span>void</span> <span>onError</span><span>(</span><span>Throwable</span> t<span>)</span> <span>{</span>
                        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"onError"</span><span>)</span><span>;</span>
                    <span>}</span>

                    <span>@Override</span>
                    <span>public</span> <span>void</span> <span>onComplete</span><span>(</span><span>)</span> <span>{</span>
                        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"onComplete"</span><span>)</span><span>;</span>
                    <span>}</span>
                <span>}</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><div><pre><code>处理:3
处理:1
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_3-2-push-模式"> 3.2 Push 模式</h2>
<p>发布者主动推动数据,跟Pull的区别是。他不会随着,订阅者调用Subscription#request,而从Sink#next生产一条数据。
只有订阅时候Subscription#request,Sink只会执行一次</p>
<div><pre><code>    <span>@Test</span>
    <span>@DisplayName</span><span>(</span><span>"Flux Push模式"</span><span>)</span>
    <span>public</span> <span>void</span> <span>testFluxPush</span><span>(</span><span>)</span> <span>{</span>
        <span>Flux</span><span>.</span><span>create</span><span>(</span><span>(</span><span>Consumer</span><span><span>&lt;</span><span>FluxSink</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span><span>)</span> sink <span>-></span> <span>{</span>
            <span>int</span> k <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span><span>Math</span><span>.</span><span>random</span><span>(</span><span>)</span> <span>*</span> <span>10</span><span>)</span><span>;</span>
            sink<span>.</span><span>next</span><span>(</span>k<span>)</span><span>;</span>
        <span>}</span><span>)</span><span>.</span><span>subscribe</span><span>(</span><span>new</span> <span>Subscriber</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>(</span><span>)</span> <span>{</span>

            <span>Subscription</span> subscription<span>;</span>

            <span>@Override</span>
            <span>public</span> <span>void</span> <span>onSubscribe</span><span>(</span><span>Subscription</span> s<span>)</span> <span>{</span>
                <span>this</span><span>.</span>subscription <span>=</span> s<span>;</span>
                <span>this</span><span>.</span>subscription<span>.</span><span>request</span><span>(</span><span>1</span><span>)</span><span>;</span>
            <span>}</span>

            <span>@SneakyThrows</span>
            <span>@Override</span>
            <span>public</span> <span>void</span> <span>onNext</span><span>(</span><span>Integer</span> integer<span>)</span> <span>{</span>
                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"处理:"</span> <span>+</span> integer<span>)</span><span>;</span>
            <span>}</span>

            <span>@Override</span>
            <span>public</span> <span>void</span> <span>onError</span><span>(</span><span>Throwable</span> t<span>)</span> <span>{</span>
                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"处理失败"</span><span>)</span><span>;</span>
            <span>}</span>

            <span>@Override</span>
            <span>public</span> <span>void</span> <span>onComplete</span><span>(</span><span>)</span> <span>{</span>
                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"处理完成"</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><div><pre><code>处理:9
</code></pre>
<div><span>1</span><br></div></div><h2 id="四、事件驱动的好处"> 四、事件驱动的好处</h2>
<p>反应式编程的好处, 主要是编程思想的不同, 抓住关键点非阻塞+事件驱动。</p>
<div><pre><code>StopWatch &#39;耗时统计&#39;: running time = 2070915374 ns
---------------------------------------------
ns         %     Task name
---------------------------------------------
063036666   003%  基于事件驱动的编程思想
2007878708  097%  传统阻塞式的编程思想
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>如下举一个例子,假如这是Servlet API。Servlet 线程负责调用getMonoUserName()。但是其实没有执行
处理逻辑,而真正的执行逻辑交给业务线程处理。而此时Servlet线程可以释放出来,继续接受外部请求。</p>
<div><pre><code>    <span>@Test</span>
    <span>@DisplayName</span><span>(</span><span>"Mono 事件驱动的好处"</span><span>)</span>
    <span>public</span> <span>void</span> <span>testMono</span><span>(</span><span>)</span> <span>{</span>
        <span>StopWatch</span> stopWatch <span>=</span> <span>new</span> <span>StopWatch</span><span>(</span><span>)</span><span>;</span>
        stopWatch<span>.</span><span>start</span><span>(</span><span>"基于事件驱动的编程思想"</span><span>)</span><span>;</span>
        <span>Mono</span><span><span>&lt;</span><span>String</span><span>></span></span> userNameMono <span>=</span> <span>getMonoUserName</span><span>(</span><span>)</span><span>;</span>
        stopWatch<span>.</span><span>stop</span><span>(</span><span>)</span><span>;</span>
        stopWatch<span>.</span><span>start</span><span>(</span><span>"传统阻塞式的编程思想"</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>getUserName</span><span>(</span><span>)</span><span>)</span><span>;</span>
        stopWatch<span>.</span><span>stop</span><span>(</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>userNameMono<span>.</span><span>block</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>stopWatch<span>.</span><span>prettyPrint</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>


    <span>@SneakyThrows</span>
    <span>public</span> <span>String</span> <span>getUserName</span><span>(</span><span>)</span> <span>{</span>
        <span>Thread</span><span>.</span><span>sleep</span><span>(</span><span>2000L</span><span>)</span><span>;</span>
        <span>return</span> <span>"JayChou"</span><span>;</span>
    <span>}</span>

    <span>/**
     * 基于事件驱动的编程思想
     *
     * @return Mono&lt;String>
     */</span>
    <span>public</span> <span>Mono</span><span><span>&lt;</span><span>String</span><span>></span></span> <span>getMonoUserName</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>Mono</span><span>.</span><span>create</span><span>(</span>monoSink <span>-></span> <span>{</span>
            <span>try</span> <span>{</span>
                <span>Thread</span><span>.</span><span>sleep</span><span>(</span><span>2000L</span><span>)</span><span>;</span>
            <span>}</span> <span>catch</span> <span>(</span><span>InterruptedException</span> e<span>)</span> <span>{</span>
                monoSink<span>.</span><span>error</span><span>(</span><span>new</span> <span>RuntimeException</span><span>(</span>e<span>)</span><span>)</span><span>;</span>
                <span>return</span><span>;</span>
            <span>}</span>
            monoSink<span>.</span><span>success</span><span>(</span><span>"JayChou"</span><span>)</span><span>;</span>
        <span>}</span><span>)</span><span>;</span>
    <span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><h2 id="五、总结-思考"> 五、总结 &amp; 思考</h2>
<p>传统的编程思想是: 基于数据处理来写处理逻辑,逻辑中可能直接就阻塞了。
反应式编程思想是: 我们只写数据处理逻辑,里面虽然也有阻塞,但是并不直接执行。类似线程中,Future#get</p>
<p><img src="https://img.springlearn.cn/blog/learn_1651427177000.png" alt="" loading="lazy"></p>
<p>其主要的不同就是编程思想不同，非阻塞的编程思想。但是我们也发现, 这样的思想其实带来好处其实并不是很大。
我们也可以直接使用多线程来直接搞定，而不用增加学习成本来学习新的框架。</p>
<p><strong>为什么反应式编程在后端开发者里面推广不起来</strong></p>
<p>作为后台服务, 开发者其实对吞吐量并不是很关心,比如页面请求了后端，就算我后端服务慢，前台请求就会卡住。卡住就卡住等待呗，不管用什么框架都会卡住。（秒杀高并发服务除外，并不是所有的服务都要求高并发。特殊情况特殊处理, 异步也解决不了高并发的吞吐和rt问题）</p>
<p>但是如果作为安卓开发呢？
用户发起了一个请求, 请求慢就让用户主线程就卡住，手机不能滑动。这样用户体验是非常的差的。所以安卓开发会比较关注，解决方案就是纯异步，主线程只接受请求，然后任务安排给后台异步线程，这样就算请求慢，但是用户不会感觉手机是卡顿的。等到异步任务执行完，在跳转出来就行了。</p>
<p>所以RxJava 是鼻祖，Reactor是追随者。也是因为上面的特性，所以后台开发者没有安卓开发者感兴趣，不需要压榨机器的性能。</p>
<p>Reactor要想推广起来，必须要与异步Servlet或是Spring WebFlux结合（开发者无感使用），才可能推广使用起来。
但是不管怎么样这种编程思想是可以借鉴。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-08T04:06:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">反射框架Reflections</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/reflections/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/reflections/"/>
    <updated>2022-05-09T16:49:39.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/ronmamo/reflections" target="_blank" rel="noopener noreferrer">Github</a></p>
<h2 id="一、简介"> 一、简介</h2>
<p>Reflections通过扫描classpath，索引元数据，并且允许在运行时查询这些元数据。</p>
<p>使用Reflections可以很轻松的获取以下元数据信息：</p>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-0"><label for="task-item-0"> 获取某个类型的全部子类</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-1"><label for="task-item-1"> 只要类型、构造器、方法，字段上带有特定注解，便能获取带有这个注解的全部信息（类型、构造器、方法，字段）</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-2"><label for="task-item-2"> 获取所有能匹配某个正则表达式的资源</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-3"><label for="task-item-3"> 获取所有带有特定签名的方法，包括参数，参数注解，返回类型</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-4"><label for="task-item-4">  获取所有方法的名字</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-5"><label for="task-item-5"> 获取代码里所有字段、方法名、构造器的使用权</label></li>
</ul>
<h2 id="二、maven依赖"> 二、Maven依赖</h2>
<div><pre><code><span><span><span>&lt;</span>dependency</span><span>></span></span>
    <span><span><span>&lt;</span>groupId</span><span>></span></span>org.reflections<span><span><span>&lt;/</span>groupId</span><span>></span></span>
    <span><span><span>&lt;</span>artifactId</span><span>></span></span>reflections<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
    <span><span><span>&lt;</span>version</span><span>></span></span>0.9.11<span><span><span>&lt;/</span>version</span><span>></span></span>
<span><span><span>&lt;/</span>dependency</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="三、使用方法"> 三、使用方法</h2>
<h3 id="_3-1-实例化"> 3.1 实例化</h3>
<p>指定要扫描的包名</p>
<div><pre><code><span>// 实例化Reflections，并指定要扫描的包名</span>
<span>Reflections</span> reflections <span>=</span> <span>new</span> <span>Reflections</span><span>(</span><span>"my.project"</span><span>)</span><span>;</span>
<span>// 获取某个类的所有子类</span>
<span>Set</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span> <span>extends</span> <span>SomeType</span><span>></span><span>></span></span> subTypes <span>=</span> reflections<span>.</span><span>getSubTypesOf</span><span>(</span><span>SomeType</span><span>.</span><span>class</span><span>)</span><span>;</span>
<span>// 获取包含某个注解的所有类</span>
<span>Set</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>></span></span> annotated <span>=</span> reflections<span>.</span><span>getTypesAnnotatedWith</span><span>(</span><span>SomeAnnotation</span><span>.</span><span>class</span><span>)</span><span>;</span>
  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>指定要扫描的包名并添加过滤器</p>
<p><a href="https://ronmamo.github.io/reflections/org/reflections/util/ConfigurationBuilder.html" target="_blank" rel="noopener noreferrer">ConfigurationBuilder API</a></p>
<div><pre><code><span>Reflections</span> reflections <span>=</span> <span>new</span> <span>Reflections</span><span>(</span>
  <span>new</span> <span>ConfigurationBuilder</span><span>(</span><span>)</span>
    <span>.</span><span>forPackage</span><span>(</span><span>"com.my.project"</span><span>)</span>
    <span>.</span><span>filterInputsBy</span><span>(</span><span>new</span> <span>FilterBuilder</span><span>(</span><span>)</span><span>.</span><span>includePackage</span><span>(</span><span>"com.my.project"</span><span>)</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>添加扫描器</p>
<p><a href="https://ronmamo.github.io/reflections/org/reflections/scanners/Scanners.html" target="_blank" rel="noopener noreferrer">Scanners API</a></p>
<div><pre><code><span>// scan package with specific scanners</span>
<span>Reflections</span> reflections <span>=</span> <span>new</span> <span>Reflections</span><span>(</span>
  <span>new</span> <span>ConfigurationBuilder</span><span>(</span><span>)</span>
    <span>.</span><span>forPackage</span><span>(</span><span>"com.my.project"</span><span>)</span>
    <span>.</span><span>filterInputsBy</span><span>(</span><span>new</span> <span>FilterBuilder</span><span>(</span><span>)</span><span>.</span><span>includePackage</span><span>(</span><span>"com.my.project"</span><span>)</span><span>.</span><span>excludePackage</span><span>(</span><span>"com.my.project.exclude"</span><span>)</span><span>)</span>
    <span>.</span><span>setScanners</span><span>(</span><span>TypesAnnotated</span><span>,</span> <span>MethodsAnnotated</span><span>,</span> <span>MethodsReturn</span><span>)</span><span>)</span><span>;</span>

<span>// scan package with all standard scanners</span>
<span>Reflections</span> reflections <span>=</span> <span>new</span> <span>Reflections</span><span>(</span><span>"com.my.project"</span><span>,</span> <span>Scanners</span><span>.</span><span>values</span><span>(</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="_3-2-扫描子类"> 3.2 扫描子类</h3>
<div><pre><code><span>Set</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span> <span>extends</span> <span>Module</span><span>></span><span>></span></span> modules <span>=</span> 
    reflections<span>.</span><span>getSubTypesOf</span><span>(</span><span><span>com<span>.</span>google<span>.</span>inject<span>.</span></span>Module</span><span>.</span><span>class</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="_3-3-扫描注解"> 3.3 扫描注解</h3>
<div><pre><code><span>//TypeAnnotationsScanner </span>
<span>Set</span><span><span>&lt;</span><span>Class</span><span>&lt;</span><span>?</span><span>></span><span>></span></span> singletons <span>=</span> 
    reflections<span>.</span><span>getTypesAnnotatedWith</span><span>(</span><span><span>javax<span>.</span>inject<span>.</span></span>Singleton</span><span>.</span><span>class</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="_3-4-扫描资源"> 3.4 扫描资源</h3>
<div><pre><code><span>//ResourcesScanner</span>
<span>Set</span><span><span>&lt;</span><span>String</span><span>></span></span> properties <span>=</span> 
    reflections<span>.</span><span>getResources</span><span>(</span><span>Pattern</span><span>.</span><span>compile</span><span>(</span><span>".*\\.properties"</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="_3-5-扫描方法、构造注解"> 3.5 扫描方法、构造注解</h3>
<div><pre><code><span>//MethodAnnotationsScanner</span>
<span>Set</span><span><span>&lt;</span><span>Method</span><span>></span></span> resources <span>=</span>
    reflections<span>.</span><span>getMethodsAnnotatedWith</span><span>(</span><span><span>javax<span>.</span>ws<span>.</span>rs<span>.</span></span>Path</span><span>.</span><span>class</span><span>)</span><span>;</span>
<span>Set</span><span><span>&lt;</span><span>Constructor</span><span>></span></span> injectables <span>=</span> 
    reflections<span>.</span><span>getConstructorsAnnotatedWith</span><span>(</span><span><span>javax<span>.</span>inject<span>.</span></span>Inject</span><span>.</span><span>class</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="_3-6-扫描字段注解"> 3.6 扫描字段注解</h3>
<div><pre><code><span>Set</span><span><span>&lt;</span><span>Field</span><span>></span></span> ids <span>=</span> 
    reflections<span>.</span><span>getFieldsAnnotatedWith</span><span>(</span><span><span>javax<span>.</span>persistence<span>.</span></span>Id</span><span>.</span><span>class</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="_3-7-扫描方法参数"> 3.7 扫描方法参数</h3>
<div><pre><code><span>//MethodParameterScanner</span>
<span>Set</span><span><span>&lt;</span><span>Method</span><span>></span></span> someMethods <span>=</span>
    reflections<span>.</span><span>getMethodsMatchParams</span><span>(</span><span>long</span><span>.</span><span>class</span><span>,</span> <span>int</span><span>.</span><span>class</span><span>)</span><span>;</span>
<span>Set</span><span><span>&lt;</span><span>Method</span><span>></span></span> voidMethods <span>=</span>
    reflections<span>.</span><span>getMethodsReturn</span><span>(</span><span>void</span><span>.</span><span>class</span><span>)</span><span>;</span>
<span>Set</span><span><span>&lt;</span><span>Method</span><span>></span></span> pathParamMethods <span>=</span>
    reflections<span>.</span><span>getMethodsWithAnyParamAnnotated</span><span>(</span><span>PathParam</span><span>.</span><span>class</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="_3-8-扫描方法参数名"> 3.8 扫描方法参数名</h3>
<div><pre><code><span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> parameterNames <span>=</span> 
    reflections<span>.</span><span>getMethodParamNames</span><span>(</span><span>Method</span><span>.</span><span>class</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="_3-9-扫描方法调用情况"> 3.9 扫描方法调用情况</h3>
<div><pre><code><span>//MemberUsageScanner</span>
<span>Set</span><span><span>&lt;</span><span>Member</span><span>></span></span> usages <span>=</span> 
    reflections<span>.</span><span>getMethodUsages</span><span>(</span><span>Method</span><span>.</span><span>class</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">字符串常量池</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/pool2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/pool2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
    <updated>2022-05-08T04:06:59.000Z</updated>
    <content type="html"><![CDATA[<Djt/>
<p><strong>本篇课程不来虚的,上来就是干活,现在发车。小编通过代码案例及比喻,带你一窥究竟。</strong></p>
<h2 id="为什么会有常量池的概念"> 为什么会有常量池的概念?</h2>
<p>不知道小伙伴们是否有思考过这个问题? 没有思考也无所谓,小编在这里类比一下,大家就会清晰了。
什么是池? 我们听的最多的池,应该是数据库连接池. 为什么会有数据库连接池,其实就是为了节省资源,提高性能,防止重复创建连接,避免占用内存和网络资源。</p>
<p>常量池其实就是跟数据库连接池的目的都是一样的。那么他是如何实现的呢? 因为常量池是JVM的概念，源码我们也不好看,所以我们还以连接池来类比,请看下文。</p>
<h2 id="池化的目标就是缓存和管理"> 池化的目标就是缓存和管理</h2>
<p>稍微提一点池化的概念,其实就是对资源做一个包装,在包装层来加一些对这个资源的属性信息,比如使用次数,最后操作时间,最长生命周期一样。然后通过后台线程对资源包装层的扫描,来对真实资源的做一个管理。Google的Guava的Cache就是这么做的,我们自己也可以利用 <code>common-pool2</code> 工具包自己来做,或者说池化。</p>
<h2 id="jvm常量池就相当于一个缓存"> JVM常量池就相当于一个缓存</h2>
<p>常量就是不会改变的信息,那么既然是不会改变的信息,系统中只存在一份,就可以了。存在多份也是浪费内存资源。然而在Java中只要是new的信息都会在堆上开辟一个新的空间,为了解决这个问题,JVM中才出现了字符串常量池的概念。但是只有直接用<code>&quot;&quot;</code>修饰的字符,才会被加入到常量池中,当再次用<code>&quot;&quot;</code>创建的时候,会首先从常量池中去获取。</p>
<div><pre><code>String s1 = &quot;1&quot;;
String s2 = &quot;1&quot;;
//true
System.out.print(s1==s2); 
String s3 = new String(&quot;1&quot;);
String s4 = new String(&quot;1&quot;);
//false
System.out.print(s3==s4); 
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>我们可以把常量池理解为一个Map&lt;String,String&gt;做的缓存容器。只不过这个缓存机制是有JVM使用C语言写的。我们看不到而已。</p>
<h2 id="string-intern-的使用"> String.intern()的使用</h2>
<p><img src="https://img.springlearn.cn/blog/learn_1567773914000.png" alt="" loading="lazy"></p>
<p><code>new</code> 出来的 <code>String</code> 类型是否也能使用常量池呢? 当然可以,就是通过 <code>intern</code> 方法
这个方法的意思就是先到缓存中(也就是常量池中)查询当前对象是否存在,存在就返回常量池中地址,不存在就加入常量池。我们可以用一段伪代码来解释一波。</p>
<div><pre><code>        //双引号直接放入常量池
        String s1 = &quot;1&quot;;
        String s2 = new String(&quot;1&quot;);
        //false
        System.out.println(s1 == s2);
        //先到常量池中查询是否有”1“,存在就将常量池中对象返回,不存在就放到常量池中(此时常量池中存在s1)
        //于是就将s1的值重新复制给s3,所以s1 == s3
        String s3 = new String(&quot;1&quot;).intern();
        //true
        System.out.println(s1 == s3);
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-08T04:06:59.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Java泛型体系知识学习</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/tools/reflections/Java%E6%B3%9B%E5%9E%8B/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/tools/reflections/Java%E6%B3%9B%E5%9E%8B/"/>
    <updated>2022-05-09T16:49:39.000Z</updated>
    <content type="html"><![CDATA[<Djt/>
<p><img src="https://img.springlearn.cn/blog/learn_1652114729000.png" alt="" loading="lazy"></p>
<h2 id="一、java泛型体系"> 一、Java泛型体系</h2>
<p>Type 是 Java 语言中所有类型的公共父接口，其从 JDK5 开始引入，引入的目的主要是为了支持泛型。
Java的泛型体系还是比较复杂的, 不过没关系，本篇文章会从实战的角度来，学习泛型。</p>
<h2 id="_1-1-parameterizedtype-参数化泛型"> 1.1 ParameterizedType 参数化泛型</h2>
<p>ParameterizedType 是, <code>参数化泛型</code>只要记住凡是带泛型的是明确的类型,只要不是数组GenericArrayType那么一定是ParameterizedType。
如下:</p>
<ul>
<li>List&lt;?&gt; list 中的 list</li>
<li>Map&lt;String,String&gt; map中的map</li>
<li>Map&lt;String,String&gt; map中的map</li>
</ul>
<h3 id="_1-1-1-api-说明"> 1.1.1 API 说明</h3>
<p>ParameterizedType 一共有3个方法如下。</p>
<div><pre><code><span>public</span> <span>interface</span> <span>ParameterizedType</span> <span>extends</span> <span>Type</span> <span>{</span>
    <span>// 获取泛型信息，输一个数组。因为可能泛型有多个</span>
    <span>Type</span><span>[</span><span>]</span> <span>getActualTypeArguments</span><span>(</span><span>)</span><span>;</span>
    <span>// 原始数据类型</span>
    <span>Type</span> <span>getRawType</span><span>(</span><span>)</span><span>;</span>
    <span>// </span>
    <span>Type</span> <span>getOwnerType</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ul>
<li>getRawType 获取原始数据类型</li>
<li>getActualTypeArguments 获取泛型信息,因为泛型可以是多个,所以返回是数组</li>
</ul>
<h3 id="_1-1-2-代码示例"> 1.1.2 代码示例</h3>
<div><pre><code><span>public</span> <span>class</span> <span>Test</span> <span>{</span>
    <span>class</span> <span>Girl</span> <span>implements</span> <span>Person</span> <span>{</span><span>}</span>
    <span>class</span> <span>Boy</span> <span>implements</span> <span>Person</span> <span>{</span><span>}</span>
    <span>interface</span> <span>Person</span> <span>{</span><span>}</span>
    <span>class</span> <span>School</span><span><span>&lt;</span><span>A</span> <span>extends</span> <span>Boy</span> <span>&amp;</span> <span>Person</span><span>></span></span> <span>{</span><span>}</span>
    <span>School</span><span><span>&lt;</span><span>Boy</span><span>></span></span> boySchool<span>;</span>
    <span>School</span><span><span>&lt;</span><span>Boy</span><span>></span></span><span>[</span><span>]</span> schools<span>;</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>{</span>
        <span>// class java.lang.Class</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>ReflectionUtils</span><span>.</span><span>findField</span><span>(</span><span>Test</span><span>.</span><span>class</span><span>,</span> <span>"boy"</span><span>)</span><span>.</span><span>getGenericType</span><span>(</span><span>)</span><span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// class sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>ReflectionUtils</span><span>.</span><span>findField</span><span>(</span><span>Test</span><span>.</span><span>class</span><span>,</span> <span>"boySchool"</span><span>)</span><span>.</span><span>getGenericType</span><span>(</span><span>)</span><span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// class sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>ReflectionUtils</span><span>.</span><span>findField</span><span>(</span><span>Test</span><span>.</span><span>class</span><span>,</span> <span>"schools"</span><span>)</span><span>.</span><span>getGenericType</span><span>(</span><span>)</span><span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><ul>
<li><code>boy</code> 是具体类型,且不是泛型,所以是Class类型</li>
<li><code>School&lt;Boy&gt; boySchool</code> 是具体类型,但是有泛型<code>&lt;Boy&gt;</code>,所以是ParameterizedType
<ul>
<li><code>ParameterizedType#getActualTypeArguments</code> 下标0就是泛型<code>Boy</code></li>
</ul>
</li>
<li><code>School&lt;Boy&gt;[] schools</code> 是具体类型,有泛型<code>&lt;Boy&gt;</code>,但是是数组类型所以是GenericArrayType</li>
</ul>
<h2 id="_1-2-genericarraytype-泛型数组"> 1.2 GenericArrayType  泛型数组</h2>
<p><code>GenericArrayType</code>和<code>ParameterizedType</code>是比较类似的,唯一的区别是GenericArrayType一定是数组,如果不是数组就是ParameterizedType</p>
<h3 id="_1-2-1-api-说明"> 1.2.1 API 说明</h3>
<p>GenericArrayType 只提供了一个方法就是获取泛型的方法</p>
<div><pre><code><span>public</span> <span>interface</span> <span>GenericArrayType</span> <span>extends</span> <span>Type</span> <span>{</span>
    <span>// 获取数组泛型</span>
    <span>Type</span> <span>getGenericComponentType</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="_1-2-2-代码示例"> 1.2.2 代码示例</h3>
<div><pre><code><span>public</span> <span>class</span> <span>Test</span> <span>{</span>
    <span>class</span> <span>Girl</span> <span>implements</span> <span>Person</span> <span>{</span><span>}</span>
    <span>class</span> <span>Boy</span> <span>implements</span> <span>Person</span> <span>{</span><span>}</span>
    <span>interface</span> <span>Person</span> <span>{</span><span>}</span>
    <span>class</span> <span>School</span><span><span>&lt;</span><span>A</span> <span>extends</span> <span>Boy</span> <span>&amp;</span> <span>Person</span><span>></span></span> <span>{</span><span>}</span>
    <span>School</span><span><span>&lt;</span><span>Boy</span><span>></span></span> boySchool<span>;</span>
    <span>School</span><span><span>&lt;</span><span>Boy</span><span>></span></span><span>[</span><span>]</span> schools<span>;</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test2</span><span>(</span><span>)</span><span>{</span>
        <span>GenericArrayType</span> schoolsArrayType <span>=</span> <span>(</span><span>GenericArrayType</span><span>)</span> <span>ReflectionUtils</span><span>.</span><span>findField</span><span>(</span><span>Test</span><span>.</span><span>class</span><span>,</span> <span>"schools"</span><span>)</span><span>.</span><span>getGenericType</span><span>(</span><span>)</span><span>;</span>
        <span>Type</span> genericComponentType <span>=</span> schoolsArrayType<span>.</span><span>getGenericComponentType</span><span>(</span><span>)</span><span>;</span>
        <span>// learn.common.print.Test$School&lt;learn.common.print.Test$Boy></span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>genericComponentType<span>.</span><span>getTypeName</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// class sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>genericComponentType<span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>  
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><ul>
<li><code>School&lt;Boy&gt; boySchool</code> 是具体类型,且有泛型,但是<code>不是</code>数组所以是<code>ParameterizedType</code></li>
<li><code>School&lt;Boy&gt;[] schools</code> 是具体类型,且有泛型,但是<code>是</code>数组所以就是<code>GenericArrayType</code>
<ul>
<li><code>GenericArrayType#getGenericComponentType</code> = <code>School&lt;Boy&gt;</code> = <code>ParameterizedType</code></li>
</ul>
</li>
</ul>
<h2 id="_1-3-typevariable-泛型变量"> 1.3 TypeVariable 泛型变量</h2>
<p><code>TypeVariable</code>变量泛型是比较好判断的,只要是变量泛型。一定就是TypeVariable。</p>
<h3 id="_1-3-1-api-说明"> 1.3.1 API 说明</h3>
<div><pre><code><span>public</span> <span>interface</span> <span>TypeVariable</span><span><span>&lt;</span><span>D</span> <span>extends</span> <span>GenericDeclaration</span><span>></span></span> <span>extends</span> <span>Type</span><span>,</span> <span>AnnotatedElement</span> <span>{</span>
    <span>// 获取泛型信息</span>
    <span>Type</span><span>[</span><span>]</span> <span>getBounds</span><span>(</span><span>)</span><span>;</span>

    <span>D</span> <span>getGenericDeclaration</span><span>(</span><span>)</span><span>;</span>

    <span>String</span> <span>getName</span><span>(</span><span>)</span><span>;</span>

    <span>AnnotatedType</span><span>[</span><span>]</span> <span>getAnnotatedBounds</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="_1-3-2-代码示例"> 1.3.2 代码示例</h3>
<div><pre><code>    <span>class</span> <span>TypeVariableObj</span><span><span>&lt;</span><span>A</span> <span>extends</span> <span>Number</span><span>></span></span> <span>{</span>
        <span>A</span> a<span>;</span>
        <span>TypeVariableObj</span><span><span>&lt;</span><span>A</span><span>></span></span> as<span>;</span>
    <span>}</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test3</span><span>(</span><span>)</span> <span>{</span>
        <span>Type</span> a <span>=</span> <span>ReflectionUtils</span><span>.</span><span>findField</span><span>(</span><span>TypeVariableObj</span><span>.</span><span>class</span><span>,</span> <span>"a"</span><span>)</span><span>.</span><span>getGenericType</span><span>(</span><span>)</span><span>;</span>
        <span>// class sun.reflect.generics.reflectiveObjects.TypeVariableImpl</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>a<span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span><span>;</span>

        <span>Type</span> as <span>=</span> <span>ReflectionUtils</span><span>.</span><span>findField</span><span>(</span><span>TypeVariableObj</span><span>.</span><span>class</span><span>,</span> <span>"as"</span><span>)</span><span>.</span><span>getGenericType</span><span>(</span><span>)</span><span>;</span>
        <span>// class sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>as<span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>Type</span><span>[</span><span>]</span> actualTypeArguments <span>=</span> <span>(</span><span>(</span><span>ParameterizedType</span><span>)</span> as<span>)</span><span>.</span><span>getActualTypeArguments</span><span>(</span><span>)</span><span>;</span>
        <span>// A 因为只有1个泛型,所以直接去下标0</span>
        <span>TypeVariable</span> actualTypeArgument <span>=</span> <span>(</span><span>TypeVariable</span><span>)</span> actualTypeArguments<span>[</span><span>0</span><span>]</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>actualTypeArgument<span>.</span><span>getTypeName</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><ul>
<li><code>A a = TypeVariable</code></li>
<li><code>TypeVariableObj&lt;A&gt; as = ParameterizedType</code>
<ul>
<li><code>ParameterizedType#getActualTypeArguments()[0] = &lt;A&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="_1-4-wildcardtype-泛型表达式"> 1.4 WildcardType 泛型表达式</h2>
<p><code>WildcardType</code>也比较好判断只要是通配符,可以简单理解,直接带有 <code>?</code> 的泛型限定那么就是 <code>WildcardType</code></p>
<h3 id="_1-4-1-api-说明"> 1.4.1 API 说明</h3>
<p>WildcardType通配符, 如 <code>?</code>, <code>? extends Number</code>, <code>? super Integer</code></p>
<div><pre><code><span>public</span> <span>interface</span> <span>WildcardType</span> <span>extends</span> <span>Type</span> <span>{</span>
    <span>// 泛型上限</span>
    <span>Type</span><span>[</span><span>]</span> <span>getUpperBounds</span><span>(</span><span>)</span><span>;</span>
    <span>// 泛型下限</span>
    <span>Type</span><span>[</span><span>]</span> <span>getLowerBounds</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>
<li><code>Type[] getUpperBounds();</code> //获得泛型表达式上界（上限） 获取泛型变量的上边界（extends）</li>
<li><code>Type[] getLowerBounds();</code> //获得泛型表达式下界（下限） 获取泛型变量的下边界（super）</li>
</ul>
<h3 id="_1-4-2-代码示例"> 1.4.2 代码示例</h3>
<div><pre><code><span>public</span> <span>class</span> <span>WildcardTypeTest</span> <span>{</span>
    <span>Map</span><span><span>&lt;</span><span>?</span> <span>extends</span> <span>String</span><span>,</span> <span>?</span> <span>super</span> <span>Number</span><span>></span></span> map<span>;</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>wildcardTypeTest</span><span>(</span><span>)</span> <span>{</span>
        <span>Field</span> map <span>=</span> <span>ReflectionUtils</span><span>.</span><span>findField</span><span>(</span><span>WildcardTypeTest</span><span>.</span><span>class</span><span>,</span> <span>"map"</span><span>)</span><span>;</span>
        <span>Type</span><span>[</span><span>]</span> actualTypeArguments <span>=</span> <span>(</span><span>(</span><span>ParameterizedType</span><span>)</span> map<span>.</span><span>getGenericType</span><span>(</span><span>)</span><span>)</span><span>.</span><span>getActualTypeArguments</span><span>(</span><span>)</span><span>;</span>
        <span>// ? extends java.lang.String</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>(</span><span>(</span><span>WildcardType</span><span>)</span> actualTypeArguments<span>[</span><span>0</span><span>]</span><span>)</span><span>.</span><span>getTypeName</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// class java.lang.String</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>(</span><span>(</span><span>WildcardType</span><span>)</span> actualTypeArguments<span>[</span><span>0</span><span>]</span><span>)</span><span>.</span><span>getUpperBounds</span><span>(</span><span>)</span><span>[</span><span>0</span><span>]</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><ul>
<li><code>Map&lt;? extends String, ? super Number&gt; map</code> 中 map是 <code>ParameterizedType</code>
<ul>
<li><code>ParameterizedType#getActualTypeArguments[0]</code> = <code>WildcardType#getUpperBounds[0]</code> = <code>String</code></li>
<li><code>ParameterizedType#getActualTypeArguments[1]</code> = <code>WildcardType#getLowerBounds[0]</code> = <code>Number</code></li>
</ul>
</li>
</ul>
<h2 id="二、泛型获取"> 二、泛型获取</h2>
<p>通过上面的学习,我们可以使用原始API来获取各种泛型的信息,而Spring中有一个比较好用的工具。屏蔽了底层的
具体实现。比较方便。</p>
<h2 id="_2-1-获取接口泛型"> 2.1 获取接口泛型</h2>
<div><pre><code>    <span>class</span> <span>A</span> <span>{</span><span>}</span>
    <span>class</span> <span>B</span> <span>{</span><span>}</span>
    <span>interface</span> <span>School</span><span><span>&lt;</span><span>T</span><span>,</span> <span>K</span><span>></span></span> <span>{</span><span>}</span>
    <span>interface</span> <span>X</span> <span>extends</span> <span>School</span><span><span>&lt;</span><span>A</span><span>,</span> <span>B</span><span>></span></span> <span>{</span><span>}</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>{</span>
        <span>// 获取实现的接口是泛型的信息</span>
        <span>ResolvableType</span> resolvableType <span>=</span> <span>ResolvableType</span><span>.</span><span>forClass</span><span>(</span><span>X</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> resolve1 <span>=</span> resolvableType<span>.</span><span>getInterfaces</span><span>(</span><span>)</span><span>[</span><span>0</span><span>]</span><span>.</span><span>getGeneric</span><span>(</span><span>0</span><span>)</span><span>.</span><span>resolve</span><span>(</span><span>)</span><span>;</span>
        <span>// class learn.common.print.ColorConsoleTest$A</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>resolve1<span>)</span><span>;</span>
        <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> resolve2 <span>=</span> resolvableType<span>.</span><span>getInterfaces</span><span>(</span><span>)</span><span>[</span><span>0</span><span>]</span><span>.</span><span>getGeneric</span><span>(</span><span>1</span><span>)</span><span>.</span><span>resolve</span><span>(</span><span>)</span><span>;</span>
        <span>// class learn.common.print.ColorConsoleTest$B</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>resolve2<span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="_2-2-获取父类泛型"> 2.2 获取父类泛型</h2>
<div><pre><code>    <span>class</span> <span>A</span> <span>{</span><span>}</span>
    <span>class</span> <span>B</span> <span>{</span><span>}</span>
    <span>class</span> <span>School</span><span><span>&lt;</span><span>T</span><span>,</span> <span>K</span><span>></span></span> <span>{</span><span>}</span>
    <span>class</span> <span>X</span> <span>extends</span> <span>School</span><span><span>&lt;</span><span>A</span><span>,</span> <span>B</span><span>></span></span> <span>{</span><span>}</span>
    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>{</span>
        <span>// 获取实现的接口是泛型的信息</span>
        <span>ResolvableType</span> resolvableType <span>=</span> <span>ResolvableType</span><span>.</span><span>forClass</span><span>(</span><span>X</span><span>.</span><span>class</span><span>)</span><span>;</span>
        <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> resolve1 <span>=</span> resolvableType<span>.</span><span>getSuperType</span><span>(</span><span>)</span><span>.</span><span>getGeneric</span><span>(</span><span>0</span><span>)</span><span>.</span><span>resolve</span><span>(</span><span>)</span><span>;</span>
        <span>// class learn.common.print.ColorConsoleTest$A</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>resolve1<span>)</span><span>;</span>
        <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> resolve2 <span>=</span> resolvableType<span>.</span><span>getSuperType</span><span>(</span><span>)</span><span>.</span><span>getGeneric</span><span>(</span><span>1</span><span>)</span><span>.</span><span>resolve</span><span>(</span><span>)</span><span>;</span>
        <span>// class learn.common.print.ColorConsoleTest$B</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>resolve2<span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="_2-3-获取字段泛型"> 2.3 获取字段泛型</h2>
<div><pre><code>    <span>class</span> <span>A</span> <span>{</span><span>}</span>
    <span>class</span> <span>B</span> <span>{</span><span>}</span>
    <span>class</span> <span>School</span><span><span>&lt;</span><span>T</span><span>,</span> <span>K</span><span>></span></span> <span>{</span><span>}</span>
    <span>class</span> <span>X</span> <span>{</span>
        <span>private</span> <span>School</span><span><span>&lt;</span><span>A</span><span>,</span> <span>B</span><span>></span></span> school<span>;</span>
    <span>}</span>

    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>{</span>
        <span>// Spring的提供工具类,用于字段的泛型信息,Person&lt;String></span>
        <span>ResolvableType</span> resolvableType <span>=</span> <span>ResolvableType</span><span>.</span><span>forField</span><span>(</span><span>Objects</span><span>.</span><span>requireNonNull</span><span>(</span><span>ReflectionUtils</span><span>.</span><span>findField</span><span>(</span><span>X</span><span>.</span><span>class</span><span>,</span> <span>"school"</span><span>)</span><span>)</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>resolvableType<span>)</span><span>;</span>
        <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> resolve1 <span>=</span> resolvableType<span>.</span><span>getGeneric</span><span>(</span><span>0</span><span>)</span><span>.</span><span>resolve</span><span>(</span><span>)</span><span>;</span>
        <span>// class learn.common.print.ColorConsoleTest$A</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>resolve1<span>)</span><span>;</span>
        <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> resolve2 <span>=</span> resolvableType<span>.</span><span>getGeneric</span><span>(</span><span>1</span><span>)</span><span>.</span><span>resolve</span><span>(</span><span>)</span><span>;</span>
        <span>// class learn.common.print.ColorConsoleTest$B</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>resolve2<span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="_2-4-获取方法泛型"> 2.4 获取方法泛型</h2>
<div><pre><code>    <span>class</span> <span>A</span> <span>{</span><span>}</span>
    <span>class</span> <span>B</span> <span>{</span><span>}</span>
    <span>class</span> <span>School</span><span><span>&lt;</span><span>T</span><span>,</span> <span>K</span><span>></span></span> <span>{</span><span>}</span>
    <span>class</span> <span>X</span> <span>{</span>
        <span>public</span> <span>School</span><span><span>&lt;</span><span>A</span><span>,</span> <span>B</span><span>></span></span> <span>getSchool</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> <span>null</span><span>;</span>
        <span>}</span>
    <span>}</span>

    <span>@Test</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>{</span>
        <span>// Spring的提供工具类,用于字段的泛型信息,Person&lt;String></span>
        <span>ResolvableType</span> resolvableType <span>=</span> <span>ResolvableType</span><span>.</span><span>forMethodReturnType</span><span>(</span><span>Objects</span><span>.</span><span>requireNonNull</span><span>(</span><span>ReflectionUtils</span><span>.</span><span>findMethod</span><span>(</span><span>X</span><span>.</span><span>class</span><span>,</span> <span>"getSchool"</span><span>)</span><span>)</span><span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>resolvableType<span>)</span><span>;</span>
        <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> resolve1 <span>=</span> resolvableType<span>.</span><span>getGeneric</span><span>(</span><span>0</span><span>)</span><span>.</span><span>resolve</span><span>(</span><span>)</span><span>;</span>
        <span>// class learn.common.print.ColorConsoleTest$A</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>resolve1<span>)</span><span>;</span>
        <span>Class</span><span><span>&lt;</span><span>?</span><span>></span></span> resolve2 <span>=</span> resolvableType<span>.</span><span>getGeneric</span><span>(</span><span>1</span><span>)</span><span>.</span><span>resolve</span><span>(</span><span>)</span><span>;</span>
        <span>// class learn.common.print.ColorConsoleTest$B</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>resolve2<span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-09T16:49:39.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">重剑无锋大巧不工</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/%E7%BD%91%E7%AB%99%E5%9C%B0%E5%9B%BE/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/%E7%BD%91%E7%AB%99%E5%9C%B0%E5%9B%BE/"/>
    <updated>2022-05-22T07:02:41.000Z</updated>
    <content type="html"><![CDATA[<Djt/>
<p><img src="https://img.springlearn.cn/blog/learn_1610273706000.png" alt="" loading="lazy"></p>
<p><img src="https://img.springlearn.cn/blog/learn_1610273619000.png" alt="" loading="lazy"></p>
<DownloadBtn url='https://nodejs.org/dist/v15.9.0/node-v15.9.0.pkg' />
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-03-24T14:34:44.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Home</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/play/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/play/"/>
    <updated>2022-01-04T14:58:20.000Z</updated>
    <content type="html"><![CDATA[<h3 id="badge"> Badge</h3>
<ul>
<li>
<i>Not supported content</i>
</li>
<li>
<i>Not supported content</i>
</li>
</ul>
<CodeGroup>
<CodeGroupItem title="yarn">
<div><pre><code><span>yarn</span> <span>add</span> -D vuepress-theme-hope
</code></pre>
<div><span>1</span><br></div></div></CodeGroupItem>
<CodeGroupItem title="npm" active>
<div><pre><code><span>npm</span> i -D vuepress-theme-hope
</code></pre>
<div><span>1</span><br></div></div></CodeGroupItem>
</CodeGroup>
<div><div><br><div>&nbsp;</div><br><br><br><br><br></div><pre><code><span>public</span> <span>class</span> <span>Person</span><span>{</span>

    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span>args<span>)</span><span>{</span>

    <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div>]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">切莫走火入魔</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/learn/%E8%AF%AF%E5%85%A5%E6%AD%A7%E9%80%94/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/learn/%E8%AF%AF%E5%85%A5%E6%AD%A7%E9%80%94/"/>
    <updated>2022-05-22T07:02:41.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt="" loading="lazy"></p>
<h2 id="为什么要坚持写博客"> 为什么要坚持写博客?</h2>
<ol>
<li><code>避免眼高手低</code>，看起来全会，做起来全不对的情况。</li>
<li>编程重要的是思想，<code>思路决定出路</code>，在思想的指引下。写的代码都只是工具，工具类的API没有必要都要记住。
只要做到看到认识,再次遇到知道如何处理即可。<code>笔记的好处是下次再次遇到，只需要看看笔记就知道如何使用了</code>。</li>
<li><code>记录内容</code>、<code>总结知识</code>、<code>分享成长</code>。</li>
</ol>
<h2 id="常见的技术误区"> 常见的技术误区</h2>
<ol>
<li>技术是永远学不完的, 避免陷入到<code>技术旋涡中</code>，为了学技术而学技术。</li>
<li>再厉害的技术，一定是了解决某些场景的问题而存在的。<code>重点是学习思想，参考其实现</code>。</li>
<li>一通百通，一下看不懂的知识。要进行<code>拆解</code>，拆解成知识点。<code>逐个击破</code>，最终<code>为我所用</code>。</li>
<li>it上高大上的名词都是唬人的，不要被名字给吓退了。</li>
</ol>
<h2 id="问题回答"> 问题回答</h2>
<h4 id="📢-1-这个网站内容都是你写的吗"> 📢 1. 这个网站内容都是你写的吗?</h4>
<p><code>绝大多数都是自己的学习笔记</code>。另在纯技术文章上，其实纯原创都是比较少的。为什么这么说呢？ 因为IT技术类的东西
核心在于对源代码的学习, 只有开发源代码的人或者第一个吃螃蟹的人,可以说是纯原创。
而后来者基本都是在学习了源代码的同时也吸收了大部分网络前辈们的文章观点，进行辨别的学习和思考后，
总结的新的个人观点。这部分文章虽然业务原创，但是并不是那么的纯。<code>但是尽管不是那么的纯，也可能比纯的更加具有学习价值，因为他在前辈的总结的观点下，又增加了新的观点。</code></p>
<p>本网站凡是收录的优秀文章,都会附带原文链接。<code>编码不易,必须尊重原创作者</code>。</p>
<h4 id="📢-2-这个网站都是技术类文章吗"> 📢 2. 这个网站都是技术类文章吗?</h4>
<p><code>不是</code>，凡是优秀的文章，具有学习意义的。都可能存在。即是对自己知识面的补充，增加见识。也希望分享出来，让更多人看到这些优秀的文章。</p>
<h4 id="📢-3-为什么有些链接都是404呢"> 📢 3. 为什么有些链接都是404呢?</h4>
<p>这个网站是小编利用业务时间进行自我学习，修炼和总结的乐园，因为时间没有那么充足，可能有些只写的标题。并没有补充文章内容。
而这些没有补充内容的文章，都会<code>暂时</code>以404这种明确的<code>http</code> 暗号告诉你这篇文章，<code>已经被安排到学习日程上了</code>。接下来就会被安排上了。</p>
<h4 id="📢-4-为什么有些文章是加密的呢"> 📢 4. 为什么有些文章是加密的呢?</h4>
<p>如果你有这个问题, 难道客官<code>你是想白嫖吗</code>? 加密方案是基于浏览器缓存实现的，所以只用关注一次，即所有文章都可以免费白嫖了。
验证码是你我唯一的暗号，凭借这个暗号还有更多用处哦。</p>
<h4 id="📢-5-个人博客是如何实现的"> 📢 5. 个人博客是如何实现的?</h4>
<p>首先这是基于 <code>vuepress</code> 实现的，服务部署也是免费的，如果你也想拥有可以。</p>
<ul>
<li><code>静态博客</code> <a href="https://java.springlearn.cn/learn/blog/vuepress/" target="_blank" rel="noopener noreferrer">Vuepress</a></li>
<li><code>免费部署</code> <a href="http://localhost:8080/learn/blog/vercel/" target="_blank" rel="noopener noreferrer">Vercel</a></li>
</ul>
<h2 id="联系方式"> 联系方式</h2>
<p>微信: <code>lxchinesszz</code></p>
<h2 id="意见反馈"> 意见反馈</h2>
<p>若本号内容有做得不到位的地方（比如：涉及版权或其他问题），请及时联系我进行整改。</p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2022-05-22T07:02:41.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
  <entry>
    <title type="html">Home</title>
    <id>https://vuepress-theme-hope-demo.mrhope.site/</id>
    <link href="https://vuepress-theme-hope-demo.mrhope.site/"/>
    <updated>2022-05-22T16:24:55.000Z</updated>
    <content type="html"><![CDATA[<Djt/>
<h2 id=""> <i>Not supported content</i> <i>Not supported content</i>  <i>Not supported content</i> <i>Not supported content</i>  <i>Not supported content</i></h2>
<p><img src="https://img.springlearn.cn/blog/learn_1648909278000.png" alt="" loading="lazy"></p>
]]></content>
    <author>
      <name>西魏陶渊明</name>
    </author>
    <contributor>
      <name>西魏陶渊明</name>
    </contributor>
    <published>2021-12-21T05:46:37.000Z</published>
    <rights>Copyright by 西魏陶渊明</rights>
  </entry>
</feed>