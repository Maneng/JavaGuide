(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{757:function(n,e,s){"use strict";s.r(e);var t=s(1),a=Object(t.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),s("p",[n._v("在我们使用 "),s("code",[n._v("SpringBoot")]),n._v(" 开发中,我们定义一接口是下面这样的")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@RestController\npublic class UserController{\n    \n    @GetMapping( name = "/getUserName")\n    public String getUserName(){\n        return "Hello World";\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[n._v("这时候我们思考一个问题,我们在浏览器上只输入了一个URL地址,怎么就能访问到这个接口的呢？于是乎就引出了\n今天我们要讨论的话题。Spring中的Web接口资源是如何保存起来的?")]),n._v(" "),s("h2",{attrs:{id:"一、spring中的web接口资源是如何保存起来的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、spring中的web接口资源是如何保存起来的"}},[n._v("#")]),n._v(" 一、Spring中的Web接口资源是如何保存起来的?")]),n._v(" "),s("p",[n._v("在我们学习之前我们可以先自己来进行思考一下。处理逻辑是什么样的？")]),n._v(" "),s("ul",[s("li",[n._v("Spring容器解析 "),s("code",[n._v("@RequestMapping")]),n._v(" 注解。当然这个注解又派生了其他的注解比如。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@RequestMapping(method = RequestMethod.POST)\npublic @interface PostMapping {}\n\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@RequestMapping(method = RequestMethod.PUT)\npublic @interface PutMapping {}\n\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@RequestMapping(method = RequestMethod.GET)\npublic @interface GetMapping {}\n\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@RequestMapping(method = RequestMethod.DELETE)\npublic @interface DeleteMapping {}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br")])]),s("ul",[s("li",[n._v("我们猜测Spring源码中一定会对"),s("code",[n._v("@RestController")]),n._v(" 和 "),s("code",[n._v("@Controller")]),n._v("标记的类,里面的每个\nMethod进行处理,判断是否包含了上面的注解。注解那么多Spring肯定不会这样一个一个去处理。我们可以看到\n上面的注解都使用了"),s("code",[n._v("@AliasFor")]),n._v("注解。其中奥妙就在这里。看下面例子代码。")]),n._v(" "),s("li",[n._v("我们猜测Spring肯定对这些Method判断是否有"),s("code",[n._v("@RequestMapping")]),n._v("有注解。")])]),n._v(" "),s("h3",{attrs:{id:"_1-aliasfor使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-aliasfor使用"}},[n._v("#")]),n._v(" 1. @AliasFor使用")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@RestController\npublic class PostController {\n\n    @ApiOperation(value = "查询Bbs所有文章")\n    @PostMapping(value = "/query/bbs/posts", produces = MediaType.APPLICATION_JSON_VALUE)\n    public Result<PostAllResponse> queryBbsPostAll(@RequestBody PostAllSelectRequest postAllSelectRequest) {\n        return postBiz.queryBbsPostAll(postAllSelectRequest);\n    }\n\n    public static void main(String[] args) {\n        Method queryBbsPostAll = ClassUtils.getMethod(PostController.class, "queryBbsPostAll",PostAllSelectRequest.class);\n        PostMapping annotation = AnnotationUtils.findAnnotation(queryBbsPostAll, PostMapping.class);\n        ///query/bbs/posts\n        System.out.println(StringUtils.arrayToCommaDelimitedString(annotation.value()));\n        //application/json\n        System.out.println(StringUtils.arrayToCommaDelimitedString(annotation.produces()));\n        //是否包含RequestMapping: true\n        System.out.println("是否包含RequestMapping: "+AnnotatedElementUtils.hasAnnotation(queryBbsPostAll,RequestMapping.class));\n\n        RequestMapping mergedAnnotation = AnnotatedElementUtils.getMergedAnnotation(queryBbsPostAll, RequestMapping.class);\n        ///query/bbs/posts\n        System.out.println(StringUtils.arrayToCommaDelimitedString(mergedAnnotation.value()));\n    }\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("p",[n._v("可以看到只要使用下面代码就能把被"),s("code",[n._v("@PostMapping")]),n._v("等等的注解都涵盖了。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('System.out.println("是否包含RequestMapping: "+AnnotatedElementUtils.hasAnnotation(queryBbsPostAll,RequestMapping.class));\nRequestMapping mergedAnnotation = AnnotatedElementUtils.getMergedAnnotation(queryBbsPostAll, RequestMapping.class);\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("h3",{attrs:{id:"_2-解析请求method"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-解析请求method"}},[n._v("#")]),n._v(" 2. 解析请求Method")]),n._v(" "),s("p",[s("code",[n._v("AbstractHandlerMethodMapping")]),n._v(" 实现 "),s("code",[n._v("InitializingBean")]),n._v("。在当前 "),s("code",[n._v("Bean")]),n._v("初始化时候会执行")]),n._v(" "),s("p",[s("code",[n._v("afterPropertiesSet -> initHandlerMethods")])]),n._v(" "),s("p",[n._v("从这里开始解析Web资源类的信息。请小伙伴们看下面的截图,截图中源码已经把类名也截上了,方便小伙伴们自己在根据截图看一遍源码。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements InitializingBean {\n\n    @Override\n    public void afterPropertiesSet() {\n        initHandlerMethods();\n    }\n    \n    /**\n\t * Scan beans in the ApplicationContext, detect and register handler methods.\n\t * @see #getCandidateBeanNames()\n\t * @see #processCandidateBean\n\t * @see #handlerMethodsInitialized\n\t */\n    protected void initHandlerMethods() {\n        for (String beanName : getCandidateBeanNames()) {\n            if (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) {\n                processCandidateBean(beanName);\n            }\n        }\n        handlerMethodsInitialized(getHandlerMethods());\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br")])]),s("p",[s("strong",[n._v("RequestMappingHandlerMapping解析Method上的RequestMapping信息")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1596563456000.png",alt:"",loading:"lazy"}})]),n._v(" "),s("p",[n._v("isHandler 方法判断是否是web资源类。 当一个类被标记了 "),s("code",[n._v("@Controller 或者@RequestMapping")]),n._v("。 注意 "),s("code",[n._v("@RestController")]),n._v(" 是"),s("code",[n._v("@Controller")]),n._v("的派生类。所以这里只用判断 "),s("code",[n._v("@Controller 或者@RequestMapping")]),n._v("就行了。")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1596563605000.png",alt:"",loading:"lazy"}})]),n._v(" "),s("p",[n._v("detectHandlerMethods方法就是真正开始解析Method的逻辑。通过解析Method上的 "),s("code",[n._v("@RequestMapping")]),n._v("或者其他派生的注解。生成请求信息。\n注意这个请求信息里面也是有很多逻辑的不过不是本篇讨论的重点,就不说了。稍微提一下。根据规则来匹配url逻辑就在这里面。")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1596563872000.png",alt:"",loading:"lazy"}})]),n._v(" "),s("p",[n._v("这里我们能看到源码里拿到了Method并拿到了执行这个Method的实例Bean。在这里封装成了HandlerMethod并注册到了MappingRegistry中。\n"),s("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1596564039000.png",alt:"",loading:"lazy"}})]),n._v(" "),s("p",[n._v("在注册的过程中把RequestMapping中的路径信息同事也放到一个urlLookup中。key是url,value是Mapping信息。\n"),s("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1596564246000.png",alt:"",loading:"lazy"}})]),n._v(" "),s("p",[n._v("到这里其实我们就把本篇的议题就说明清楚了。下面我们在看下SpringWeb是如何将http请求信息路由到具体的HandlerMethod的吧。")]),n._v(" "),s("h3",{attrs:{id:"_3-最后串一下流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-最后串一下流程"}},[n._v("#")]),n._v(" 3. 最后串一下流程")]),n._v(" "),s("p",[n._v("看了前面的截图,我们知道Spring是如何把这些Web资源信息给保存起来的了。然后就看是"),s("code",[n._v("DispatcherServlet")]),n._v("的逻辑了。")]),n._v(" "),s("p",[n._v("首先"),s("code",[n._v("DispatcherServlet")]),n._v(" 是一个Servlet。Servlet相信大家都都知道就不重点说原理。 我们直接看\n"),s("code",[n._v("doService")]),n._v(" -> "),s("code",[n._v("doDispatch")]),n._v(" 方法")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1596564523000.png",alt:"",loading:"lazy"}})]),n._v(" "),s("p",[n._v("根据请求路径,找到从Mapping信息,然后根据Mapping信息匹配到具体的HandlerMethod。 ok本篇内容就到这里。谢谢大家。\n"),s("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1596565589000.png",alt:"",loading:"lazy"}}),n._v(" "),s("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1596564759000.png",alt:"",loading:"lazy"}})])])}),[],!1,null,null,null);e.default=a.exports}}]);