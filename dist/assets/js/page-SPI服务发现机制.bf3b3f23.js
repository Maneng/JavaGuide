(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{653:function(s,a,n){"use strict";n.r(a);var e=n(1),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[n("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1590160192000.png",alt:"",loading:"lazy"}})]),s._v(" "),n("p",[n("strong",[s._v("作者")]),s._v(": 西魏陶渊明\n"),n("strong",[s._v("博客")]),s._v(": "),n("a",{attrs:{href:"https://blog.springlearn.cn/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.springlearn.cn/"),n("OutboundLink")],1)]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("西魏陶渊明")]),s._v(" "),n("p",[s._v("莫笑少年江湖梦，谁不少年梦江湖")])]),s._v(" "),n("h2",{attrs:{id:"一、什么是spi"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是spi"}},[s._v("#")]),s._v(" 一、什么是SPI")]),s._v(" "),n("p",[s._v("SPI ，全称为 Service Provider Interface，是一种服务发现机制。JDK中的SPI是通过在ClassPath路径下的META-INF/services文件夹查找扩展文件,自动加载文件里所定义的类。")]),s._v(" "),n("p",[s._v("在小编的理解来,觉得它更是一种思想。即找到服务的接口, 美其名曰: 服务发现机制思想。很多开源框架都有借用这种思想，比如dubbo、jdbc。")]),s._v(" "),n("h2",{attrs:{id:"二、spi在jdk中如何使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、spi在jdk中如何使用"}},[s._v("#")]),s._v(" 二、SPI在JDK中如何使用")]),s._v(" "),n("p",[s._v("SPI在JDK中,我们可以使用 "),n("code",[s._v("ServiceLoader")]),s._v(" 类进行使用。\n"),n("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1590225886000.png",alt:"",loading:"lazy"}})]),s._v(" "),n("h3",{attrs:{id:"_1-前提准备"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-前提准备"}},[s._v("#")]),s._v(" 1. 前提准备")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public interface SpiService {\n    String say();\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("两个实现类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class ASpiServiceImpl implements SpiService {\n    static {\n        System.out.println("static init a");\n    }\n\n    {\n        System.out.println("init a");\n    }\n\n    @Override\n    public String say() {\n        return "A";\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class BSpiServiceImpl implements SpiService {\n    static {\n        System.out.println("static init b");\n    }\n\n    {\n        System.out.println("init b");\n    }\n    @Override\n    public String say() {\n        return "B";\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"_2-进行配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-进行配置"}},[s._v("#")]),s._v(" 2. 进行配置")]),s._v(" "),n("p",[s._v("在resources中创建META-INF/services目录")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1590225980000.png",alt:"",loading:"lazy"}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("│  └── resources\n│      └── META-INF\n│          └── services\n│              └── com.github.easylog.spi.SpiService\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("com.github.easylog.spi.SpiService文件内容")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("com.github.easylog.spi.impl.ASpiServiceImpl\ncom.github.easylog.spi.impl.BSpiServiceImpl\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_3-使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用"}},[s._v("#")]),s._v(" 3. 使用")]),s._v(" "),n("p",[s._v("通过ServiceLoader类我们可以加载到所有配置的实现类,并对实现类进行处理。需要注意一点的是，看4使用注意。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1590226089000.png",alt:"",loading:"lazy"}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public class SpiTester {\n    public static void main(String[] args) {\n        ServiceLoader<SpiService> spiServices = ServiceLoader.load(SpiService.class);\n        Iterator<SpiService> iterator = spiServices.iterator();\n        while (iterator.hasNext()) {\n            SpiService next = iterator.next();\n            System.out.println(next.say());\n        }\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"_4-使用注意"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用注意"}},[s._v("#")]),s._v(" 4. 使用注意")]),s._v(" "),n("p",[s._v("可以看下小编前面声明的两个实现类,都定义了静态代码块和非静态代码块。正常情况当这个字节码被加载,就会执行静态代码块里面的内容，但是实际运行时候却没有执行, 其实是有原因的。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1590223793000.png",alt:"",loading:"lazy"}})]),s._v(" "),n("p",[s._v("可以看到第二个参数是false。即加载时候不进行初始化。")]),s._v(" "),n("h2",{attrs:{id:"三、dubbo中服务发现思想"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、dubbo中服务发现思想"}},[s._v("#")]),s._v(" 三、Dubbo中服务发现思想")]),s._v(" "),n("p",[s._v("服务发现这种思想的特点是: 代码不是硬编码的方式,而是可配置的。只要将要支持的实现类放到指定配置文件下面,就会自动被加载起来了。然后代码中只关心使用即可。我们可以利用这种思想来实现, 框架的扩展,比如前面说了。Dubbo会利用SPI的思想进行，加载用户自定义的过滤器。")]),s._v(" "),n("p",[s._v("这种思想特别适合做服务扩展。现在大多数开源框架中都会使用到这种思想。")]),s._v(" "),n("h3",{attrs:{id:"_1-定义过滤器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义过滤器"}},[s._v("#")]),s._v(" 1. 定义过滤器")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1590226192000.png",alt:"",loading:"lazy"}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('@Activate(group = { Constants.PROVIDER })\npublic class ProviderHelloFilter implements Filter {\n  \n    @Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        System.out.pringln("hello ok!");\n        return invoker.invoke(invocation);\n    }\n\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"_2-添加配置文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-添加配置文件"}},[s._v("#")]),s._v(" 2. 添加配置文件")]),s._v(" "),n("p",[n("code",[s._v("META-INF/dubbo/Interal/com.alibaba.dubbo.rpc.Filter")])]),s._v(" "),n("p",[s._v("默认支持的过滤器")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1590224576000.png",alt:"",loading:"lazy"}})]),s._v(" "),n("p",[s._v("利用SPI原理,我们自定义一个过滤器")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1590224824000.png",alt:"",loading:"lazy"}})]),s._v(" "),n("h3",{attrs:{id:"_3-使用-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用-2"}},[s._v("#")]),s._v(" 3. 使用")]),s._v(" "),n("p",[s._v('其实API跟JDK中使用ServiceLoader的方式,非常类同。唯一不同的是Dubbo中是使用ExtensionLoader。因为dubbo中做了一些特殊的增强处理。比如在配置文件中支持自定义一个别名key。如上图hello就是key。通过getExtension("hello")就能获取指定的实现类。')]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1590226285000.png",alt:"",loading:"lazy"}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class SpiTester {\n    public static void main(String[] args) throws Exception{\n        ExtensionLoader<Filter> filterExtensionLoader = ExtensionLoader.getExtensionLoader(Filter.class);\n        Set<String> supportedExtensions = filterExtensionLoader.getSupportedExtensions();\n        System.out.println(supportedExtensions);\n        //[accesslog, activelimit, cache...]\n        Filter hello = filterExtensionLoader.getExtension("hello");\n        //com.github.easylog.spi.ProviderHelloFilter@299a06ac\n        System.out.println(hello);\n    }\n    \n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("**那么这种思想你学会了吗? **")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://i04piccdn.sogoucdn.com/96a6f7554ee28b9c",alt:"",loading:"lazy"}})]),s._v(" "),n("p",[s._v("最后求关注,求订阅,谢谢你的阅读!")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1589360371000.png",alt:"",loading:"lazy"}})])])}),[],!1,null,null,null);a.default=t.exports}}]);