(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{707:function(t,a,e){"use strict";e.r(a);var s=e(1),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"一、jvm内存介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、jvm内存介绍"}},[t._v("#")]),t._v(" 一、JVM内存介绍")]),t._v(" "),e("p",[t._v("我们在学习JVM的内存管理的时候,我们的思维要跳出Java的局限。我们要这么理解。我们写的Java代码，是运行在JVM上的。\n如果让你来实现JVM那么。你会怎么处理呢?")]),t._v(" "),e("ul",[e("li",[t._v("公共部分(堆heap)\n"),e("ul",[e("li",[e("code",[t._v("Class字节码")]),t._v("是公共的,是共享的,所有线程都要认识字节码。")]),t._v(" "),e("li",[e("code",[t._v("new的对象")]),t._v("是公共的,也是共享的,所有线程要都能认识这些实例对象,能读取到实例的数据。")])])]),t._v(" "),e("li",[t._v("私有部分 (栈stock)\n"),e("ul",[e("li",[t._v("Java中每个线程的执行中的代码，及代码中的局部变量等信息是私有的。每个线程之间都要维护一份。")]),t._v(" "),e("li",[t._v("JVM虚拟栈和本地方法栈。")]),t._v(" "),e("li",[t._v("代码是怎么执行的,当然是一行一行执行。那么这一行一行的代码是放在哪里的呢? 是放在栈里面的。Java代码是在JVM来执行的。\n所以这个栈，我们称为"),e("code",[t._v("JVM虚拟栈")]),t._v("。")]),t._v(" "),e("li",[t._v("JVM中有些方法是调用其他语言实现的, 会使用"),e("code",[t._v("本地方法栈")]),t._v("。")]),t._v(" "),e("li",[t._v("那么谁来读取栈里面的数据,来出栈执行呢? 这叫做"),e("code",[t._v("PC寄存区")]),t._v("。")])])])]),t._v(" "),e("h2",{attrs:{id:"_1-1-堆空间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-堆空间"}},[t._v("#")]),t._v(" 1.1 堆空间")]),t._v(" "),e("p",[e("RouterLink",{attrs:{to:"/learn/project/jvm/JVM参数配置说明/"}},[t._v("JVM参数配置说明")])],1),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1654183539000.png",alt:"",loading:"lazy"}})]),t._v(" "),e("h3",{attrs:{id:"_1-1-1-堆上信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-堆上信息"}},[t._v("#")]),t._v(" 1.1.1 堆上信息")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1654188805000.png",alt:"",loading:"lazy"}})]),t._v(" "),e("p",[e("code",[t._v("new")]),t._v(" 出来的对象都在堆上。当堆的内存不足，会触发gc。"),e("RouterLink",{attrs:{to:"/"}},[t._v("GC策略")]),t._v("。")],1),t._v(" "),e("h3",{attrs:{id:"_1-1-2-堆的相关配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-堆的相关配置"}},[t._v("#")]),t._v(" 1.1.2 堆的相关配置")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("配置参数")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("说明")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("示例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-Xmx")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("设置最大堆大小。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-Xmx3550m")]),t._v("，设置JVM最大可用内存为3550 MB。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-Xms")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("设置JVM初始内存。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-Xms3550m")]),t._v("，设置JVM初始内存为3550 MB。此值建议与"),e("code",[t._v("-Xmx")]),t._v("相同，避免每次垃圾回收完成后JVM重新分配内存。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-Xmn2g")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("设置年轻代大小。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-Xmn2g")]),t._v("，设置年轻代大小为2 GB。整个JVM内存大小=年轻代大小+年老代大小+持久代大小。持久代一般固定大小为64 MB，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-XX:NewRatio=n")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("设置年轻代和年老代的比值。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-XX:NewRatio=4")]),t._v("，设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。如果设置为4，那么年轻代与年老代所占比值为1:4，年轻代占整个堆栈的1/5。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-XX:SurvivorRatio=n")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("年轻代中Eden区与两个Survivor区的比值。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-XX:SurvivorRatio=4")]),t._v("，设置年轻代中Eden区与Survivor区的大小比值。如果设置为4，那么两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-XX:MaxPermSize=n")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("设置持久代大小。(JDK8以移除)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-XX:MaxPermSize=16m")]),t._v("，设置持久代大小为16 MB。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-XX:MaxTenuringThreshold=n")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("设置垃圾最大年龄。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-XX:MaxTenuringThreshold=0")]),t._v("，设置垃圾最大年龄。如果设置为0，那么年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，提高了效率。如果将此值设置为较大值，那么年轻代对象会在Survivor区进行多次复制，增加了对象在年轻代的存活时间，增加在年轻代即被回收的概率。")])])])]),t._v(" "),e("h3",{attrs:{id:"_1-1-3-常见问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3-常见问题"}},[t._v("#")]),t._v(" 1.1.3 常见问题")]),t._v(" "),e("ul",[e("li",[t._v("大对象，无法释放，导致内存移除。\n"),e("strong",[t._v("堆上的问题是比较容易排查的,可以通过工具把堆的信息给dump下来,然后就能直接定位到大对象,并通过调用链路定位到具体的代码,后面会介绍工具")])])]),t._v(" "),e("h2",{attrs:{id:"_1-2-非堆空间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-非堆空间"}},[t._v("#")]),t._v(" 1.2 非堆空间")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1654188048000.png",alt:"",loading:"lazy"}})]),t._v(" "),e("h3",{attrs:{id:"_1-2-1-非堆上的信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-非堆上的信息"}},[t._v("#")]),t._v(" 1.2.1 非堆上的信息")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1654188805000.png",alt:"",loading:"lazy"}})]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Thread")]),t._v(" 配置线程的栈大小，决定了你调用链的深度。")]),t._v(" "),e("li",[e("code",[t._v("Metaspace")]),t._v(" 可加载类的信息大小")])]),t._v(" "),e("h3",{attrs:{id:"_1-2-2-相关配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-相关配置"}},[t._v("#")]),t._v(" 1.2.2 相关配置")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("配置参数")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("说明")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("示例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-Xss")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("设置线程的栈大小。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-Xss128k")]),t._v("，设置每个线程的栈大小为128 KB。"),e("strong",[t._v("说明")]),t._v(" JDK 5.0版本以后每个线程栈大小为1 MB，JDK 5.0以前版本每个线程栈大小为256 KB。请依据应用的线程所需内存大小进行调整。在相同物理内存下，减小该值可以生成更多的线程。但是操作系统对一个进程内的线程个数有一定的限制，无法无限生成，一般在3000个~5000个。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-XX:MaxMetaspace=n")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("设置元空间大小。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-XX:MaxMetaspace=16m")]),t._v("，设置元空间大小为16 MB。")])])])]),t._v(" "),e("h2",{attrs:{id:"二、工具介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、工具介绍"}},[t._v("#")]),t._v(" 二、工具介绍")]),t._v(" "),e("h2",{attrs:{id:"_2-1-原生命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-原生命令"}},[t._v("#")]),t._v(" 2.1 原生命令")]),t._v(" "),e("h2",{attrs:{id:"_2-2-二方可视化分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-二方可视化分析"}},[t._v("#")]),t._v(" 2.2 二方可视化分析")]),t._v(" "),e("h3",{attrs:{id:"_2-2-1-idea-插件visualgc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-idea-插件visualgc"}},[t._v("#")]),t._v(" 2.2.1 idea 插件VisualGC")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1654189397000.png",alt:"",loading:"lazy"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1654189362000.png",alt:"",loading:"lazy"}})]),t._v(" "),e("h3",{attrs:{id:"_2-2-2-jprofile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-jprofile"}},[t._v("#")]),t._v(" 2.2.2 JProfile")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.ej-technologies.com/products/jprofiler/overview.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JProfile"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1654189623000.png",alt:"",loading:"lazy"}})]),t._v(" "),e("h3",{attrs:{id:"_2-2-3-arthas"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-arthas"}},[t._v("#")]),t._v(" 2.2.3 Arthas")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://arthas.aliyun.com/zh-cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Arthas"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("strong",[t._v("Arthas功能是比较强大的,非常适合用于排查些疑难问题")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1654189757000.png",alt:"",loading:"lazy"}})]),t._v(" "),e("h2",{attrs:{id:"_2-3-gc日志学习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-gc日志学习"}},[t._v("#")]),t._v(" 2.3 GC日志学习")]),t._v(" "),e("ul",[e("li",[t._v("开启GC日志参数 "),e("code",[t._v("-XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCDateStamps")])])]),t._v(" "),e("h3",{attrs:{id:"_2-3-1-年轻代gc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-年轻代gc"}},[t._v("#")]),t._v(" 2.3.1 年轻代GC")]),t._v(" "),e("ul",[e("li",[t._v("首先是年轻代GC")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("2022-06-03T00:13:48.801-0800: \n0.369: \n[GC (Allocation Failure) \n[PSYoungGen: 7168K->1513K(8704K)] 7168K->4097K(49664K), 0.0183816 secs] \n[Times: user=0.02 sys=0.01, real=0.02 secs] \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("ul",[e("li",[e("code",[t._v("2022-06-03T00:13:48.801-0800")]),t._v(" -XX:+PrintGCDateStamps 打印日期")]),t._v(" "),e("li",[e("code",[t._v("0.369")]),t._v(" -XX:+PrintGCDateStamps JVM启动到当前日期的总时长的时间戳形式")]),t._v(" "),e("li",[e("code",[t._v("[GC (Allocation Failure)")]),t._v(" GC 原因(Allocation Failure) 分配失败\n"),e("ul",[e("li",[e("mark",[t._v("Allocation Failure")]),t._v(" 分配失败")]),t._v(" "),e("li",[e("mark",[t._v("Metadata GC Threshold")]),t._v(" 元空间不足")]),t._v(" "),e("li",[e("mark",[t._v("Last ditch collection")]),t._v(" 元空间GC后,仍然不足,即触发")])])]),t._v(" "),e("li",[e("code",[t._v("PSYoungGen")]),t._v(" 年轻代GC")]),t._v(" "),e("li",[e("code",[t._v("Times")]),t._v(" 耗时统计\n"),e("ul",[e("li",[e("code",[t._v("user")]),t._v(" 表示GC线程执行所使用的CPU总时间")]),t._v(" "),e("li",[e("code",[t._v("sys")]),t._v(" 进程在内核态消耗的CPU时间")]),t._v(" "),e("li",[e("code",[t._v("real")]),t._v(" 程序从开始到结束所用的时钟时间,这个时间接近 sys + user")])])])]),t._v(" "),e("p",[e("strong",[t._v("由于多核的原因,一般的GC事件中, real time是小于sys + user time的,因为一般是多个线程并发的去做GC,所以real time是要小于systuser time的")])]),t._v(" "),e("h3",{attrs:{id:"_2-3-2-老年代gc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-老年代gc"}},[t._v("#")]),t._v(" 2.3.2 老年代GC")]),t._v(" "),e("p",[t._v("老年代执行的是 Full GC，Full GC执行的时候，不止回收老年代，还会回收新生代和元数据空间")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("2022-06-03T00:22:27.829-0800:\n0.798: \n[Full GC (Allocation Failure) \n[PSYoungGen: 0K->0K(8704K)] \n[ParOldGen: 36024K->36006K(40960K)] 36024K->36006K(49664K), \n[Metaspace: 3078K->3078K(1056768K)], 0.2006976 secs] \n[Times: user=1.11 sys=0.01, real=0.21 secs] \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("ul",[e("li",[e("code",[t._v("2022-06-03T00:13:48.801-0800")]),t._v(" -XX:+PrintGCDateStamps 打印日期")]),t._v(" "),e("li",[e("code",[t._v("0.369")]),t._v(" -XX:+PrintGCDateStamps JVM启动到当前日期的总时长的时间戳形式")]),t._v(" "),e("li",[e("code",[t._v("[Full GC (Allocation Failure)")]),t._v(" GC 原因(Allocation Failure) 分配失败\n"),e("ul",[e("li",[e("mark",[t._v("Allocation Failure")]),t._v(" 分配失败")]),t._v(" "),e("li",[e("mark",[t._v("Metadata GC Threshold")]),t._v(" 元空间不足")]),t._v(" "),e("li",[e("mark",[t._v("Last ditch collection")]),t._v(" 元空间GC后,仍然不足,即触发")])])]),t._v(" "),e("li",[e("code",[t._v("PSYoungGen")]),t._v(" 年轻代GC")]),t._v(" "),e("li",[e("code",[t._v("ParOldGen")]),t._v(" 老年代GC")]),t._v(" "),e("li",[e("code",[t._v("Metaspace")]),t._v(" 元空间或者叫方法区GC")]),t._v(" "),e("li",[e("code",[t._v("Times")]),t._v(" 耗时统计\n"),e("ul",[e("li",[e("code",[t._v("user")]),t._v(" 表示GC线程执行所使用的CPU总时间")]),t._v(" "),e("li",[e("code",[t._v("sys")]),t._v(" 进程在内核态消耗的CPU时间")]),t._v(" "),e("li",[e("code",[t._v("real")]),t._v(" 程序从开始到结束所用的时钟时间,这个时间接近 sys + user")])])])]),t._v(" "),e("h2",{attrs:{id:"三、场景分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、场景分析"}},[t._v("#")]),t._v(" 三、场景分析")]),t._v(" "),e("h2",{attrs:{id:"_3-1-堆空间导致oom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-堆空间导致oom"}},[t._v("#")]),t._v(" 3.1 堆空间导致OOM")]),t._v(" "),e("h3",{attrs:{id:"_3-1-1-模拟堆栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-模拟堆栈"}},[t._v("#")]),t._v(" 3.1.1 模拟堆栈")]),t._v(" "),e("h3",{attrs:{id:"_3-1-2-现象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-现象"}},[t._v("#")]),t._v(" 3.1.2 现象")]),t._v(" "),e("ol",[e("li",[t._v("频繁进行fu gc")]),t._v(" "),e("li",[t._v("应用吞吐量下降")]),t._v(" "),e("li",[t._v("应用rt上升")]),t._v(" "),e("li",[t._v("方法调用报错"),e("strong",[t._v("OutOfMemoryError : Java heap space")])])]),t._v(" "),e("h3",{attrs:{id:"_3-1-3-解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-解决方案"}},[t._v("#")]),t._v(" 3.1.3 解决方案")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("jps")]),t._v(" 找到应用 "),e("code",[t._v("pid")])]),t._v(" "),e("li",[t._v("把堆信息dump下来 "),e("code",[t._v("jmap -dump:format=b,file=heap.hprof ${pid}")])]),t._v(" "),e("li",[t._v("打开JProfile 打开文件,直接看到大对象是哪个。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1654191631000.png",alt:"",loading:"lazy"}})]),t._v(" "),e("h2",{attrs:{id:"_3-2-cpu飙升"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-cpu飙升"}},[t._v("#")]),t._v(" 3.2 CPU飙升")]),t._v(" "),e("h3",{attrs:{id:"_3-2-1-解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-解决方案"}},[t._v("#")]),t._v(" 3.2.1 解决方案")]),t._v(" "),e("ol",[e("li",[t._v("找到那些线程在阻塞 "),e("code",[t._v("jstack $PID")])]),t._v(" "),e("li",[t._v("如下片段发现线程都是 "),e("code",[t._v("BLOCKED")]),t._v(" 状态, 调用点都在 "),e("code",[t._v("CPU.java:18")])])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('"Thread-497" #508 prio=5 os_prio=31 tid=0x00007f88f58a0000 nid=0x41903 waiting for monitor entry [0x0000000326ea5000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n\tat java.io.PrintStream.println(PrintStream.java:735)\n\t- waiting to lock <0x00000007bce02720> (a java.io.PrintStream)\n\tat learn.jvm.CPU.lambda$main$0(CPU.java:18)\n\tat learn.jvm.CPU$$Lambda$1/189568618.run(Unknown Source)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"Thread-496" #507 prio=5 os_prio=31 tid=0x00007f88f589f800 nid=0x41a03 waiting for monitor entry [0x0000000326da2000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n\tat java.io.PrintStream.println(PrintStream.java:735)\n\t- waiting to lock <0x00000007bce02720> (a java.io.PrintStream)\n\tat learn.jvm.CPU.lambda$main$0(CPU.java:18)\n\tat learn.jvm.CPU$$Lambda$1/189568618.run(Unknown Source)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"Thread-495" #506 prio=5 os_prio=31 tid=0x00007f8905034000 nid=0x41c03 waiting for monitor entry [0x0000000326c9f000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n\tat java.io.PrintStream.println(PrintStream.java:735)\n\t- waiting to lock <0x00000007bce02720> (a java.io.PrintStream)\n\tat learn.jvm.CPU.lambda$main$0(CPU.java:18)\n\tat learn.jvm.CPU$$Lambda$1/189568618.run(Unknown Source)\n\tat java.lang.Thread.run(Thread.java:748)\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br")])]),e("h2",{attrs:{id:"_3-3-非堆空间导致oom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-非堆空间导致oom"}},[t._v("#")]),t._v(" 3.3 非堆空间导致OOM")])])}),[],!1,null,null,null);a.default=r.exports}}]);