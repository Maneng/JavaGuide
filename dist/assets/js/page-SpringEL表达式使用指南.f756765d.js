(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{748:function(s,e,a){"use strict";a.r(e);var n=a(1),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"https://img.springlearn.cn/blog/learn_1610710891000.png",alt:"",loading:"lazy"}})]),s._v(" "),a("Djt"),s._v(" "),a("blockquote",[a("p",[s._v("好久没有发现这么好的文章了,今天逛头条发现了一篇好文章,在这里转载一下\n大家可以学习一下,文章原文地址见参考。希望支持原作者,在头条点一个关注。")])]),s._v(" "),a("h2",{attrs:{id:"一、概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、概述"}},[s._v("#")]),s._v(" 一、概述")]),s._v(" "),a("p",[s._v("Spring表达式语言全称为“Spring Expression Language”，缩写为“SpEL”。是一个支持查询，并在运行时操纵一个对象图功能、是一门强大的表达式语言。SpEL是单独模块，只依赖于core模块，可以被独立使用、运行。")]),s._v(" "),a("p",[a("strong",[s._v("参考文章")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://docs.spring.io/spring-integration/docs/5.3.0.RELEASE/reference/html/spel.html#spel",target:"_blank",rel:"noopener noreferrer"}},[s._v("SpringEpel"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.toutiao.com/i6911604368844292620/",target:"_blank",rel:"noopener noreferrer"}},[s._v("玩转SpEL"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"二、作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、作用"}},[s._v("#")]),s._v(" 二、作用")]),s._v(" "),a("h3",{attrs:{id:"_2-1-基本表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-基本表达式"}},[s._v("#")]),s._v(" 2.1 基本表达式")]),s._v(" "),a("p",[s._v("字面量表达式、关系，逻辑与算数运算表达式、字符串连接及截取表达式、三目运算、正则表达式、括号优先级表达式；")]),s._v(" "),a("h3",{attrs:{id:"_2-2-类相关表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-类相关表达式"}},[s._v("#")]),s._v(" 2.2 类相关表达式")]),s._v(" "),a("p",[s._v("类类型表达式、类实例化、instanceof表达式、变量定义及引用、赋值表达式、自定义函数、对象属性存取及安全导航表达式、对象方法调用、Bean引用；")]),s._v(" "),a("h3",{attrs:{id:"_2-3-集合相关表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-集合相关表达式"}},[s._v("#")]),s._v(" 2.3 集合相关表达式")]),s._v(" "),a("p",[s._v("内联List、内联数组、集合，字典访问、列表，字典，数组修改、集合投影、集合选择；不支持多维内联数组初始化；不支持内联字典定义；")]),s._v(" "),a("h3",{attrs:{id:"_2-4-其他表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-其他表达式"}},[s._v("#")]),s._v(" 2.4 其他表达式")]),s._v(" "),a("p",[s._v("模板表达式。")]),s._v(" "),a("h2",{attrs:{id:"三、主要类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、主要类"}},[s._v("#")]),s._v(" 三、主要类")]),s._v(" "),a("h3",{attrs:{id:"_3-1-expressionparser"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-expressionparser"}},[s._v("#")]),s._v(" 3.1 ExpressionParser")]),s._v(" "),a("p",[s._v("表达式解析器接口，包含了(Expression) parseExpression(String), (Expression) parseExpression(String, ParserContext)两个接口方法")]),s._v(" "),a("h3",{attrs:{id:"_3-2-parsercontext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-parsercontext"}},[s._v("#")]),s._v(" 3.2 ParserContext")]),s._v(" "),a("p",[s._v("解析器上下文接口，主要是对解析器Token的抽象类，包含3个方法：getExpressionPrefix,getExpressionSuffix和isTemplate，就是表示表达式从什么符号开始什么符号结束，是否是作为模板（包含字面量和表达式）解析。")]),s._v(" "),a("h3",{attrs:{id:"_3-3-expression"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-expression"}},[s._v("#")]),s._v(" 3.3 Expression")]),s._v(" "),a("p",[s._v("表达式的抽象，是经过解析后的字符串表达式的形式表示。通过expressionInstance.getValue方法，可以获取表示式的值。也可以通过调用getValue(EvaluationContext)，从评估（evaluation)上下文中获取表达式对于当前上下文的值")]),s._v(" "),a("h3",{attrs:{id:"_3-4-evaluationcontext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-evaluationcontext"}},[s._v("#")]),s._v(" 3.4 EvaluationContext")]),s._v(" "),a("p",[s._v("估值上下文接口，只有一个setter方法："),a("code",[s._v("setVariable(String, Object)")]),s._v("，通过调用该方法，可以为evaluation提供上下文变量")]),s._v(" "),a("h2",{attrs:{id:"四、案例运用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、案例运用"}},[s._v("#")]),s._v(" 四、案例运用")]),s._v(" "),a("h3",{attrs:{id:"_4-1-基础的hello"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-基础的hello"}},[s._v("#")]),s._v(" 4.1 基础的Hello")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Test\npublic void baseTest() {\n// 字符串表达式\n    String exp = "Hello , #{ #username }";\n    // 表达式解析器\n    ExpressionParser parser = new SpelExpressionParser();\n    // 表达式上下文\n    EvaluationContext context = new StandardEvaluationContext();\n    context.setVariable("username", "纹银三百两");\n    // 解析\n    Expression expression = parser.parseExpression(exp, new TemplateParserContext());\n    System.out.println(expression.getValue(context, String.class));\n  }\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("基础结果：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Hello , 纹银三百两\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_4-2-关系运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-关系运算符"}},[s._v("#")]),s._v(" 4.2 关系运算符")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//true\nboolean trueValue1 = parser.parseExpression(\"2 == 2\").getValue(Boolean.class);\n//false\nboolean falseValue1 = parser.parseExpression(\"2 < -5.0\").getValue(Boolean.class);\n//true\nboolean trueValue2 = parser.parseExpression(\"'black' < 'block'\").getValue(Boolean.class);\n//false，字符xyz是否为int类型\nboolean falseValue2 = parser.parseExpression(\"'xyz' instanceof T(int)\").getValue(Boolean.class);\n//true，正则是否匹配\nboolean trueValue3 =parser.parseExpression(\"'5.00' matches '^-?\\\\d+(\\\\.\\\\d{2})?$'\").getValue(Boolean.class);\n//false\nboolean falseValue3=parser.parseExpression(\"'5.0067' matches '^-?\\\\d+(\\\\.\\\\d{2})?$'\").getValue(Boolean.class);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"_4-3-逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-逻辑运算符"}},[s._v("#")]),s._v(" 4.3 逻辑运算符")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// -- AND 与运算 --\n//false \nboolean falseValue4 = parser.parseExpression("true and false").getValue(Boolean.class);\n // -- OR 或运算--\n//true\nboolean trueValue5 = parser.parseExpression("true or false").getValue(Boolean.class);\n//false\nboolean falseValue5 = parser.parseExpression("!true").getValue(Boolean.class);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"_4-4-算术运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-算术运算符"}},[s._v("#")]),s._v(" 4.4 算术运算符")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// Addition\nint two = parser.parseExpression("1 + 1").getValue(Integer.class); // 2\nString testString =\nparser.parseExpression("\'test\' + \' \' + \'string\'").getValue(String.class); // \'test string\'\n// Subtraction\nint four = parser.parseExpression("1 - -3").getValue(Integer.class); // 4\ndouble d = parser.parseExpression("1000.00 - 1e4").getValue(Double.class); // -9000\n// Multiplication\nint six = parser.parseExpression("-2 * -3").getValue(Integer.class); // 6\ndouble twentyFour = parser.parseExpression("2.0 * 3e0 * 4").getValue(Double.class); // 24.0\n// Division\nint minusTwo = parser.parseExpression("6 / -3").getValue(Integer.class); // -2\ndouble one = parser.parseExpression("8.0 / 4e0 / 2").getValue(Double.class); // 1.0\n// Modulus\nint three = parser.parseExpression("7 % 4").getValue(Integer.class); // 3\nint one = parser.parseExpression("8 / 5 % 2").getValue(Integer.class); // 1\n// Operator precedence\nint minusTwentyOne = parser.parseExpression("1+2-3*8").getValue(Integer.class); // -21\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h2",{attrs:{id:"五、组合使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、组合使用"}},[s._v("#")]),s._v(" 五、组合使用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Test\n  public void expressionTest() {\n    String exp = "1 between {1, 2} and 1>2";\n    ExpressionParser parser = new SpelExpressionParser();\n    Expression expression = parser.parseExpression(exp);\n    //false\n    System.out.println(expression.getValue(boolean.class));\n  }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"六、操作类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、操作类"}},[s._v("#")]),s._v(" 六、操作类")]),s._v(" "),a("h3",{attrs:{id:"_6-1-类类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-类类型"}},[s._v("#")]),s._v(" 6.1 类类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Test\npublic void classTypeTest() {\n    ExpressionParser parser = new SpelExpressionParser();\n    //java.lang包类访问\n    Class<String> result1 = parser.parseExpression("T(String)").getValue(Class.class);\n    //class java.lang.String\n    System.out.println(result1);\n\n    //其他包类访问\n    String expression2 = "T(spel.SpElTest)";\n    Class<SpElTest> value = parser.parseExpression(expression2).getValue(Class.class);\n    //true\n    System.out.println(value == SpElTest.class);\n\n    //类静态字段访问\n    int result3 = parser.parseExpression("T(Integer).MAX_VALUE").getValue(int.class);\n    //true\n    System.out.println(result3 == Integer.MAX_VALUE);\n\n    //类静态方法调用\n    int result4 = parser.parseExpression("T(Integer).parseInt(\'1\')").getValue(int.class);\n    //1\n    System.out.println(result4);\n  }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h3",{attrs:{id:"_6-2-自定义函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-自定义函数"}},[s._v("#")]),s._v(" 6.2 自定义函数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('/**\n   * 两数之和\n   */\npublic static Integer add(Integer x, Integer y) {\n    return x + y;\n  }\n\n@Test\npublic void functionTest() throws NoSuchMethodException {\n    // 表达式\n    String exp = "#{ #add(4,5)}";\n    // 表达式上下文\n    StandardEvaluationContext context = new StandardEvaluationContext();\n    Method add = SpElTest.class.getDeclaredMethod("add", Integer.class, Integer.class);\n    context.registerFunction("add", add);\n    // 表达式解析器\n    ExpressionParser parser = new SpelExpressionParser();\n    // 解析\n    Expression expression = parser.parseExpression(exp, new TemplateParserContext());\n    // 9\n    System.out.println(expression.getValue(context, Integer.class));\n  }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("h3",{attrs:{id:"_6-3-类属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-类属性"}},[s._v("#")]),s._v(" 6.3 类属性")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(' @Test\n  public void assignTest() {\n    String exp = "username: #{#user.username},age: #{#user.age}";\n    StandardEvaluationContext context = new StandardEvaluationContext();\n    Person person = new Person()\n        .setUsername("纹银三百两")\n        .setAge(23);\n    context.setVariable("user", person);\n    ExpressionParser parser = new SpelExpressionParser();\n    Expression expression = parser.parseExpression(exp, new TemplateParserContext());\n    //username: 纹银三百两,age: 23\n    System.out.println(expression.getValue(context, String.class));\n  }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"七、模板表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、模板表达式"}},[s._v("#")]),s._v(" 七、模板表达式")]),s._v(" "),a("p",[s._v("指定模板 "),a("code",[s._v("%{ }")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Test\npublic void templateTest() {\n    SpelExpressionParser parser = new SpelExpressionParser();\n    ParserContext context = new TemplateParserContext("%{", "}");\n    Expression expression = parser.parseExpression("你好:%{#name},正在学习:%{#lesson}，加油、奋斗！！！", context);\n    EvaluationContext evaluationContext = new StandardEvaluationContext();\n    evaluationContext.setVariable("name", "纹银三百两");\n    evaluationContext.setVariable("lesson", "spring高手系列。");\n    String value = expression.getValue(evaluationContext, String.class);\n    //你好:纹银三百两,正在学习:spring高手系列。加油、奋斗！！！\n    System.out.println(value);\n  }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h2",{attrs:{id:"八、规则引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、规则引擎"}},[s._v("#")]),s._v(" 八、规则引擎")]),s._v(" "),a("h3",{attrs:{id:"_8-1-背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-背景"}},[s._v("#")]),s._v(" 8.1 背景")]),s._v(" "),a("p",[s._v("假设人员注册信息(姓名、年龄、性别），自定义其中规则，如下：")]),s._v(" "),a("p",[s._v("李家好汉（李姓，男，且满18岁）\n豆蔻少女（13-15岁，女性）")]),s._v(" "),a("h3",{attrs:{id:"_8-2-实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-实现"}},[s._v("#")]),s._v(" 8.2 实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Test\n  public void ruleTest() {\n    Person person1 = new Person().setUsername("小龙女").setAge(14).setSex(1);\n    checkRule(FastJsonUtil.parseMap(JSON.toJSONString(person1)));\n    Person person2 = new Person().setUsername("张三").setAge(18).setSex(0);\n    checkRule(FastJsonUtil.parseMap(JSON.toJSONString(person2)));\n    Person person3 = new Person().setUsername("李四").setAge(20).setSex(0);\n    checkRule(FastJsonUtil.parseMap(JSON.toJSONString(person3)));\n\n  }\n\n  /**\n   * 规则check\n   *\n   * @param exp 参数map\n   */\n  private static void checkRule(Map<String, Object> exp) {\n    ExpressionParser parser = new SpelExpressionParser();\n    //规则容器\n    Map<String, String> ruleMap = Maps.newHashMap();\n    String rule1 = "( #username.contains({\'李\'}) and  #age > 18 and #sex == 0 )";\n    ruleMap.put("李家好汉", rule1);\n    String rule2 = "( #age between {13,15} and #sex == 1 )";\n    ruleMap.put("豆蔻少女", rule2);\n    EvaluationContext spElContext = getSpElContext(exp);\n    ruleMap.keySet().forEach(key -> {\n      String ruleV = ruleMap.get(key);\n      Boolean isPass = parser.parseExpression(ruleV).getValue(spElContext, Boolean.class);\n      if (Objects.nonNull(isPass) && isPass) {\n        System.out.println("username:【" + exp.get("username") + "】,命中规则:【" + key+"】");\n      }\n\n    });\n  }\n\n  /**\n   * 解析表达式需要的上下文，透传请求参数\n   *\n   * @param param 参数\n   * @return 返回结果\n   */\n  private static EvaluationContext getSpElContext(Map<String, Object> param) {\n    StandardEvaluationContext evaluationContext = new StandardEvaluationContext();\n    for (Entry<String, Object> entry : param.entrySet()) {\n      if (entry.getValue() != null) {\n        evaluationContext.setVariable(entry.getKey(), entry.getValue());\n      }\n    }\n    return evaluationContext;\n  }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br")])]),a("p",[a("strong",[s._v("结果：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("username:【小龙女】,命中规则:【豆蔻少女】\nusername:【李四】,命中规则:【李家好汉】\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"九、总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九、总结"}},[s._v("#")]),s._v(" 九、总结")]),s._v(" "),a("p",[s._v("Spring EL表达式，作为JAVA的内置语言，十分强大。主要可以用来做表达式解析，或者规则链路，且可以操作函数方法；从而达到一种动态的链路规则解析效果。")])],1)}),[],!1,null,null,null);e.default=t.exports}}]);